/**
 *
 * This override does the following:
 *
 *   - can add/remove record from hash
 */
Ext.define('sl.override.HashMapOverride', {
    override: 'Ext.util.HashMap',
    /**
     * Adds a group of records to the hash
     * @param {Ext.data.Model[]} records The Model instances to add to the hash
     * @param {String} valueField name of the key field
     * @param {String} displayField name of the value field
     */
    addRecords: function(records, valueField, displayField) {
        var hash = this;
        records = Ext.Array.from(records) || [];
        Ext.Array.forEach(records, function(rec, index, array) {
            var val = rec.get(valueField),
                txt = rec.get(displayField);
            if (!Ext.isEmpty(val) && !Ext.isEmpty(txt)) {
                hash.add(val, txt);
            }
        });
    },
    /**
     * Removes a group of records from the hash
     * @param {Ext.data.Model[]} records The Model instances to remove from the hash
     * @param {String} [valueField=Ext.data.Model#clientIdProperty] name of the key field
     */
    removeRecords: function(records, valueField) {
        var hash = this;
        records = Ext.Array.from(records) || [];
        Ext.Array.forEach(records, function(rec, index, array) {
            valueField = valueField || rec.clientIdProperty;
            hash.removeAtKey(rec.get(valueField));
        });
    },
    findKeysByValue: function(value) {
        var key,
            map = this.map,
            keys = [];
        for (key in map) {
            if (map.hasOwnProperty(key) && map[key] === value) {
                keys.push(key);
            }
        }
        return keys;
    }
});

/**
 *
 * This override does the following:
 *
 *   - when there are errors returned from AJAX requests to Cach√©, it will save them in developer console & alert user
 */
Ext.define('sl.override.AjaxOverride', {
    override: 'Ext.Ajax',
    uses: [
        'Ext.util.Format'
    ]
}, function() {
    var me = this,
        newUrl = Ext.isString(me.url) ? me.url : '../Ext.JsonRequest.cls',
        timeoutTime = 300000,
        // 5 minutes
        newTimeout = Math.max(Ext.isNumeric(me.timeout ? me.timeout : 0), timeoutTime),
        newExtraParams = Ext.apply({
            "AuthToken": Ext.Object.fromQueryString(location.search.substr(1)).AuthToken
        }, Ext.isFunction(me.getExtraParams) ? me.getExtraParams() : me.extraParams);
    // script now works for versions 4 & 5 of ExtJS
    if (Ext.isFunction(me.setExtraParams)) {
        me.setExtraParams(newExtraParams);
    } else {
        me.extraParams = newExtraParams;
    }
    if (Ext.isFunction(me.setUrl)) {
        me.setUrl(newUrl);
    } else {
        me.url = newUrl;
    }
    if (Ext.isFunction(me.setTimeout)) {
        me.setTimeout(newTimeout);
    } else {
        me.timeout = newTimeout;
    }
    me.on({
        scope: me,
        'beforerequest': function(conn, options, eOpts) {
            try {
                var origFn = options.callback || Ext.emptyFn;
                var newCallback = function(opts, success, response) {
                        try {
                            // Try calling original function
                            origFn.call((opts.scope || this), opts, success, response);
                        } // Exception occurred in the callback, catch it here
                        catch (err) {
                            var errHeader = 'Unexpected Error In Request Callback<br/>Contact the Help Desk<br/><br/>Error: ',
                                errMsg = errHeader + err.message,
                                shortErrMsg = errHeader + Ext.util.Format.ellipsis(err.message, 200, true),
                                origResponse = Ext.apply({}, response);
                            // Notify User of Exception
                            Ext.MessageBox.show({
                                title: 'Request Error',
                                msg: shortErrMsg,
                                width: 300,
                                buttons: Ext.Msg.OK,
                                multiline: false,
                                icon: Ext.MessageBox.ERROR
                            });
                            // Log the error with the original response text
                            console.error("Server Request Callback Exception", {
                                "Error Msg": errMsg,
                                "Error Obj": err,
                                "opts": opts,
                                "success": success,
                                "response": origResponse
                            });
                            // Set response to be something that would normally be expected in the callback, include the exception for possible error handling.
                            var rText = Ext.encode({
                                    "success": false,
                                    "error": {
                                        "Msg": shortErrMsg
                                    }
                                });
                            Ext.apply(response, {
                                "responseText": rText
                            });
                            // Call original callback with usable response so programmer's code can execute, detect the error and clean up the application.
                            origFn.call((opts.scope || this), opts, success, response);
                        }
                    };
                Ext.apply(options, {
                    "callback": newCallback.bind(options.scope || document)
                });
            } catch (err) {
                // Catch any exception the may have occurred when trying to modify the request's callback,
                // Send Warning to the console but let the request continue.
                console.warn("Ajax BeforeRequest Exception", {
                    "Exception": err,
                    "Conn": conn,
                    "Opts": options,
                    "eOpts": eOpts
                });
            }
            return true;
        },
        'requestexception': function(conn, response, options, eOpts) {
            var showedError = false,
                tempDontTestResponse = (options || {}).dontTestResponse,
                dontTestResponse = Ext.isDefined(tempDontTestResponse) ? tempDontTestResponse : false,
                result;
            response = Ext.isDefined(response) ? response : {};
            if (!dontTestResponse) {
                response = Ext.isDefined(response) ? response : {};
                if (Ext.isString(response.responseText)) {
                    result = Ext.JSON.decode(response.responseText);
                    if (!result.success) {
                        // Jeremy's made up error, indicates App.Security.session timeout
                        if (result.error.code === "JS101") {
                            Ext.Msg.alert("Server Request Falure", result.error.Msg, function() {
                                if (parent.locaton === window.location) {
                                    window.location = window.location;
                                } else {
                                    //noinspection SillyAssignmentJS
                                    parent.location = parent.location;
                                }
                            });
                            console.error("Server Request Falure", {
                                connection: conn,
                                response: response,
                                options: options,
                                result: result,
                                errorMsg: result.error.Msg
                            });
                            showedError = true;
                        }
                    }
                }
                // don't display/save error if purposefully aborted by ExtJS
                if (!showedError && !response.aborted) {
                    //Request timeout error response
                    if (Ext.isString(response.statusText)) {
                        Ext.Msg.alert("Server Request Failure/Timeout", response.statusText, function() {
                            Ext.get(document.body).unmask();
                        });
                        console.error("Server Request Failure/Timeout", {
                            response: response,
                            statusText: response.statusText,
                            connection: conn,
                            options: options
                        });
                    } else // Unknown Request error
                    {
                        console.error("Server Request Exception", {
                            response: response,
                            statusText: "Unknown",
                            connection: conn,
                            options: options
                        });
                    }
                }
            }
        }
    });
});

/**
 *
 * This override does the following:
 *
 *   - removes the `loading.gif` from a mask that contains a message.
 *
 *     In ExtJS 5, it shows all the time.
 *
 *     After this override, the loading.gif shows conditionally
 */
Ext.define('sl.override.ElementOverride', {
    override: 'Ext.dom.Element',
    requires: [
        'Ext.dom.Helper'
    ],
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.dom.Element#method-mask
     * @overrideVersion ExtJS 5.1.2.748
     */
    mask: function(msg, msgCls, /* private - passed by AbstractComponent.mask to avoid the need to interrogate the DOM to get the height*/
    elHeight) {
        /////////////////////////////////////////
        // CUSTOM CODE
        //  Constants defined in the Ext.dom.Element class.
        //  Needed to be added so that this override works correctly
        //
        var DOC = document,
            XMASKED = Ext.baseCSSPrefix + "masked",
            XMASKEDRELATIVE = Ext.baseCSSPrefix + "masked-relative",
            EXTELMASKMSG = Ext.baseCSSPrefix + "mask-msg",
            bodyRe = /^body/i;
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        var me = this,
            dom = me.dom,
            data = me.getData(),
            maskEl = data.maskEl,
            maskMsg;
        if (!(bodyRe.test(dom.tagName) && me.getStyle('position') === 'static')) {
            me.addCls(XMASKEDRELATIVE);
        }
        // We always needs to recreate the mask since the DOM element may have been re-created
        if (maskEl) {
            maskEl.destroy();
        }
        maskEl = Ext.DomHelper.append(dom, {
            role: 'presentation',
            cls: Ext.baseCSSPrefix + "mask " + Ext.baseCSSPrefix + "border-box",
            children: {
                role: 'presentation',
                cls: msgCls ? EXTELMASKMSG + " " + msgCls : EXTELMASKMSG,
                cn: {
                    tag: 'div',
                    role: 'presentation',
                    cls: Ext.baseCSSPrefix + 'mask-msg-inner',
                    cn: {
                        tag: 'div',
                        role: 'presentation',
                        /////////////////////////////////////////
                        // CUSTOM CODE
                        //  remove the loading.gif that, by default, shows on all masking when there's a message
                        //
                        cls: Ext.baseCSSPrefix + (msgCls && msgCls === 'x-mask-loading' ? '' : 'stewarts-') + 'mask-msg-text',
                        //
                        // END CUSTOM CODE
                        /////////////////////////////////////////
                        html: msg || ''
                    }
                }
            }
        }, true);
        maskMsg = Ext.get(maskEl.dom.firstChild);
        data.maskEl = maskEl;
        me.addCls(XMASKED);
        maskEl.setDisplayed(true);
        if (typeof msg === 'string') {
            maskMsg.setDisplayed(true);
            maskMsg.center(me);
        } else {
            maskMsg.setDisplayed(false);
        }
        // When masking the body, don't touch its tabbable state
        if (dom === DOC.body) {
            maskEl.addCls(Ext.baseCSSPrefix + 'mask-fixed');
        } else {
            me.saveTabbableState();
        }
        me.saveChildrenTabbableState();
        // ie will not expand full height automatically
        if (Ext.isIE9m && dom !== DOC.body && me.isStyle('height', 'auto')) {
            maskEl.setSize(undefined, elHeight || me.getHeight());
        }
        return maskEl;
    }
});

/**
 *
 * This override does the following:
 *
 *   - in debug mode, it tests the binding configuration
 */
Ext.define('sl.override.ComponentOverride', {
    override: 'Ext.Component',
    constructor: function(config) {
        sl.utils.fixBadBinding(config);
        this.callParent(arguments);
    }
});

/**
 *
 * This override does the following:
 *
 *   - fixes sum: when value is null, converts summed value to a String, ruining future summations
 */
Ext.define('sl.override.CollectionOverride', {
    override: 'Ext.util.Collection',
    _aggregators: {
        average: function(items, begin, end, property, root) {
            var n = end - begin;
            return n && this._aggregators.sum.call(this, items, begin, end, property, root) / n;
        },
        bounds: function(items, begin, end, property, root) {
            for (var value, max, min,
                i = begin; i < end; ++i) {
                value = items[i];
                value = (root ? value[root] : value)[property];
                // First pass max and min are undefined and since nothing is less than
                // or greater than undefined we always evaluate these "if" statements as
                // true to pick up the first value as both max and min.
                if (!(value < max)) {
                    // jshint ignore:line
                    max = value;
                }
                if (!(value > min)) {
                    // jshint ignore:line
                    min = value;
                }
            }
            return [
                min,
                max
            ];
        },
        count: function(items) {
            return items.length;
        },
        extremes: function(items, begin, end, property, root) {
            var most = null,
                least = null,
                i, item, max, min, value;
            for (i = begin; i < end; ++i) {
                item = items[i];
                value = (root ? item[root] : item)[property];
                // Same trick as "bounds"
                if (!(value < max)) {
                    // jshint ignore:line
                    max = value;
                    most = item;
                }
                if (!(value > min)) {
                    // jshint ignore:line
                    min = value;
                    least = item;
                }
            }
            return [
                least,
                most
            ];
        },
        max: function(items, begin, end, property, root) {
            var b = this._aggregators.bounds.call(this, items, begin, end, property, root);
            return b[1];
        },
        maxItem: function(items, begin, end, property, root) {
            var b = this._aggregators.extremes.call(this, items, begin, end, property, root);
            return b[1];
        },
        min: function(items, begin, end, property, root) {
            var b = this._aggregators.bounds.call(this, items, begin, end, property, root);
            return b[0];
        },
        minItem: function(items, begin, end, property, root) {
            var b = this._aggregators.extremes.call(this, items, begin, end, property, root);
            return b[0];
        },
        /**
         * @localdoc STEWARTS OVERRIDE
         * @overrideVersion ExtJS 5.1.2.748
         */
        sum: function(items, begin, end, property, root) {
            for (var value,
                sum = 0,
                i = begin; i < end; ++i) {
                value = items[i];
                value = (root ? value[root] : value)[property];
                /////////////////////////////////////////
                // CUSTOM CODE
                //  if the value is `null`, adding it to the sum turns `sum` into a String and ruins future additions
                //
                if (!Ext.isEmpty(value)) {
                    sum += value;
                }
            }
            //
            // END CUSTOM CODE
            /////////////////////////////////////////
            return sum;
        }
    }
});

/**
 * @class sl.utils.Toast
 * @singleton
 */
Ext.define('sl.utils.Toast', {
    uses: [
        'Ext.util.Format'
    ],
    singleton: true,
    /**
     * Shows toast popup notification for an action
     * @param {String} actionStr           Present-tense Verb for what happened to records, e.g. "save", "delete"
     * @param {Number} [actionCount]       Number of records that action was performed on successfully (saved/deleted/etc.)
     * @param {Number} [hideDelay=1000ms]  Time (in ms) to display message
     * @param {String} [addlMessage]       Any extra text to add to end of the toast
     * @param {String} [location='t']  Where the toast will appear (Can be `t`op or `b`ottom, 'tr', 'tl', 'br', 'bl')
     * @return {Boolean}                   `true` if toast was displayed
     **/
    showActionToast: function(actionStr, actionCount, hideDelay, addlMessage, location) {
        var me = this,
            toast = false,
            rows = '',
            message = '',
            title;
        hideDelay = hideDelay || 1000;
        addlMessage = addlMessage || '';
        if (!Ext.isEmpty(actionStr)) {
            title = Ext.util.Format.capitalize(actionStr) + ' Successful';
            if (!Ext.isEmpty(actionCount) && Number(actionCount) > 0) {
                rows = actionCount === 1 ? "record was" : "records were";
                message = actionCount + ' ' + rows + ' ';
            }
            message += actionStr + 'd.' + addlMessage;
            toast = me.showToast(title, message, hideDelay, location);
        }
        return toast;
    },
    /**
     * Shows toast popup notification
     * @param {String} [titleStr]      Toast window title
     * @param {String} [msgStr]        Message to show in the toast window
     * @param {Number} [hideDelay]     How long message should be shown (in ms)
     * @param {String} [location='t']  Where the toast will appear (Can be `t`op or `b`ottom, 'tr', 'tl', 'br', 'bl')
     * @param {String} [type='normal'] Type of Toast.  Can be "normal", "warning", "error"
     * @return current sl.utils.Toast instance
     **/
    showToast: function(titleStr, msgStr, hideDelay, location, type) {
        var me = this,
            prev = Ext.valueFrom(me.latestToast, false),
            prevConfig = prev ? prev.initialConfig : false;
        // defaults
        titleStr = Ext.valueFrom(titleStr, '');
        msgStr = Ext.valueFrom(msgStr, '');
        location = Ext.valueFrom(location, 'b');
        hideDelay = Ext.valueFrom(hideDelay, 3000);
        if (prev && prevConfig.title === titleStr && prevConfig.html === msgStr && prevConfig.align === location && prevConfig.componentCls === type && prev.isVisible()) {
            // don't show another toast, just extend `close` delay
            me.latestToast.closeTask.delay(hideDelay);
        } else {
            // create & show new toast
            me.latestToast = Ext.toast({
                html: msgStr,
                title: titleStr,
                align: location,
                autoCloseDelay: hideDelay,
                hideDuration: 100,
                slideBackDuration: 100,
                slideInDuration: 100,
                slideInAnimation: 'easeIn',
                slideBackAnimation: 'easeOut',
                width: 300,
                componentCls: type,
                shadow: true
            });
        }
        return me.latestToast;
    },
    /**
     * Shows a success toast popup notification
     * @param {String} [titleStr]      Toast window title
     * @param {String} [msgStr]        Message to show in the toast window
     * @param {Number} [hideDelay]     How long message should be shown (in ms)
     * @param {String} [location='b']  Where the toast will appear (Can be `t`op or `b`ottom)
     * @return current sl.utils.Toast instance
     **/
    showSuccessToast: function(titleStr, msgStr, hideDelay, location) {
        location = location || 't';
        return this.showToast(titleStr, msgStr, hideDelay, location, 'success-toast');
    },
    /**
     * Shows a warning toast popup notification
     * @param {String} [titleStr]      Toast window title
     * @param {String} [msgStr]        Message to show in the toast window
     * @param {Number} [hideDelay]     How long message should be shown (in ms)
     * @param {String} [location='b']  Where the toast will appear (Can be `t`op or `b`ottom)
     * @return current sl.utils.Toast instance
     **/
    showWarningToast: function(titleStr, msgStr, hideDelay, location) {
        location = location || 'b';
        return this.showToast(titleStr, msgStr, hideDelay, location, 'warning-toast');
    },
    /**
     * Shows a warning toast popup notification
     * @param {String} [titleStr]      Toast window title
     * @param {String} [msgStr]        Message to show in the toast window
     * @param {Number} [hideDelay]     How long message should be shown (in ms)
     * @param {String} [location='b']  Where the toast will appear (Can be `t`op or `b`ottom)
     * @return current sl.utils.Toast instance
     **/
    showErrorToast: function(titleStr, msgStr, hideDelay, location) {
        hideDelay = hideDelay || 7500;
        location = location || 'b';
        return this.showToast(titleStr, msgStr, hideDelay, location, 'error-toast');
    }
});

/**
 *
 * This override does the following:
 *
 *   - added many helper functions to get/set store details (including saving/deleting/validating)
 */
Ext.define('sl.override.StoreOverride', {
    override: 'Ext.data.AbstractStore',
    requires: [
        'Ext.util.Collection',
        'sl.utils.Toast'
    ],
    /**
     * @event beforerecordcreated
     * @preventable
     * Fired before a new record is created in {@link #createNewRecord}
     * @param {Ext.data.Store} store
     * @param {Object} defaultProperties.  Key-Value pairs to seed new record with predetermined data.
     * The `Key` must match {@link Ext.data.field.Field#cfg-name}.
     *
     * The `Value` will be the field's seeded value.
     */
    /**
     * @event recordcreated
     * Fired after a new record is created in {@link #createNewRecord}
     * Record has not been added to the store at this point.
     * @param {Ext.data.Store} store
     * @param {Ext.data.Model} newRec
     * @param {Object} defaultProperties New Record was seeded with this data
     */
    /**
     * @event recordvalidated
     * Fired after a record is validated in {@link #method-validateRecords}.
     * @param {Ext.data.Store} store
     * @param {Ext.data.Model} record
     */
    /**
     * @event recordsvalidated
     * Fired after all records are validated in {@link #method-validateRecords}.
     * @param {Ext.data.Store} store
     * @param {Ext.data.Model[]} records
     * @param {Ext.data.Model[]} invalidRecords
     */
    config: {
        autoSort: false,
        /**
         * @cfg {String} searchedText
         * Text that was queried for in Cach√©.  It is used to highlight matches in grid cells
         */
        searchedText: '',
        /**
         * @cfg {String} filteredText
         * Text that filtered store.  It is used to highlight matches in grid cells
         */
        filteredText: '',
        /**
         * @cfg {Array} filteredTextArray
         * Local filtering will do an exact match to each element in array.
         * If filtered word order matters, then exact phrase will be its own element.
         * Otherwise, each word will be its own array element.
         * It is used to highlight matches in grid cells.
         *
         * 'energizer "pk max"' will become ['energizer', 'pk max']
         * 'pk max' must be in the searched text in exactly that order with the space. (case will be ignored)
         * 'energizer' can be anywhere in the searched text. (spaces, punctuation, case will all be ignored)
         */
        filteredTextArray: ''
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @param {Ext.data.Model[]} [records] Defaults to all Records with {@link #getModifiedRecords outstanding changes}.
     * @overrideVersion ExtJS 5.1.2.748
     */
    commitChanges: function(records) {
        var me = this,
            /////////////////////////////////////////
            // CUSTOM CODE
            //  allows developer to specify which records get committed
            //
            // recs = me.getModifiedRecords(),
            recs = Ext.isArray(records) ? records : me.getModifiedRecords(),
            //
            // END CUSTOM CODE
            /////////////////////////////////////////
            len = recs.length,
            i = 0;
        Ext.suspendLayouts();
        me.beginUpdate();
        for (; i < len; i++) {
            recs[i].commit();
        }
        me.cleanRemoved();
        me.endUpdate();
        Ext.resumeLayouts(true);
    },
    /**
     * Sets a value in the proxy's underlying {@link Ext.data.proxy.Server#extraParams}.
     * @param {String} param The key for the new value
     * @param {Object} value The value
     */
    setExtraParam: function(param, value) {
        var me = this,
            proxy = (me.getSource ? me.getSource() : me).getProxy();
        if (proxy && Ext.isFunction(proxy.setExtraParam)) {
            if (Ext.isDate(value)) {
                value = value.toLocaleDateString();
            }
            return proxy.setExtraParam(param, value);
        } else {
            console.error('[' + me.$className + '] Proxy not configured correctly');
            return false;
        }
    },
    /**
     * Sets multiple values in the proxy's underlying {@link Ext.data.proxy.Server#extraParams}.
     * @param {Object} params key-value pairs
     * Example:
     *
     *     {
     *       corpID: 1,
     *       divID: 2,
     *       foo: 'bar'
     *     }
     */
    setExtraParams: function(params) {
        var me = this;
        Ext.Object.each(params, function(key, value) {
            me.setExtraParam(key, value);
        });
    },
    /**
     * @return {Object} Returns the value of {@link Ext.data.proxy.Server#extraParams}.
     */
    getExtraParams: function() {
        var me = this,
            proxy = (me.getSource ? me.getSource() : me).getProxy(),
            extraParams;
        if (!Ext.isDefined(proxy)) {
            console.error("[" + me.$className + "] No Proxy Defined", {
                "store": me
            });
            extraParams = {};
        } else if (!Ext.isFunction(proxy.getExtraParams)) {
            console.error("[" + me.$className + "] Proxy Does Not Have `getExtraParams` function", {
                "store": me,
                "proxy": proxy
            });
            extraParams = {};
        } else {
            extraParams = proxy.getExtraParams();
        }
        return extraParams;
    },
    /**
     * @param {String} param
     * @return {Object} Returns the value of specific {@link Ext.data.proxy.Server#extraParams}.
     */
    getExtraParam: function(param) {
        var me = this,
            val = me.getExtraParams()[param];
        return val;
    },
    /**
     * Returns the ID property.  Automatically converted 'id' to 'ID'
     * @param {Ext.data.Model} [record] This is the first option to find the `clientIdProperty`. If not included, uses
     *     model type attached to store
     * @return {String} Record's `clientIdProperty`
     */
    getIDProperty: function(record) {
        record = record || {};
        var store = this,
            idProp = record.clientIdProperty || (Ext.isDefined(store.model) ? store.model.prototype.clientIdProperty : undefined) || 'ID';
        // don't allow clientIdProperty to be lowercase 'id', which Architect will default it to
        if (idProp === 'id') {
            idProp = 'ID';
            sl.utils.consoleLogWithTrace("[" + store.$cacheName + "] Automatically updated `clientIdProperty` from \"id\" to \"ID\"", {
                store: store
            });
        }
        return idProp;
    },
    /**
     * Updates the model's ID property
     * @param {String} newIdProperty Store's new clientIdProperty
     * @param {Ext.data.Model[]} [recordArr] Can optionally include an array of records to update
     */
    updateModelIDProperty: function(newIdProperty, recordArr) {
        var store = this;
        if (store && store.model && store.model.prototype) {
            if (!store.model.prototype.fieldsMap || !Ext.isDefined(store.model.prototype.fieldsMap[newIdProperty])) {
                console.error('[' + store.$className + '] New ID Property is not a field in the store', {
                    newIdProperty: newIdProperty,
                    store: store,
                    model: store.model,
                    fields: store.model.prototype.fields
                });
                return false;
            }
            store.model.prototype.clientIdProperty = newIdProperty;
        }
        if (recordArr) {
            recordArr = Ext.Array.from(recordArr) || [];
            Ext.Array.forEach(recordArr, function(rec, index, array) {
                rec.clientIdProperty = newIdProperty;
            });
        }
    },
    /**
     * Returns a collection of all of the store's records.
     * If a store is filtered, it will get all records (if requested)
     * @param {Array} [records] Array of records to convert to a collection.  If `records` is not defined, will either
     *     return all records or only filtered (if requested)
     * @param {Boolean} [onlyReturnFiltered=false] If `true` then will return filtered group of records (if the store
     *     is filtered)
     * @return {Ext.util.MixedCollection} Collection of store records
     */
    getRecordCollection: function(records, onlyReturnFiltered) {
        onlyReturnFiltered = Ext.isDefined(onlyReturnFiltered) ? onlyReturnFiltered : false;
        var store = this,
            collection;
        records = Ext.Array.from(records) || [];
        if (records.length > 0) {
            collection = Ext.create('Ext.util.Collection');
            collection.add(records);
        } else {
            if (!onlyReturnFiltered && store.isFiltered()) {
                // gets all records (even the filtered ones)
                collection = store.getData().getSource();
            } else {
                collection = store.getData();
            }
            if (Ext.isEmpty(collection)) {
                collection = Ext.create('Ext.util.Collection');
            }
        }
        return collection;
    },
    /**
     * Gets {@link Ext.data.Model records}
     * @param {Boolean} [onlyReturnFiltered=false] If `True` then will return filtered group of records (if the store
     *     is currently filtered)
     * @return {Ext.data.Model[]} All of the store's Model instances
     */
    getRecords: function(onlyReturnFiltered) {
        onlyReturnFiltered = Ext.isDefined(onlyReturnFiltered) ? onlyReturnFiltered : false;
        var records,
            store = this;
        if (store.buffered) {
            records = store.data.getRange(0, this.getCount() - 1);
            if (onlyReturnFiltered) {
                sl.consoleWarn('[' + store.$className + '] Returning a filtered buffered store is not yet implemented.');
            }
        } else {
            records = store.getRecordCollection(undefined, onlyReturnFiltered).getRange();
        }
        return records;
    },
    /**
     * @private
     * Filter function for dirty (modified) records.
     */
    filterDirty: function(item) {
        return item.dirty;
    },
    /**
     * @private
     * Filter function for invalid records
     * @param {Ext.data.Model} item
     */
    filterInvalid: function(item) {
        return !item.isValid();
    },
    /**
     * @private
     * Filter function for valid records
     * @param {Ext.data.Model} item
     */
    filterValid: function(item) {
        return item.isValid();
    },
    /**
     * @private
     * Filter function for valid records.  Will validate record before testing it if is valid
     * @param {Ext.data.Model} item
     */
    filterForceValidation: function(item) {
        return item.isValid();
    },
    /**
     * Gets all {@link Ext.data.Model records} that have been modified, similar to {@link
     * sl.data.CacheStore#getModifiedRecords getModifiedRecords()} Major difference is, this does not care about the
     * validity of each record and it will not validate each record
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The dirty Model instances
     */
    getDirtyRecords: function(records) {
        return this.getRecordCollection(records).createFiltered(this.filterDirty).getRange();
    },
    /**
     * Gets all {@link Ext.data.Model records} that were previously marked as invalid
     * Records must have been {@link Ext.data.Model#validate validated} before this function was called
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The invalid Model instances
     */
    getInvalidRecords: function(records) {
        return this.getRecordCollection(records).createFiltered(this.filterInvalid).getRange();
    },
    /**
     * Gets all {@link Ext.data.Model records} that were **previously** marked as invalid
     * Records must have been {@link Ext.data.Model#validate validated} before this function was called
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @param {Boolean} [forceValidation=false] If `true`, will validate every record before determining if it is valid
     *     or not
     * @return {Ext.data.Model[]} The invalid Model instances
     */
    getValidRecords: function(records, forceValidation) {
        forceValidation = forceValidation || false;
        return this.getRecordCollection(records).createFiltered(forceValidation ? this.filterForceValidation : this.filterValid).getRange();
    },
    /**
     * Gets all {@link Ext.data.Model records} that were modified (and optionally, not-modified invalid records)
     * This function is commonly used after a save attempt is complete.  This will return all records that were unable
     * to be saved. Generally, this is because the record failed a validation or Cach√© could not save it
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @param {Boolean} [onlyIfModified=true] If false, function will also return invalid records that are not modified
     * @return {Ext.data.Model[]} The unsaved Model instances
     */
    getUnsavedRecords: function(records, onlyIfModified) {
        records = records || this.getRecords();
        onlyIfModified = Ext.isDefined(onlyIfModified) ? onlyIfModified : true;
        var unsavedRecs = this.getDirtyRecords(records);
        // include all invalid records, not just the modified ones
        if (!onlyIfModified) {
            unsavedRecs = Ext.Array.merge(unsavedRecs, this.getInvalidRecords(records));
        }
        return unsavedRecs;
    },
    /**
     * Gets all valid {@link Ext.data.Model records} added or updated since the last commit. Note that the order of
     * records returned is not deterministic and does not indicate the order in which records were modified. Note also
     * that removed records are not included (use {@link #getRemovedRecords} for that).
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The added and updated Model instances that are valid
     */
    getModifiedRecords: function(records) {
        return [].concat(this.getNewRecords(records), this.getUpdatedRecords(records));
    },
    /**
     * Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
     * yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The Model instances
     */
    getNewRecords: function(records) {
        // filterNew: record is phantom and is valid
        return this.getRecordCollection(records).createFiltered(this.filterNew).getRange();
    },
    /**
     * Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
     * yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)
     *
     * *** MAJOR DIFFERENCE BETWEEN `getNewRecords` & `getNewOnlyRecords`: This does not care about record's validity
     * ***
     *
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The Model instances
     */
    getNewOnlyRecords: function(records) {
        return this.getRecordCollection(records).createFiltered(this.filterNewOnly).getRange();
    },
    /**
     * Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The updated Model instances
     */
    getUpdatedRecords: function(records) {
        return this.getRecordCollection(records).createFiltered(this.filterUpdated).getRange();
    },
    /**
     * Returns all dirty or new (phantom) records
     * Does not care about record validity
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The reject Model instances
     */
    getRejectRecords: function(records) {
        return this.getRecordCollection(records).createFiltered(this.filterRejects).getRange();
    },
    /**
     * Returns any records that have been removed from the store but not yet destroyed on the proxy.
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The removed Model instances
     */
    getRemovedRecords: function(records) {
        var removedRecs = this.callParent(arguments);
        return (Ext.isArray(records) ? Ext.Array.intersect(records, removedRecs) : removedRecs);
    },
    /**
     * Returns any new (phantom) records that have been removed from the store during the previous delete session
     * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and will return the
     *     subset of records that fit the function's conditions
     * @return {Ext.data.Model[]} The removed, phantom Model instances
     */
    getPhantomRemovedRecords: function(records) {
        var newRemovedRecs = this.removedphantom;
        return (Ext.isArray(records) ? Ext.Array.intersect(records, newRemovedRecs) : newRemovedRecs);
    },
    /**
     * Creates a new record using the model's {@link Ext.data.Model#method-createNewRecord}
     * @param {Object} [defaultProperties={}] Object containing all default property values for a new record, such as a
     *     required hidden id
     * @param {Object} [eOpts] An object containing function configuration options
     *
     * This may contain any of the following properties:
     * @param {Boolean} [eOpts.includeID] If `true`, new record can have a defined ID-property value.
     * New ID is either provided from eOpts.idValue or `defaultProperties`'s clientIdProperty; defaults to false
     * @param {Number/String} [eOpts.idValue] Value to set the new record's id property to; defaults to ''
     * @param {String} [eOpts.modelName] Name of the {@link Ext.data.Model Model} associated with this store.
     * Should match the string value of the store's model config (e.g. Ext.define('Some.NewStore',
     *     {model:'My.NewModel'}) )
     *
     * @return {Ext.data.Model} The model instance that was created (it has not been added to the store)
     */
    createNewRecord: function(defaultProperties, eOpts) {
        defaultProperties = defaultProperties || {};
        eOpts = eOpts || {};
        var store = this,
            newRec;
        if (store.fireEvent('beforerecordcreated', store, defaultProperties, eOpts) !== false) {
            newRec = store.model.prototype.createNewRecord.apply(store.model, [
                defaultProperties,
                eOpts
            ]);
            if (newRec) {
                store.fireEvent('recordcreated', store, newRec, defaultProperties);
            }
        }
        return newRec;
    },
    /**
     * Tests if the record is allowed to be added to the store
     * @param {Ext.data.Model} record The record to be tested
     * @param {Object} [eOpts] An object containing function configuration options
     * This may contain any of the following properties:
     * @param {Number} [eOpts.duplicateHandlerType='Allow'] Type of duplicates that are allowed to be added.  If the
     *     record is a duplicate, the test is done at {@link #canDuplicateRecordBeAdded}
     * @return {Boolean} `true` if record is allowed to be added
     */
    canRecordBeAdded: function(record, eOpts) {
        eOpts = eOpts || {};
        var store = this,
            isAddAllowed = true,
            duplIdx = -1,
            hasDuplicate = false,
            duplicateHandlerType = eOpts.duplicateHandlerType || 'Allow',
            testForDuplicate = (duplicateHandlerType !== 'Allow') || false;
        if (testForDuplicate) {
            duplIdx = store.getDuplicateRecordIndex(record);
            hasDuplicate = (duplIdx >= 0);
            if (hasDuplicate) {
                isAddAllowed = store.canDuplicateRecordBeAdded(duplicateHandlerType);
                if (!isAddAllowed) {
                    record = store.getAt(duplIdx);
                }
            }
        }
        return isAddAllowed;
    },
    /**
     * @param {"Allow"/"Notify"/"Block"} [duplicateHandlerType="Allow"]
     * What to do with a new record that is a duplicate of an existing record in grid:
     *
     * - ** "Allow" ** - Default, No testing for existing record; New record is always created
     * - ** "Notify" ** - Tell user that duplicate record will not be added to grid
     * - ** "Block" ** - Duplicate record will not be added to grid, no message to user
     * @return {Boolean} True if the duplicates are allowed to be added to the store
     */
    canDuplicateRecordBeAdded: function(duplicateHandlerType) {
        var allowDuplicate = true;
        duplicateHandlerType = Ext.isDefined(duplicateHandlerType) ? duplicateHandlerType : 'Allow';
        switch (duplicateHandlerType) {
            case 'Notify':
                sl.utils.Toast.showToast("Error", "Record already exists", 2500);
                allowDuplicate = false;
                break;
            case 'Block':
                allowDuplicate = false;
                break;
            /*
 **** DOESN'T WORK; TIMING IS OFF; RETURNS THE allowDuplicates VALUE BEFORE YES/NO PICKED.  NEED TO USE EVENTS?
 case 'Ask':
 Ext.Msg.show({
 title: 'Record already exists',
 msg: '<br>Do you still want to add this record?',
 buttons: Ext.Msg.YESNO,
 icon: Ext.MessageBox.QUESTION,
 fn: function(btn) {
 if(btn === 'yes') {
 allowDuplicate = true;
 } else allowDuplicate = false;
 }
 });
 break;
 ****
 ****
 */
            case 'Allow':
                allowDuplicate = true;
                break;
        }
        return allowDuplicate;
    },
    /**
     * returns the index of a record that matches every field value (Does not compare clientIdProperty) of the
     * passed-in record
     * @param {Ext.data.Model} record The record to find the duplicate of
     * @param {Object} [eOpts] Unused currently
     * @return {Number} The matched index or -1
     */
    getDuplicateRecordIndex: function(record, eOpts) {
        eOpts = eOpts || {};
        var store = this,
            duplicateIndex = store.findBy(function(aRec, id) {
                var isMatching;
                if (record.getId() === id) {
                    return false;
                }
                // loop through all fields in a record (except for the `clientIdProperty`)
                for (var i = 0; i < store.model.prototype.fields.items.length; i++) {
                    if (isMatching !== false) {
                        var prop = store.model.prototype.fields.items[i],
                            pName = prop.name;
                        if (store.getIDProperty() !== pName) {
                            isMatching = aRec.get(pName) === record.get(pName);
                        }
                    } else {
                        return false;
                    }
                }
                return isMatching;
            });
        return duplicateIndex;
    },
    /**
     * Builds an array of ID values from the passed-in records
     * The ID field is based on the following: eOpts, model, store, or (if nothing is defined) 'ID'
     * @param {Ext.data.Model[]} records Records to get the ID values from
     * @param {Object} [eOpts]
     * @return {Array} Array of ID values
     * @private
     */
    getRecordIDs: function(records, eOpts) {
        var store = this,
            idArr = [],
            idField;
        eOpts = eOpts || {};
        Ext.Array.forEach(records, function(rec, index, array) {
            idField = eOpts.idField || store.getIDProperty(rec);
            idArr.push(rec.get(idField));
        });
        return idArr;
    },
    getSum: function(records, field) {
        var total = 0,
            i = 0,
            len = records.length;
        for (; i < len; ++i) {
            total += records[i].get(field);
        }
        return total === 0 ? '' : total;
    },
    abortPreviousRequests: function() {
        var store = this,
            requests = Ext.Ajax.requests;
        if (store.loading && Ext.isObject(store.lastOptions)) {
            Ext.Object.each(requests, function(reqID, req, myself) {
                var rOptions = req.options || {},
                    rParams = rOptions.params || {};
                // verify that the request originates from the same store
                if (rParams.CacheClassName === store.getExtraParam('CacheClassName') && (rParams.CacheQueryName === store.getExtraParam('CacheQueryName') || rParams.CacheMethodName === store.getExtraParam('CacheMethodName'))) {
                    Ext.Ajax.abort(req);
                }
            });
        }
    },
    /**
     * @private
     * Validates all records when Store has been loaded
     */
    validateOnStoreLoad: function(store, eOpts) {
        store.validateRecords();
    },
    /**
     * @private
     * Validates when a Model instance has been edited
     */
    validateOnRecordChange: function(store, record, operation, modifiedFieldName, eOpts) {
        if (operation === Ext.data.Model.EDIT) {
            store.validateRecords([
                record
            ]);
        }
    },
    /**
     * @private
     * Validates when a Model instance has been added to this Store
     */
    validateOnRecordAdded: function(store, records, index, eOpts) {
        store.validateRecords(records);
    },
    /**
     * Validates records
     * @param {Ext.data.Model[]} [records=store.getRecords()] Array of records to validate
     * @return {Ext.data.Model[]} Array of invalid records (subset of the `records` param)
     */
    validateRecords: function(records) {
        var store = this,
            invalidRecords = [];
        records = Ext.Array.from((!Ext.isEmpty(records) ? records : store.getRecords()));
        Ext.Array.forEach(records, function(record, index, array) {
            // validates record & tests if it is valid
            if (!record.isValid()) {
                invalidRecords.push(record);
            }
            store.fireEvent('recordvalidated', store, record);
        });
        store.fireEvent('recordsvalidated', store, records, invalidRecords);
        return invalidRecords;
    },
    /**
     * Returns the first record where field's value matches specification
     * @param {String} val Desired value
     * @param {String} [field="{id property}"] Name of field that search
     * @param {Ext.data.Model[]} [records="{all records}"] Records to search; Defaults to All records
     * @return {Ext.data.Model} First record that matches search criteria
     */
    findByValue: function(val, field, records) {
        var me = this,
            firstMatchingRec;
        // defaults
        field = (!Ext.isEmpty(field) ? field : me.getIDProperty());
        records = me.getRecordCollection(records);
        firstMatchingRec = records.findBy(function(rec) {
            if (sl.utils.areValuesEquivalent(rec.get(field), val)) {
                return rec;
            }
        });
        return Ext.isEmpty(firstMatchingRec) ? undefined : firstMatchingRec;
    },
    /**
     * Returns array of records that have the same ID values as the passed in records.
     * This is especially useful for after a store loads.  The records that were previously selected will not match
     * the store's records that were just loaded, even though the data will be the same.
     * So in order to select the records that were selected before the load, you need to do something like
     * {@link Ext.grid.Panel#method-refreshGridData}.
     *
     * @param {Ext.data.Model[]} [prevRecs] The records to find
     * @param {String} [idProp=model.prototype.clientIdProperty]
     * @return {Ext.data.Model[]} Records that match IDs with the original `prevRecs`
     */
    findNewInstanceOfRecords: function(prevRecs, idProp) {
        var me = this,
            records = me.getRecords(),
            matchingRecs = [],
            prevRec, prevVal, rec, recVal;
        idProp = idProp || me.model.prototype.clientIdProperty;
        prevRecs = Ext.Array.from(prevRecs);
        for (var i = 0; i < prevRecs.length; i++) {
            prevRec = prevRecs[i];
            if (!Ext.isFunction(prevRec.get)) {
                
                continue;
            }
            prevVal = prevRec.get(idProp);
            for (var j = 0; j < records.length; j++) {
                rec = records[j];
                if (!Ext.isFunction(rec.get)) {
                    
                    continue;
                }
                recVal = rec.get(idProp);
                if (prevVal === recVal) {
                    matchingRecs.push(rec);
                    break;
                }
            }
        }
        return matchingRecs;
    },
    getFieldsToSearch: function() {
        var store = this;
        return store.getExtraParam('fields');
    },
    /**
     * @localdoc Update how prevalent the desired values are in store's records.
     * Store can then be sorted based on this ranking
     *
     * *** NOTE: For a record to be ranked, at least 1 field must contain all pieces of the `txtToFindArr` array.
     * If it does not have hits, it will be at the bottom of the list ***
     *
     * When searching for a specific set of terms, the most valuable record has these search terms in a prominent
     *     position.
     *
     * Records are ranked on the following criteria:
     *
     *   - First field index that matches the beginning of a word ("***NEW*** york" is a more likely result than "a
     *     ***NEW*** val")
     *   - How many matches are there across all fields?
     *   - Best match index in any field  ("***NE***w York" is a more likely result than "Mai***NE***")
     *   - Lowest field index with a match (2nd field is a stronger match than 5th)
     *   - Average location in chars of any matches
     *   - Shortest field length that matches everything ("***SNICKERS*** mini" beats "***SNICKERS*** bite size")
     *
     * @param {String/String[]} txtToFindArr
     *   If the order of the strings does matters, then define as array before passing it in
     *   It will search for exact matches on each array element.
     *
     *   Finding Guidelines:
     *
     *   - Exact phrases, order matters => ["new york", "west virginia"] or ["new york"] (case ignored)
     *   - Order does not matter => "new york west virginia" (order, case, and punctuation ignored)
     *   - Mixed: Order matches for some, but not others => ["new york", "west", "viginia"] ("new york" is an exact
     *     match)
     * @param {Ext.data.field.Field[]} [fieldsToScoreArr]
     *   If set, these are the only Fields to rank
     * @param {String[][]} [txtToSearchArr]
     *   If set and `fieldsToScoreArr` is not, these are the only values to rank
     *
     * *** Order is significant, most important first***
     *
     * @param {Ext.data.Model[]} [records=store.getRecords()] The records to rank
     * @return {Boolean} `true` if found a match in at least 1 record
     */
    setSortRanking: function(txtToFindArr, fieldsToScoreArr, txtToSearchArr, records) {
        var store = this,
            foundMatch = false;
        records = Ext.Array.from((!Ext.isEmpty(records) ? records : store.getRecords()));
        if (!Ext.isArray(txtToSearchArr)) {
            fieldsToScoreArr = Ext.Array.from(fieldsToScoreArr || store.getFieldsToSearch()) || [];
        }
        Ext.Array.forEach(records, function(record, index, array) {
            var bestMatchObj = record.setSortRanking(txtToFindArr, fieldsToScoreArr, txtToSearchArr[index]),
                recordHadMatch = !Ext.Object.isEmpty(bestMatchObj);
            foundMatch = foundMatch || recordHadMatch;
        });
        // either will stay true, or will set as true
        return foundMatch;
    },
    /**
     * Sorts records based on their ranking.
     * Ranking must be done before calling this function.
     * Any existing store sorters will have priorty over the ranking.
     *
     * Sort Order:
     *
     * - Lowest field index that matches the beginning of a word
     *
     *      "***NEW*** york" is a more likely result than "a ***NEW*** val"
     *
     * - Highest total match count across all fields
     *
     * - Lowest match index in any field
     *
     *      "***NE***w York" is a more likely result than "Mai***NE***"
     *
     * - Lowest field index with a match
     *
     * - Average location in chars of any matches
     *
     *   **2nd field is a stronger match than 5th**
     *
     * - Shortest field length that matches everything
     *
     *      "***SNICKERS*** mini" beats "***SNICKERS*** bite size"
     */
    sortRankedRecords: function() {
        var store = this,
            rankedSorters = store.configureRankingSorters(),
            sortersToApply;
        sortersToApply = Ext.Array.merge([], rankedSorters);
        // add ranking sorters to any existing sorters. Ranking sorters will have lower priority
        store.sort(sortersToApply, 'append');
    },
    /**
     * Defines how a record will be sorted if the store is being ranked
     * @return {Object[]} sorters configuration
     */
    configureRankingSorters: function() {
        return [
            {
                // Lowest field index that matches the beginning of a word
                // ("`NEW` york" is a more likely result than "a `NEW` val")
                // represeneted as <<wordIndex>>.<<fieldIndex>>
                property: '_sort_best_word_match_location',
                direction: 'ASC',
                _isRankingSorter: true
            },
            {
                // Highest total match count across all fields (field must have all pieces to be considered)
                property: '_sort_match_count',
                direction: 'DESC',
                _isRankingSorter: true
            },
            {
                // Lowest match index in any field
                // ("`NE`w York" is a more likely result than "Mai`NE`")
                property: '_sort_character_index',
                direction: 'ASC',
                _isRankingSorter: true
            },
            {
                // Lowest field index with a match
                // (2nd field is a stronger match than 5th)
                property: '_sort_col_index',
                direction: 'ASC',
                _isRankingSorter: true
            },
            {
                // Average location in chars of any matches
                property: '_sort_average_match_location',
                direction: 'ASC',
                _isRankingSorter: true
            },
            {
                // Shortest field length that matches everything
                // ("`SNICKERS` mini" beats "`SNICKERS` bite size")
                property: '_sort_best_word_match_total_length',
                direction: 'ASC',
                _isRankingSorter: true
            }
        ];
    },
    /**
     * Gets an array of active {@link Ext.util.Sorter sorters} that are
     * {@link #method-configureRankingSorters designed for ranking records},
     * where `_isRankingSorter` is `true` on the sorter.
     * @return {Object[]} ranking sorters
     */
    getRankingSorters: function() {
        var store = this,
            sorters = Ext.Array.from((store.getSorters() || {}).items),
            rankingSorters = [];
        Ext.Array.forEach(sorters, function(sorter, index, array) {
            if (sorter._isRankingSorter) {
                rankingSorters.push(sorter);
            }
        });
        return rankingSorters;
    },
    /**
     * clears active sorters from store
     */
    removeSorters: function() {
        var me = this,
            sorters = me.getSorters();
        if (sorters.getCount()) {
            sorters.removeAll();
            me.fireEvent('refresh', me);
        }
    },
    // updates grid column headers that were previously marked as sorted
    updateFilteredText: function(newVal, oldVal) {
        // will do an exact match to each element in array; order of elements does not matter
        this.setFilteredTextArray(sl.utils.splitStringOnWordsAndQuotes(newVal));
    }
});

/**
 *
 * This override does the following:
 *
 *   - added additional methods available to all validators
 */
Ext.define('sl.data.ValidatorOverride', {
    override: 'Ext.data.validator.Validator',
    /**
     * Finds the field that validator is attached to
     * @param  {Ext.data.Model} record
     * @return {Ext.form.field.Base}
     */
    findField: function(record) {
        var me = this;
        return record.getFields().find(function(fld) {
            return fld._validators.find(function(v) {
                return v === me;
            });
        });
    },
    getAdditionalFieldValues: function(record) {
        var me = this,
            addlFields = Ext.Array.from(me.getAdditionalFields());
        return addlFields.map(function(fieldName) {
            return record.get(fieldName);
        });
    }
});

/**
 *
 * This override does the following:
 *
 *   - sets `allowNull` to true on Number and Integer fields
 */
Ext.define('sl.override.IntegerFieldOverride', {
    override: 'Ext.data.field.Integer',
    allowNull: true
});

/**
 *
 * This override does the following:
 *
 *   - fixes validators/validations typo in Architect
 *
 *   - added functions especially useful for custom Cach√© store saving/deleting functions
 *
 *   - sort ranking helper methods for Cach√© store
 */
Ext.define('sl.override.ModelOverride', {
    override: 'Ext.data.Model',
    requires: [
        'Ext.util.Format'
    ],
    /**
     * @cfg {String} [clientIdProperty='ID']
     * @inheritdoc
     */
    clientIdProperty: 'ID',
    /**
     * @cfg {String} [idProperty='_unique_internal_model_id']
     * @inheritdoc
     */
    idProperty: '_unique_internal_model_id',
    /**
     * @cfg {String} filterType
     * Type of column filter to use in a grid
     */
    /**
     * @property {Ext.util.Collection} saveSessions
     * @private
     * `Collection` that holds information about each attempt at a save to Cach√© during current user session.
     * Contains the following properties:
     *
     *  - `id`
     *  - `result`, which can be one of the following values:
     *
     *      - `true` indicates that it successfully saved.
     *      - `false` indicates that it failed to save either because of Cach√© or ExtJS validations.
     *      - A `String` message will be the error message that Cach√© or ExtJS returned.
     */
    config: {
        txtToSearch: '',
        txtToSearchWords: [],
        txtToSearch_upper: '',
        txtToSearch_stripped: '',
        txtToSearch_stripped_nospaces: '',
        txtToFind: '',
        // txtToFindWords: [],
        txtToFind_upper: '',
        txtToFind_stripped: '',
        txtToFind_stripped_nospaces: '',
        txtToFind_regex: ''
    },
    applyTxtToSearch: function(newVal) {
        return String(Ext.isDefined(newVal) ? newVal : '');
    },
    updateTxtToSearch: function(newVal, oldVal) {
        var me = this;
        me.setTxtToSearch_upper(newVal.toUpperCase());
        me.setTxtToSearch_stripped(sl.utils.stripNonAlphanumericChars(me.getTxtToSearch_upper()));
        me.setTxtToSearchWords(Ext.String.splitWords(me.getTxtToSearch_stripped()));
        me.setTxtToSearch_stripped_nospaces(sl.utils.stripNonAlphanumericChars(me.getTxtToSearch_stripped(), true));
    },
    updateTxtToFind: function(newVal, oldVal) {
        var me = this;
        me.setTxtToFind_upper(newVal.toUpperCase());
        me.setTxtToFind_stripped(sl.utils.stripNonAlphanumericChars(me.getTxtToFind_upper()));
        me.setTxtToFind_stripped_nospaces(sl.utils.stripNonAlphanumericChars(me.getTxtToFind_stripped()));
        // me.setTxtToFindWords(Ext.String.splitWords(me.getTxtToFind_stripped()));
        me.setTxtToFind_regex(sl.utils.convertToIgnoreNonAlphanumericInRegEx(me.getTxtToFind_stripped_nospaces()));
    },
    constructor: function(data, session) {
        var me = this,
            fields = me.fields;
        fields = Ext.Array.from(fields) || [];
        // bug fix: Architect has a typo
        Ext.Array.forEach(fields, function(field, index, array) {
            if (field.validations && Ext.isEmpty(field.validators)) {
                field.validators = field.validations;
            }
        });
        // warn developer if `idProperty` was altered.  Changing from the default value causes issues because everything else is setup to use
        // `clientIdProperty` as the link to the database. `idProperty` is mostly used by ExtJS to manage records
        if (me.getIdProperty() !== Ext.data.Model.prototype.idProperty) {
            // typically returns window.{AppName}.{model}.{ModelName}
            // Needs this reference so that each rec creation doesn't throw the same error; only the first instance does.
            // Using `this._showedIdPropertyWarning` would be bound to a single record, not record's definition.
            var modelConfig = me.$className.split('.').reduce(function(prev, curr) {
                    return (prev[curr] ? prev[curr] : prev);
                }, window);
            if (!modelConfig._showedIdPropertyWarning) {
                sl.consoleWarn('[' + me.$className + '] `idProperty` changed to `' + me.getIdProperty() + '`.\nPlease make sure this intentional.\nTypically only `clientIdProperty` is set to Cach√©\'s id field and `idProperty` is left as default.');
                modelConfig._showedIdPropertyWarning = true;
            }
        }
        me.callParent(arguments);
    },
    /**
     * Returns `true` if the record has been committed and an AJAX request has been made to save it but it has not returned yet
     * @return {Boolean} `true` if record is saving
     */
    isSaving: function() {
        return !this.dirty && !sl.utils.IsObjEmpty(this.getBeforeCommitProperties());
    },
    /**
     * Returns `true` if the record has been saved & not in the process of being saved currently ({@link #method-isSaving} would return `false`)
     * @return {Boolean} `true` if record is saved
     */
    isSaved: function() {
        return !this.dirty && sl.utils.IsObjEmpty(this.getBeforeCommitProperties()) && this.getCurrentSaveSessionID();
    },
    /**
     * Returns `true` if the record was saved during a particular save session
     * @return {Boolean} `true` if record was in a save session (does not care about if it was successful or not)
     */
    isInSaveSession: function(saveSessionID) {
        var rec = this,
            inSaveSession = false;
        if (Ext.isFunction((rec.saveSessions || {}).get)) {
            inSaveSession = !Ext.isEmpty(rec.saveSessions.get(saveSessionID));
        }
        return inSaveSession;
    },
    /**
     * Returns `true` if the record was successfully saved during a particular save session
     * @return {Boolean} `true` if record was saved in a save session
     */
    hadSuccessfulSave: function(saveSessionID) {
        return this.getSaveSessionResult(saveSessionID) === true;
    },
    /**
     * Returns `true` if the record did not successfully save during a particular save session.
     * It may have failed due to Cach√© or ExtJS validations
     * @return {Boolean} `true` if record failed to save during a save session
     */
    hadSaveFailure: function(saveSessionID) {
        var result = this.getSaveSessionResult(saveSessionID);
        return !Ext.isEmpty(result) && result !== true;
    },
    /**
     * Returns `true` if the record will be deleted in Cach√©
     * @return {Boolean} `true` if record will be deleted in Cach√©
     */
    isDeleting: function() {
        return this.deleting;
    },
    /**
     * Returns `true` if the record was supposed to be deleted, but could not complete because of error(s)
     * @return {Boolean} `true` if record could not complete deletion process (marked for delete, but has error(s))
     */
    isNotDeleted: function() {
        var rec = this,
            markedForDeletion = rec.isDeleting(),
            hasError = rec.isValid();
        return markedForDeletion && hasError;
    },
    /**
     * Adds a new save attempt to the end of {@link #saveSessions}
     * @private
     * @param {String} [saveSessionID=`<current time in ms>`]
     * @return {String}
     */
    addSaveSession: function(saveSessionID) {
        var me = this;
        if (saveSessionID) {
            me.saveSessions = Ext.isDefined(me.saveSessions) ? me.saveSessions : Ext.create('Ext.util.Collection');
            me.saveSessions.add({
                id: saveSessionID,
                result: false
            });
        }
        return saveSessionID;
    },
    /**
     * Changes the save result to a new value in the {@link #property-saveSessions}
     * @param {String} saveSessionID Key that indicated the proper {@link #property-saveSessions saveSession}.
     * @param {String/Boolean} newResult Value for the indicated {@link #property-saveSessions saveSession}.
     * @return {Boolean} `true` if successfully updated the save attempt's value
     */
    updateSaveSessionResult: function(saveSessionID, newResult) {
        var rec = this,
            attempt,
            isUpdated = false;
        newResult = Ext.isString(newResult) ? [
            newResult
        ] : newResult;
        if (saveSessionID) {
            attempt = (Ext.isFunction((rec.saveSessions || {}).get) ? rec.saveSessions.get(saveSessionID) : undefined);
            if (Ext.isObject(attempt)) {
                if (!Ext.isBoolean(attempt.result)) {
                    attempt.result = Ext.Array.merge(attempt.result, newResult);
                } else {
                    attempt.result = newResult;
                }
                isUpdated = true;
            }
        }
        return isUpdated;
    },
    /**
     * Changes the save result to the record's validation error message.
     * @param {String} saveSessionID Key that indicated the proper {@link #property-saveSessions saveSession}.
     * @return {Boolean} `true` if successfully updated the save attempt's value
     */
    addValidationErrorsToSaveSession: function(saveSessionID) {
        var rec = this,
            allErrors = rec.getValidation().getErrors(),
            errorsArr = [],
            isUpdated = false;
        Ext.Array.forEach(allErrors, function(err, index, array) {
            errorsArr.push(err.id + ': ' + ' ' + err.msg);
        });
        if (errorsArr.length > 0) {
            isUpdated = true;
            rec.updateSaveSessionResult(saveSessionID, errorsArr);
        }
        return isUpdated;
    },
    /**
     * @param {String} saveSessionID Key that indicated the proper {@link #property-saveSessions saveSession}.
     * @return {String/Boolean} Value for the indicated {@link #property-saveSessions saveSession}.
     */
    getSaveSessionResult: function(saveSessionID) {
        var rec = this,
            result;
        saveSessionID = saveSessionID || rec.getCurrentSaveSessionID();
        if (saveSessionID) {
            result = (Ext.isFunction((rec.saveSessions || {}).get) ? (rec.saveSessions.get(saveSessionID) || {}).result : undefined);
        }
        return result;
    },
    /**
     * @return {String} Last save attempt (time); returns `false` if no previous save attempt
     */
    getCurrentSaveSessionID: function() {
        var sessionID = false,
            attempts = this.saveSessions,
            attempt;
        if (Ext.isFunction((attempts || {}).last)) {
            attempt = attempts.last();
            if (attempt) {
                sessionID = attempts.getKey(attempt);
            }
        }
        return sessionID;
    },
    /**
     * Sets up a record before saving
     * @private
     * @param {String} saveSessionID
     */
    initBeforeSave: function(saveSessionID) {
        var rec = this;
        rec.addSaveSession(saveSessionID);
        rec.setBeforeCommitProperties();
        return saveSessionID;
    },
    /**
     * Backs up a record's properties before it is committed.  Committing a record will remove properties like `modified`, `dirty`, `phantom`.
     * @private
     * @param {Object} [properties] Can specify exactly what properties to back up; else it will back up default properties
     */
    setBeforeCommitProperties: function(properties) {
        var rec = this;
        properties = properties || {
            modified: Ext.clone(rec.modified),
            dirty: rec.dirty,
            phantom: rec.phantom
        };
        rec._beforecommit = properties;
    },
    /**
     * Resets the backed-up properties to `undefined`
     * @private
     */
    clearBeforeCommitProperties: function() {
        this._beforecommit = undefined;
    },
    /**
     * Returns the properties that are backed up before a record is committed
     * @private
     * @return {Object} Returns the '_beforecommit' properties
     */
    getBeforeCommitProperties: function() {
        return this._beforecommit;
    },
    /**
     * When a record is committed, several properties are reset like {@link #modified}; this will restore those properties to the pre-committed state
     * @return {Boolean} `true` if successfully restored properties
     */
    restoreBeforeCommitProperties: function() {
        var rec = this,
            restored = false,
            properties = rec.getBeforeCommitProperties();
        if (properties) {
            Ext.apply(rec, properties);
            rec.clearBeforeCommitProperties();
            restored = true;
        }
        return restored;
    },
    /**
     * Generic function designed to create a record.
     * This function will be called by newButton's 'click' function
     * @param {Object} defaultProperties Object containing all default property values for a new record,
     * such as required hidden id's.
     * @param {Object} [eOpts]      An object containing function configuration options
     * This may contain any of the following properties:
     * @param {Boolean} [eOpts.includeID] If `true`, new record can have a defined ID-property value.
     * New ID is either provided from eOpts.idValue or defaultProperties's idProperty; defaults to false
     * @param {Number/String} [eOpts.idValue] Value to set the new record's id property to; defaults to ''
     * @param {String} [eOpts.modelName] Name of the {@link Ext.data.Model Model} associated with this store. Should match the string value of the store's model config (e.g. Ext.define('Some.NewStore', {model:'My.NewModel'}) )
     *
     * @return {Ext.data.Model} The model instance that was create
     **/
    createNewRecord: function(defaultProperties, eOpts) {
        defaultProperties = Ext.apply({}, defaultProperties);
        eOpts = eOpts || {};
        var rec = this,
            modelName = eOpts.modelName || rec.getName(),
            includeID = eOpts.includeID || false,
            idField = eOpts.idField || rec.prototype.clientIdProperty,
            propValue, newRec,
            proxy = rec.getProxy(),
            modifiedProperties = {};
        // builds object { propName: 'value', prop2Name: 'new_value', etc.}
        Ext.Array.forEach(rec.fields.items, function(prop, index, array) {
            // don't overwrite existing prop value; if it's not set use default value or value from field config in model
            propValue = defaultProperties[prop.name] || prop.defaultValue || prop.value;
            if (propValue) {
                defaultProperties[prop.name] = propValue;
                modifiedProperties[prop.name] = undefined;
            }
        });
        if (includeID) {
            defaultProperties[idField] = eOpts.idValue || defaultProperties[idField];
        } else {
            delete defaultProperties[idField];
        }
        if (idField !== rec.idProperty) {
            // get rid of the `_unique_internal_model_id` value,
            // otherwise, the new record would have the same internal `id` as an existing record
            delete defaultProperties[rec.idProperty];
        }
        if (proxy) {
            // create new record using same process as
            // Ext.data.proxy.Ajax's processResponse() uses when it defines its resultSet
            // which uses the Ext.data.reader.Json's readRecords()
            newRec = proxy.getReader().extractRecordData(defaultProperties);
            if (!includeID) {
                newRec.modified = Ext.apply({}, newRec.modified, modifiedProperties);
                newRec.phantom = true;
                newRec.dirty = true;
            } else {
                // using an existing record ID so record is not new
                newRec.set(idField, defaultProperties[idField]);
            }
        } else {
            console.warn('Used Old Model Create Method');
            newRec = Ext.create(modelName);
            Ext.Object.each(defaultProperties, function(key, value, myself) {
                newRec.set(key, value);
            });
        }
        return newRec;
    },
    /**
     * Converts record's data to a format that Cach√© will recognize properly (like dates).
     * Excludes fields that are marked as `persist: false`
     * @return {Array} Record's data
     **/
    formatBeforeSave: function() {
        var record = this;
        record.getFields().forEach(function(field, idx, all) {
            var name = field.getName(),
                val = record.get(name);
            if (!Ext.isEmpty(val) && (Ext.isDate(val) || field.getType() === 'date')) {
                record.data[name] = Ext.util.Format.date(val, field.format || 'm/d/Y');
            }
        });
        return record.getData({
            persist: true
        });
    },
    // will not return fields are `persist: false`
    /**
     * Properly format a record's properties for saving to Cach√©
     * @param {String} [cacheIdProperty='ID'] The Cach√© class's ID property
     * @param {String} [idField='ID'] The record's ID property
     * @return {Array} Record's formatted properties
     **/
    getFormattedPropertiesBeforeSave: function(cacheIdProperty, idField) {
        var record = this,
            // gets properly-formatted record data
            properties = record.formatBeforeSave();
        cacheIdProperty = cacheIdProperty || 'ID';
        idField = idField || 'ID';
        // if the primary key field in the Cach√© class does not match the idField in the model, update the property
        if (Ext.isEmpty(properties[cacheIdProperty])) {
            properties[cacheIdProperty] = properties[idField];
        }
        return properties;
    },
    getFieldsToSearch: function(dontReturnEmpty) {
        dontReturnEmpty = Ext.isDefined(dontReturnEmpty) ? dontReturnEmpty : false;
        var rec = this,
            allFields = rec.fields.items,
            searchFields = [],
            allFieldNames = [];
        Ext.Array.forEach(allFields, function(field, index, array) {
            if (field.search) {
                searchFields.push(field.name);
            }
            if (dontReturnEmpty) {
                allFieldNames.push(field.name);
            }
        });
        if (dontReturnEmpty && searchFields.length === 0) {
            searchFields = allFieldNames;
        }
        return searchFields;
    },
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// SORT RANKING CONFIGURATION ////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @localdoc Update how prevalent the desired values are in this record
     *
     * *** NOTE: For a record to be ranked, at least 1 field must contain all pieces of the `txtToFindArr` array.
     * If it does not have hits, it will be at the bottom of the list ***
     *
     * When searching for a specific set of terms, the most valuable record has these search terms in a prominent position.
     *
     * Records are ranked on the following criteria:
     *
     *   - First field index that matches the beginning of a word ("***NEW*** york" is a more likely result than "a ***NEW*** val")
     *   - How many matches are there across all fields?
     *   - Best match index in any field  ("***NE***w York" is a more likely result than "Mai***NE***")
     *   - Lowest field index with a match (2nd field is a stronger match than 5th)
     *   - Shortest field length that matches everything ("***SNICKERS*** mini" beats "***SNICKERS*** bite size")
     *
     * @param {String/String[]} txtToFindArr
     *   If the order of the strings does matters, then define as array before passing it in
     *   It will search for exact matches on each array element.
     *
     *   Finding Guidelines:
     *
     *   - Exact phrases, order matters => ["new york", "west virginia"] or ["new york"] (case ignored)
     *   - Order does not matter => "new york west virginia" (order, case, and punctuation ignored)
     *   - Mixed: Order matches for some, but not others => ["new york", "west", "viginia"] ("new york" is an exact match)
     * @param {Ext.data.field.Field[]} [fieldsToScoreArr]
     *   If set, these are the only Fields to rank
     * @param {String[]} [txtToSearchArr]
     *   If set and `fieldsToScoreArr` is not, these are the only values to rank (order is significant, must important first)
     *
     * *** Order is significant, most important first***
     *
     * @return {Object} Record's ranking stats
     */
    setSortRanking: function(txtToFindArr, fieldsToScoreArr, txtToSearchArr) {
        var me = this,
            rec = me,
            bestMatch = {};
        if (Ext.isArray(txtToSearchArr) && txtToSearchArr.length) {
            bestMatch = me.getRankingStatsForTextArray(txtToSearchArr, txtToFindArr);
        } else {
            bestMatch = me.getRankingStatsForRecord(fieldsToScoreArr, txtToFindArr);
        }
        // do not use rec.set() as it performs unnecessary processes
        rec.data = Ext.apply(rec.data, {
            '_sort_best_word_match_location': bestMatch.beginningOfWordLocation,
            // earliest word match from the lowest field
            '_sort_match_count': bestMatch.count,
            // how many matches are there (partials included)?
            '_sort_character_index': bestMatch.lowestCharIndex,
            // earliest match in any field (char index)
            '_sort_col_index': bestMatch.lowestColIndex,
            // lowest field index where a match was found
            '_sort_average_match_location': Ext.Array.sum(bestMatch.allMatchLocs || []) / (bestMatch.allMatchLocs || []).length,
            // average location of chars that match searchStr
            '_sort_best_word_match_total_length': bestMatch.beginningOfWordLength
        });
        // total char length from earliest word match from lowest field
        return bestMatch;
    },
    /*
     * Gets the best ranking stats for a record based on how relevant the match is
     * @param {Ext.data.field.Field[]} fieldsToScoreArr Array of column data indices (order is significant)
     * @param {String/String[]} txtToFindArr
     *   If the order of the strings does not matter, then define as array before passing it in
     *   It will search for exact matches on each array element.
     *
     *   Finding Guidelines:
     *   - Exact phrases, order matters => ["new york", "west virginia"] or ["new york"] (case ignored)
     *   - Order does not matter => "new york west virginia"
     *   - Mixed: Order matches for some, but not others => ["new york", "west", "viginia"] ("new york" is an exact match)
     * @private
     */
    getRankingStatsForRecord: function(fieldsToScoreArr, txtToFindArr) {
        var me = this,
            rec = me,
            txtToSearchArr = [],
            bestMatch = {};
        fieldsToScoreArr = Ext.Array.from(fieldsToScoreArr) || [];
        txtToFindArr = Ext.isArray(txtToFindArr) ? txtToFindArr : Ext.String.splitWords(txtToFindArr) || [];
        // nothing specified, so get all fields
        if (fieldsToScoreArr.length === 0) {
            Ext.Array.forEach(rec.fields.items, function(fld, index, array) {
                fieldsToScoreArr.push(fld.name);
            });
        }
        if (txtToFindArr.length > 0) {
            // find search word occurance in each field that was marked as a "to-be-searched" field
            Ext.Array.forEach(fieldsToScoreArr, function(field, fieldIndex, fieldArray) {
                var txtToSearch = Ext.isDefined(rec.get(field)) ? rec.get(field) : '',
                    txtToSearchHasAllTxtToFind;
                txtToSearchHasAllTxtToFind = sl.utils.doesStringContainAllPieces(txtToSearch, txtToFindArr);
                if (txtToSearchHasAllTxtToFind) {
                    txtToSearchArr.push({
                        txt: txtToSearch,
                        index: fieldIndex
                    });
                }
            });
            bestMatch = me.getRankingStatsForTextArray(txtToSearchArr, txtToFindArr);
        }
        return bestMatch;
    },
    /*
     * Gets the best ranking stats for a string array based on how relevant the match is
     * @param {Ext.data.field.Field[]} txtToSearchArr
     * @param {String/String[]} txtToFindArr
     *   If the order of the strings does not matter, then define as array before passing it in
     *   It will search for exact matches on each array element.
     *
     *   Finding Guidelines:
     *   - Exact phrases, order matters => ["new york", "west virginia"] or ["new york"] (case ignored)
     *   - Order does not matter => "new york west virginia"
     *   - Mixed: Order matches for some, but not others => ["new york", "west", "viginia"] ("new york" is an exact match)
     * @private
     */
    getRankingStatsForTextArray: function(txtToSearchArr, txtToFindArr) {
        var me = this,
            bestMatch = {},
            fieldMatch;
        Ext.Array.forEach(txtToSearchArr, function(element, index, array) {
            var fieldIndex, txtToSearch;
            if (Ext.isObject(element)) {
                txtToSearch = element.txt;
                fieldIndex = element.index;
            } else {
                txtToSearch = element;
                fieldIndex = index;
            }
            if (!Ext.isEmpty(txtToSearch)) {
                if (Ext.isDate(txtToSearch) && Ext.isFunction(txtToSearch.toLocaleDateString)) {
                    txtToSearch = txtToSearch.toLocaleDateString();
                }
                fieldMatch = me.getRankingStatsForText(txtToSearch, txtToFindArr);
                bestMatch = me.updateBestMatch(bestMatch, fieldMatch, fieldIndex);
            }
        });
        return bestMatch;
    },
    /**
     * When searching for a specific set of terms, the most valuable record has these search terms in a prominent position
     *
     * Records are ranked on the following criteria:
     *   - First field index that matches the beginning of a word ("`NEW` york" is a more likely result than "a `NEW` val")
     *   - How many matches are there across all fields? (to be considered, field must have all search terms)
     *   - Best match index in any field  ("`NE`w York" is a more likely result than "Mai`NE`")
     *   - Lowest field index with a match (2nd field is a stronger match than 5th)
     *   - Shortest field length that matches everything ("`SNICKERS` mini" beats "`SNICKERS` bite size")
     * @return {Object} If there are any matches, then this object will define the various ranking stats
     */
    getRankingStatsForText: function(txtToSearch, txtToFindArr) {
        var me = this,
            txtToSearch_stripped_nospaces, txtToSearch_stripped, txtToSearchWords,
            matchCount = 0,
            firstMatchIdx = Number.MAX_SAFE_INTEGER,
            earliestWordIndex = Number.MAX_SAFE_INTEGER,
            minMatchLength = Number.MAX_SAFE_INTEGER,
            allMatchLocs = [],
            foundMatch = false,
            matchInfo = {},
            txtToFind_stripped, txtToFind_stripped_nospaces, word, wordIndex;
        me.setTxtToSearch(txtToSearch);
        txtToSearch_stripped_nospaces = me.getTxtToSearch_stripped_nospaces();
        txtToSearch_stripped = me.getTxtToSearch_stripped();
        txtToSearchWords = me.getTxtToSearchWords();
        txtToFindArr = Ext.isArray(txtToFindArr) ? txtToFindArr : Ext.String.splitWords(txtToFindArr);
        Ext.Array.forEach(txtToFindArr, function(txtToFind, txtToFindIndex, txtToFindArray) {
            var localMatchIndex, localMatchArr;
            if (!Ext.isEmpty(txtToFind)) {
                me.setTxtToFind(txtToFind);
                txtToFind_stripped = me.getTxtToFind_stripped();
                txtToFind_stripped_nospaces = me.getTxtToFind_stripped_nospaces();
                /**
                 * if the txtToFind has a space,
                 * then it is trying to make an exact match, so don't remove spaces from txtToSearch
                 */
                localMatchArr = sl.utils.getAllMatchesInString(txtToFind_stripped, (txtToFind_stripped.indexOf(' ') >= 0 ? txtToSearch_stripped : txtToSearch_stripped_nospaces));
                if (localMatchArr.length > 0) {
                    matchCount += localMatchArr.length;
                    localMatchIndex = (txtToSearch_stripped_nospaces).indexOf(txtToFind_stripped);
                    localMatchIndex = localMatchArr[0].index;
                    if (localMatchIndex >= 0) {
                        firstMatchIdx = Math.min(firstMatchIdx, localMatchIndex);
                        allMatchLocs.push(localMatchIndex);
                        for (wordIndex = 0; wordIndex < txtToSearchWords.length; wordIndex++) {
                            word = txtToSearchWords[wordIndex];
                            // find the first word that starts with searched-for text
                            if (word.indexOf(txtToFind_stripped) === 0) {
                                earliestWordIndex = Math.min(earliestWordIndex, wordIndex);
                                break;
                            }
                        }
                    }
                    minMatchLength = Math.min(minMatchLength, txtToSearch.length);
                    foundMatch = true;
                }
            }
        });
        if (foundMatch) {
            matchInfo = {
                count: matchCount,
                // number of matches
                length: minMatchLength,
                // shortest value that has all pieces
                firstWordIndex: earliestWordIndex,
                // index of first word that matched
                firstMatchIndex: firstMatchIdx,
                // first match on this field
                allMatchLocs: allMatchLocs
            };
        }
        return matchInfo;
    },
    /**
     * update a record's overall "best match" stats for ranking
     * @param {Object} bestMatch current best ranking stats for the record
     * @param {Object} fieldMatch contender to compare against.  If its values are better, will overwrite bestMatch's
     * @param {Number} fieldIndex typically the matching column's position (lower is better for ranking)
     * @return {Object} updated best matching stats
     */
    updateBestMatch: function(bestMatch, fieldMatch, fieldIndex) {
        var f = fieldMatch || {},
            b = bestMatch || {},
            beginningOfWord,
            setToNumber = function(prop, val) {
                b[prop] = Ext.isNumeric(b[prop]) ? b[prop] : val;
            };
        if (f.count >= 0) {
            beginningOfWord = Number(f.firstWordIndex + '.' + (fieldIndex < 10 ? '0' : '') + fieldIndex);
            setToNumber('count', 0);
            setToNumber('lowestCharIndex', Number.MAX_SAFE_INTEGER);
            setToNumber('lowestColIndex', Number.MAX_SAFE_INTEGER);
            setToNumber('beginningOfWordLocation', Number.MAX_SAFE_INTEGER);
            setToNumber('beginningOfWordLength', Number.MAX_SAFE_INTEGER);
            b.count += f.count;
            b.lowestCharIndex = Math.min(b.lowestCharIndex, f.firstMatchIndex);
            b.lowestColIndex = Math.min(b.lowestColIndex, fieldIndex);
            b.beginningOfWordLocation = Math.min(b.beginningOfWordLocation, beginningOfWord);
            b.beginningOfWordLength = Math.min(b.beginningOfWordLength, f.length);
            b.allMatchLocs = (b.allMatchLocs || []).concat(f.allMatchLocs);
        }
        return bestMatch;
    },
    getSortRankingValues: function() {
        var rec = this,
            ranking = {},
            updateRanking = function(prop) {
                ranking[prop] = rec.get(prop);
            };
        updateRanking('_sort_best_word_match_location');
        updateRanking('_sort_match_count');
        updateRanking('_sort_character_index');
        updateRanking('_sort_col_index');
        updateRanking('_sort_best_match_all_locations');
        updateRanking('_sort_best_word_match_total_length');
        return ranking;
    }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////
///// END SORT RANKING CONFIGURATION ////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 * This override does the following:
 *
 *   - allow option to update "owner" of data property that ViewModel inherited from
 */
Ext.define('sl.app.ViewModelOverride', {
    override: 'Ext.app.ViewModel',
    /**
     * Override adds option to only update the ViewModel that "owns" a {@link #property-data} property.
     * It will traverse the ViewModel tree to find the ancestor that the initial ViewModel inherited `path` from.
     * If no owner is found, it updates the initial ViewModel.
     *
     * Only uses the override if `onlyUpdateOwner` parameter is `true`.
     *
     * @param {Boolean} [onlyUpdateOwner=false] If `true`, uses override to update VM where `path` is stored
     * @inheritdoc Ext.app.ViewModel#method-set
     * @overrideVersion ExtJS 5.1.2.748
     */
    set: function(path, value, onlyUpdateOwner) {
        var vm = this,
            foundOwner = false,
            ownerVM = vm;
        onlyUpdateOwner = Ext.valueFrom(onlyUpdateOwner, false);
        if (onlyUpdateOwner) {
            // find ViewModel that initial ViewModel inherited `path` from (if it did)
            do {
                if (ownerVM.hadValue && ownerVM.hadValue[path]) {
                    break;
                }
            } while (// `true` if `path` ***ever*** had a value
            // value can be literally anything but `undefined`
            ownerVM = ownerVM.getParent());
        }
        // reverts to initial ViewModel if did not inherit it
        ownerVM = ownerVM || vm;
        ownerVM.callParent([
            path,
            value
        ]);
    }
});

/**
 *
 * This override does the following:
 *
 *   - added a method to get array of all of record's errors
 */
Ext.define('sl.data.ValidationOverride', {
    override: 'Ext.data.Validation',
    getErrors: function() {
        var errors = [],
            data = this.getData();
        Ext.Object.each(data, function(field, value) {
            if (true !== value) {
                errors.push({
                    id: field,
                    msg: value
                });
            }
        });
        return errors;
    }
});

/**
 *
 *  This override does the following:
 *
 *   - no longer forces field to have a value.  Setting a min requirement will do that test
 */
Ext.define('sl.override.BoundValidatorOverride', {
    override: 'Ext.data.validator.Bound',
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.data.validator.Validator.validate#method-validate
     * @overrideVersion ExtJS 5.1.2.748
     */
    validate: function(value) {
        var me = this,
            hasMin = me.hasMin,
            hasMax = me.hasMax,
            min = me.getMin(),
            max = me.getMax(),
            /////////////////////////////////////////
            // CUSTOM CODE
            //  no longer makes sure there is a value
            //  if there is a min length requirement, that will ensure there's a value
            //
            msg = /* = this.validateValue(value)*/
            true,
            //
            // END CUSTOM CODE
            /////////////////////////////////////////
            len;
        if (msg !== true) {
            return msg;
        }
        value = me.getValue(value);
        if (hasMin && hasMax) {
            if (value < min || value > max) {
                msg = me._bothMsg;
            }
        } else if (hasMin) {
            if (value < min) {
                msg = me._minMsg;
            }
        } else if (hasMax) {
            if (value > max) {
                msg = me._maxMsg;
            }
        }
        return msg;
    }
});

/**
 *
 * This override does the following:
 *
 *   - getValue will now return correct length when value is undefined
 */
Ext.define('sl.override.LengthValidatorOverride', {
    override: 'Ext.data.validator.Length',
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.data.validator.Length#method-getValue
     * @overrideVersion ExtJS 5.1.2.748
     */
    getValue: function(v) {
        /////////////////////////////////////////
        // CUSTOM CODE
        //  will now return `0` if `v` is undefined (previously returned `9`)
        /////////////////////////////////////////
        /*CUSTOM CODE*/
        return String(v || '').length;
    }
});
/*END CUSTOM CODE*/

/**
 *
 * This override does the following:
 *
 *   - pass Editor-level events to the Field (combo, numberfield, textfield, etc)
 *
 *   - allow `moveOnEditorOnEnter` to work by changing how the Editor handles the ENTER key
 */
Ext.define('sl.override.EditorOverride', {
    override: 'Ext.Editor',
    uses: [
        'Ext.mixin.Observable',
        'Ext.util.DelayedTask'
    ],
    initComponent: function() {
        var me = this;
        // captures all Editor events and fires (some) events as the field
        Ext.mixin.Observable.capture(me, function(evname) {
            // ban events that either cause errors or are already fired by the field
            var bannedEvents = [
                    'specialkey',
                    'beforerender',
                    'render'
                ],
                field = me.field;
            if (bannedEvents.indexOf(evname) < 0) {
                // replace the Ext.Editor reference with the field
                var args = Ext.Array.replace(Ext.Array.clone(arguments), 1, 1, [
                        field
                    ]) || [];
                field.fireEvent.apply(field, args);
            }
        });
        me.callParent();
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.Editor#method-onSpecialKey
     * @overrideVersion ExtJS 5.1.2.748
     * modified Ext.Editor's to allow for field-level cancel & complete settings. This allows things like `moveEditorOnEnter` to work
     */
    onSpecialKey: function(field, event) {
        var me = this,
            key = event.getKey(),
            complete = me.completeOnEnter && key === event.ENTER,
            cancel = me.cancelOnEsc && key === event.ESC,
            task = me.specialKeyTask;
        /////////////////////////////////////////
        // CUSTOM CODE
        //  by setting complete/cancel to false, it will stop .completeEdit from happening
        //  the `ENTER` key can now be used to open search in combogrid or move editor to different row (moveEditorOnEnter)
        //
        var fld = me.field,
            grid = fld.getParentGrid(),
            ownerCt = me.ownerCt || {},
            isExpanded, selModel, onKeyEnterFn, gridSelModel, gridOnKeyEnterFn;
        if (fld && grid && grid.moveEditorOnEnter) {
            switch (key) {
                case event.ENTER:
                    // prefer to use selModel's onKeyEnter fn if it exists
                    selModel = Ext.isFunction(ownerCt.getSelectionModel) ? ownerCt.getSelectionModel() : {};
                    onKeyEnterFn = selModel.onKeyEnter;
                    gridSelModel = Ext.isFunction(grid.getSelectionModel) ? grid.getSelectionModel() : {};
                    gridOnKeyEnterFn = gridSelModel.onKeyEnter;
                    if (Ext.isFunction(onKeyEnterFn) && onKeyEnterFn !== Ext.emptyFn) {
                        complete = false;
                    } else if (Ext.isFunction(gridOnKeyEnterFn) && gridOnKeyEnterFn !== Ext.emptyFn) {
                        complete = false;
                    } else if (Ext.isBoolean(fld.completeOnEnter)) {
                        // field-level setting is king
                        complete = fld.completeOnEnter;
                    };
                    break;
                case event.ESC:
                    /*
                 * if the field has an `isExpanded` property
                 * then only use the field's onEsc() if `isExpanded`=true
                 * only picker fields (combo, triggerfield, combogrid, etc)
                 * should have an `isExpanded` property
                 */
                    isExpanded = Ext.isDefined(fld.isExpanded) ? fld.isExpanded : true;
                    if (isExpanded && Ext.isFunction(fld.onEsc) && fld.onEsc !== Ext.emptyFn) {
                        // ESC key is handled by the field
                        cancel = false;
                    } else if (Ext.isBoolean(fld.cancelOnEsc)) {
                        // field-level setting is king
                        cancel = fld.cancelOnEsc;
                    };
                    break;
                default:
                    break;
            }
        }
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        if (complete || cancel) {
            event.stopEvent();
            if (!task) {
                me.specialKeyTask = task = new Ext.util.DelayedTask();
            }
            // Must defer this slightly to prevent exiting edit mode before the field's own
            // key nav can handle the enter key, e.g. selecting an item in a combobox list
            task.delay(me.specialKeyDelay, complete ? me.completeEdit : me.cancelEdit, me);
            // Makes unit testing easier
            if (me.specialKeyDelay === 0) {
                task.cancel();
                if (complete) {
                    me.completeEdit();
                } else {
                    me.cancelEdit();
                }
            }
        }
        me.fireEvent('specialkey', me, field, event);
    },
    // translate editor.onKeyEnter to editor.field.onKeyEnter
    onKeyEnter: function(e) {
        var field = this.field;
        if (field && Ext.isFunction(field.onKeyEnter)) {
            field.onKeyEnter.apply(field, arguments);
        }
    }
});

/**
 *
 * This override does the following:
 *
 *   - no longer collapses if `collapsible` = false and `collapseOnDblClick` = true
 */
Ext.define('sl.override.SplitterOverride', {
    override: 'Ext.resizer.Splitter',
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.resizer.Splitter#method-onSpecialKey
     * @overrideVersion ExtJS 5.1.2.748
     * modified Ext.resizer.Splitter's to not allow `collapseOnDblClick` to collapse unless `collapsible` is also true
     */
    onRender: function() {
        var me = this;
        /////////////////////////////////////////
        // CUSTOM CODE
        //   won't collapse when it is dblclicked if it is not marked as collapsible
        //
        if (me.collapseOnDblClick && !me.renderData.collapsible) {
            me.collapseOnDblClick = false;
        }
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        me.callParent(arguments);
    }
});

/**
 *
 * This override does the following:
 *
 *   - toolbar getter functions
 */
Ext.define('sl.override.PanelOverride', {
    override: 'Ext.panel.Panel',
    requires: [
        'Ext.toolbar.Toolbar'
    ],
    uses: [
        'sl.utils.Utilities'
    ],
    config: {
        /**
         * @cfg {String} defaultTitle
         * Unlike the {@link #title}, this value should not change after instantiation.
         * It is useful for child grids, when you want to get the original, simple text instead of the
         * ["simple title" + "parent grid's info"]
         */
        defaultTitle: ''
    },
    /**
     * @event ancestorresize
     * Fired after a containing panel's {@link #forwardedEvents watched event} was fired.
     * This allow a sub panel to respond to the resizing/visibility changes of its containing panel.
     * @param {Ext.panel.Panel} subPanel Notified sub panel whose visibility/size may be affected by `abovePanel`
     * @param {Ext.panel.Panel} abovePanel Panel that fired the original, watched {@link #forwardedEvents event}
     * @param {String} forwardedEvent Name of the event that `abovePanel` fired.
     */
    /**
     * @cfg {Boolean} isForwardingEvents If `true`, fires {@link #event-ancestorresize}
     * when this panel fires {@link #forwardedEvents selected events}.
     *
     * For example, in the following code:
     *
     *     {
     *          xtype: 'panel',
     *          itemId: 'topPanel',
     *          items: [
     *              {
     *                  xtype: 'panel',
     *                  itemId: 'subPanel'
     *              }
     *          ]
     *      }
     *
     * When `topPanel` is expanded/collapsed/floated/hidden/etc,
     * `subPanel` will fire {@link #event-ancestorresize}.
     *
     * This allows a subpanel to recognize that its layout/visibility/size may have changed.
     */
    isForwardingEvents: true,
    /**
     * @private
     * @cfg {Array} forwardedEvents
     * Watched events that when fired, will cause all subpanels to fire {@link #event-ancestorresize}
     */
    forwardedEvents: [
        'float',
        'unfloat',
        'expand',
        'collapse',
        'show',
        'hide'
    ],
    initComponent: function() {
        var me = this;
        me.setDefaultTitle(me.getDefaultTitle() || me.getTitle());
        me.callParent();
        if (me.floatable) {
            me.on({
                scope: me,
                priority: 1,
                'float': me.setZIndexOnFloat,
                'unfloat': me.restoreZIndexOnUnfloat
            });
        }
        if (me.isForwardingEvents) {
            me.on({
                scope: me,
                priority: 100,
                'destroy': me.unbindForwardedListeners
            });
            me.bindForwardedListeners();
        }
    },
    /**
     * @private
     * Fixes the problem of when panel is floated,
     * it could be displayed under the mask of whatever panel it is floating over
     */
    setZIndexOnFloat: function(panel) {
        var panelEl;
        try {
            panelEl = panel.getEl();
            if (panelEl) {
                panel._oldZIndex = panelEl.getStyle('z-index');
                // make sure panel is above any panels (and their mask messages) that it is floating over
                panelEl.setStyle('z-index', '19000');
            }
        } catch (error) {
            console.error('[`float` panel] Set Z-Index on `float`', {
                error: error,
                args: arguments,
                panel: panel,
                panelEl: panelEl,
                scopeClassName: this.$className,
                scope: this
            });
        }
    },
    /**
     * @private
     * Resets the original z-index after a panel is unfloated
     */
    restoreZIndexOnUnfloat: function(panel) {
        var panelEl;
        try {
            panelEl = panel.getEl();
            if (panelEl) {
                // restore panel's original z-index just in case it could cause any issues (none known at present)
                panelEl.setStyle('z-index', panel._oldZIndex);
                delete panel._oldZIndex;
            }
        } catch (error) {
            console.error('[`unfloat` panel] Restore Z-Index on `unfloat`', {
                error: error,
                args: arguments,
                panel: panel,
                panelEl: panelEl,
                scopeClassName: this.$className,
                scope: this
            });
        }
    },
    bindForwardedListeners: function() {
        var me = this;
        me.forwardedEventsTask = new Ext.util.DelayedTask(me.onForwardedEvent, me);
        me.forwardedListeners = Ext.apply({}, me.forwardedListeners);
        me.forwardedEvents.forEach(function(evt) {
            // don't overwrite existing
            if (!me.forwardedListeners[evt]) {
                me.forwardedListeners[evt] = {
                    fn: me.onPanelSizing,
                    eventName: evt
                };
            }
        });
        me.on(me.forwardedListeners);
    },
    unbindForwardedListeners: function() {
        var me = this;
        if (me.forwardedListeners) {
            me.un(me.forwardedListeners);
        }
        me.forwardedEventsTask.cancel();
    },
    onPanelSizing: function(panel, eOpts) {
        this.forwardedEventsTask.delay(50, undefined, undefined, [
            panel,
            eOpts.eventName,
            eOpts
        ]);
    },
    onForwardedEvent: function(panel, forwardedEvent, eOpts) {
        //////////////////////////////////////////////////////////////////
        // Lead Sencha Engineer regarding ComponentQuery performace:
        // http://www.akawebdesign.com/2012/07/26/case-study-locating-extjs-components/
        // http://www.akawebdesign.com/ExtJS/components/ext-getCmp-test.html
        // tl;dr: in set of 300 panels, looking at max of 0-1 ms added time to find sub-panels
        //////////////////////////////////////////////////////////////////
        // find all rendered panels beneath current panel, then have descendant panel fire event
        if (panel.rendered) {
            panel.query('panel[rendered]').forEach(function(subPanel) {
                subPanel.fireEvent('ancestorresize', subPanel, panel, forwardedEvent, eOpts);
            });
        }
    },
    /*
     * @param {Boolean} [onlyLocal=false] If `true`, will not consider any ancestor panels that contain this panel
     * @return `true` if either this panel or a panel that contains it is currently collapsed
     * Works with grids, trees, forms, or any other class that extends the `Ext.panel.Panel` class
     */
    isCollapsed: function(onlyLocal) {
        var panel = this,
            // `collapsed` can be `true`, `{direction like left}`, or `false`
            // any value besides `false` means that it is actively collapsed
            isCollapsed = (panel.collapsed !== false);
        if (!isCollapsed && onlyLocal) {
            isCollapsed = !Ext.isEmpty(panel.up('panel[collapsed]'));
        }
        return isCollapsed;
    },
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// TOOLBAR HELPERS ///////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @param {Number} arrayLoc Location in the dockedItems array, defaults to 0
     * @return {Ext.toolbar.Toolbar} The first (or if defined, arrayLoc's) Bottom toolbar, or undefined
     */
    getBottomToolbar: function(arrayLoc) {
        return this.getToolbar('bottom', arrayLoc);
    },
    /**
     * @return {Ext.Component[]} Array of ALL Bottom toolbars, or undefined
     */
    getBottomToolbars: function() {
        return this.getToolbars('bottom');
    },
    /**
     * @param {Number} arrayLoc Location in the dockedItems array, defaults to 0
     * @return {Ext.toolbar.Toolbar} The first Top toolbar, or undefined
     */
    getTopToolbar: function(arrayLoc) {
        return this.getToolbar('top', arrayLoc);
    },
    /**
     * @return {Ext.Component[]} Array of ALL Top toolbars, or undefined
     */
    getTopToolbars: function() {
        return this.getToolbars('top');
    },
    /**
     * @param {Number} arrayLoc Location in the dockedItems array, defaults to 0
     * @return {Ext.toolbar.Toolbar} The first Right toolbar, or undefined
     */
    getRightToolbar: function(arrayLoc) {
        return this.getToolbar('right', arrayLoc);
    },
    /**
     * @return {Ext.Component[]} Array of ALL Right toolbars, or undefined
     */
    getRightToolbars: function() {
        return this.getToolbars('right');
    },
    /**
     * @param {Number} arrayLoc Location in the dockedItems array, defaults to 0
     * @return {Ext.toolbar.Toolbar} The first Left toolbar, or undefined
     */
    getLeftToolbar: function(arrayLoc) {
        return this.getToolbar('left', arrayLoc);
    },
    /**
     * @return {Ext.Component[]} Array of ALL Left toolbars, or undefined
     */
    getLeftToolbars: function() {
        return this.getToolbars('left');
    },
    /**
     * @param {String} position The location of the toolbars to return (top, bottom, left, right)
     * @param {Number} arrayLoc Location in the dockedItems array, defaults to 0
     * @return {Ext.toolbar.Toolbar} The first toolbar in defined position
     */
    getToolbar: function(position, arrayLoc) {
        arrayLoc = arrayLoc || 0;
        var toolbar = this.getToolbars(position);
        if (toolbar && toolbar.length > 0) {
            if (arrayLoc > toolbar.length - 1) {
                arrayLoc = toolbar.length - 1;
            }
            return toolbar[arrayLoc];
        }
        return undefined;
    },
    /**
     * @param {String} position The location of the toolbars to return (top, bottom, left, right)
     * @return {Ext.Component[]} Array of ALL toolbars in defined position, or undefined
     */
    getToolbars: function(position) {
        return this.getDockedItems('toolbar[dock="' + position + '"]');
    },
    /**
     * @param {String} [toolbarId] The `id`, `itemId`, `reference` or `name` of the searched-for toolbar
     * @param {String} [toolbarPosition] The location of the toolbars to return (top, bottom, left, right).
     * @param {Boolean} [autoCreate=true] If cannot find missing toolbar, it will auto create one
     * @return {Ext.Component[]} First toolbar that matches.
     */
    getMatchingToolbar: function(toolbarId, toolbarPosition, autoCreate) {
        var me = this,
            toolbarQuery, tb, toolbarQueryRaw;
        // default values
        toolbarId = Ext.valueFrom(toolbarId, '');
        toolbarPosition = Ext.valueFrom(toolbarPosition, '');
        autoCreate = Ext.valueFrom(autoCreate, true);
        if (toolbarId) {
            toolbarQueryRaw = '{0}[id="{2}"]{1},{0}[reference="{2}"]{1},{0}[itemId="{2}"]{1},{0}[name="{2}"]{1}';
        } else {
            toolbarQueryRaw = '{0}{1}';
        }
        // will look like:
        //  - 'toolbar[dock="top"][itemId="someId"],...'
        //  - 'toolbar[itemId="someId"],...'
        //  - 'toolbar[dock="top"]'
        //  - 'toolbar'
        toolbarQuery = Ext.String.format(toolbarQueryRaw, 'toolbar', Ext.isDefined(toolbarPosition) ? '[dock="' + toolbarPosition + '"]' : '', toolbarId);
        // gets the first toolbar that matches toolbar query
        if (toolbarQuery) {
            tb = me.getDockedItems(toolbarQuery)[0];
        }
        // if toolbar doesn't exist, create new one at defined `toolbarPosition`
        if (!tb && autoCreate) {
            tb = me.addDocked({
                xtype: 'toolbar',
                dock: toolbarPosition || 'bottom',
                enableOverflow: true,
                items: []
            })[0];
        }
        return tb;
    }
});

/**
 *
 * This override does the following:
 *
 *   - sets the queryString properties and creates necessary getter/setter methods
 *
 *   This is particularly useful for MVC/MVVM design.
 */
Ext.define('sl.override.ViewportOverride', {
    override: 'Ext.container.Viewport',
    config: {
        queryString: '',
        corporation: '',
        division: '',
        procGroup: '',
        username: '',
        userID: '',
        uprofile: '',
        AuthToken: '',
        menuitem: ''
    },
    constructor: function(config) {
        var me = this;
        config = config || {};
        me.initQueryStringProperties(config.queryString || Ext.Object.fromQueryString(window.location.search));
        me.callParent(arguments);
    },
    initComponent: function() {
        var me = this,
            vm = me.getViewModel();
        if (vm) {
            vm.set('corporation', me.getCorporation());
            vm.set('division', me.getDivision());
            vm.set('procGroup', me.getCorporation());
            vm.set('username', me.getUsername());
            vm.set('userID', me.getUserID());
            vm.set('uprofile', me.getUprofile());
            vm.set('AuthToken', me.getAuthToken());
            vm.set('menuitem', me.getMenuitem());
        }
        me.on({
            'beforerender': function() {
                var mask = Ext.get('stewarts-splashscreen');
                if (mask) {
                    mask.destroy();
                }
            }
        });
        me.callParent();
    },
    initQueryStringProperties: function(queryString) {
        var me = this;
        me.setQueryString(queryString);
        me.setCorporation(me.corporation || queryString.ucorp);
        me.setDivision(me.division || queryString.udivision);
        me.setProcGroup(me.procGroup || queryString.uprocgroup);
        me.setUsername(me.username || queryString.uid);
        me.setUserID(me.userID || queryString.userid);
        me.setUprofile(me.uprofile || queryString.uprofile);
        me.setAuthToken(me.AuthToken || queryString.AuthToken);
        me.setMenuitem(me.menuitem || queryString.menuitem);
        // create easier-to-get-to methods
        sl.setQueryString = me.setQueryString.bind(me);
        sl.setCorporation = me.setCorporation.bind(me);
        sl.setDivision = me.setDivision.bind(me);
        sl.setProcGroup = me.setProcGroup.bind(me);
        sl.setUsername = me.setUsername.bind(me);
        sl.setUserID = me.setUserID.bind(me);
        sl.setUprofile = me.setUprofile.bind(me);
        sl.setAuthToken = me.setAuthToken.bind(me);
        sl.setMenuitem = me.setMenuitem.bind(me);
        sl.getQueryString = me.getQueryString.bind(me);
        sl.getCorporation = me.getCorporation.bind(me);
        sl.getDivision = me.getDivision.bind(me);
        sl.getProcGroup = me.getProcGroup.bind(me);
        sl.getUsername = me.getUsername.bind(me);
        sl.getUserID = me.getUserID.bind(me);
        sl.getUprofile = me.getUprofile.bind(me);
        sl.getAuthToken = me.getAuthToken.bind(me);
        sl.getMenuitem = me.getMenuitem.bind(me);
    }
});

/**
 * @class sl.field.utils.ValueToDisplayHash
 * The Hash will contain the key-value pairings that allow translation from `value` to `display`.
 *
 * This is heavily used when an editor field in a grid has a store.  The store cannot be trusted to contain
 * all value-display pairings, so the hash map stays up-to-date based on the relevant data
 * in the field's store and the grid's store.
 * The renderers will use the hashmap as a failsafe in case the store cannot properly translate a `value` to a
 *     `display`.
 */
Ext.define('sl.field.utils.ValueToDisplayHash', {
    mixins: [
        'Ext.util.StoreHolder'
    ],
    mixinId: 'valuetodisplayhash',
    requires: [
        'Ext.util.HashMap'
    ],
    /**
     * @property {Ext.util.HashMap} valueToDisplayHash
     * Hash of all of the value-display pairs in a field's store.
     * Values are from the field's store and from the grid's store (if this field is a grid editor).
     *
     * *** This is only useful for fields that have stores like combos, listcombos, and combogrids. ***
     */
    /**
     * Returns the existing hash, or creates & initializes a new one.
     * @return {Ext.util.HashMap}
     */
    getValueToDisplayHash: function() {
        var me = this;
        me.valueToDisplayHash = (Ext.isDefined(me.valueToDisplayHash) ? me.valueToDisplayHash : me.createValueToDisplayHash());
        return me.valueToDisplayHash;
    },
    /**
     * Creates the valueToDisplayHash and listens to events from the field's store and
     * the store from the grid that contains the editor field.
     * @return {Ext.util.HashMap} `valueToDisplayHash`
     */
    createValueToDisplayHash: function() {
        var me = this,
            grid;
        me.valueToDisplayHash = Ext.create('Ext.util.HashMap');
        me.configureEditorStoreBinding();
        if (me.store) {
            me.bindStore(me.store);
        }
        if (me.isGridEditor()) {
            grid = me.getParentGrid();
            grid.on({
                scope: me,
                reconfigure: me.onGridReconfigure
            });
            me.bindGridStoreListeners();
        }
        return me.valueToDisplayHash;
    },
    /**
     * @private
     * If the field already has store binding in place (combo, combogrid, & probably any other field with a store),
     * then it needs to hook onto those store binding function calls instead of replacing them.
     * This allows the required previous work to get done, in addition to valueToDisplayHash's work.
     * As a result, the hash's bind functions will be called directly after the field's bind functions are called.
     */
    configureEditorStoreBinding: function() {
        var me = this,
            getUpdatedFunctionSequence = function(existingFunc, newFunc) {
                var updatedFunc;
                if (Ext.isFunction(existingFunc)) {
                    updatedFunc = Ext.Function.createSequence(existingFunc, newFunc);
                } else {
                    updatedFunc = newFunc;
                }
                return updatedFunc;
            };
        me.bindStoreListeners = getUpdatedFunctionSequence(me.bindStoreListeners, me.bindEditorStoreListeners);
        me.unbindStoreListeners = getUpdatedFunctionSequence(me.unbindStoreListeners, me.unbindEditorStoreListeners);
        me.onBindStore = getUpdatedFunctionSequence(me.onBindStore, me.onBindEditorStore);
        me.onUnbindStore = getUpdatedFunctionSequence(me.onUnbindStore, me.onUnbindEditorStore);
    },
    getEditorStoreListeners: function(fieldStore) {
        var me = this,
            result;
        // Don't bother with listeners on the dummy store that is provided for an unconfigured field
        // prior to a real store arriving from a ViewModel. Nothing is ever going to be fired.
        if (!fieldStore.isEmptyStore) {
            result = {
                scope: me,
                priority: 100,
                'save': me.addLastSavedEditorStoreRecords,
                'datachanged': me.addEditorStoreRecords
            };
        }
        /*GWM 5/29/15: commented out so that data is not removed from hash*/
        // 'delete': me.removeDeletedEditorStoreRecords,
        return result;
    },
    getGridStoreListeners: function(gridStore) {
        var me = this,
            result;
        // Don't bother with listeners on the dummy store that is provided for an unconfigured field
        // prior to a real store arriving from a ViewModel. Nothing is ever going to be fired.
        if (!gridStore.isEmptyStore) {
            result = {
                scope: me,
                priority: 100,
                'save': me.addLastSavedGridStoreRecords,
                'datachanged': me.addGridStoreRecords
            };
        }
        /*GWM 5/29/15: commented out so that data is not removed from hash*/
        // 'delete': me.removeDeletedGridStoreRecords,
        return result;
    },
    /**
     * Update hash when the store of the grid that contains editor field changes
     */
    bindGridStoreListeners: function() {
        var me = this,
            grid = me.getParentGrid(),
            gStore = grid.getStore(),
            listeners = me.getGridStoreListeners(gStore);
        if (listeners) {
            listeners = Ext.apply({}, listeners);
            if (!listeners.scope) {
                listeners.scope = me;
            }
            me.gridStoreListeners = listeners;
            gStore.on(listeners);
            // add all existing records to the hash
            me.addGridStoreRecords();
        }
    },
    /**
     * Listen to the grid's new store's events in order to keep the hash up-to-date
     */
    onGridReconfigure: function(grid, store, columns, oldStore, oldColumns, eOpts) {
        var me = this;
        if (store && oldStore !== store) {
            me.unbindGridStoreListeners(oldStore);
            me.bindGridStoreListeners();
        }
    },
    /**
     * Stop listening to grid's previous store
     */
    unbindGridStoreListeners: function(store) {
        var listeners = this.gridStoreListeners;
        if (listeners) {
            store.un(listeners);
        }
    },
    /**
     * Update hash when the editor field's bound store changes
     */
    onBindEditorStore: function(store, initial) {
        this.addEditorStoreRecords(store);
    },
    /**
     * Directly mirrors {@link Ext.util.StoreHolder#method-unbindStoreListeners},
     * but modified to call ValueToDisplayHash's functions where necessary.
     *
     *
     * This is code is based on **ExtJS 5.1.2.748 **.
     */
    unbindEditorStoreListeners: function(store) {
        var listeners = /* CUSTOM CODE */
            this.editorStoreListeners;
        /* END CUSTOM CODE */
        if (listeners) {
            store.un(listeners);
        }
    },
    /**
     * Directly mirrors {@link Ext.util.StoreHolder#method-bindStoreListeners},
     * but modified to call ValueToDisplayHash's functions where necessary.
     * Gets the listeners to bind to a new store that is bound to the editor field.
     *
     *
     * This is code is based on **ExtJS 5.1.2.748**.
     */
    bindEditorStoreListeners: function(store) {
        var listeners = /* CUSTOM CODE */
            this.getEditorStoreListeners(store);
        /* END CUSTOM CODE */
        if (listeners) {
            listeners = Ext.apply({}, listeners);
            if (!listeners.scope) {
                listeners.scope = this;
            }
            /* CUSTOM CODE */
            this.editorStoreListeners = listeners;
            /* END CUSTOM CODE */
            store.on(listeners);
        }
    },
    onUnbindEditorStore: Ext.emptyFn,
    /**
     * Adds relevant data from each record to the hash.
     * It will replace the hash's data with the record's if there is a collision.
     * @param {Ext.data.Model[]} records
     * @param {String} valueField
     * @param {String} displayField
     */
    addRecords: function(records, valueField, displayField) {
        var me = this,
            hash = me.valueToDisplayHash;
        hash.addRecords(records, valueField, displayField);
    },
    /**
     * Adds all records from the editor field's store to the {@link #valueToDisplayHash}.
     */
    addEditorStoreRecords: function(eStore) {
        var me = this,
            hash = me.valueToDisplayHash;
        if (eStore) {
            hash.addRecords(eStore.getRecords(), me.valueField, me.displayField);
        }
    },
    /**
     * Adds all records from the store of the grid that contains editor field to the {@link #valueToDisplayHash}.
     */
    addGridStoreRecords: function() {
        var me = this,
            hash = me.valueToDisplayHash,
            gridDisplayField = me.gridDisplayField,
            dataIndex = me.getGridValueField(),
            grid = me.getParentGrid(),
            gStore = grid.getStore(),
            hasGridDisplayField = !Ext.isEmpty(gStore.model.getFieldsMap()[gridDisplayField]);
        if (hasGridDisplayField) {
            hash.addRecords(gStore.getRecords(), dataIndex, gridDisplayField);
        } else if (!hasGridDisplayField && gridDisplayField) {
            console.error('[' + me.$className + '] `gridDisplayField` is not a field in the grid store\'s model', {
                "*** gridDisplayField ***": gridDisplayField,
                "*** all fields in model ***": Ext.Object.getAllKeys(gStore.model.getFieldsMap()),
                editor: me,
                column: Ext.isFunction(me.getColumn) ? me.getColumn() : false,
                dataIndex: dataIndex,
                grid: me.getParentGrid()
            });
        }
    },
    /**
     * @private
     */
    addLastSavedEditorStoreRecords: function(eStore) {
        this.addRecords(eStore.getLastSavedRecords(), this.valueField, this.displayField);
    },
    /**
     * @private
     */
    addLastSavedGridStoreRecords: function(gStore) {
        this.addRecords(gStore.getLastSavedRecords(), this.getGridValueField(), this.gridDisplayField);
    },
    /**
     * Removes record data from the hash.
     * @param {Ext.data.Model[]} records
     * @param {String} valueField
     */
    removeRecords: function(records, valueField) {
        var me = this,
            hash = me.valueToDisplayHash;
        hash.removeRecords(records, valueField);
    },
    /**
     * @private
     */
    removeDeletedEditorStoreRecords: function(eStore) {
        this.removeRecords(eStore.getDeletedRecords(), this.valueField);
    },
    /**
     * @private
     */
    removeDeletedGridStoreRecords: function(gStore) {
        this.removeRecords(gStore.getDeletedRecords(), this.getGridValueField());
    }
});

/**
 * @class sl.panel.grid.GridEditorFunctions
 */
Ext.define('sl.panel.grid.GridEditorFunctions', {
    mixins: [
        'sl.field.utils.ValueToDisplayHash'
    ],
    /**
     * Returns the grid's editingPlugin's {@link Ext.grid.plugin.CellEditing#method-getActiveRecord activeRecord}.
     * @param {Boolean} [getPreviousIfNotFound=false] If there is no current `activeRecord`,
     * then get the previous `activeRecord`.
     * @return {Ext.data.Model} `activeRecord`
     */
    getActiveRecord: function(getPreviousIfNotFound) {
        getPreviousIfNotFound = Ext.isDefined(getPreviousIfNotFound) ? getPreviousIfNotFound : false;
        var grid = this.getParentGrid(),
            rec = false,
            ePlugin;
        if (grid) {
            ePlugin = grid.getEditingPlugin();
            if (ePlugin) {
                rec = ePlugin.getActiveRecord();
            }
            if (!rec && getPreviousIfNotFound) {
                rec = Ext.isFunction(ePlugin.getLastActiveRecord) ? ePlugin.getLastActiveRecord() : false;
            }
        }
        return rec;
    },
    /**
     * Returns the `dataIndex` for the column that contains this field as an editor
     * @return {String} `dataIndex`
     */
    getGridValueField: function() {
        var field = this,
            gridValueField, col;
        col = Ext.isFunction(field.getColumn) ? field.getColumn() : false;
        if (col) {
            gridValueField = col.dataIndex;
        }
        return gridValueField;
    },
    /**
     * Returns the column that has this field as an editor.
     * @return {Ext.grid.column.Column}
     */
    getColumn: function() {
        return this.column;
    },
    /**
     * Returns the grid that has this field as an editor for a column.
     * @return {Ext.grid.Panel} Grid or `false` if not found
     */
    getParentGrid: function() {
        var field = this,
            col = Ext.isFunction(field.getColumn) ? field.getColumn() : false,
            grid = false;
        if (col) {
            // find grid/tree
            // if the grid has a locked column, it will have nested grids, so this
            // will find the top-level grid
            grid = col.up('tablepanel[isLocked=undefined]');
        }
        return grid;
    }
});

/**
 *
 *  This override does the following:
 *
 *   - adds our custom, "Stewarts grid editor functions" when a field is in a grid
 */
Ext.define('sl.override.BaseFieldOverride', {
    override: 'Ext.form.field.Base',
    requires: [
        'sl.panel.grid.GridEditorFunctions'
    ],
    config: {
        /**
         * @cfg {Boolean} validness
         * Bindable config synced to field's validity
         */
        validness: undefined
    },
    constructor: function(config) {
        var me = this,
            ref;
        me.column = Ext.isDefined(me.column) ? me.column : (config || {}).column;
        if (me.isGridEditor()) {
            me.self.mixin('gridfunctions', sl.panel.grid.GridEditorFunctions);
            // and if necessary...
            me.mixins.gridfunctions.constructor.call(me);
            ref = config.reference || me.getReference();
            if (ref) {
                me.setReference(null);
                delete config.reference;
                console.error('[' + me.$className + '] `' + ref + '` Reference Removed from Grid Editor', {
                    "more information": 'References on Grid Editors cause problems with the scope of the Event Binding so references have been banned',
                    field: me
                });
            }
        }
        me.callParent(arguments);
    },
    /**
     * @return {Boolean} `true` if field is an editor in a grid
     */
    isGridEditor: function() {
        return Ext.isDefined(this.column);
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * Publish the value of this field. (even when not valid)
     * @inheritdoc Ext.form.field.Base#method-publishValue
     * @overrideVersion ExtJS 5.1.2.748
     */
    publishValue: function() {
        var me = this;
        /////////////////////////////////////////
        // CUSTOM CODE
        //  publish **all** values, not just `valid` ones
        //
        if (me.rendered) /* && !me.getErrors().length*/
        {
            me.publishState('value', me.getValue());
        }
    },
    //
    // END CUSTOM CODE
    /////////////////////////////////////////
    initField: function() {
        this.callParent(arguments);
        this.on('validitychange', this.onValidityChange, this);
    },
    onValidityChange: function(field, value) {
        this.setValidness(value);
    },
    setValidness: function(value) {
        var me = this,
            validness = me.validness;
        value = Ext.valueFrom(value, true);
        if (validness === undefined || validness !== value) {
            me.validness = value;
            if (me.rendered && me.reference) {
                me.publishState('validness', value);
            }
        }
        return value;
    }
});

/**
 *
 *  This override does the following:
 *
 *   - adds `beforereset` & `reset` events to form.reset()
 */
Ext.define('sl.override.BasicFormOverride', {
    override: 'Ext.form.Basic',
    /**
     * @event beforereset
     * @preventable
     * Fires before form's reset is called. Return false to cancel the reset.
     * @param {Ext.form.Basic} this
     */
    /**
     * @event reset
     * Fires when a form is reset
     * @param {Ext.form.Basic} this
     */
    /**
     * @localdoc STEWARTS OVERRIDE
     * This override adds a `beforereset` & `reset` event to the form & form panel (compared to the 5.1.0 src).
     *
     * @inheritdoc Ext.form.Basic#method-reset
     * @overrideVersion ExtJS 5.1.2.748
     */
    reset: function(resetRecord) {
        var me = this,
            formPanel = me.owner;
        if (me.fireEvent('beforereset', me) !== false && formPanel.fireEvent('beforereset', formPanel) !== false) {
            Ext.suspendLayouts();
            var fields = me.getFields().items,
                f,
                fLen = fields.length;
            for (f = 0; f < fLen; f++) {
                fields[f].reset();
            }
            Ext.resumeLayouts(true);
            if (resetRecord === true) {
                delete me._record;
            }
        }
        me.fireEvent('reset', me);
        formPanel.fireEvent('reset', formPanel);
        return me;
    }
});

/**
 *
 * This override does the following:
 *
 *   - when checkbox is a grid cell editor, it immediately informs that grid when it is clicked
 */
Ext.define('sl.override.CheckboxOverride', {
    override: 'Ext.form.field.Checkbox',
    initField: function() {
        this.callParent(arguments);
        if (this.isGridEditor()) {
            this.on('change', this.onCheckboxEditorChange, this);
        }
    },
    // when checkbox is a grid cell editor, it immediately updates its record
    // instead of waiting for checkbox editor to lose focus
    onCheckboxEditorChange: function(field, value, oldValue) {
        var grid = field.getParentGrid(),
            dataIndex = field.dataIndex || (col || {}).dataIndex,
            editorPlugin = grid ? grid.getEditingPlugin() : false,
            rec = editorPlugin ? editorPlugin.getActiveRecord() : false,
            col, rowIndex;
        if (rec && dataIndex) {
            col = field.getColumn();
            rowIndex = grid.getStore().indexOf(rec);
            if (col.fireEvent('beforecheckchange', col, rowIndex, value)) {
                rec.set(dataIndex, value);
                col.fireEvent('checkchange', col, rowIndex, value);
            } else {
                // `change` was rejected, so reset the checkbox
                field.suspendEvent('change');
                field.setValue(oldValue);
                field.resumeEvent('change');
            }
        } else {
            sl.consoleWarn('[checkbox:onCheckboxEditorChange] cannot find record or dataIndex', field);
        }
    }
});

/**
 *
 * This override does the following:
 *
 *   - added many helper functions, mostly for finding a specific column
 */
Ext.define('sl.override.TableOverride', {
    override: 'Ext.panel.Table',
    requires: [
        'Ext.util.Format'
    ],
    /**
     * @private
     * @property {Boolean} isEditable
     **/
    isEditable: false,
    /**
     * @return {Ext.grid.plugin.Editing} Grid's row or cell editing plugin
     */
    getEditingPlugin: function() {
        return this.editingPlugin;
    },
    /**
         * Validates whether the specified column is {@link Ext.grid.column.Column#cfg-isEditable isEditable} based on context.
         * @param {Ext.grid.column.Column} column
         * @param {Ext.data.Model} record
         * @return {Boolean/String} `true` if either the column is editable
         * or the column does not have a defined {@link Ext.grid.column.Column#cfg-isEditable test}.
         *
         * A string may be returned if the column is not {@link Ext.grid.column.Column#cfg-isEditable editable},
         * to indicate an error message.
         *
         * **Any non `true` value indicates the value is not {@link Ext.grid.column.Column#cfg-isEditable editable}.**
         */
    isColumnEditable: function(column, record) {
        var isColEditable = true;
        if (Ext.isDefined(column.isEditable)) {
            if (Ext.isFunction(column.isEditable)) {
                isColEditable = column.isEditable(record);
            } else if (Ext.isBoolean(column.isEditable)) {
                isColEditable = column.isEditable;
            }
        }
        return isColEditable;
    },
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// COLUMN HELPERS ////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Returns the index of the first matching leaf level header regardless of
     * what the nesting structure is.  Can optionally be configured to return first column where property exists
     *
     * @param {String} property The column property that is set to the matching value
     * @param {String} [value] The value to match
     * @param {Boolean} [onlyCareIfDefined=false] If `true`, then it will return first instance where col[property] is defined (value is ignored)
     * @return {Number} The index of the **FIRST** matching column header, or -1 if not found
     */
    getColumnIndexByProperty: function(property, value, onlyCareIfDefined) {
        var grid = this;
        onlyCareIfDefined = onlyCareIfDefined || false;
        /**
         * columns is an array of all columns which map to Store fields. This goes down to the lowest column header
         * level, and does not return **grouped** headers which contain sub headers.
         */
        var columns = grid.getColumns(),
            idx = -1;
        for (var i = 0; i < columns.length; i++) {
            var col = columns[i],
                propExists = Ext.isDefined(col[property]);
            //          "does property's value match?" OR "is property defined?"
            if (propExists && (col[property] === value || onlyCareIfDefined)) {
                idx = i;
                break;
            }
            // column is a template column, check if the template configuration uses the value in question
            else if (sl.utils.matchesComponent(col, Ext.grid.column.Template) && Ext.isDefined(col.tpl)) {
                if (Ext.isDefined(col.tpl.html)) {
                    if (-1 !== col.tpl.html.indexOf('{' + value + '}')) {
                        idx = i;
                        break;
                    }
                }
            }
        }
        return idx;
    },
    /**
     * Returns the column index dataIndex for the specified dataIndex
     * @param {String} dataIndex The data index to match
     * @return {Number} The index of the **FIRST** column that has the data index, or -1 if not found
     */
    getColumnIndexByDataIndex: function(dataIndex) {
        if (dataIndex) {
            return this.getColumnIndexByProperty("dataIndex", dataIndex);
        }
    },
    /**
     Returns the first column with the specified dataIndex
     * @param {String} dataIndex The data index to match
     * @return {Ext.grid.column.Column} **FIRST** column with dataIndex
     */
    getColumnForDataIndex: function(dataIndex) {
        var grid = this,
            columns = grid.getColumns(),
            colIndex = grid.getColumnIndexByDataIndex(dataIndex);
        return columns[colIndex];
    },
    /**
     * Returns the index of a leaf-level header regardless of what the nesting
     * structure is.
     *
     * If a group header is passed, the index of the first leaf level header within it is returned.
     *
     * @param {Ext.grid.column.Column} column The Column to find the index of
     * @return {Number} The index of the specified column header
     */
    getColumnIndex: function(column) {
        var grid = this,
            view = grid.getView(),
            colIndex = -1;
        if (column) {
            if (view.isLockingView) {
                view = view.getViewForColumn(column);
            }
            colIndex = view.getHeaderCt().getHeaderIndex(column);
        } else {
            sl.consoleWarn('[' + grid.$className + ':getColumnIndex] Required param `column` is missing.');
        }
        return colIndex;
    },
    /**
     * Example:
     *
     *     colArr = grid.getColumnsBy(function(c) {
     *         // if costCategory does equal "supplier", then this column will be in colArr
     *         return c.costCategory === 'supplier';
     *     });
     * @param {Function} fn A function which, when passed a {@link Ext.grid.Column Column} object, must
     * return `true` if the column is to be included in the returned Array.
     * @param {Object} [scope] The scope (<code>this</code> reference) in which the function
     * is executed. Defaults to this ColumnModel.
     * @return {Array} result
     */
    getColumnsBy: function(fn, scope) {
        var grid = this,
            columns = grid.getColumns(),
            length = columns.length,
            result = [],
            i, c;
        for (i = 0; i < length; i++) {
            c = columns[i];
            if (fn.call(scope || grid, c, i) === true) {
                result[result.length] = c;
            }
        }
        return result;
    },
    /**
     * Returns array of the grid's columns in the same order as they are displayed in grid
     *
     * If columns look like: A | B | C | D
     *
     * and are re-sorted to: B | C | A | D (hidden)
     *
     * It will return this:[ B,  C,  A,  D]
     *
     * Or, if only visible:[ B,  C,  A]
     * @param {Boolean} [onlyVisible=false] If `true`, will only return include visible columns
     * @param {Boolean} [returnGroups=false] If `true`, will include grouped parent columns in returned array
     * @return {Array} array of columns in grid
     */
    getColumns: function(onlyVisible, returnGroups) {
        onlyVisible = onlyVisible || false;
        returnGroups = returnGroups || false;
        var grid = this,
            columns = [],
            filterForVisible = function(colArr) {
                return colArr.filter(function(col) {
                    return !col.hidden;
                });
            },
            getColumnsFromGrid = function(onlyVisible) {
                var tempColArr = [];
                if (Ext.isArray(grid.columns)) {
                    tempColArr = Ext.Array.clone(grid.columns);
                } else if (Ext.isObject(grid.columns)) {
                    if (Ext.isArray(grid.columns.items)) {
                        tempColArr = Ext.Array.clone(grid.columns.items);
                    }
                }
                if (onlyVisible) {
                    tempColArr = filterForVisible(tempColArr);
                }
                return tempColArr;
            },
            // returns lowest-level columns (nested & not-in-group) only; all header columns are excluded
            removeGroupedHeader = function(colArr) {
                var tempColumnsNoGroups = Ext.Array.clone(colArr);
                // this will convert grouped columns into individual columns and remove the grouped parent column
                Ext.Array.forEach(colArr, function(col, index, array) {
                    // check if the column is a grouped parent column
                    if (col.columns || col.isGroupHeader) {
                        Ext.Array.forEach(col.columns, function(childCol, index, array) {
                            // set property to true (will also be set when the column is actually instantiated)
                            childCol.headerCol = col;
                        });
                        // add all child columns under grouped parent column
                        Ext.Array.insert(tempColumnsNoGroups, index, col.columns);
                        // remove the grouped parent column
                        Ext.Array.remove(tempColumnsNoGroups, col);
                    }
                });
                return tempColumnsNoGroups;
            },
            // returns only top-level columns; all nested columns are excluded
            convertToGroupedColumns = function(colArr) {
                var topLevelColumns = [];
                colArr.forEach(function(col) {
                    var colToAdd = (col.headerCol ? col.headerCol : col);
                    // `colToAdd` is not  in the `topLevelColumns` so add it
                    if (topLevelColumns.indexOf(colToAdd) < 0) {
                        topLevelColumns.push(colToAdd);
                    }
                });
                topLevelColumns = Ext.Array.unique(topLevelColumns);
                return topLevelColumns;
            };
        // columns have been officially created by the grid
        if (grid.headerCt) {
            columns = onlyVisible ? grid.headerCt.getVisibleGridColumns() : grid.headerCt.getGridColumns();
            if (returnGroups) {
                columns = convertToGroupedColumns(columns);
            }
        } else // columns haven't been instantiated and are still raw config objects
        {
            columns = getColumnsFromGrid(onlyVisible);
            if (!returnGroups) {
                columns = removeGroupedHeader(columns);
            }
        }
        return columns;
    },
    getColumnsToSearch: function(dontReturnEmpty) {
        dontReturnEmpty = Ext.isDefined(dontReturnEmpty) ? dontReturnEmpty : false;
        var allCols = this.getColumns(false, false),
            searchCols = allCols.filter(function(col) {
                return col.search;
            });
        if (dontReturnEmpty && searchCols.length === 0) {
            searchCols = allCols;
        }
        return searchCols;
    },
    /**
     * @param {Number} idx The column's numeric index
     * @return {Ext.grid.Column} Column at the provided index
     */
    getColumnAt: function(idx) {
        var grid = this,
            columns = grid.getColumns(false, false);
        return columns[idx];
    },
    /**
     * Retrieves the index of the next editing field/editor
     * Returns false if there are no editors after the starting location
     * @param {Ext.grid.column.Column/Number} start Index/column where search will start searching (inclusive, if the next editor is column #3 and start=3, it will return column #3).
     * @return {Number} Index of next column with an editor
     */
    getIndexOfNextEditor: function(start) {
        var grid = this,
            editorColumn = grid.getNextColumnWithEditor(start),
            colIndex = grid.getColumnIndex(editorColumn);
        return Ext.isDefined(colIndex) ? colIndex : -1;
    },
    /**
     * Retrieves the next editing field.
     * Note: start must be BEFORE stop
     * @param {Ext.grid.column.Column/Number} start Index/column where search will start searching (inclusive, if the next editor is column #3 and start=3, it will return column #3).
     * @param {Ext.grid.column.Column/Number} stop Index/column where search will stop searching (inclusive, if the next editor is column #6 and stop=6, it will return column #6; if stop=5, it returns false)
     * @return {Ext.grid.column.Column} Returns the next editor column
     */
    getNextColumnWithEditor: function(start, stop) {
        var grid = this,
            returnCol,
            columns = Ext.Array.from(grid.getColumns()),
            startIndex, stopIndex, col, editor;
        start = Ext.isNumeric(start) ? start : 0;
        stop = Ext.isNumeric(stop) ? stop : columns.length - 1;
        startIndex = Ext.isNumber(start) ? start : grid.getColumnIndex(start);
        stopIndex = Ext.isNumber(stop) ? stop : grid.getColumnIndex(stop);
        for (var i = startIndex; i <= stopIndex; i++) {
            col = columns[i];
            editor = col.getColumnEditor();
            if (editor) {
                returnCol = col;
                break;
            }
        }
        return returnCol;
    },
    /**
     * Retrieves the previous editing field.
     * Note: start must be AFTER stop
     * @param {Ext.grid.column.Column/Number} start Index/column where search will start searching (inclusive, if the previous editor is column #3 and start=3, it will return column #3)
     * @param {Ext.grid.column.Column/Number} stop Index/column where search will stop searching (inclusive, if the previous editor is column #6 and stop=6, it will return column #6; if stop=5, it returns false)
     * @return {Ext.grid.column.Column} Returns the previous editor column
     */
    getPreviousColumnWithEditor: function(start, stop) {
        var grid = this,
            returnCol,
            columns = Ext.Array.from(grid.getColumns());
        start = start || columns.length - 1;
        stop = stop || 0;
        var startIndex = Ext.isNumber(start) ? start : grid.getColumnIndex(start),
            stopIndex = Ext.isNumber(stop) ? stop : grid.getColumnIndex(stop);
        for (var i = startIndex; i >= stopIndex; i--) {
            var col = columns[i],
                editor = col.getColumnEditor();
            if (editor) {
                returnCol = col;
                break;
            }
        }
        return returnCol;
    },
    /**
     * Gets each column's editor field (textfield, combo, gridsearchfield, etc)
     * @return {Array} column editors
     */
    getEditors: function() {
        var grid = this,
            columns = Ext.Array.from(grid.getColumns()),
            editors = [];
        Ext.Array.forEach(columns, function(col, index, array) {
            var editor = col.getColumnEditor();
            if (editor) {
                editors.push(editor);
            }
        });
        return editors;
    },
    /**
     * Builds an array of data indexes for all of the grid's columns, including columns in grouped headers
     * The array will be in the same order as the columns, so [0] is the first column's dataIndex, [1] is the second, etc.
     * @return {Array} Array of data indexes for all of grid's columns
     */
    getDataIndexes: function() {
        var grid = this,
            columns = grid.getColumns(),
            dataIndexesArr = [];
        Ext.Array.forEach(columns, function(col) {
            if (col.isGroupHeader) {
                Ext.Array.forEach(col.items.items, function(subcolumn) {
                    dataIndexesArr.push(subcolumn.dataIndex);
                });
            } else {
                dataIndexesArr.push(col.dataIndex);
            }
        });
        return dataIndexesArr;
    },
    /**
     * @return {Number} Returns the grid store's index of the selected row (the row number and store index are the same)
     */
    getIndexForSelectedRow: function() {
        var grid = this,
            idx = -1,
            selRec = Ext.isEmpty(grid) ? "" : grid.selModel.getSelection();
        if (!Ext.isEmpty(selRec)) {
            idx = grid.getIndexForRecord(selRec[0]);
        }
        return idx;
    },
    /**
     * @param {Ext.data.Model} record
     * @return {Number} Returns the grid store's index of record
     */
    getIndexForRecord: function(record) {
        var grid = this;
        return grid.getStore().indexOf(record);
    },
    /**
     * Returns the requested property of the selected row's record
     * @param {String} [prop="ID"] The property to be returned
     * @return {String} Returns the value of the requested property for the selected row
     **/
    getPropertyForSelectedRow: function(prop) {
        prop = prop || "ID";
        var grid = this,
            val = "",
            idx = grid.getIndexForSelectedRow();
        if (idx !== -1) {
            var rec = grid.getStore().getAt(idx);
            if (Ext.isFunction(rec.get)) {
                val = rec.get(prop);
            } else if (Ext.isDefined(rec.data)) {
                val = rec.data[prop];
            } else {
                val = rec[prop];
            }
        }
        return val;
    },
    /**
     * Sets the editable state of passed columns' editors.
     * @param {boolean} isEditable              Whether a column's editor will be editable or not
     * @param {Array} [columns] (Optional: Defaults to all columns in grid) Array of columns to be changed.
     */
    setColumnsAsEditable: function(isEditable, columns) {
        var grid = this;
        columns = columns || grid.getColumns();
        Ext.Msg.alert('column.setEditable functionality hasn\'t been included yet...');
        Ext.Array.forEach(columns, function(col, index, array) {
            var editor = col.getColumnEditor();
            if (editor) {
                console.error('column.setEditable functionality hasn\'t been included yet...');
            }
        });
    },
    // grid.getColumnModel().setEditable(colIndex, isEditable);
    /**
     * Sets the visible state of passed columns
     * @param {Boolean} [isVisible=false] Whether a column will be visible or not
     * @param {Array} [columns=grid.getColumns()] Columns to change visible state of
     */
    setColumnsAsVisible: function(isVisible, columns) {
        var grid = this;
        columns = columns || grid.getColumns();
        Ext.Array.forEach(columns, function(col, index, array) {
            col.setVisible(isVisible);
        });
    },
    /**
     * Gets the rendered text for a specific cell.
     *
     * ***If cell is not rendered (like with buffered renderer), it will not work.***
     *
     * ***{@link #method-getTextInCell}*** is the more powerful and more capable option,
     * especially for buffered renderers.
     * @private
     * @param {Ext.grid.column.Column} column
     * @param {Number} rowIndex
     * @return {String} rendered text, or `false` if cell not rendered (buffered or doesn't exist)
     */
    getRenderedTextInCell: function(column, rowIndex) {
        var grid = this,
            colIndex = grid.getColumnIndex(column),
            position = {
                row: rowIndex,
                column: colIndex
            },
            view = grid.getView(),
            text = false,
            cell;
        if (view.isLockingView) {
            view = view.getViewForColumn(column);
        }
        cell = view.getCellByPosition(position);
        if (cell) {
            text = Ext.util.Format.stripTags(Ext.util.Format.htmlDecode(cell.getHtml()));
            text = text.replace(/&nbsp;/g, " ");
        }
        return text;
    },
    /**
     * Gets the cell's text, exactly how it would look if there are renderers.
     *
     * If the cell has not been rendered (bufferedrenderer), then it will compute it just like Ext.view.Table#renderCell would have
     * @param {String/Number/Ext.grid.column.Column} column If `string`, must be the dataIndex
     * @param {Number/Ext.data.Model} record
     * @return {String} rendered text
     */
    getTextInCell: function(column, record) {
        var grid = this,
            view = grid.getView(),
            store = grid.getStore(),
            columnIndex, rowIndex,
            cellValues = Ext.apply({}, view.cellValues),
            fieldValue, fullIndex, value, tempValue, dataIndex;
        if (Ext.isString(column)) {
            dataIndex = column;
            column = grid.getColumnIndexByDataIndex(dataIndex);
        }
        if (Ext.isNumeric(column)) {
            columnIndex = column;
            column = grid.getColumnAt(columnIndex);
        }
        if (Ext.isEmpty(columnIndex)) {
            columnIndex = grid.getColumnIndex(column);
        }
        if (Ext.isNumeric(record)) {
            rowIndex = record;
            record = store.getAt(record);
        }
        if (Ext.isEmpty(rowIndex)) {
            rowIndex = store.indexOf(record);
        }
        cellValues.record = record;
        cellValues.column = column;
        cellValues.recordIndex = rowIndex;
        cellValues.rowIndex = rowIndex;
        cellValues.columnIndex = columnIndex;
        cellValues.cellIndex = columnIndex;
        cellValues.align = column.align;
        cellValues.tdCls = column.tdCls;
        cellValues.innerCls = column.innerCls;
        cellValues.tdCls = cellValues.tdStyle = cellValues.tdAttr = cellValues.style = "";
        cellValues.style = cellValues.tdAttr = "";
        cellValues.unselectableAttr = view.enableTextSelection ? '' : 'unselectable="on"';
        dataIndex = dataIndex || (column || {}).dataIndex || '';
        fieldValue = record.data[dataIndex];
        if (Ext.isFunction(column.isRecordChecked)) {
            value = column.isRecordChecked(record);
        } else {
            tempValue = grid.getRenderedTextInCell(column, rowIndex);
            if (tempValue !== false) {
                value = tempValue;
            } else if (column.renderer && column.renderer.call) {
                fullIndex = view.ownerCt.columnManager.getHeaderIndex(column);
                value = column.renderer.call(column.usingDefaultRenderer ? column : column.scope || view.ownerCt, fieldValue, cellValues, record, rowIndex, fullIndex, view.dataSource, view);
                if (cellValues.css) {
                    record.cssWarning = true;
                    cellValues.tdCls += ' ' + cellValues.css;
                    cellValues.css = null;
                }
                value = Ext.util.Format.stripTags(value);
            } else {
                value = fieldValue;
            }
            value = (value == null || value === '') ? column.emptyCellText : value;
        }
        return value;
    },
    findFeature: function(ftype) {
        var view = this.getView();
        return Ext.isFunction(view.findFeature) ? view.findFeature(ftype) : null;
    },
    /**
     * Reloads the grid's store.  Useful for handling a grid's refresh button's click.
     * It will re-select the records that were previously selected before refreshing.
     * @param {Object} newParams New parameters to use to reload a store
     * @param {Function/String} callbackFn callback The callback function to execute (or the name of) after reload
     */
    refreshGridData: function(newParams, callbackFn) {
        var grid = this,
            selModel = grid.getSelectionModel(),
            selRecs = selModel.getSelection(),
            store = grid.getStore(),
            reloadOptions = {};
        if (newParams && !Ext.Object.isEmpty(newParams)) {
            reloadOptions.params = newParams;
        }
        store.reload(Ext.apply({
            callback: function() {
                if (selModel.getSelection().length === 0 && selRecs.length > 0) {
                    selRecs = store.findNewInstanceOfRecords(selRecs);
                    selModel.select(selRecs);
                }
                if (callbackFn) {
                    Ext.callback(callbackFn, // fn
                    grid);
                }
            }
        }, // scope
        reloadOptions));
    },
    /**
     * Returns `true` if the passed in column is the first visible column in the grid.
     * This is especially useful for rendering "dragging dots" when grid is drag-and-drop.
     * @param {Ext.grid.column.Column} column The Column to test
     * @return {Boolean} `true` if the passed in column is the first visible one
     */
    isFirstVisibleColumn: function(column) {
        var grid = this,
            columns = grid.getColumns(true, false).filter(function(c) {
                // remove checkbox column
                return !Ext.isDefined(c.isCheckerHd);
            });
        return columns.indexOf(column) === 0;
    },
    /**
     * Scrolls to the provided record. Handles grid with and without the bufferedrenderer plugin.
     * @param {Ext.data.Model} record
     * @param {Function} [callback] A function to call when the row has been scrolled to.
     * @param {Number} callback.recordIdx The resulting record index (may have changed if the passed index was outside the valid range).
     * @param {Ext.data.Model} callback.record The resulting record from the store.
     */
    scrollToRecord: function(record, callback, eOpts) {
        eOpts = Ext.apply({}, eOpts);
        var grid = this,
            view = grid.getView(),
            scope = eOpts.scope,
            recordIdx;
        if (view.isLockingView) {
            // point to nested view, because the limited LockingView does not have required functions
            view = view.normalView;
        }
        if (view.bufferedRenderer) {
            view.bufferedRenderer.scrollTo(record, {
                callback: callback
            });
        } else {
            view.scrollRowIntoView(record);
            if (callback) {
                recordIdx = grid.getStore().indexOf(record);
                callback.call(scope || grid, recordIdx, record);
            }
        }
    }
}, function(Table) {
    var proto = Table.prototype;
    /**
         * Buffered call to {@link #scrollToRecord} to better handle multiple UI updates
         * @method
         * @member sl.override.TableOverride
         */
    proto.bufferedScollToRecord = Table.bufferedScollToRecord = Ext.Function.createBuffered(proto.scrollToRecord, 100);
});

/**
 *
 * This override does the following:
 *
 *   - added a `clear sort` option to grid column's menu
 */
Ext.define('sl.override.HeaderContainerOverride', {
    override: 'Ext.grid.header.Container',
    requires: [
        'Ext.menu.CheckItem',
        'Ext.menu.Separator',
        'Ext.util.Format'
    ],
    sortClearText: 'Clear Sort',
    menuSortClearCls: Ext.baseCSSPrefix + 'hmenu-sort-clear',
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.grid.header.Container#method-getMenuItems
     * @overrideVersion ExtJS 5.1.2.748
     */
    getMenuItems: function() {
        var me = this,
            menuItems = [],
            hideableColumns = me.enableColumnHide ? me.getColumnMenu(me) : null;
        if (me.sortable) {
            menuItems = [
                {
                    itemId: 'ascItem',
                    text: me.sortAscText,
                    iconCls: me.menuSortAscCls,
                    handler: me.onSortAscClick,
                    scope: me
                },
                {
                    itemId: 'descItem',
                    text: me.sortDescText,
                    iconCls: me.menuSortDescCls,
                    handler: me.onSortDescClick,
                    scope: me
                },
                /////////////////////////////////////////
                // CUSTOM CODE
                //  Added "Remove Sort" option
                //
                {
                    itemId: 'clearItem',
                    text: me.sortClearText,
                    iconCls: me.menuSortClearCls,
                    handler: me.onSortClearClick,
                    scope: me
                }
            ];
        }
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        if (hideableColumns && hideableColumns.length) {
            if (me.sortable) {
                menuItems.push({
                    itemId: 'columnItemSeparator',
                    xtype: 'menuseparator'
                });
            }
            menuItems.push({
                itemId: 'columnItem',
                text: me.columnsText,
                iconCls: me.menuColsIcon,
                menu: hideableColumns,
                hideOnClick: false
            });
        }
        return menuItems;
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.grid.header.Container#method-getColumnMenu
     * @overrideVersion ExtJS 5.1.2.748
     */
    getColumnMenu: function(headerContainer) {
        var menuItems = [],
            i = 0,
            item,
            items = headerContainer.query('>gridcolumn[hideable]'),
            itemsLn = items.length,
            menuItem;
        for (; i < itemsLn; i++) {
            item = items[i];
            menuItem = new Ext.menu.CheckItem({
                /////////////////////////////////////////
                // CUSTOM CODE
                //  Removes any formatting (<br/> & other HTML tags) from the column's header text
                //
                text: (item.menuText || item.text || '').replace(Ext.util.Format.stripTagsRe, ' '),
                //
                // END CUSTOM CODE
                /////////////////////////////////////////
                checked: !item.hidden,
                hideOnClick: false,
                headerId: item.id,
                menu: item.isGroupHeader ? this.getColumnMenu(item) : undefined,
                checkHandler: this.onColumnCheckChange,
                scope: this
            });
            menuItems.push(menuItem);
        }
        // Prevent creating a submenu if we have no items
        return menuItems.length ? menuItems : null;
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.grid.header.Container#method-showMenuBy
     * @overrideVersion ExtJS 5.1.2.748
     */
    showMenuBy: function(clickEvent, t, header) {
        var menu = this.getMenu(),
            ascItem = menu.down('#ascItem'),
            descItem = menu.down('#descItem'),
            sortableMth,
            /////////////////////////////////////////
            // CUSTOM CODE
            //
            clearItem = menu.down('#clearItem');
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        // Use ownerCmp as the upward link. Menus *must have no ownerCt* - they are global floaters.
        // Upward navigation is done using the up() method.
        menu.activeHeader = menu.ownerCmp = header;
        header.setMenuActive(menu);
        // enable or disable asc & desc menu items based on header being sortable
        sortableMth = header.sortable ? 'enable' : 'disable';
        if (ascItem) {
            ascItem[sortableMth]();
        }
        if (descItem) {
            descItem[sortableMth]();
        }
        /////////////////////////////////////////
        // CUSTOM CODE
        //  `clearSort` button enabled/disabled just like asc/desc sort buttons
        //
        if (clearItem) {
            clearItem[sortableMth]();
        }
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        // Pointer-invoked menus do not auto focus, key invoked ones do.
        menu.autoFocus = !clickEvent || !clickEvent.pointerType;
        menu.showBy(t, 'tl-bl?');
        // Menu show was vetoed by event handler - clear context
        if (!menu.isVisible()) {
            this.onMenuHide(menu);
        }
    },
    /**
     * Remove sort when clicking on item in menu
     */
    onSortClearClick: function() {
        var menu = this.getMenu(),
            activeHeader = menu.activeHeader,
            store = activeHeader.up('tablepanel[isLocked=undefined]').store;
        if (!activeHeader.isGroupHeader) {
            store.getSorters().remove(activeHeader.getSortParam());
            // will refresh the grid's view and get rid of ASC/DESC icon on grid header
            store.fireEvent('refresh', store);
        }
    }
});

/**
 *
 * This override does the following:
 *
 *   - fixes the column's applied state if it is hidden
 */
Ext.define('sl.override.ColumnOverride', {
    override: 'Ext.grid.column.Column',
    /**
     * @cfg {String} excelHeader
     * The header text to be used in an Excel export
     */
    /**
     * @cfg {String} excelDataIndex
     * Alternate field name in the grid's {@link Ext.data.Store}'s {@link Ext.data.Model} definition in an Excel export
     *
     * Useful for remote Excel exports
     */
    /**
     * @cfg {Function/Boolean} isEditable If evaluates to `false`, {@link sl.panel.grid.DisplayGrid}'s renderer will not show `editable` cursor.
     *
     * It can be helpful to use this with the Editing Plugin's {@link Ext.grid.plugin.Editing#event-beforeedit} event.
     * @return {Boolean/String} `true` if the column is editable.
     *
     * A string may be returned if the column is not editable to indicate an error message.
     *
     * **Any non `true` value indicates the value is not editable.**
     */
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.grid.column.Column#method-applyColumnState
     * @overrideVersion ExtJS 5.1.2.748
     */
    applyColumnState: function(state) {
        var me = this;
        // apply any columns
        me.applyColumnsState(state.columns);
        // Only state properties which were saved should be restored.
        // (Only user-changed properties were saved by getState)
        if (state.hidden != null) {
            /////////////////////////////////////////
            // CUSTOM CODE
            //  default configuration did not properly show/hide columns (ExtJS 5.1.0)
            //
            if (state.hidden) {
                me.hide();
            } else {
                me.show();
            }
        }
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        if (state.locked != null) {
            me.locked = state.locked;
        }
        if (state.sortable != null) {
            me.sortable = state.sortable;
        }
        if (state.width != null) {
            me.flex = null;
            me.width = state.width;
        } else if (state.flex != null) {
            me.width = null;
            me.flex = state.flex;
        }
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * Use the column editor's display field to sort instead of the internal numerical ID
     * @inheritdoc Ext.grid.column.Column#method-getSortParam
     * @overrideVersion ExtJS 5.1.2.748
     */
    getSortParam: function() {
        var sortParam = this.dataIndex,
            ed = this.getColumnEditor();
        if (ed) {
            sortParam = ed.gridDisplayField || ed.gridValueField || sortParam;
        }
        return sortParam;
    },
    /**
     * Returns the editor field for a column
     * @return {Object} The column's editor field
     */
    getColumnEditor: function() {
        var col = this;
        return (Ext.isFunction(col.getEditor) ? col.getEditor() : (col.editor || col.field));
    }
});

/**
 *
 * This override does the following:
 *
 *   - checkcolumn `check` will not be changed when in a non-editable grid (no editingPlugin),
 *
 *     The column is configured as `readOnly`, or when the column's {@link #cfg-isEditable} evaluates to `false`.
 */
Ext.define('sl.override.CheckColumnOverride', {
    override: 'Ext.grid.column.Check',
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.grid.column.Check#method-processEvent
     * @overrideVersion ExtJS 5.1.2.748
     * Block checkcolumn `check` if not in an editor grid or cell configured is not editable
     */
    processEvent: function(type, view, cell, recordIndex, cellIndex, e, record, row) {
        var me = this,
            key = type === 'keydown' && e.getKey(),
            mousedown = type === 'mousedown',
            disabled = me.disabled,
            ret, checked;
        /////////////////////////////////////////
        // CUSTOM CODE
        //  determining if the checkcolumn can be editted by a user
        //
        var grid = view.ownerGrid || me.up('tablepanel'),
            isGridEditable = grid ? Ext.isDefined(grid.getEditingPlugin()) : false,
            isEditable = isGridEditable ? me.readOnly || grid.isColumnEditable(me, record) : false;
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        // Flag event to tell SelectionModel not to process it.
        e.stopSelection = !key && me.stopSelection;
        if (!disabled && /*CUSTOM CODE */
        isEditable && /* END CUSTOM CODE */
        (mousedown || (key === e.ENTER || key === e.SPACE))) {
            checked = !me.isRecordChecked(record);
            // Allow apps to hook beforecheckchange
            if (me.fireEvent('beforecheckchange', me, recordIndex, checked) !== false) {
                me.setRecordCheck(record, checked, cell, row, e);
                me.fireEvent('checkchange', me, recordIndex, checked);
            }
        } else {
            /////////////////////////////////////////
            // CUSTOM CODE
            //  call checkcolumn's parent by using `callSuper`;
            //  original code would have called checkcolumn's ExtJS `processEvent`,
            //  thus ignoring work from above code
            //
            ret = me.callSuper(arguments);
        }
        // ret = me.callParent(arguments);
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        return ret;
    }
});

/**
 *
 *  This override does the following:
 *
 *   - correctly update record when there is a custom `gridDisplayField`
 */
Ext.define('sl.override.CellEditingOverride', {
    override: 'Ext.grid.plugin.CellEditing',
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.grid.plugin.CellEditing#method-onEditComplete
     * @overrideVersion ExtJS 5.1.2.748
     */
    onEditComplete: function(ed, value, startValue) {
        var me = this,
            activeColumn = me.getActiveColumn(),
            activeEd = me.getActiveEditor(),
            context = me.context,
            view, record, sm, preserveCurrentSelection;
        if (activeEd) {
            view = context.view;
            record = context.record;
            me.setActiveEditor(null);
            me.setActiveColumn(null);
            me.setActiveRecord(null);
            context.value = value;
            if (!me.validateEdit()) {
                me.editing = false;
                return;
            }
            // Restore focus back to the view only if we are focused (eg, pressed ENTER, not tabbed or clicked out).
            // In IE and Edge, hiding the editor will throw focus back to the view so we can't check
            // if it is focused after hiding. See CellEditor.onHide().
            if (activeEd.el.contains(Ext.Element.getActiveElement()) || activeEd.currentlyFocused) {
                sm = view.getSelectionModel();
                preserveCurrentSelection = sm.getSelectionMode() === 'MULTI' && (sm.getSelection().length > 1 || !sm.isSelected(record));
                view.getNavigationModel().setPosition(context, null, null, null, preserveCurrentSelection);
                activeEd.currentlyFocused = null;
            }
            /////////////////////////////////////////
            // CUSTOM CODE
            //  If an editor has a `gridDisplayField`, it will update the record's matching field
            //
            // Only update the record if the new value is different than the
            // startValue. When the view refreshes its el will gain focus
            if (!sl.utils.areValuesEquivalent(value, startValue)) {
                // uses Utils code instead so that `null` and "" are considered equals
                //
                // END CUSTOM CODE
                /////////////////////////////////////////
                record.set(activeColumn.dataIndex, value);
                // Changing the record may impact the position
                context.rowIdx = view.indexOf(record);
                /////////////////////////////////////////
                // CUSTOM CODE
                //
                var field = ed.field,
                    fieldRecord;
                if (field.gridDisplayField) {
                    if (Ext.isFunction(field.findRecordByValue)) {
                        fieldRecord = field.findRecordByValue(value);
                    } else {
                        console.error('[' + me.$className + '] Not Configured Yet to Update Grid Record with Field\'s Raw Value', {
                            editingPlugin: me,
                            field: field,
                            context: context
                        });
                    }
                    if (fieldRecord) {
                        record.set(field.gridDisplayField, fieldRecord.get(field.displayField));
                    }
                }
            }
            //
            // END CUSTOM CODE
            /////////////////////////////////////////
            me.fireEvent('edit', me, context);
            me.editing = false;
        }
    },
    setLastActiveEditor: function(ed) {
        this.lastActiveEditor = ed;
        if (this.lockingPartner) {
            this.lockingPartner.lastActiveEditor = ed;
        }
    },
    getLastActiveEditor: function() {
        return this.lastActiveEditor;
    },
    setLastActiveColumn: function(column) {
        this.lastActiveColumn = column;
        if (this.lockingPartner) {
            this.lockingPartner.lastActiveColumn = column;
        }
    },
    getLastActiveColumn: function() {
        return this.lastActiveColumn;
    },
    setLastActiveRecord: function(record) {
        this.lastActiveRecord = record;
        if (this.lockingPartner) {
            this.lockingPartner.lastActiveRecord = record;
        }
    },
    getLastActiveRecord: function() {
        return this.lastActiveRecord;
    }
});

/**
 *
 * This override does the following:
 *
 *   - allows grid's `moveEditorOnEnter` to work with RowModel Editors
 */
Ext.define('sl.override.RowModelOverride', {
    override: 'Ext.selection.RowModel',
    // used to move editor to different row (up/down) allowing for `moveEditorOnEnter` to exist
    // editObj is different depending on if we are cell or row editing
    // when cell editing it is the editingPlugin
    // when row editing it is the currently active editor
    onKeyEnter: function(editingPlugin, e) {
        var me = this,
            direction = e.shiftKey ? 'up' : 'down',
            pos = editingPlugin.context,
            position = pos.view.walkCells(pos, direction, e, me.preventWrap),
            moveEditorOnEnter = Ext.valueFrom((editingPlugin.grid || {}).moveEditorOnEnter, true);
        // Navigation had somewhere to go.... not hit the buffers.
        if (position && moveEditorOnEnter) {
            // If we were able to begin editing clear the wasEditing flag. It gets set during navigation off an active edit.
            if (editingPlugin.startEdit(position.record, position.column)) {
                me.wasEditing = false;
            } else // If we could not continue editing...
            // bring the cell into view.
            // Set a flag that we should go back into editing mode upon next onKeyTab call
            {
                position.view.getNavigationModel().setPosition(position, null, e);
                me.wasEditing = true;
            }
        }
    }
});

/**
 *
 *  This override does the following:
 *
 *   - allows grid's `moveEditorOnEnter` to work with RowModel Editors
 */
Ext.define('sl.override.CellModelOverride', {
    override: 'Ext.selection.CellModel',
    // use to move editor to different row (up/down) allowing for `moveEditorOnEnter` to exist
    // editObj is different depending on if we are cell or row editing
    // when cell editing it is the editingPlugin
    // when row editing it is the currently active editor
    onKeyEnter: function(editingPlugin, e) {
        var me = this,
            direction = e.shiftKey ? 'up' : 'down',
            pos = editingPlugin.context,
            position = pos.view.walkCells(pos, direction, e, me.preventWrap),
            moveEditorOnEnter = Ext.valueFrom((editingPlugin.grid || {}).moveEditorOnEnter, true);
        // Navigation had somewhere to go.... not hit the buffers.
        if (position && moveEditorOnEnter) {
            // If we were able to begin editing, then clear the wasEditing flag.
            // It gets set during navigation off an active edit.
            if (editingPlugin.startEdit(position.record, position.column)) {
                me.wasEditing = false;
            } else // If we could not continue editing...
            // bring the cell into view.
            // Set a flag that we should go back into editing mode upon next onKeyTab call
            {
                position.view.getNavigationModel().setPosition(position, null, e);
                me.wasEditing = true;
            }
        }
    }
});

/**
 * Base class from Ext.ux.TabReorderer.
 */
Ext.define('Ext.ux.BoxReorderer', {
    requires: [
        'Ext.dd.DD'
    ],
    mixins: {
        observable: 'Ext.util.Observable'
    },
    /**
     * @cfg {String} itemSelector
     * A {@link Ext.DomQuery DomQuery} selector which identifies the encapsulating elements of child
     * Components which participate in reordering.
     */
    itemSelector: '.x-box-item',
    /**
     * @cfg {Mixed} animate
     * If truthy, child reordering is animated so that moved boxes slide smoothly into position.
     * If this option is numeric, it is used as the animation duration in milliseconds.
     */
    animate: 100,
    /**
     * @event StartDrag
     * Fires when dragging of a child Component begins.
     * @param {Ext.ux.BoxReorderer} this
     * @param {Ext.container.Container} container The owning Container
     * @param {Ext.Component} dragCmp The Component being dragged
     * @param {Number} idx The start index of the Component being dragged.
     */
    /**
     * @event Drag
     * Fires during dragging of a child Component.
     * @param {Ext.ux.BoxReorderer} this
     * @param {Ext.container.Container} container The owning Container
     * @param {Ext.Component} dragCmp The Component being dragged
     * @param {Number} startIdx The index position from which the Component was initially dragged.
     * @param {Number} idx The current closest index to which the Component would drop.
     */
    /**
     * @event ChangeIndex
     * Fires when dragging of a child Component causes its drop index to change.
     * @param {Ext.ux.BoxReorderer} this
     * @param {Ext.container.Container} container The owning Container
     * @param {Ext.Component} dragCmp The Component being dragged
     * @param {Number} startIdx The index position from which the Component was initially dragged.
     * @param {Number} idx The current closest index to which the Component would drop.
     */
    /**
     * @event Drop
     * Fires when a child Component is dropped at a new index position.
     * @param {Ext.ux.BoxReorderer} this
     * @param {Ext.container.Container} container The owning Container
     * @param {Ext.Component} dragCmp The Component being dropped
     * @param {Number} startIdx The index position from which the Component was initially dragged.
     * @param {Number} idx The index at which the Component is being dropped.
     */
    constructor: function() {
        this.mixins.observable.constructor.apply(this, arguments);
    },
    init: function(container) {
        var me = this;
        me.container = container;
        // Set our animatePolicy to animate the start position (ie x for HBox, y for VBox)
        me.animatePolicy = {};
        me.animatePolicy[container.getLayout().names.x] = true;
        // Initialize the DD on first layout, when the innerCt has been created.
        me.container.on({
            scope: me,
            boxready: me.onBoxReady,
            beforedestroy: me.onContainerDestroy
        });
    },
    /**
     * @private Clear up on Container destroy
     */
    onContainerDestroy: function() {
        var dd = this.dd;
        if (dd) {
            dd.unreg();
            this.dd = null;
        }
    },
    onBoxReady: function() {
        var me = this,
            layout = me.container.getLayout(),
            names = layout.names,
            dd;
        // Create a DD instance. Poke the handlers in.
        // TODO: Ext5's DD classes should apply config to themselves.
        // TODO: Ext5's DD classes should not use init internally because it collides with use as a plugin
        // TODO: Ext5's DD classes should be Observable.
        // TODO: When all the above are trus, this plugin should extend the DD class.
        dd = me.dd = new Ext.dd.DD(layout.innerCt, me.container.id + '-reorderer');
        Ext.apply(dd, {
            animate: me.animate,
            reorderer: me,
            container: me.container,
            getDragCmp: me.getDragCmp,
            clickValidator: Ext.Function.createInterceptor(dd.clickValidator, me.clickValidator, me, false),
            onMouseDown: me.onMouseDown,
            startDrag: me.startDrag,
            onDrag: me.onDrag,
            endDrag: me.endDrag,
            getNewIndex: me.getNewIndex,
            doSwap: me.doSwap,
            findReorderable: me.findReorderable
        });
        // Decide which dimension we are measuring, and which measurement metric defines
        // the *start* of the box depending upon orientation.
        dd.dim = names.width;
        dd.startAttr = names.beforeX;
        dd.endAttr = names.afterX;
    },
    getDragCmp: function(e) {
        return this.container.getChildByElement(e.getTarget(this.itemSelector, 10));
    },
    // check if the clicked component is reorderable
    clickValidator: function(e) {
        var cmp = this.getDragCmp(e);
        // If cmp is null, this expression MUST be coerced to boolean so that createInterceptor is able to test it against false
        return !!(cmp && cmp.reorderable !== false);
    },
    onMouseDown: function(e) {
        var me = this,
            container = me.container,
            containerBox, cmpEl, cmpBox;
        // Ascertain which child Component is being mousedowned
        me.dragCmp = me.getDragCmp(e);
        if (me.dragCmp) {
            cmpEl = me.dragCmp.getEl();
            me.startIndex = me.curIndex = container.items.indexOf(me.dragCmp);
            // Start position of dragged Component
            cmpBox = cmpEl.getBox();
            // Last tracked start position
            me.lastPos = cmpBox[me.startAttr];
            // Calculate constraints depending upon orientation
            // Calculate offset from mouse to dragEl position
            containerBox = container.el.getBox();
            if (me.dim === 'width') {
                me.minX = containerBox.left;
                me.maxX = containerBox.right - cmpBox.width;
                me.minY = me.maxY = cmpBox.top;
                me.deltaX = e.getX() - cmpBox.left;
            } else {
                me.minY = containerBox.top;
                me.maxY = containerBox.bottom - cmpBox.height;
                me.minX = me.maxX = cmpBox.left;
                me.deltaY = e.getY() - cmpBox.top;
            }
            me.constrainY = me.constrainX = true;
        }
    },
    startDrag: function() {
        var me = this,
            dragCmp = me.dragCmp;
        if (dragCmp) {
            // For the entire duration of dragging the *Element*, defeat any positioning and animation of the dragged *Component*
            dragCmp.setPosition = Ext.emptyFn;
            dragCmp.animate = false;
            // Animate the BoxLayout just for the duration of the drag operation.
            if (me.animate) {
                me.container.getLayout().animatePolicy = me.reorderer.animatePolicy;
            }
            // We drag the Component element
            me.dragElId = dragCmp.getEl().id;
            me.reorderer.fireEvent('StartDrag', me, me.container, dragCmp, me.curIndex);
            // Suspend events, and set the disabled flag so that the mousedown and mouseup events
            // that are going to take place do not cause any other UI interaction.
            dragCmp.suspendEvents();
            dragCmp.disabled = true;
            dragCmp.el.setStyle('zIndex', 100);
        } else {
            me.dragElId = null;
        }
    },
    /**
     * @private
     * Find next or previous reorderable component index.
     * @param {Number} newIndex The initial drop index.
     * @return {Number} The index of the reorderable component.
     */
    findReorderable: function(newIndex) {
        var me = this,
            items = me.container.items,
            newItem;
        if (items.getAt(newIndex).reorderable === false) {
            newItem = items.getAt(newIndex);
            if (newIndex > me.startIndex) {
                while (newItem && newItem.reorderable === false) {
                    newIndex++;
                    newItem = items.getAt(newIndex);
                }
            } else {
                while (newItem && newItem.reorderable === false) {
                    newIndex--;
                    newItem = items.getAt(newIndex);
                }
            }
        }
        newIndex = Math.min(Math.max(newIndex, 0), items.getCount() - 1);
        if (items.getAt(newIndex).reorderable === false) {
            return -1;
        }
        return newIndex;
    },
    /**
     * @private
     * Swap 2 components.
     * @param {Number} newIndex The initial drop index.
     */
    doSwap: function(newIndex) {
        var me = this,
            items = me.container.items,
            container = me.container,
            wasRoot = me.container._isLayoutRoot,
            orig, dest, tmpIndex;
        newIndex = me.findReorderable(newIndex);
        if (newIndex === -1) {
            return;
        }
        me.reorderer.fireEvent('ChangeIndex', me, container, me.dragCmp, me.startIndex, newIndex);
        orig = items.getAt(me.curIndex);
        dest = items.getAt(newIndex);
        items.remove(orig);
        tmpIndex = Math.min(Math.max(newIndex, 0), items.getCount() - 1);
        items.insert(tmpIndex, orig);
        items.remove(dest);
        items.insert(me.curIndex, dest);
        // Make the Box Container the topmost layout participant during the layout.
        container._isLayoutRoot = true;
        container.updateLayout();
        container._isLayoutRoot = wasRoot;
        me.curIndex = newIndex;
    },
    onDrag: function(e) {
        var me = this,
            newIndex;
        newIndex = me.getNewIndex(e.getPoint());
        if ((newIndex !== undefined)) {
            me.reorderer.fireEvent('Drag', me, me.container, me.dragCmp, me.startIndex, me.curIndex);
            me.doSwap(newIndex);
        }
    },
    endDrag: function(e) {
        if (e) {
            e.stopEvent();
        }
        var me = this,
            layout = me.container.getLayout(),
            temp;
        if (me.dragCmp) {
            delete me.dragElId;
            // Reinstate the Component's positioning method after mouseup, and allow the layout system to animate it.
            delete me.dragCmp.setPosition;
            me.dragCmp.animate = true;
            // Ensure the lastBox is correct for the animation system to restore to when it creates the "from" animation frame
            me.dragCmp.lastBox[layout.names.x] = me.dragCmp.getPosition(true)[layout.names.widthIndex];
            // Make the Box Container the topmost layout participant during the layout.
            me.container._isLayoutRoot = true;
            me.container.updateLayout();
            me.container._isLayoutRoot = undefined;
            // Attempt to hook into the afteranimate event of the drag Component to call the cleanup
            temp = Ext.fx.Manager.getFxQueue(me.dragCmp.el.id)[0];
            if (temp) {
                temp.on({
                    afteranimate: me.reorderer.afterBoxReflow,
                    scope: me
                });
            } else // If not animated, clean up after the mouseup has happened so that we don't click the thing being dragged
            {
                Ext.Function.defer(me.reorderer.afterBoxReflow, 1, me);
            }
            if (me.animate) {
                delete layout.animatePolicy;
            }
            me.reorderer.fireEvent('drop', me, me.container, me.dragCmp, me.startIndex, me.curIndex);
        }
    },
    /**
     * @private
     * Called after the boxes have been reflowed after the drop.
     * Re-enabled the dragged Component.
     */
    afterBoxReflow: function() {
        var me = this;
        me.dragCmp.el.setStyle('zIndex', '');
        me.dragCmp.disabled = false;
        me.dragCmp.resumeEvents();
    },
    /**
     * @private
     * Calculate drop index based upon the dragEl's position.
     */
    getNewIndex: function(pointerPos) {
        var me = this,
            dragEl = me.getDragEl(),
            dragBox = Ext.fly(dragEl).getBox(),
            targetEl, targetBox, targetMidpoint,
            i = 0,
            it = me.container.items.items,
            ln = it.length,
            lastPos = me.lastPos;
        me.lastPos = dragBox[me.startAttr];
        for (; i < ln; i++) {
            targetEl = it[i].getEl();
            // Only look for a drop point if this found item is an item according to our selector
            if (targetEl.is(me.reorderer.itemSelector)) {
                targetBox = targetEl.getBox();
                targetMidpoint = targetBox[me.startAttr] + (targetBox[me.dim] >> 1);
                if (i < me.curIndex) {
                    if ((dragBox[me.startAttr] < lastPos) && (dragBox[me.startAttr] < (targetMidpoint - 5))) {
                        return i;
                    }
                } else if (i > me.curIndex) {
                    if ((dragBox[me.startAttr] > lastPos) && (dragBox[me.endAttr] > (targetMidpoint + 5))) {
                        return i;
                    }
                }
            }
        }
    }
});

/**
 * This plugin can enable a cell to cell drag and drop operation within the same grid view.
 *
 * Note that the plugin must be added to the grid view, not to the grid panel. For example, using {@link Ext.panel.Table viewConfig}:
 *
 *      viewConfig: {
 *          plugins: {
 *              ptype: 'celldragdrop',
 *
 *              // Remove text from source cell and replace with value of emptyText.
 *              applyEmptyText: true,
 *
 *              //emptyText: Ext.String.htmlEncode('<<foo>>'),
 *
 *              // Will only allow drops of the same type.
 *              enforceType: true
 *          }
 *      }
 */
Ext.define('Ext.ux.CellDragDrop', {
    extend: 'Ext.plugin.Abstract',
    alias: 'plugin.celldragdrop',
    uses: [
        'Ext.view.DragZone'
    ],
    /**
     * @cfg {Boolean} enforceType
     * Set to `true` to only allow drops of the same type.
     *
     * Defaults to `false`.
     */
    enforceType: false,
    /**
     * @cfg {Boolean} applyEmptyText
     * If `true`, then use the value of {@link #emptyText} to replace the drag record's value after a node drop.
     * Note that, if dropped on a cell of a different type, it will convert the default text according to its own conversion rules.
     *
     * Defaults to `false`.
     */
    applyEmptyText: false,
    /**
     * @cfg {Boolean} emptyText
     * If {@link #applyEmptyText} is `true`, then this value as the drag record's value after a node drop.
     *
     * Defaults to an empty string.
     */
    emptyText: '',
    /**
     * @cfg {Boolean} dropBackgroundColor
     * The default background color for when a drop is allowed.
     *
     * Defaults to green.
     */
    dropBackgroundColor: 'green',
    /**
     * @cfg {Boolean} noDropBackgroundColor
     * The default background color for when a drop is not allowed.
     *
     * Defaults to red.
     */
    noDropBackgroundColor: 'red',
    //<locale>
    /**
     * @cfg {String} dragText
     * The text to show while dragging.
     *
     * Two placeholders can be used in the text:
     *
     * - `{0}` The number of selected items.
     * - `{1}` 's' when more than 1 items (only useful for English).
     */
    dragText: '{0} selected row{1}',
    //</locale>
    /**
     * @cfg {String} ddGroup
     * A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and
     * DropZone used by this plugin will only interact with other drag drop objects in the same group.
     */
    ddGroup: "GridDD",
    /**
     * @cfg {Boolean} enableDrop
     * Set to `false` to disallow the View from accepting drop gestures.
     */
    enableDrop: true,
    /**
     * @cfg {Boolean} enableDrag
     * Set to `false` to disallow dragging items from the View.
     */
    enableDrag: true,
    /**
     * @cfg {Object/Boolean} containerScroll
     * True to register this container with the Scrollmanager for auto scrolling during drag operations.
     * A {@link Ext.dd.ScrollManager} configuration may also be passed.
     */
    containerScroll: false,
    init: function(view) {
        var me = this;
        view.on('render', me.onViewRender, me, {
            single: true
        });
    },
    destroy: function() {
        var me = this;
        Ext.destroy(me.dragZone, me.dropZone);
    },
    enable: function() {
        var me = this;
        if (me.dragZone) {
            me.dragZone.unlock();
        }
        if (me.dropZone) {
            me.dropZone.unlock();
        }
        me.callParent();
    },
    disable: function() {
        var me = this;
        if (me.dragZone) {
            me.dragZone.lock();
        }
        if (me.dropZone) {
            me.dropZone.lock();
        }
        me.callParent();
    },
    onViewRender: function(view) {
        var me = this,
            scrollEl;
        if (me.enableDrag) {
            if (me.containerScroll) {
                scrollEl = view.getEl();
            }
            me.dragZone = new Ext.view.DragZone({
                view: view,
                ddGroup: me.dragGroup || me.ddGroup,
                dragText: me.dragText,
                containerScroll: me.containerScroll,
                scrollEl: scrollEl,
                getDragData: function(e) {
                    var view = this.view,
                        item = e.getTarget(view.getItemSelector()),
                        record = view.getRecord(item),
                        cell = e.getTarget(view.getCellSelector()),
                        dragEl, header;
                    if (item) {
                        dragEl = document.createElement('div');
                        dragEl.className = 'x-form-text';
                        dragEl.appendChild(document.createTextNode(cell.textContent || cell.innerText));
                        header = view.getHeaderByCell(cell);
                        return {
                            event: new Ext.EventObjectImpl(e),
                            ddel: dragEl,
                            item: e.target,
                            columnName: header.dataIndex,
                            record: record
                        };
                    }
                },
                onInitDrag: function(x, y) {
                    var self = this,
                        data = self.dragData,
                        view = self.view,
                        selectionModel = view.getSelectionModel(),
                        record = data.record,
                        el = data.ddel;
                    // Update the selection to match what would have been selected if the user had
                    // done a full click on the target node rather than starting a drag from it.
                    if (!selectionModel.isSelected(record)) {
                        selectionModel.select(record, true);
                    }
                    Ext.fly(self.ddel).update(el.textContent || el.innerText);
                    self.proxy.update(self.ddel);
                    self.onStartDrag(x, y);
                    return true;
                }
            });
        }
        if (me.enableDrop) {
            me.dropZone = new Ext.dd.DropZone(view.el, {
                view: view,
                ddGroup: me.dropGroup || me.ddGroup,
                containerScroll: true,
                getTargetFromEvent: function(e) {
                    var self = this,
                        view = self.view,
                        cell = e.getTarget(view.cellSelector),
                        row, header;
                    // Ascertain whether the mousemove is within a grid cell.
                    if (cell) {
                        row = view.findItemByChild(cell);
                        header = view.getHeaderByCell(cell);
                        if (row && header) {
                            return {
                                node: cell,
                                record: view.getRecord(row),
                                columnName: header.dataIndex
                            };
                        }
                    }
                },
                // On Node enter, see if it is valid for us to drop the field on that type of column.
                onNodeEnter: function(target, dd, e, dragData) {
                    var self = this,
                        destType = target.record.getField(target.columnName).type.toUpperCase(),
                        sourceType = dragData.record.getField(dragData.columnName).type.toUpperCase();
                    delete self.dropOK;
                    // Return if no target node or if over the same cell as the source of the drag.
                    if (!target || target.node === dragData.item.parentNode) {
                        return;
                    }
                    // Check whether the data type of the column being dropped on accepts the
                    // dragged field type. If so, set dropOK flag, and highlight the target node.
                    if (me.enforceType && destType !== sourceType) {
                        self.dropOK = false;
                        if (me.noDropCls) {
                            Ext.fly(target.node).addCls(me.noDropCls);
                        } else {
                            Ext.fly(target.node).applyStyles({
                                backgroundColor: me.noDropBackgroundColor
                            });
                        }
                        return false;
                    }
                    self.dropOK = true;
                    if (me.dropCls) {
                        Ext.fly(target.node).addCls(me.dropCls);
                    } else {
                        Ext.fly(target.node).applyStyles({
                            backgroundColor: me.dropBackgroundColor
                        });
                    }
                },
                // Return the class name to add to the drag proxy. This provides a visual indication
                // of drop allowed or not allowed.
                onNodeOver: function(target, dd, e, dragData) {
                    return this.dropOK ? this.dropAllowed : this.dropNotAllowed;
                },
                // Highlight the target node.
                onNodeOut: function(target, dd, e, dragData) {
                    var cls = this.dropOK ? me.dropCls : me.noDropCls;
                    if (cls) {
                        Ext.fly(target.node).removeCls(cls);
                    } else {
                        Ext.fly(target.node).applyStyles({
                            backgroundColor: ''
                        });
                    }
                },
                // Process the drop event if we have previously ascertained that a drop is OK.
                onNodeDrop: function(target, dd, e, dragData) {
                    if (this.dropOK) {
                        target.record.set(target.columnName, dragData.record.get(dragData.columnName));
                        if (me.applyEmptyText) {
                            dragData.record.set(dragData.columnName, me.emptyText);
                        }
                        return true;
                    }
                },
                onCellDrop: Ext.emptyFn
            });
        }
    }
});

/**
 * @class Ext.ux.DataTip
 * @extends Ext.ToolTip.
 * This plugin implements automatic tooltip generation for an arbitrary number of child nodes *within* a Component.
 *
 * This plugin is applied to a high level Component, which contains repeating elements, and depending on the host Component type,
 * it automatically selects a {@link Ext.ToolTip#delegate delegate} so that it appears when the mouse enters a sub-element.
 *
 * When applied to a GridPanel, this ToolTip appears when over a row, and the Record's data is applied
 * using this object's {@link #tpl} template.
 *
 * When applied to a DataView, this ToolTip appears when over a view node, and the Record's data is applied
 * using this object's {@link #tpl} template.
 *
 * When applied to a TreePanel, this ToolTip appears when over a tree node, and the Node's {@link Ext.data.Model} record data is applied
 * using this object's {@link #tpl} template.
 *
 * When applied to a FormPanel, this ToolTip appears when over a Field, and the Field's `tooltip` property is used is applied
 * using this object's {@link #tpl} template, or if it is a string, used as HTML content. If there is no `tooltip` property,
 * the field itself is used as the template's data object.
 *
 * If more complex logic is needed to determine content, then the {@link #beforeshow} event may be used.
 * This class also publishes a **`beforeshowtip`** event through its host Component. The *host Component* fires the
 * **`beforeshowtip`** event.
 */
Ext.define('Ext.ux.DataTip', function(DataTip) {
    //  Target the body (if the host is a Panel), or, if there is no body, the main Element.
    function onHostRender() {
        var e = this.isXType('panel') ? this.body : this.el;
        if (this.dataTip.renderToTarget) {
            this.dataTip.render(e);
        }
        this.dataTip.setTarget(e);
    }
    function updateTip(tip, data) {
        if (tip.rendered) {
            if (tip.host.fireEvent('beforeshowtip', tip.eventHost, tip, data) === false) {
                return false;
            }
            tip.update(data);
        } else {
            if (Ext.isString(data)) {
                tip.html = data;
            } else {
                tip.data = data;
            }
        }
    }
    function beforeViewTipShow(tip) {
        var rec = this.view.getRecord(tip.triggerElement),
            data;
        if (rec) {
            data = tip.initialConfig.data ? Ext.apply(tip.initialConfig.data, rec.data) : rec.data;
            return updateTip(tip, data);
        } else {
            return false;
        }
    }
    function beforeFormTipShow(tip) {
        var field = Ext.getCmp(tip.triggerElement.id);
        if (field && (field.tooltip || tip.tpl)) {
            return updateTip(tip, field.tooltip || field);
        } else {
            return false;
        }
    }
    return {
        extend: 'Ext.tip.ToolTip',
        mixins: {
            plugin: 'Ext.plugin.Abstract'
        },
        alias: 'plugin.datatip',
        lockableScope: 'both',
        constructor: function(config) {
            var me = this;
            me.callParent([
                config
            ]);
            me.mixins.plugin.constructor.call(me, config);
        },
        init: function(host) {
            var me = this;
            me.mixins.plugin.init.call(me, host);
            host.dataTip = me;
            me.host = host;
            if (host.isXType('tablepanel')) {
                me.view = host.getView();
                if (host.ownerLockable) {
                    me.host = host.ownerLockable;
                }
                me.delegate = me.delegate || me.view.rowSelector;
                me.on('beforeshow', beforeViewTipShow);
            } else if (host.isXType('dataview')) {
                me.view = me.host;
                me.delegate = me.delegate || host.itemSelector;
                me.on('beforeshow', beforeViewTipShow);
            } else if (host.isXType('form')) {
                me.delegate = '.' + Ext.form.Labelable.prototype.formItemCls;
                me.on('beforeshow', beforeFormTipShow);
            } else if (host.isXType('combobox')) {
                me.view = host.getPicker();
                me.delegate = me.delegate || me.view.getItemSelector();
                me.on('beforeshow', beforeViewTipShow);
            }
            if (host.rendered) {
                onHostRender.call(host);
            } else {
                host.onRender = Ext.Function.createSequence(host.onRender, onHostRender);
            }
        }
    };
});

/**
 * @author Ed Spencer (http://sencha.com)
 * Transition plugin for DataViews
 */
Ext.ux.DataViewTransition = Ext.extend(Object, {
    /**
     * @property defaults
     * @type Object
     * Default configuration options for all DataViewTransition instances
     */
    defaults: {
        duration: 750,
        idProperty: 'id'
    },
    /**
     * Creates the plugin instance, applies defaults
     * @constructor
     * @param {Object} config Optional config object
     */
    constructor: function(config) {
        Ext.apply(this, config || {}, this.defaults);
    },
    /**
     * Initializes the transition plugin. Overrides the dataview's default refresh function
     * @param {Ext.view.View} dataview The dataview
     */
    init: function(dataview) {
        /**
         * @property dataview
         * @type Ext.view.View
         * Reference to the DataView this instance is bound to
         */
        this.dataview = dataview;
        var idProperty = this.idProperty;
        dataview.blockRefresh = true;
        dataview.updateIndexes = Ext.Function.createSequence(dataview.updateIndexes, function() {
            this.getTargetEl().select(this.itemSelector).each(function(element, composite, index) {
                element.id = element.dom.id = Ext.util.Format.format("{0}-{1}", dataview.id, dataview.store.getAt(index).get(idProperty));
            }, this);
        }, dataview);
        /**
         * @property dataviewID
         * @type String
         * The string ID of the DataView component. This is used internally when animating child objects
         */
        this.dataviewID = dataview.id;
        /**
         * @property cachedStoreData
         * @type Object
         * A cache of existing store data, keyed by id. This is used to determine
         * whether any items were added or removed from the store on data change
         */
        this.cachedStoreData = {};
        //var store = dataview.store;
        //catch the store data with the snapshot immediately
        this.cacheStoreData(dataview.store.snapshot);
        dataview.store.on('datachanged', function(store) {
            var parentEl = dataview.getTargetEl(),
                calcItem = store.getAt(0),
                added = this.getAdded(store),
                removed = this.getRemoved(store),
                previous = this.getRemaining(store),
                existing = Ext.apply({}, previous, added);
            //hide old items
            Ext.each(removed, function(item) {
                Ext.fly(this.dataviewID + '-' + item.get(this.idProperty)).animate({
                    remove: false,
                    duration: duration,
                    opacity: 0,
                    useDisplay: true
                });
            }, this);
            //store is empty
            if (calcItem == undefined) {
                this.cacheStoreData(store);
                return;
            }
            var el = Ext.get(this.dataviewID + "-" + calcItem.get(this.idProperty));
            //calculate the number of rows and columns we have
            var itemCount = store.getCount(),
                itemWidth = el.getMargin('lr') + el.getWidth(),
                itemHeight = el.getMargin('bt') + el.getHeight(),
                dvWidth = parentEl.getWidth(),
                columns = Math.floor(dvWidth / itemWidth),
                rows = Math.ceil(itemCount / columns),
                currentRows = Math.ceil(this.getExistingCount() / columns);
            //make sure the correct styles are applied to the parent element
            parentEl.applyStyles({
                display: 'block',
                position: 'relative'
            });
            //stores the current top and left values for each element (discovered below)
            var oldPositions = {},
                newPositions = {},
                elCache = {};
            //find current positions of each element and save a reference in the elCache
            Ext.iterate(previous, function(id, item) {
                var id = item.get(this.idProperty),
                    el = elCache[id] = Ext.get(this.dataviewID + '-' + id);
                oldPositions[id] = {
                    top: el.getY() - parentEl.getY() - el.getMargin('t') - parentEl.getPadding('t'),
                    left: el.getX() - parentEl.getX() - el.getMargin('l') - parentEl.getPadding('l')
                };
            }, this);
            //set absolute positioning on all DataView items. We need to set position, left and 
            //top at the same time to avoid any flickering
            Ext.iterate(previous, function(id, item) {
                var oldPos = oldPositions[id],
                    el = elCache[id];
                if (el.getStyle('position') != 'absolute') {
                    elCache[id].applyStyles({
                        position: 'absolute',
                        left: oldPos.left + "px",
                        top: oldPos.top + "px",
                        //we set the width here to make ListViews work correctly. This is not needed for DataViews
                        width: el.getWidth(!Ext.isIE || Ext.isStrict),
                        height: el.getHeight(!Ext.isIE || Ext.isStrict)
                    });
                }
            });
            //get new positions
            var index = 0;
            Ext.iterate(store.data.items, function(item) {
                var id = item.get(idProperty),
                    el = elCache[id];
                var column = index % columns,
                    row = Math.floor(index / columns),
                    top = row * itemHeight,
                    left = column * itemWidth;
                newPositions[id] = {
                    top: top,
                    left: left
                };
                index++;
            }, this);
            //do the movements
            var startTime = new Date(),
                duration = this.duration,
                dataviewID = this.dataviewID;
            var doAnimate = function() {
                    var elapsed = new Date() - startTime,
                        fraction = elapsed / duration;
                    if (fraction >= 1) {
                        for (var id in newPositions) {
                            Ext.fly(dataviewID + '-' + id).applyStyles({
                                top: newPositions[id].top + "px",
                                left: newPositions[id].left + "px"
                            });
                        }
                        Ext.TaskManager.stop(task);
                    } else {
                        //move each item
                        for (var id in newPositions) {
                            if (!previous[id])  {
                                
                                continue;
                            }
                            
                            var oldPos = oldPositions[id],
                                newPos = newPositions[id],
                                oldTop = oldPos.top,
                                newTop = newPos.top,
                                oldLeft = oldPos.left,
                                newLeft = newPos.left,
                                diffTop = fraction * Math.abs(oldTop - newTop),
                                diffLeft = fraction * Math.abs(oldLeft - newLeft),
                                midTop = oldTop > newTop ? oldTop - diffTop : oldTop + diffTop,
                                midLeft = oldLeft > newLeft ? oldLeft - diffLeft : oldLeft + diffLeft;
                            Ext.fly(dataviewID + '-' + id).applyStyles({
                                top: midTop + "px",
                                left: midLeft + "px"
                            });
                        }
                    }
                };
            var task = {
                    run: doAnimate,
                    interval: 20,
                    scope: this
                };
            Ext.TaskManager.start(task);
            var count = 0;
            for (var k in added) {
                count++;
            }
            if (Ext.global.console && Ext.global.console.log) {
                Ext.global.console.log('added:', count);
            }
            //show new items
            Ext.iterate(added, function(id, item) {
                Ext.fly(this.dataviewID + '-' + item.get(this.idProperty)).applyStyles({
                    top: newPositions[item.get(this.idProperty)].top + "px",
                    left: newPositions[item.get(this.idProperty)].left + "px"
                });
                Ext.fly(this.dataviewID + '-' + item.get(this.idProperty)).animate({
                    remove: false,
                    duration: duration,
                    opacity: 1
                });
            }, this);
            this.cacheStoreData(store);
        }, this);
    },
    /**
     * Caches the records from a store locally for comparison later
     * @param {Ext.data.Store} store The store to cache data from
     */
    cacheStoreData: function(store) {
        this.cachedStoreData = {};
        store.each(function(record) {
            this.cachedStoreData[record.get(this.idProperty)] = record;
        }, this);
    },
    /**
     * Returns all records that were already in the DataView
     * @return {Object} All existing records
     */
    getExisting: function() {
        return this.cachedStoreData;
    },
    /**
     * Returns the total number of items that are currently visible in the DataView
     * @return {Number} The number of existing items
     */
    getExistingCount: function() {
        var count = 0,
            items = this.getExisting();
        for (var k in items) count++;
        return count;
    },
    /**
     * Returns all records in the given store that were not already present
     * @param {Ext.data.Store} store The updated store instance
     * @return {Object} Object of records not already present in the dataview in format {id: record}
     */
    getAdded: function(store) {
        var added = {};
        store.each(function(record) {
            if (this.cachedStoreData[record.get(this.idProperty)] == undefined) {
                added[record.get(this.idProperty)] = record;
            }
        }, this);
        return added;
    },
    /**
     * Returns all records that are present in the DataView but not the new store
     * @param {Ext.data.Store} store The updated store instance
     * @return {Array} Array of records that used to be present
     */
    getRemoved: function(store) {
        var removed = [];
        for (var id in this.cachedStoreData) {
            if (store.findExact(this.idProperty, Number(id)) == -1) {
                removed.push(this.cachedStoreData[id]);
            }
        }
        return removed;
    },
    /**
     * Returns all records that are already present and are still present in the new store
     * @param {Ext.data.Store} store The updated store instance
     * @return {Object} Object of records that are still present from last time in format {id: record}
     */
    getRemaining: function(store) {
        var remaining = {};
        store.each(function(record) {
            if (this.cachedStoreData[record.get(this.idProperty)] != undefined) {
                remaining[record.get(this.idProperty)] = record;
            }
        }, this);
        return remaining;
    }
});

/**
 * @author Ed Spencer (http://sencha.com)
 * Transition plugin for DataViews
 */
Ext.define('Ext.ux.DataView.Animated', {
    /**
     * @property defaults
     * @type Object
     * Default configuration options for all DataViewTransition instances
     */
    defaults: {
        duration: 750,
        idProperty: 'id'
    },
    /**
     * Creates the plugin instance, applies defaults
     * @constructor
     * @param {Object} config Optional config object
     */
    constructor: function(config) {
        Ext.apply(this, config || {}, this.defaults);
    },
    /**
     * Initializes the transition plugin. Overrides the dataview's default refresh function
     * @param {Ext.view.View} dataview The dataview
     */
    init: function(dataview) {
        var me = this,
            store = dataview.store,
            items = dataview.all,
            task = {
                interval: 20
            },
            duration = me.duration;
        /**
         * @property dataview
         * @type Ext.view.View
         * Reference to the DataView this instance is bound to
         */
        me.dataview = dataview;
        dataview.blockRefresh = true;
        dataview.updateIndexes = Ext.Function.createSequence(dataview.updateIndexes, function() {
            this.getTargetEl().select(this.itemSelector).each(function(element, composite, index) {
                element.dom.id = Ext.util.Format.format("{0}-{1}", dataview.id, store.getAt(index).internalId);
            }, this);
        }, dataview);
        /**
         * @property dataviewID
         * @type String
         * The string ID of the DataView component. This is used internally when animating child objects
         */
        me.dataviewID = dataview.id;
        /**
         * @property cachedStoreData
         * @type Object
         * A cache of existing store data, keyed by id. This is used to determine
         * whether any items were added or removed from the store on data change
         */
        me.cachedStoreData = {};
        //catch the store data with the snapshot immediately
        me.cacheStoreData(store.data || store.snapshot);
        dataview.on('resize', function() {
            var store = dataview.store;
            if (store.getCount() > 0) {}
        }, // reDraw.call(this, store);
        this);
        // Buffer listenher so that rapid calls, for example a filter followed by a sort
        // Only produce one redraw.
        dataview.store.on({
            datachanged: reDraw,
            scope: this,
            buffer: 50
        });
        function reDraw() {
            var parentEl = dataview.getTargetEl(),
                parentElY = parentEl.getY(),
                parentElPaddingTop = parentEl.getPadding('t'),
                added = me.getAdded(store),
                removed = me.getRemoved(store),
                remaining = me.getRemaining(store),
                itemArray, i, id,
                itemFly = new Ext.dom.Fly(),
                rtl = me.dataview.getInherited().rtl,
                oldPos, newPos,
                styleSide = rtl ? 'right' : 'left',
                newStyle = {};
            // Not yet rendered
            if (!parentEl) {
                return;
            }
            // Collect nodes that will be removed in the forthcoming refresh so
            // that we can put them back in order to fade them out
            Ext.iterate(removed, function(recId, item) {
                id = me.dataviewID + '-' + recId;
                // Stop any animations for removed items and ensure th.
                Ext.fx.Manager.stopAnimation(id);
                item.dom = Ext.getDom(id);
                if (!item.dom) {
                    delete removed[recId];
                }
            });
            me.cacheStoreData(store);
            // stores the current top and left values for each element (discovered below)
            var oldPositions = {},
                newPositions = {};
            // Find current positions of elements which are to remain after the refresh.
            Ext.iterate(remaining, function(id, item) {
                if (itemFly.attach(Ext.getDom(me.dataviewID + '-' + id))) {
                    oldPos = oldPositions[id] = {
                        top: itemFly.getY() - parentElY - itemFly.getMargin('t') - parentElPaddingTop
                    };
                    oldPos[styleSide] = me.getItemX(itemFly);
                } else {
                    delete remaining[id];
                }
            });
            // The view MUST refresh, creating items in the natural flow, and collecting the items
            // so that its item collection is consistent.
            dataview.refresh();
            // Replace removed nodes so that they can be faded out, THEN removed
            Ext.iterate(removed, function(id, item) {
                parentEl.dom.appendChild(item.dom);
                itemFly.attach(item.dom).animate({
                    duration: duration,
                    opacity: 0,
                    callback: function(anim) {
                        var el = Ext.get(anim.target.id);
                        if (el) {
                            el.destroy();
                        }
                    }
                });
                delete item.dom;
            });
            // We have taken care of any removals.
            // If the store is empty, we are done.
            if (!store.getCount()) {
                return;
            }
            // Collect the correct new positions after the refresh
            itemArray = items.slice();
            // Reverse order so that moving to absolute position does not affect the position of
            // the next one we're looking at.
            for (i = itemArray.length - 1; i >= 0; i--) {
                id = store.getAt(i).internalId;
                itemFly.attach(itemArray[i]);
                newPositions[id] = {
                    dom: itemFly.dom,
                    top: itemFly.getY() - parentElY - itemFly.getMargin('t') - parentElPaddingTop
                };
                newPositions[id][styleSide] = me.getItemX(itemFly);
                // We're going to absolutely position each item.
                // If it is a "remaining" one from last refesh, shunt it back to
                // its old position from where it will be animated.
                newPos = oldPositions[id] || newPositions[id];
                // set absolute positioning on all DataView items. We need to set position, left and 
                // top at the same time to avoid any flickering
                newStyle.position = 'absolute';
                newStyle.top = newPos.top + "px";
                newStyle[styleSide] = newPos.left + "px";
                itemFly.applyStyles(newStyle);
            }
            // This is the function which moves remaining items to their new position
            var doAnimate = function() {
                    var elapsed = new Date() - task.taskStartTime,
                        fraction = elapsed / duration;
                    if (fraction >= 1) {
                        // At end, return all items to natural flow.
                        newStyle.position = newStyle.top = newStyle[styleSide] = '';
                        for (id in newPositions) {
                            itemFly.attach(newPositions[id].dom).applyStyles(newStyle);
                        }
                        Ext.TaskManager.stop(task);
                    } else {
                        // In frame, move each "remaining" item according to time elapsed
                        for (id in remaining) {
                            var oldPos = oldPositions[id],
                                newPos = newPositions[id],
                                oldTop = oldPos.top,
                                newTop = newPos.top,
                                oldLeft = oldPos[styleSide],
                                newLeft = newPos[styleSide],
                                diffTop = fraction * Math.abs(oldTop - newTop),
                                diffLeft = fraction * Math.abs(oldLeft - newLeft),
                                midTop = oldTop > newTop ? oldTop - diffTop : oldTop + diffTop,
                                midLeft = oldLeft > newLeft ? oldLeft - diffLeft : oldLeft + diffLeft;
                            newStyle.top = midTop + "px";
                            newStyle[styleSide] = midLeft + "px";
                            itemFly.attach(newPos.dom).applyStyles(newStyle);
                        }
                    }
                };
            // Fade in new items
            Ext.iterate(added, function(id, item) {
                if (itemFly.attach(Ext.getDom(me.dataviewID + '-' + id))) {
                    itemFly.setOpacity(0);
                    itemFly.animate({
                        duration: duration,
                        opacity: 1
                    });
                }
            });
            // Stop any previous animations
            Ext.TaskManager.stop(task);
            task.run = doAnimate;
            Ext.TaskManager.start(task);
            me.cacheStoreData(store);
        }
    },
    getItemX: function(el) {
        var rtl = this.dataview.getInherited().rtl,
            parentEl = el.up('');
        if (rtl) {
            return parentEl.getViewRegion().right - el.getRegion().right + el.getMargin('r');
        } else {
            return el.getX() - parentEl.getX() - el.getMargin('l') - parentEl.getPadding('l');
        }
    },
    /**
     * Caches the records from a store locally for comparison later
     * @param {Ext.data.Store} store The store to cache data from
     */
    cacheStoreData: function(store) {
        var cachedStoreData = this.cachedStoreData = {};
        store.each(function(record) {
            cachedStoreData[record.internalId] = record;
        });
    },
    /**
     * Returns all records that were already in the DataView
     * @return {Object} All existing records
     */
    getExisting: function() {
        return this.cachedStoreData;
    },
    /**
     * Returns the total number of items that are currently visible in the DataView
     * @return {Number} The number of existing items
     */
    getExistingCount: function() {
        var count = 0,
            items = this.getExisting();
        for (var k in items) {
            count++;
        }
        return count;
    },
    /**
     * Returns all records in the given store that were not already present
     * @param {Ext.data.Store} store The updated store instance
     * @return {Object} Object of records not already present in the dataview in format {id: record}
     */
    getAdded: function(store) {
        var cachedStoreData = this.cachedStoreData,
            added = {};
        store.each(function(record) {
            if (cachedStoreData[record.internalId] == null) {
                added[record.internalId] = record;
            }
        });
        return added;
    },
    /**
     * Returns all records that are present in the DataView but not the new store
     * @param {Ext.data.Store} store The updated store instance
     * @return {Array} Array of records that used to be present
     */
    getRemoved: function(store) {
        var cachedStoreData = this.cachedStoreData,
            removed = {},
            id;
        for (id in cachedStoreData) {
            if (store.findBy(function(record) {
                return record.internalId == id;
            }) == -1) {
                removed[id] = cachedStoreData[id];
            }
        }
        return removed;
    },
    /**
     * Returns all records that are already present and are still present in the new store
     * @param {Ext.data.Store} store The updated store instance
     * @return {Object} Object of records that are still present from last time in format {id: record}
     */
    getRemaining: function(store) {
        var cachedStoreData = this.cachedStoreData,
            remaining = {};
        store.each(function(record) {
            if (cachedStoreData[record.internalId] != null) {
                remaining[record.internalId] = record;
            }
        });
        return remaining;
    }
});

/**
 * @author Ed Spencer
 */
Ext.define('Ext.ux.DataView.DragSelector', {
    requires: [
        'Ext.dd.DragTracker',
        'Ext.util.Region'
    ],
    /**
     * Initializes the plugin by setting up the drag tracker
     */
    init: function(dataview) {
        /**
         * @property dataview
         * @type Ext.view.View
         * The DataView bound to this instance
         */
        this.dataview = dataview;
        dataview.mon(dataview, {
            beforecontainerclick: this.cancelClick,
            scope: this,
            render: {
                fn: this.onRender,
                scope: this,
                single: true
            }
        });
    },
    /**
     * @private
     * Called when the attached DataView is rendered. This sets up the DragTracker instance that will be used
     * to created a dragged selection area
     */
    onRender: function() {
        /**
         * @property tracker
         * @type Ext.dd.DragTracker
         * The DragTracker attached to this instance. Note that the 4 on* functions are called in the scope of the 
         * DragTracker ('this' refers to the DragTracker inside those functions), so we pass a reference to the 
         * DragSelector so that we can call this class's functions.
         */
        this.tracker = Ext.create('Ext.dd.DragTracker', {
            dataview: this.dataview,
            el: this.dataview.el,
            dragSelector: this,
            onBeforeStart: this.onBeforeStart,
            onStart: this.onStart,
            onDrag: this.onDrag,
            onEnd: this.onEnd
        });
        /**
         * @property dragRegion
         * @type Ext.util.Region
         * Represents the region currently dragged out by the user. This is used to figure out which dataview nodes are
         * in the selected area and to set the size of the Proxy element used to highlight the current drag area
         */
        this.dragRegion = Ext.create('Ext.util.Region');
    },
    /**
     * @private
     * Listener attached to the DragTracker's onBeforeStart event. Returns false if the drag didn't start within the
     * DataView's el
     */
    onBeforeStart: function(e) {
        return e.target == this.dataview.getEl().dom;
    },
    /**
     * @private
     * Listener attached to the DragTracker's onStart event. Cancel's the DataView's containerclick event from firing
     * and sets the start co-ordinates of the Proxy element. Clears any existing DataView selection
     * @param {Ext.event.Event} e The click event
     */
    onStart: function(e) {
        var dragSelector = this.dragSelector,
            dataview = this.dataview;
        // Flag which controls whether the cancelClick method vetoes the processing of the DataView's containerclick event.
        // On IE (where else), this needs to remain set for a millisecond after mouseup because even though the mouse has
        // moved, the mouseup will still trigger a click event.
        this.dragging = true;
        //here we reset and show the selection proxy element and cache the regions each item in the dataview take up
        dragSelector.fillRegions();
        dragSelector.getProxy().show();
        dataview.getSelectionModel().deselectAll();
    },
    /**
     * @private
     * Reusable handler that's used to cancel the container click event when dragging on the dataview. See onStart for
     * details
     */
    cancelClick: function() {
        return !this.tracker.dragging;
    },
    /**
     * @private
     * Listener attached to the DragTracker's onDrag event. Figures out how large the drag selection area should be and
     * updates the proxy element's size to match. Then iterates over all of the rendered items and marks them selected
     * if the drag region touches them
     * @param {Ext.event.Event} e The drag event
     */
    onDrag: function(e) {
        var dragSelector = this.dragSelector,
            selModel = dragSelector.dataview.getSelectionModel(),
            dragRegion = dragSelector.dragRegion,
            bodyRegion = dragSelector.bodyRegion,
            proxy = dragSelector.getProxy(),
            regions = dragSelector.regions,
            length = regions.length,
            startXY = this.startXY,
            currentXY = this.getXY(),
            minX = Math.min(startXY[0], currentXY[0]),
            minY = Math.min(startXY[1], currentXY[1]),
            width = Math.abs(startXY[0] - currentXY[0]),
            height = Math.abs(startXY[1] - currentXY[1]),
            region, selected, i;
        Ext.apply(dragRegion, {
            top: minY,
            left: minX,
            right: minX + width,
            bottom: minY + height
        });
        dragRegion.constrainTo(bodyRegion);
        proxy.setBox(dragRegion);
        for (i = 0; i < length; i++) {
            region = regions[i];
            selected = dragRegion.intersect(region);
            if (selected) {
                selModel.select(i, true);
            } else {
                selModel.deselect(i);
            }
        }
    },
    /**
     * @private
     * Listener attached to the DragTracker's onEnd event. This is a delayed function which executes 1
     * millisecond after it has been called. This is because the dragging flag must remain active to cancel
     * the containerclick event which the mouseup event will trigger.
     * @param {Ext.event.Event} e The event object
     */
    onEnd: Ext.Function.createDelayed(function(e) {
        var dataview = this.dataview,
            selModel = dataview.getSelectionModel(),
            dragSelector = this.dragSelector;
        this.dragging = false;
        dragSelector.getProxy().hide();
    }, 1),
    /**
     * @private
     * Creates a Proxy element that will be used to highlight the drag selection region
     * @return {Ext.Element} The Proxy element
     */
    getProxy: function() {
        if (!this.proxy) {
            this.proxy = this.dataview.getEl().createChild({
                tag: 'div',
                cls: 'x-view-selector'
            });
        }
        return this.proxy;
    },
    /**
     * @private
     * Gets the region taken up by each rendered node in the DataView. We use these regions to figure out which nodes
     * to select based on the selector region the user has dragged out
     */
    fillRegions: function() {
        var dataview = this.dataview,
            regions = this.regions = [];
        dataview.all.each(function(node) {
            regions.push(node.getRegion());
        });
        this.bodyRegion = dataview.getEl().getRegion();
    }
});

/**
 * @author Ed Spencer
 *
 * ## Basic DataView with Draggable mixin.
 *
 *     Ext.Loader.setPath('Ext.ux', '../../../SDK/extjs/examples/ux');
 *
 *     Ext.define('My.cool.View', {
 *         extend: 'Ext.view.View',
 *
 *         mixins: {
 *             draggable: 'Ext.ux.DataView.Draggable'
 *         },
 *
 *         initComponent: function() {
 *             this.mixins.draggable.init(this, {
 *                 ddConfig: {
 *                     ddGroup: 'someGroup'
 *                 }
 *             });
 * 
 *             this.callParent(arguments);
 *         }
 *     });
 *
 *     Ext.onReady(function () {
 *         Ext.create('Ext.data.Store', {
 *             storeId: 'baseball',
 *             fields: ['team', 'established'],
 *             data: [
 *                 { team: 'Atlanta Braves', established: '1871' },
 *                 { team: 'Miami Marlins', established: '1993' },
 *                 { team: 'New York Mets', established: '1962' },
 *                 { team: 'Philadelphia Phillies', established: '1883' },
 *                 { team: 'Washington Nationals', established: '1969' }
 *             ]
 *          });
 *
 *          Ext.create('My.cool.View', {
 *              store: Ext.StoreMgr.get('baseball'),
 *              tpl: [
 *                  '<tpl for=".">', 
 *                      '<p class="team">', 
 *                          'The {team} were founded in {established}.',
 *                      '</p>', 
 *                  '</tpl>'
 *              ],
 *              itemSelector: 'p.team',
 *              renderTo: Ext.getBody()
 *          });
 *      });
 */
Ext.define('Ext.ux.DataView.Draggable', {
    requires: 'Ext.dd.DragZone',
    /**
     * @cfg {String} ghostCls The CSS class added to the outermost element of the created ghost proxy
     * (defaults to 'x-dataview-draggable-ghost')
     */
    ghostCls: 'x-dataview-draggable-ghost',
    /**
     * @cfg {Ext.XTemplate/Array} ghostTpl The template used in the ghost DataView
     */
    ghostTpl: [
        '<tpl for=".">',
        '{title}',
        '</tpl>'
    ],
    /**
     * @cfg {Object} ddConfig Config object that is applied to the internally created DragZone
     */
    /**
     * @cfg {String} ghostConfig Config object that is used to configure the internally created DataView
     */
    init: function(dataview, config) {
        /**
         * @property dataview
         * @type Ext.view.View
         * The Ext.view.View instance that this DragZone is attached to
         */
        this.dataview = dataview;
        dataview.on('render', this.onRender, this);
        Ext.apply(this, {
            itemSelector: dataview.itemSelector,
            ghostConfig: {}
        }, config || {});
        Ext.applyIf(this.ghostConfig, {
            itemSelector: 'img',
            cls: this.ghostCls,
            tpl: this.ghostTpl
        });
    },
    /**
     * @private
     * Called when the attached DataView is rendered. Sets up the internal DragZone
     */
    onRender: function() {
        var config = Ext.apply({}, this.ddConfig || {}, {
                dvDraggable: this,
                dataview: this.dataview,
                getDragData: this.getDragData,
                getTreeNode: this.getTreeNode,
                afterRepair: this.afterRepair,
                getRepairXY: this.getRepairXY
            });
        /**
         * @property dragZone
         * @type Ext.dd.DragZone
         * The attached DragZone instane
         */
        this.dragZone = Ext.create('Ext.dd.DragZone', this.dataview.getEl(), config);
    },
    getDragData: function(e) {
        var draggable = this.dvDraggable,
            dataview = this.dataview,
            selModel = dataview.getSelectionModel(),
            target = e.getTarget(draggable.itemSelector),
            selected, dragData;
        if (target) {
            if (!dataview.isSelected(target)) {
                selModel.select(dataview.getRecord(target));
            }
            selected = dataview.getSelectedNodes();
            dragData = {
                copy: true,
                nodes: selected,
                records: selModel.getSelection(),
                item: true
            };
            if (selected.length === 1) {
                dragData.single = true;
                dragData.ddel = target;
            } else {
                dragData.multi = true;
                dragData.ddel = draggable.prepareGhost(selModel.getSelection());
            }
            return dragData;
        }
        return false;
    },
    getTreeNode: function() {},
    // console.log('test');
    afterRepair: function() {
        this.dragging = false;
        var nodes = this.dragData.nodes,
            length = nodes.length,
            i;
        //FIXME: Ext.fly does not work here for some reason, only frames the last node
        for (i = 0; i < length; i++) {
            Ext.get(nodes[i]).frame('#8db2e3', 1);
        }
    },
    /**
     * @private
     * Returns the x and y co-ordinates that the dragged item should be animated back to if it was dropped on an
     * invalid drop target. If we're dragging more than one item we don't animate back and just allow afterRepair
     * to frame each dropped item.
     */
    getRepairXY: function(e) {
        if (this.dragData.multi) {
            return false;
        } else {
            var repairEl = Ext.get(this.dragData.ddel),
                repairXY = repairEl.getXY();
            //take the item's margins and padding into account to make the repair animation line up perfectly
            repairXY[0] += repairEl.getPadding('t') + repairEl.getMargin('t');
            repairXY[1] += repairEl.getPadding('l') + repairEl.getMargin('l');
            return repairXY;
        }
    },
    /**
     * Updates the internal ghost DataView by ensuring it is rendered and contains the correct records
     * @param {Array} records The set of records that is currently selected in the parent DataView
     * @return {HTMLElement} The Ghost DataView's encapsulating HtmnlElement.
     */
    prepareGhost: function(records) {
        return this.createGhost(records).getEl().dom;
    },
    /**
     * @private
     * Creates the 'ghost' DataView that follows the mouse cursor during the drag operation. This div is usually a
     * lighter-weight representation of just the nodes that are selected in the parent DataView.
     */
    createGhost: function(records) {
        var me = this,
            store;
        if (me.ghost) {
            (store = me.ghost.store).loadRecords(records);
        } else {
            store = Ext.create('Ext.data.Store', {
                model: records[0].self
            });
            store.loadRecords(records);
            me.ghost = Ext.create('Ext.view.View', Ext.apply({
                renderTo: document.createElement('div'),
                store: store
            }, me.ghostConfig));
            me.ghost.container.skipGarbageCollection = me.ghost.el.skipGarbageCollection = true;
        }
        store.clearData();
        return me.ghost;
    },
    destroy: function() {
        if (this.ghost) {
            this.ghost.container.destroy();
            this.ghost.destroy();
        }
    }
});

/**
 *
 */
Ext.define('Ext.ux.DataView.LabelEditor', {
    extend: 'Ext.Editor',
    alignment: 'tl-tl',
    completeOnEnter: true,
    cancelOnEsc: true,
    shim: false,
    autoSize: {
        width: 'boundEl',
        height: 'field'
    },
    labelSelector: 'x-editable',
    requires: [
        'Ext.form.field.Text'
    ],
    constructor: function(config) {
        config.field = config.field || Ext.create('Ext.form.field.Text', {
            allowOnlyWhitespace: false,
            selectOnFocus: true
        });
        this.callParent([
            config
        ]);
    },
    init: function(view) {
        this.view = view;
        this.mon(view, 'afterrender', this.bindEvents, this);
        this.on('complete', this.onSave, this);
    },
    // initialize events
    bindEvents: function() {
        this.mon(this.view.getEl(), {
            click: {
                fn: this.onClick,
                scope: this
            }
        });
    },
    // on mousedown show editor
    onClick: function(e, target) {
        var me = this,
            item, record;
        if (Ext.fly(target).hasCls(me.labelSelector) && !me.editing && !e.ctrlKey && !e.shiftKey) {
            e.stopEvent();
            item = me.view.findItemByChild(target);
            record = me.view.store.getAt(me.view.indexOf(item));
            me.startEdit(target, record.data[me.dataIndex]);
            me.activeRecord = record;
        } else if (me.editing) {
            me.field.blur();
            e.preventDefault();
        }
    },
    // update record
    onSave: function(ed, value) {
        this.activeRecord.set(this.dataIndex, value);
    }
});

/**
 * An explorer component for navigating hierarchical content.  Consists of a breadcrumb bar
 * at the top, tree navigation on the left, and a center panel which displays the contents
 * of a given node.
 */
Ext.define('Ext.ux.Explorer', {
    extend: 'Ext.panel.Panel',
    xtype: 'explorer',
    requires: [
        'Ext.layout.container.Border',
        'Ext.toolbar.Breadcrumb',
        'Ext.tree.Panel'
    ],
    config: {
        /**
         * @cfg {Object} breadcrumb
         * Configuration object for the breadcrumb toolbar
         */
        breadcrumb: {
            dock: 'top',
            xtype: 'breadcrumb',
            reference: 'breadcrumb'
        },
        /**
         * @cfg {Object} contentView
         * Configuration object for the "content" data view
         */
        contentView: {
            xtype: 'dataview',
            reference: 'contentView',
            region: 'center',
            cls: Ext.baseCSSPrefix + 'explorer-view',
            itemSelector: '.' + Ext.baseCSSPrefix + 'explorer-item',
            tpl: '<tpl for=".">' + '<div class="' + Ext.baseCSSPrefix + 'explorer-item">' + '<div class="{iconCls}">' + '<div class="' + Ext.baseCSSPrefix + 'explorer-node-icon' + '{[values.leaf ? " ' + Ext.baseCSSPrefix + 'explorer-leaf-icon' + '" : ""]}' + '">' + '</div>' + '<div class="' + Ext.baseCSSPrefix + 'explorer-item-text">{text}</div>' + '</div>' + '</div>' + '</tpl>'
        },
        /**
         * @cfg {Ext.data.TreeStore} store
         * The TreeStore to use as the data source
         */
        store: null,
        /**
         * @cfg {Object} tree
         * Configuration object for the tree
         */
        tree: {
            xtype: 'treepanel',
            reference: 'tree',
            region: 'west',
            width: 200
        }
    },
    renderConfig: {
        /**
         * @cfg {Ext.data.TreeModel} selection
         * The selected node
         * @accessor
         */
        selection: null
    },
    layout: 'border',
    referenceHolder: true,
    defaultListenerScope: true,
    cls: Ext.baseCSSPrefix + 'explorer',
    initComponent: function() {
        var me = this,
            store = me.getStore();
        if (!store) {
            Ext.Error.raise('Ext.ux.Explorer requires a store.');
        }
        me.dockedItems = [
            me.getBreadcrumb()
        ];
        me.items = [
            me.getTree(),
            me.getContentView()
        ];
        me.callParent();
    },
    applyBreadcrumb: function(breadcrumb) {
        var store = this.getStore();
        breadcrumb = Ext.create(Ext.apply({
            store: store,
            selection: store.getRoot()
        }, breadcrumb));
        breadcrumb.on('selectionchange', '_onBreadcrumbSelectionChange', this);
        return breadcrumb;
    },
    applyContentView: function(contentView) {
        /**
         * @property {Ext.data.Store} contentStore
         * @private
         * The backing store for the content view
         */
        var contentStore = this.contentStore = new Ext.data.Store({
                model: this.getStore().model
            });
        contentView = Ext.create(Ext.apply({
            store: contentStore
        }, contentView));
        return contentView;
    },
    applyTree: function(tree) {
        tree = Ext.create(Ext.apply({
            store: this.getStore()
        }, tree));
        tree.on('selectionchange', '_onTreeSelectionChange', this);
        return tree;
    },
    updateSelection: function(node) {
        var me = this,
            refs = me.getReferences(),
            breadcrumb = refs.breadcrumb,
            tree = refs.tree,
            treeSelectionModel = tree.getSelectionModel(),
            contentStore = me.contentStore,
            parentNode, treeView;
        if (breadcrumb.getSelection() !== node) {
            breadcrumb.setSelection(node);
        }
        if (treeSelectionModel.getSelection()[0] !== node) {
            treeSelectionModel.select([
                node
            ]);
            parentNode = node.parentNode;
            if (parentNode) {
                parentNode.expand();
            }
            treeView = tree.getView();
            treeView.scrollRowIntoView(treeView.getRow(node));
        }
        contentStore.removeAll();
        contentStore.add(node.hasChildNodes() ? node.childNodes : [
            node
        ]);
    },
    updateStore: function(store) {
        this.getBreadcrumb().setStore(store);
    },
    privates: {
        /**
         * Handles the tree's selectionchange event
         * @private
         * @param {Ext.tree.Panel} tree
         * @param {Ext.data.TreeModel[]} selection
         */
        _onTreeSelectionChange: function(tree, selection) {
            this.setSelection(selection[0]);
        },
        /**
         * Handles the breadcrumb bar's selectionchange event
         */
        _onBreadcrumbSelectionChange: function(breadcrumb, selection) {
            this.setSelection(selection);
        }
    }
});

/**
 * <p>A plugin for Field Components which creates clones of the Field for as
 * long as the user keeps filling them. Leaving the final one blank ends the repeating series.</p>
 * <p>Usage:</p>
 * <pre><code>
    {
        xtype: 'combo',
        plugins: [ Ext.ux.FieldReplicator ],
        triggerAction: 'all',
        fieldLabel: 'Select recipient',
        store: recipientStore
    }
 * </code></pre>
 */
Ext.define('Ext.ux.FieldReplicator', {
    alias: 'plugin.fieldreplicator',
    init: function(field) {
        // Assign the field an id grouping it with fields cloned from it. If it already
        // has an id that means it is itself a clone.
        if (!field.replicatorId) {
            field.replicatorId = Ext.id();
        }
        field.on('blur', this.onBlur, this);
    },
    onBlur: function(field) {
        var ownerCt = field.ownerCt,
            replicatorId = field.replicatorId,
            isEmpty = Ext.isEmpty(field.getRawValue()),
            siblings = ownerCt.query('[replicatorId=' + replicatorId + ']'),
            isLastInGroup = siblings[siblings.length - 1] === field,
            clone, idx;
        // If a field before the final one was blanked out, remove it
        if (isEmpty && !isLastInGroup) {
            Ext.Function.defer(field.destroy, 10, field);
        }
        //delay to allow tab key to move focus first
        // If the field is the last in the list and has a value, add a cloned field after it
        else if (!isEmpty && isLastInGroup) {
            if (field.onReplicate) {
                field.onReplicate();
            }
            clone = field.cloneConfig({
                replicatorId: replicatorId
            });
            idx = ownerCt.items.indexOf(field);
            ownerCt.add(idx + 1, clone);
        }
    }
});

/**
 * @author Shea Frederick
 *
 * The GMap Panel UX extends `Ext.panel.Panel` in order to display Google Maps.
 *
 * It is important to note that you must include the following Google Maps API above bootstrap.js in your 
 * application's index.html file (or equivilant).
 *
 *     <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3&sensor=false"></script>
 *
 * It is important to note that due to the Google Maps loader, you cannot currently include
 * the above JS resource in the Cmd generated app.json file.  Doing so interferes with the loading of
 * Ext JS and Google Maps. 
 *
 * The following example creates a window containing a GMap Panel.  In this case, the center 
 * is set as geoCodeAddr, which is a string that Google translates into longitude and latitude.
 * 
 *     var mapwin = Ext.create('Ext.Window', {
 *         layout: 'fit',
 *         title: 'GMap Window',
 *         width: 450,
 *         height: 250,
 *         items: {
 *             xtype: 'gmappanel',
 *             gmapType: 'map',
 *             center: {
 *                 geoCodeAddr: "221B Baker Street",
 *                 marker: {
 *                     title: 'Holmes Home'
 *                 }
 *             },
 *             mapOptions : {
 *                 mapTypeId: google.maps.MapTypeId.ROADMAP
 *             }
 *         }
 *     }).show();
 * 
 */
Ext.define('Ext.ux.GMapPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.gmappanel',
    requires: [
        'Ext.window.MessageBox'
    ],
    initComponent: function() {
        Ext.applyIf(this, {
            plain: true,
            gmapType: 'map',
            border: false
        });
        this.callParent();
    },
    onBoxReady: function() {
        var center = this.center;
        this.callParent(arguments);
        if (center) {
            if (center.geoCodeAddr) {
                this.lookupCode(center.geoCodeAddr, center.marker);
            } else {
                this.createMap(center);
            }
        } else {
            Ext.Error.raise('center is required');
        }
    },
    createMap: function(center, marker) {
        var options = Ext.apply({}, this.mapOptions);
        options = Ext.applyIf(options, {
            zoom: 14,
            center: center,
            mapTypeId: google.maps.MapTypeId.HYBRID
        });
        this.gmap = new google.maps.Map(this.body.dom, options);
        if (marker) {
            this.addMarker(Ext.applyIf(marker, {
                position: center
            }));
        }
        Ext.each(this.markers, this.addMarker, this);
        this.fireEvent('mapready', this, this.gmap);
    },
    addMarker: function(marker) {
        marker = Ext.apply({
            map: this.gmap
        }, marker);
        if (!marker.position) {
            marker.position = new google.maps.LatLng(marker.lat, marker.lng);
        }
        var o = new google.maps.Marker(marker);
        Ext.Object.each(marker.listeners, function(name, fn) {
            google.maps.event.addListener(o, name, fn);
        });
        return o;
    },
    lookupCode: function(addr, marker) {
        this.geocoder = new google.maps.Geocoder();
        this.geocoder.geocode({
            address: addr
        }, Ext.Function.bind(this.onLookupComplete, this, [
            marker
        ], true));
    },
    onLookupComplete: function(data, response, marker) {
        if (response != 'OK') {
            Ext.MessageBox.alert('Error', 'An error occured: "' + response + '"');
            return;
        }
        this.createMap(data[0].geometry.location, marker);
    },
    afterComponentLayout: function(w, h) {
        this.callParent(arguments);
        this.redraw();
    },
    redraw: function() {
        var map = this.gmap;
        if (map) {
            google.maps.event.trigger(map, 'resize');
        }
    }
});

/**
* Allows GroupTab to render a table structure.
*/
Ext.define('Ext.ux.GroupTabRenderer', {
    extend: 'Ext.plugin.Abstract',
    alias: 'plugin.grouptabrenderer',
    tableTpl: new Ext.XTemplate('<div id="{view.id}-body" class="' + Ext.baseCSSPrefix + '{view.id}-table ' + Ext.baseCSSPrefix + 'grid-table-resizer" style="{tableStyle}">', '{%', 'values.view.renderRows(values.rows, values.viewStartIndex, out);', '%}', '</div>', {
        priority: 5
    }),
    rowTpl: new Ext.XTemplate('{%', 'Ext.Array.remove(values.itemClasses, "', Ext.baseCSSPrefix + 'grid-row");', 'var dataRowCls = values.recordIndex === -1 ? "" : " ' + Ext.baseCSSPrefix + 'grid-data-row";', '%}', '<div {[values.rowId ? ("id=\\"" + values.rowId + "\\"") : ""]} ', 'data-boundView="{view.id}" ', 'data-recordId="{record.internalId}" ', 'data-recordIndex="{recordIndex}" ', 'class="' + Ext.baseCSSPrefix + 'grouptab-row {[values.itemClasses.join(" ")]} {[values.rowClasses.join(" ")]}{[dataRowCls]}" ', '{rowAttr:attributes}>', '<tpl for="columns">' + '{%', 'parent.view.renderCell(values, parent.record, parent.recordIndex, parent.rowIndex, xindex - 1, out, parent)', '%}', '</tpl>', '</div>', {
        priority: 5
    }),
    cellTpl: new Ext.XTemplate('{%values.tdCls = values.tdCls.replace(" ' + Ext.baseCSSPrefix + 'grid-cell "," ");%}', '<div class="' + Ext.baseCSSPrefix + 'grouptab-cell {tdCls}" {tdAttr}>', '<div {unselectableAttr} class="' + Ext.baseCSSPrefix + 'grid-cell-inner" style="text-align: {align}; {style};">{value}</div>', '<div class="x-grouptabs-corner x-grouptabs-corner-top-left"></div>', '<div class="x-grouptabs-corner x-grouptabs-corner-bottom-left"></div>', '</div>', {
        priority: 5
    }),
    selectors: {
        // Outer table
        bodySelector: 'div.' + Ext.baseCSSPrefix + 'grid-table-resizer',
        // Element which contains rows
        nodeContainerSelector: 'div.' + Ext.baseCSSPrefix + 'grid-table-resizer',
        // row
        itemSelector: 'div.' + Ext.baseCSSPrefix + 'grouptab-row',
        // row which contains cells as opposed to wrapping rows
        rowSelector: 'div.' + Ext.baseCSSPrefix + 'grouptab-row',
        // cell
        cellSelector: 'div.' + Ext.baseCSSPrefix + 'grouptab-cell',
        getCellSelector: function(header) {
            return header ? header.getCellSelector() : this.cellSelector;
        }
    },
    init: function(grid) {
        var view = grid.getView(),
            me = this;
        view.addTpl(me.tableTpl);
        view.addRowTpl(me.rowTpl);
        view.addCellTpl(me.cellTpl);
        Ext.apply(view, me.selectors);
    }
});

/**
 * @author Nicolas Ferrero
 * A TabPanel with grouping support.
 */
Ext.define('Ext.ux.GroupTabPanel', {
    extend: 'Ext.Container',
    alias: 'widget.grouptabpanel',
    requires: [
        'Ext.tree.Panel',
        'Ext.ux.GroupTabRenderer'
    ],
    baseCls: Ext.baseCSSPrefix + 'grouptabpanel',
    /**
     * @event beforetabchange
     * Fires before a tab change (activated by {@link #setActiveTab}). Return false in any listener to cancel
     * the tabchange
     * @param {Ext.ux.GroupTabPanel} grouptabPanel The GroupTabPanel
     * @param {Ext.Component} newCard The card that is about to be activated
     * @param {Ext.Component} oldCard The card that is currently active
     */
    /**
     * @event tabchange
     * Fires when a new tab has been activated (activated by {@link #setActiveTab}).
     * @param {Ext.ux.GroupTabPanel} grouptabPanel The GroupTabPanel
     * @param {Ext.Component} newCard The newly activated item
     * @param {Ext.Component} oldCard The previously active item
     */
    /**
     * @event beforegroupchange
     * Fires before a group change (activated by {@link #setActiveGroup}). Return false in any listener to cancel
     * the groupchange
     * @param {Ext.ux.GroupTabPanel} grouptabPanel The GroupTabPanel
     * @param {Ext.Component} newGroup The root group card that is about to be activated
     * @param {Ext.Component} oldGroup The root group card that is currently active
     */
    /**
     * @event groupchange
     * Fires when a new group has been activated (activated by {@link #setActiveGroup}).
     * @param {Ext.ux.GroupTabPanel} grouptabPanel The GroupTabPanel
     * @param {Ext.Component} newGroup The newly activated root group item
     * @param {Ext.Component} oldGroup The previously active root group item
     */
    initComponent: function(config) {
        var me = this;
        Ext.apply(me, config);
        // Processes items to create the TreeStore and also set up
        // "this.cards" containing the actual card items.
        me.store = me.createTreeStore();
        me.layout = {
            type: 'hbox',
            align: 'stretch'
        };
        me.defaults = {
            border: false
        };
        me.items = [
            {
                xtype: 'treepanel',
                cls: 'x-tree-panel x-grouptabbar',
                width: 150,
                rootVisible: false,
                store: me.store,
                hideHeaders: true,
                animate: false,
                processEvent: Ext.emptyFn,
                border: false,
                plugins: [
                    {
                        ptype: 'grouptabrenderer'
                    }
                ],
                viewConfig: {
                    overItemCls: '',
                    getRowClass: me.getRowClass
                },
                columns: [
                    {
                        xtype: 'treecolumn',
                        sortable: false,
                        dataIndex: 'text',
                        flex: 1,
                        renderer: function(value, cell, node, idx1, idx2, store, tree) {
                            var cls = '';
                            if (node.parentNode && node.parentNode.parentNode === null) {
                                cls += ' x-grouptab-first';
                                if (node.previousSibling) {
                                    cls += ' x-grouptab-prev';
                                }
                                if (!node.get('expanded') || node.firstChild == null) {
                                    cls += ' x-grouptab-last';
                                }
                            } else if (node.nextSibling === null) {
                                cls += ' x-grouptab-last';
                            } else {
                                cls += ' x-grouptab-center';
                            }
                            if (node.data.activeTab) {
                                cls += ' x-active-tab';
                            }
                            cell.tdCls = 'x-grouptab' + cls;
                            return value;
                        }
                    }
                ]
            },
            {
                xtype: 'container',
                flex: 1,
                layout: 'card',
                activeItem: me.mainItem,
                baseCls: Ext.baseCSSPrefix + 'grouptabcontainer',
                items: me.cards
            }
        ];
        me.callParent(arguments);
        me.setActiveTab(me.activeTab);
        me.setActiveGroup(me.activeGroup);
        me.mon(me.down('treepanel').getSelectionModel(), 'select', me.onNodeSelect, me);
    },
    getRowClass: function(node, rowIndex, rowParams, store) {
        var cls = '';
        if (node.data.activeGroup) {
            cls += ' x-active-group';
        }
        return cls;
    },
    /**
     * @private
     * Node selection listener.
     */
    onNodeSelect: function(selModel, node) {
        var me = this,
            currentNode = me.store.getRootNode(),
            parent;
        if (node.parentNode && node.parentNode.parentNode === null) {
            parent = node;
        } else {
            parent = node.parentNode;
        }
        if (me.setActiveGroup(parent.get('id')) === false || me.setActiveTab(node.get('id')) === false) {
            return false;
        }
        while (currentNode) {
            currentNode.set('activeTab', false);
            currentNode.set('activeGroup', false);
            currentNode = currentNode.firstChild || currentNode.nextSibling || currentNode.parentNode.nextSibling;
        }
        parent.set('activeGroup', true);
        parent.eachChild(function(child) {
            child.set('activeGroup', true);
        });
        node.set('activeTab', true);
        selModel.view.refresh();
    },
    /**
     * Makes the given component active (makes it the visible card in the GroupTabPanel's CardLayout)
     * @param {Ext.Component} cmp The component to make active
     */
    setActiveTab: function(cmp) {
        var me = this,
            newTab = cmp,
            oldTab;
        if (Ext.isString(cmp)) {
            newTab = Ext.getCmp(newTab);
        }
        if (newTab === me.activeTab) {
            return false;
        }
        oldTab = me.activeTab;
        if (me.fireEvent('beforetabchange', me, newTab, oldTab) !== false) {
            me.activeTab = newTab;
            if (me.rendered) {
                me.down('container[baseCls=' + Ext.baseCSSPrefix + 'grouptabcontainer' + ']').getLayout().setActiveItem(newTab);
            }
            me.fireEvent('tabchange', me, newTab, oldTab);
        }
        return true;
    },
    /**
     * Makes the given group active
     * @param {Ext.Component} cmp The root component to make active.
     */
    setActiveGroup: function(cmp) {
        var me = this,
            newGroup = cmp,
            oldGroup;
        if (Ext.isString(cmp)) {
            newGroup = Ext.getCmp(newGroup);
        }
        if (newGroup === me.activeGroup) {
            return true;
        }
        oldGroup = me.activeGroup;
        if (me.fireEvent('beforegroupchange', me, newGroup, oldGroup) !== false) {
            me.activeGroup = newGroup;
            me.fireEvent('groupchange', me, newGroup, oldGroup);
        } else {
            return false;
        }
        return true;
    },
    /**
     * @private
     * Creates the TreeStore used by the GroupTabBar.
     */
    createTreeStore: function() {
        var me = this,
            groups = me.prepareItems(me.items),
            data = {
                text: '.',
                children: []
            },
            cards = me.cards = [];
        me.activeGroup = me.activeGroup || 0;
        Ext.each(groups, function(groupItem, idx) {
            var leafItems = groupItem.items.items,
                rootItem = (leafItems[groupItem.mainItem] || leafItems[0]),
                groupRoot = {
                    children: []
                };
            // Create the root node of the group
            groupRoot.id = rootItem.id;
            groupRoot.text = rootItem.title;
            groupRoot.iconCls = rootItem.iconCls;
            groupRoot.expanded = true;
            groupRoot.activeGroup = (me.activeGroup === idx);
            groupRoot.activeTab = groupRoot.activeGroup ? true : false;
            if (groupRoot.activeTab) {
                me.activeTab = groupRoot.id;
            }
            if (groupRoot.activeGroup) {
                me.mainItem = groupItem.mainItem || 0;
                me.activeGroup = groupRoot.id;
            }
            Ext.each(leafItems, function(leafItem) {
                // First node has been done
                if (leafItem.id !== groupRoot.id) {
                    var child = {
                            id: leafItem.id,
                            leaf: true,
                            text: leafItem.title,
                            iconCls: leafItem.iconCls,
                            activeGroup: groupRoot.activeGroup,
                            activeTab: false
                        };
                    groupRoot.children.push(child);
                }
                // Ensure the items do not get headers
                delete leafItem.title;
                delete leafItem.iconCls;
                cards.push(leafItem);
            });
            data.children.push(groupRoot);
        });
        return Ext.create('Ext.data.TreeStore', {
            fields: [
                'id',
                'text',
                'activeGroup',
                'activeTab'
            ],
            root: {
                expanded: true
            },
            proxy: {
                type: 'memory',
                data: data
            }
        });
    },
    /**
     * Returns the item that is currently active inside this GroupTabPanel.
     * @return {Ext.Component/Number} The currently active item
     */
    getActiveTab: function() {
        return this.activeTab;
    },
    /**
     * Returns the root group item that is currently active inside this GroupTabPanel.
     * @return {Ext.Component/Number} The currently active root group item
     */
    getActiveGroup: function() {
        return this.activeGroup;
    }
});

/**
 * Barebones iframe implementation. 
 */
Ext.define('Ext.ux.IFrame', {
    extend: 'Ext.Component',
    alias: 'widget.uxiframe',
    loadMask: 'Loading...',
    src: 'about:blank',
    renderTpl: [
        '<iframe src="{src}" id="{id}-iframeEl" data-ref="iframeEl" name="{frameName}" width="100%" height="100%" frameborder="0"></iframe>'
    ],
    childEls: [
        'iframeEl'
    ],
    initComponent: function() {
        this.callParent();
        this.frameName = this.frameName || this.id + '-frame';
    },
    initEvents: function() {
        var me = this;
        me.callParent();
        me.iframeEl.on('load', me.onLoad, me);
    },
    initRenderData: function() {
        return Ext.apply(this.callParent(), {
            src: this.src,
            frameName: this.frameName
        });
    },
    getBody: function() {
        var doc = this.getDoc();
        return doc.body || doc.documentElement;
    },
    getDoc: function() {
        try {
            return this.getWin().document;
        } catch (ex) {
            return null;
        }
    },
    getWin: function() {
        var me = this,
            name = me.frameName,
            win = Ext.isIE ? me.iframeEl.dom.contentWindow : window.frames[name];
        return win;
    },
    getFrame: function() {
        var me = this;
        return me.iframeEl.dom;
    },
    beforeDestroy: function() {
        this.cleanupListeners(true);
        this.callParent();
    },
    cleanupListeners: function(destroying) {
        var doc, prop;
        if (this.rendered) {
            try {
                doc = this.getDoc();
                if (doc) {
                    Ext.get(doc).un(this._docListeners);
                    if (destroying) {
                        for (prop in doc) {
                            if (doc.hasOwnProperty && doc.hasOwnProperty(prop)) {
                                delete doc[prop];
                            }
                        }
                    }
                }
            } catch (e) {}
        }
    },
    onLoad: function() {
        var me = this,
            doc = me.getDoc(),
            fn = me.onRelayedEvent;
        if (doc) {
            try {
                // These events need to be relayed from the inner document (where they stop
                // bubbling) up to the outer document. This has to be done at the DOM level so
                // the event reaches listeners on elements like the document body. The effected
                // mechanisms that depend on this bubbling behavior are listed to the right
                // of the event.
                Ext.get(doc).on(me._docListeners = {
                    mousedown: fn,
                    // menu dismisal (MenuManager) and Window onMouseDown (toFront)
                    mousemove: fn,
                    // window resize drag detection
                    mouseup: fn,
                    // window resize termination
                    click: fn,
                    // not sure, but just to be safe
                    dblclick: fn,
                    // not sure again
                    scope: me
                });
            } catch (e) {}
            // cannot do this xss
            // We need to be sure we remove all our events from the iframe on unload or we're going to LEAK!
            Ext.get(this.getWin()).on('beforeunload', me.cleanupListeners, me);
            this.el.unmask();
            this.fireEvent('load', this);
        } else if (me.src) {
            this.el.unmask();
            this.fireEvent('error', this);
        }
    },
    onRelayedEvent: function(event) {
        // relay event from the iframe's document to the document that owns the iframe...
        var iframeEl = this.iframeEl,
            // Get the left-based iframe position
            iframeXY = iframeEl.getTrueXY(),
            originalEventXY = event.getXY(),
            // Get the left-based XY position.
            // This is because the consumer of the injected event will
            // perform its own RTL normalization.
            eventXY = event.getTrueXY();
        // the event from the inner document has XY relative to that document's origin,
        // so adjust it to use the origin of the iframe in the outer document:
        event.xy = [
            iframeXY[0] + eventXY[0],
            iframeXY[1] + eventXY[1]
        ];
        event.injectEvent(iframeEl);
        // blame the iframe for the event...
        event.xy = originalEventXY;
    },
    // restore the original XY (just for safety)
    load: function(src) {
        var me = this,
            text = me.loadMask,
            frame = me.getFrame();
        if (me.fireEvent('beforeload', me, src) !== false) {
            if (text && me.el) {
                me.el.mask(text);
            }
            frame.src = me.src = (src || me.src);
        }
    }
});
/*
 * TODO items:
 *
 * Iframe should clean up any Ext.dom.Element wrappers around its window, document
 * documentElement and body when it is destroyed.  This helps prevent "Permission Denied"
 * errors in IE when Ext.dom.GarbageCollector tries to access those objects on an orphaned
 * iframe.  Permission Denied errors can occur in one of the following 2 scenarios:
 *
 *     a. When an iframe is removed from the document, and all references to it have been
 *     removed, IE will "clear" the window object.  At this point the window object becomes
 *     completely inaccessible - accessing any of its properties results in a "Permission
 *     Denied" error. http://msdn.microsoft.com/en-us/library/ie/hh180174(v=vs.85).aspx
 *
 *     b. When an iframe is unloaded (either by navigating to a new url, or via document.open/
 *     document.write, new html and body elements are created and the old the html and body
 *     elements are orphaned.  Accessing the html and body elements or any of their properties
 *     results in a "Permission Denied" error.
 */

/**
 * Basic status bar component that can be used as the bottom toolbar of any {@link Ext.Panel}.  In addition to
 * supporting the standard {@link Ext.toolbar.Toolbar} interface for adding buttons, menus and other items, the StatusBar
 * provides a greedy status element that can be aligned to either side and has convenient methods for setting the
 * status text and icon.  You can also indicate that something is processing using the {@link #showBusy} method.
 *
 *     Ext.create('Ext.Panel', {
 *         title: 'StatusBar',
 *         // etc.
 *         bbar: Ext.create('Ext.ux.StatusBar', {
 *             id: 'my-status',
 *      
 *             // defaults to use when the status is cleared:
 *             defaultText: 'Default status text',
 *             defaultIconCls: 'default-icon',
 *      
 *             // values to set initially:
 *             text: 'Ready',
 *             iconCls: 'ready-icon',
 *      
 *             // any standard Toolbar items:
 *             items: [{
 *                 text: 'A Button'
 *             }, '-', 'Plain Text']
 *         })
 *     });
 *
 *     // Update the status bar later in code:
 *     var sb = Ext.getCmp('my-status');
 *     sb.setStatus({
 *         text: 'OK',
 *         iconCls: 'ok-icon',
 *         clear: true // auto-clear after a set interval
 *     });
 *
 *     // Set the status bar to show that something is processing:
 *     sb.showBusy();
 *
 *     // processing....
 *
 *     sb.clearStatus(); // once completeed
 *
 */
Ext.define('Ext.ux.statusbar.StatusBar', {
    extend: 'Ext.toolbar.Toolbar',
    alternateClassName: 'Ext.ux.StatusBar',
    alias: 'widget.statusbar',
    requires: [
        'Ext.toolbar.TextItem'
    ],
    /**
     * @cfg {String} statusAlign
     * The alignment of the status element within the overall StatusBar layout.  When the StatusBar is rendered,
     * it creates an internal div containing the status text and icon.  Any additional Toolbar items added in the
     * StatusBar's {@link #cfg-items} config, or added via {@link #method-add} or any of the supported add* methods, will be
     * rendered, in added order, to the opposite side.  The status element is greedy, so it will automatically
     * expand to take up all sapce left over by any other items.  Example usage:
     *
     *     // Create a left-aligned status bar containing a button,
     *     // separator and text item that will be right-aligned (default):
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     *
     *     // By adding the statusAlign config, this will create the
     *     // exact same toolbar, except the status and toolbar item
     *     // layout will be reversed from the previous example:
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             statusAlign: 'right',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     */
    /**
     * @cfg {String} [defaultText='']
     * The default {@link #text} value.  This will be used anytime the status bar is cleared with the
     * `useDefaults:true` option.
     */
    /**
     * @cfg {String} [defaultIconCls='']
     * The default {@link #iconCls} value (see the iconCls docs for additional details about customizing the icon).
     * This will be used anytime the status bar is cleared with the `useDefaults:true` option.
     */
    /**
     * @cfg {String} text
     * A string that will be <b>initially</b> set as the status message.  This string
     * will be set as innerHTML (html tags are accepted) for the toolbar item.
     * If not specified, the value set for {@link #defaultText} will be used.
     */
    /**
     * @cfg {String} [iconCls='']
     * A CSS class that will be **initially** set as the status bar icon and is
     * expected to provide a background image.
     *
     * Example usage:
     *
     *     // Example CSS rule:
     *     .x-statusbar .x-status-custom {
     *         padding-left: 25px;
     *         background: transparent url(images/custom-icon.gif) no-repeat 3px 2px;
     *     }
     *
     *     // Setting a default icon:
     *     var sb = Ext.create('Ext.ux.statusbar.StatusBar', {
     *         defaultIconCls: 'x-status-custom'
     *     });
     *
     *     // Changing the icon:
     *     sb.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom'
     *     });
     */
    /**
     * @cfg {String} cls
     * The base class applied to the containing element for this component on render.
     */
    cls: 'x-statusbar',
    /**
     * @cfg {String} busyIconCls
     * The default {@link #iconCls} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showBusy}.
     */
    busyIconCls: 'x-status-busy',
    /**
     * @cfg {String} busyText
     * The default {@link #text} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `text` argument into {@link #showBusy}.
     */
    busyText: 'Loading...',
    /**
     * @cfg {Number} autoClear
     * The number of milliseconds to wait after setting the status via
     * {@link #setStatus} before automatically clearing the status text and icon.
     * Note that this only applies when passing the `clear` argument to {@link #setStatus}
     * since that is the only way to defer clearing the status.  This can
     * be overridden by specifying a different `wait` value in {@link #setStatus}.
     * Calls to {@link #clearStatus} always clear the status bar immediately and ignore this value.
     */
    autoClear: 5000,
    /**
     * @cfg {String} emptyText
     * The text string to use if no text has been set. If there are no other items in
     * the toolbar using an empty string (`''`) for this value would end up in the toolbar
     * height collapsing since the empty string will not maintain the toolbar height.
     * Use `''` if the toolbar should collapse in height vertically when no text is
     * specified and there are no other items in the toolbar.
     */
    emptyText: '&#160;',
    // private
    activeThreadId: 0,
    // private
    initComponent: function() {
        var right = this.statusAlign === 'right';
        this.callParent(arguments);
        this.currIconCls = this.iconCls || this.defaultIconCls;
        this.statusEl = Ext.create('Ext.toolbar.TextItem', {
            cls: 'x-status-text ' + (this.currIconCls || ''),
            text: this.text || this.defaultText || ''
        });
        if (right) {
            this.cls += ' x-status-right';
            this.add('->');
            this.add(this.statusEl);
        } else {
            this.insert(0, this.statusEl);
            this.insert(1, '->');
        }
    },
    /**
     * Sets the status {@link #text} and/or {@link #iconCls}. Also supports automatically clearing the
     * status that was set after a specified interval.
     *
     * Example usage:
     *
     *     // Simple call to update the text
     *     statusBar.setStatus('New status');
     *
     *     // Set the status and icon, auto-clearing with default options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: true
     *     });
     *
     *     // Auto-clear with custom options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: {
     *             wait: 8000,
     *             anim: false,
     *             useDefaults: false
     *         }
     *     });
     *
     * @param {Object/String} config A config object specifying what status to set, or a string assumed
     * to be the status text (and all other options are defaulted as explained below). A config
     * object containing any or all of the following properties can be passed:
     *
     * @param {String} config.text The status text to display.  If not specified, any current
     * status text will remain unchanged.
     *
     * @param {String} config.iconCls The CSS class used to customize the status icon (see
     * {@link #iconCls} for details). If not specified, any current iconCls will remain unchanged.
     *
     * @param {Boolean/Number/Object} config.clear Allows you to set an internal callback that will
     * automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not
     * specified, the new status will not be auto-cleared and will stay until updated again or cleared using
     * {@link #clearStatus}. If `true` is passed, the status will be cleared using {@link #autoClear},
     * {@link #defaultText} and {@link #defaultIconCls} via a fade out animation. If a numeric value is passed,
     * it will be used as the callback interval (in milliseconds), overriding the {@link #autoClear} value.
     * All other options will be defaulted as with the boolean option.  To customize any other options,
     * you can pass an object in the format:
     * 
     * @param {Number} config.clear.wait The number of milliseconds to wait before clearing
     * (defaults to {@link #autoClear}).
     * @param {Boolean} config.clear.anim False to clear the status immediately once the callback
     * executes (defaults to true which fades the status out).
     * @param {Boolean} config.clear.useDefaults False to completely clear the status text and iconCls
     * (defaults to true which uses {@link #defaultText} and {@link #defaultIconCls}).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setStatus: function(o) {
        var me = this;
        o = o || {};
        Ext.suspendLayouts();
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        if (o.text !== undefined) {
            me.setText(o.text);
        }
        if (o.iconCls !== undefined) {
            me.setIcon(o.iconCls);
        }
        if (o.clear) {
            var c = o.clear,
                wait = me.autoClear,
                defaults = {
                    useDefaults: true,
                    anim: true
                };
            if (Ext.isObject(c)) {
                c = Ext.applyIf(c, defaults);
                if (c.wait) {
                    wait = c.wait;
                }
            } else if (Ext.isNumber(c)) {
                wait = c;
                c = defaults;
            } else if (Ext.isBoolean(c)) {
                c = defaults;
            }
            c.threadId = this.activeThreadId;
            Ext.defer(me.clearStatus, wait, me, [
                c
            ]);
        }
        Ext.resumeLayouts(true);
        return me;
    },
    /**
     * Clears the status {@link #text} and {@link #iconCls}. Also supports clearing via an optional fade out animation.
     *
     * @param {Object} [config] A config object containing any or all of the following properties.  If this
     * object is not specified the status will be cleared using the defaults below:
     * @param {Boolean} config.anim True to clear the status by fading out the status element (defaults
     * to false which clears immediately).
     * @param {Boolean} config.useDefaults True to reset the text and icon using {@link #defaultText} and
     * {@link #defaultIconCls} (defaults to false which sets the text to '' and removes any existing icon class).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    clearStatus: function(o) {
        o = o || {};
        var me = this,
            statusEl = me.statusEl;
        if (o.threadId && o.threadId !== me.activeThreadId) {
            // this means the current call was made internally, but a newer
            // thread has set a message since this call was deferred.  Since
            // we don't want to overwrite a newer message just ignore.
            return me;
        }
        var text = o.useDefaults ? me.defaultText : me.emptyText,
            iconCls = o.useDefaults ? (me.defaultIconCls ? me.defaultIconCls : '') : '';
        if (o.anim) {
            // animate the statusEl Ext.Element
            statusEl.el.puff({
                remove: false,
                useDisplay: true,
                callback: function() {
                    statusEl.el.show();
                    me.setStatus({
                        text: text,
                        iconCls: iconCls
                    });
                }
            });
        } else {
            me.setStatus({
                text: text,
                iconCls: iconCls
            });
        }
        return me;
    },
    /**
     * Convenience method for setting the status text directly.  For more flexible options see {@link #setStatus}.
     * @param {String} text (optional) The text to set (defaults to '')
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setText: function(text) {
        var me = this;
        me.activeThreadId++;
        me.text = text || '';
        if (me.rendered) {
            me.statusEl.setText(me.text);
        }
        return me;
    },
    /**
     * Returns the current status text.
     * @return {String} The status text
     */
    getText: function() {
        return this.text;
    },
    /**
     * Convenience method for setting the status icon directly.  For more flexible options see {@link #setStatus}.
     * See {@link #iconCls} for complete details about customizing the icon.
     * @param {String} iconCls (optional) The icon class to set (defaults to '', and any current icon class is removed)
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setIcon: function(cls) {
        var me = this;
        me.activeThreadId++;
        cls = cls || '';
        if (me.rendered) {
            if (me.currIconCls) {
                me.statusEl.removeCls(me.currIconCls);
                me.currIconCls = null;
            }
            if (cls.length > 0) {
                me.statusEl.addCls(cls);
                me.currIconCls = cls;
            }
        } else {
            me.currIconCls = cls;
        }
        return me;
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "busy" state, usually for loading or processing activities.
     *
     * @param {Object/String} config (optional) A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #busyIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #busyIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showBusy: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.busyText,
            iconCls: this.busyIconCls
        });
        return this.setStatus(o);
    }
});

/**
 * A GridPanel class with live search support.
 * @author Nicolas Ferrero
 */
Ext.define('Ext.ux.LiveSearchGridPanel', {
    extend: 'Ext.grid.Panel',
    requires: [
        'Ext.toolbar.TextItem',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Text',
        'Ext.ux.statusbar.StatusBar'
    ],
    /**
     * @private
     * search value initialization
     */
    searchValue: null,
    /**
     * @private
     * The matched positions from the most recent search
     */
    matches: [],
    /**
     * @private
     * The current index matched.
     */
    currentIndex: null,
    /**
     * @private
     * The generated regular expression used for searching.
     */
    searchRegExp: null,
    /**
     * @private
     * Case sensitive mode.
     */
    caseSensitive: false,
    /**
     * @private
     * Regular expression mode.
     */
    regExpMode: false,
    /**
     * @cfg {String} matchCls
     * The matched string css classe.
     */
    matchCls: 'x-livesearch-match',
    defaultStatusText: 'Nothing Found',
    // Component initialization override: adds the top and bottom toolbars and setup headers renderer.
    initComponent: function() {
        var me = this;
        me.tbar = [
            'Search',
            {
                xtype: 'textfield',
                name: 'searchField',
                hideLabel: true,
                width: 200,
                listeners: {
                    change: {
                        fn: me.onTextFieldChange,
                        scope: this,
                        buffer: 500
                    }
                }
            },
            {
                xtype: 'button',
                text: '&lt;',
                tooltip: 'Find Previous Row',
                handler: me.onPreviousClick,
                scope: me
            },
            {
                xtype: 'button',
                text: '&gt;',
                tooltip: 'Find Next Row',
                handler: me.onNextClick,
                scope: me
            },
            '-',
            {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.regExpToggle,
                scope: me
            },
            'Regular expression',
            {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.caseSensitiveToggle,
                scope: me
            },
            'Case sensitive'
        ];
        me.bbar = new Ext.ux.StatusBar({
            defaultText: me.defaultStatusText,
            name: 'searchStatusBar'
        });
        me.callParent(arguments);
    },
    // afterRender override: it adds textfield and statusbar reference and start monitoring keydown events in textfield input 
    afterRender: function() {
        var me = this;
        me.callParent(arguments);
        me.textField = me.down('textfield[name=searchField]');
        me.statusBar = me.down('statusbar[name=searchStatusBar]');
        me.view.on('cellkeydown', me.focusTextField, me);
    },
    focusTextField: function(view, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if (e.getKey() === e.S) {
            e.preventDefault();
            this.textField.focus();
        }
    },
    // detects html tag
    tagsRe: /<[^>]*>/gm,
    // DEL ASCII code
    tagsProtect: '\x0f',
    /**
     * In normal mode it returns the value with protected regexp characters.
     * In regular expression mode it returns the raw value except if the regexp is invalid.
     * @return {String} The value to process or null if the textfield value is blank or invalid.
     * @private
     */
    getSearchValue: function() {
        var me = this,
            value = me.textField.getValue();
        if (value === '') {
            return null;
        }
        if (!me.regExpMode) {
            value = Ext.String.escapeRegex(value);
        } else {
            try {
                new RegExp(value);
            } catch (error) {
                me.statusBar.setStatus({
                    text: error.message,
                    iconCls: 'x-status-error'
                });
                return null;
            }
            // this is stupid
            if (value === '^' || value === '$') {
                return null;
            }
        }
        return value;
    },
    /**
     * Finds all strings that matches the searched value in each grid cells.
     * @private
     */
    onTextFieldChange: function() {
        var me = this,
            count = 0,
            view = me.view,
            cellSelector = view.cellSelector,
            innerSelector = view.innerSelector,
            columns = me.visibleColumnManager.getColumns();
        view.refresh();
        // reset the statusbar
        me.statusBar.setStatus({
            text: me.defaultStatusText,
            iconCls: ''
        });
        me.searchValue = me.getSearchValue();
        me.matches = [];
        me.currentIndex = null;
        if (me.searchValue !== null) {
            me.searchRegExp = new RegExp(me.getSearchValue(), 'g' + (me.caseSensitive ? '' : 'i'));
            me.store.each(function(record, idx) {
                var node = view.getNode(record);
                if (node) {
                    Ext.Array.forEach(columns, function(column) {
                        var cell = Ext.fly(node).down(column.getCellInnerSelector(), true),
                            matches, cellHTML, seen;
                        if (cell) {
                            matches = cell.innerHTML.match(me.tagsRe);
                            cellHTML = cell.innerHTML.replace(me.tagsRe, me.tagsProtect);
                            // populate indexes array, set currentIndex, and replace wrap matched string in a span
                            cellHTML = cellHTML.replace(me.searchRegExp, function(m) {
                                ++count;
                                if (!seen) {
                                    me.matches.push({
                                        record: record,
                                        column: column
                                    });
                                    seen = true;
                                }
                                return '<span class="' + me.matchCls + '">' + m + '</span>';
                            }, me);
                            // restore protected tags
                            Ext.each(matches, function(match) {
                                cellHTML = cellHTML.replace(me.tagsProtect, match);
                            });
                            // update cell html
                            cell.innerHTML = cellHTML;
                        }
                    });
                }
            }, me);
            // results found
            if (count) {
                me.currentIndex = 0;
                me.gotoCurrent();
                me.statusBar.setStatus({
                    text: Ext.String.format('{0} match{1} found.', count, count === 1 ? 'es' : ''),
                    iconCls: 'x-status-valid'
                });
            }
        }
        // no results found
        if (me.currentIndex === null) {
            me.getSelectionModel().deselectAll();
            me.textField.focus();
        }
    },
    /**
     * Selects the previous row containing a match.
     * @private
     */
    onPreviousClick: function() {
        var me = this,
            matches = me.matches,
            len = matches.length,
            idx = me.currentIndex;
        if (len) {
            me.currentIndex = idx === 0 ? len - 1 : idx - 1;
            me.gotoCurrent();
        }
    },
    /**
     * Selects the next row containing a match.
     * @private
     */
    onNextClick: function() {
        var me = this,
            matches = me.matches,
            len = matches.length,
            idx = me.currentIndex;
        if (len) {
            me.currentIndex = idx === len - 1 ? 0 : idx + 1;
            me.gotoCurrent();
        }
    },
    /**
     * Switch to case sensitive mode.
     * @private
     */
    caseSensitiveToggle: function(checkbox, checked) {
        this.caseSensitive = checked;
        this.onTextFieldChange();
    },
    /**
     * Switch to regular expression mode
     * @private
     */
    regExpToggle: function(checkbox, checked) {
        this.regExpMode = checked;
        this.onTextFieldChange();
    },
    privates: {
        gotoCurrent: function() {
            var pos = this.matches[this.currentIndex];
            this.getNavigationModel().setPosition(pos.record, pos.column);
            this.getSelectionModel().select(pos.record);
        }
    }
});

/**
 * The Preview Plugin enables toggle of a configurable preview of all visible records.
 *
 * Note: This plugin does NOT assert itself against an existing RowBody feature and may conflict with
 * another instance of the same plugin.
 */
Ext.define('Ext.ux.PreviewPlugin', {
    extend: 'Ext.plugin.Abstract',
    alias: 'plugin.preview',
    requires: [
        'Ext.grid.feature.RowBody'
    ],
    // private, css class to use to hide the body
    hideBodyCls: 'x-grid-row-body-hidden',
    /**
     * @cfg {String} bodyField
     * Field to display in the preview. Must be a field within the Model definition
     * that the store is using.
     */
    bodyField: '',
    /**
     * @cfg {Boolean} previewExpanded
     */
    previewExpanded: true,
    /**
     * Plugin may be safely declared on either a panel.Grid or a Grid View/viewConfig
     * @param {Ext.grid.Panel/Ext.view.View} target
     */
    setCmp: function(target) {
        this.callParent(arguments);
        // Resolve grid from view as necessary
        var me = this,
            grid = me.cmp = target.isXType('gridview') ? target.grid : target,
            bodyField = me.bodyField,
            hideBodyCls = me.hideBodyCls,
            feature = Ext.create('Ext.grid.feature.RowBody', {
                grid: grid,
                getAdditionalData: function(data, idx, model, rowValues) {
                    var getAdditionalData = Ext.grid.feature.RowBody.prototype.getAdditionalData,
                        additionalData = {
                            rowBody: data[bodyField],
                            rowBodyCls: grid.getView().previewExpanded ? '' : hideBodyCls
                        };
                    if (Ext.isFunction(getAdditionalData)) {
                        // "this" is the RowBody object hjere. Do not change to "me"
                        Ext.apply(additionalData, getAdditionalData.apply(this, arguments));
                    }
                    return additionalData;
                }
            }),
            initFeature = function(grid, view) {
                view.previewExpanded = me.previewExpanded;
                // By this point, existing features are already in place, so this must be initialized and added
                view.featuresMC.add(feature);
                feature.init(grid);
            };
        // The grid has already created its view
        if (grid.view) {
            initFeature(grid, grid.view);
        } else // At the time a grid creates its plugins, it has not created all the things
        // it needs to create its view correctly.
        // Process the view and init the RowBody Feature as soon as the view is created.
        {
            grid.on({
                viewcreated: initFeature,
                single: true
            });
        }
    },
    /**
     * Toggle between the preview being expanded/hidden on all rows
     * @param {Boolean} expanded Pass true to expand the record and false to not show the preview.
     */
    toggleExpanded: function(expanded) {
        var grid = this.getCmp(),
            view = grid && grid.getView(),
            bufferedRenderer = view.bufferedRenderer,
            scrollManager = view.scrollManager;
        if (grid && view && expanded !== view.previewExpanded) {
            this.previewExpanded = view.previewExpanded = !!expanded;
            view.refreshView();
            // If we are using the touch scroller, ensure that the scroller knows about
            // the correct scrollable range
            if (scrollManager) {
                if (bufferedRenderer) {
                    bufferedRenderer.stretchView(view, bufferedRenderer.getScrollHeight(true));
                } else {
                    scrollManager.refresh(true);
                }
            }
        }
    }
});

/**
 * Plugin for displaying a progressbar inside of a paging toolbar
 * instead of plain text.
 */
Ext.define('Ext.ux.ProgressBarPager', {
    requires: [
        'Ext.ProgressBar'
    ],
    /**
     * @cfg {Number} width
     * <p>The default progress bar width.  Default is 225.</p>
    */
    width: 225,
    /**
     * @cfg {String} defaultText
    * <p>The text to display while the store is loading.  Default is 'Loading...'</p>
     */
    defaultText: 'Loading...',
    /**
     * @cfg {Object} defaultAnimCfg
     * <p>A {@link Ext.fx.Anim Ext.fx.Anim} configuration object.</p>
     */
    defaultAnimCfg: {
        duration: 1000,
        easing: 'bounceOut'
    },
    /**
     * Creates new ProgressBarPager.
     * @param {Object} config Configuration options
     */
    constructor: function(config) {
        if (config) {
            Ext.apply(this, config);
        }
    },
    //public
    init: function(parent) {
        var displayItem;
        if (parent.displayInfo) {
            this.parent = parent;
            displayItem = parent.child("#displayItem");
            if (displayItem) {
                parent.remove(displayItem, true);
            }
            this.progressBar = Ext.create('Ext.ProgressBar', {
                text: this.defaultText,
                width: this.width,
                animate: this.defaultAnimCfg,
                style: {
                    cursor: 'pointer'
                },
                listeners: {
                    el: {
                        scope: this,
                        click: this.handleProgressBarClick
                    }
                }
            });
            parent.displayItem = this.progressBar;
            parent.add(parent.displayItem);
            Ext.apply(parent, this.parentOverrides);
        }
    },
    // private
    // This method handles the click for the progress bar
    handleProgressBarClick: function(e) {
        var parent = this.parent,
            displayItem = parent.displayItem,
            box = this.progressBar.getBox(),
            xy = e.getXY(),
            position = xy[0] - box.x,
            pages = Math.ceil(parent.store.getTotalCount() / parent.pageSize),
            newPage = Math.max(Math.ceil(position / (displayItem.width / pages)), 1);
        parent.store.loadPage(newPage);
    },
    // private, overriddes
    parentOverrides: {
        // private
        // This method updates the information via the progress bar.
        updateInfo: function() {
            if (this.displayItem) {
                var count = this.store.getCount(),
                    pageData = this.getPageData(),
                    message = count === 0 ? this.emptyMsg : Ext.String.format(this.displayMsg, pageData.fromRecord, pageData.toRecord, this.store.getTotalCount()),
                    percentage = pageData.pageCount > 0 ? (pageData.currentPage / pageData.pageCount) : 0;
                this.displayItem.updateProgress(percentage, message, this.animate || this.defaultAnimConfig);
            }
        }
    }
});

/**
 * @deprecated
 * Ext.ux.RowExpander has been promoted to the core framework. Use
 * {@link Ext.grid.plugin.RowExpander} instead.  Ext.ux.RowExpander is now just an empty
 * stub that extends Ext.grid.plugin.RowExpander for backward compatibility reasons.
 */
Ext.define('Ext.ux.RowExpander', {
    extend: 'Ext.grid.plugin.RowExpander'
});

/**
 * Plugin for PagingToolbar which replaces the textfield input with a slider
 */
Ext.define('Ext.ux.SlidingPager', {
    requires: [
        'Ext.slider.Single',
        'Ext.slider.Tip'
    ],
    /**
     * Creates new SlidingPager.
     * @param {Object} config Configuration options
     */
    constructor: function(config) {
        if (config) {
            Ext.apply(this, config);
        }
    },
    init: function(pbar) {
        var idx = pbar.items.indexOf(pbar.child("#inputItem")),
            slider;
        Ext.each(pbar.items.getRange(idx - 2, idx + 2), function(c) {
            c.hide();
        });
        slider = Ext.create('Ext.slider.Single', {
            width: 114,
            minValue: 1,
            maxValue: 1,
            hideLabel: true,
            tipText: function(thumb) {
                return Ext.String.format('Page <b>{0}</b> of <b>{1}</b>', thumb.value, thumb.slider.maxValue);
            },
            listeners: {
                changecomplete: function(s, v) {
                    pbar.store.loadPage(v);
                }
            }
        });
        pbar.insert(idx + 1, slider);
        pbar.on({
            change: function(pb, data) {
                slider.setMaxValue(data.pageCount);
                slider.setValue(data.currentPage);
            }
        });
    }
});

/**
 * UX used to provide a spotlight around a specified component/element.
 */
Ext.define('Ext.ux.Spotlight', {
    /**
     * @private
     * The baseCls for the spotlight elements
     */
    baseCls: 'x-spotlight',
    /**
     * @cfg animate {Boolean} True to animate the spotlight change
     * (defaults to true)
     */
    animate: true,
    /**
     * @cfg duration {Integer} The duration of the animation, in milliseconds
     * (defaults to 250)
     */
    duration: 250,
    /**
     * @cfg easing {String} The type of easing for the spotlight animatation
     * (defaults to null)
     */
    easing: null,
    /**
     * @private
     * True if the spotlight is active on the element
     */
    active: false,
    constructor: function(config) {
        Ext.apply(this, config);
    },
    /**
     * Create all the elements for the spotlight
     */
    createElements: function() {
        var me = this,
            baseCls = me.baseCls,
            body = Ext.getBody();
        me.right = body.createChild({
            cls: baseCls
        });
        me.left = body.createChild({
            cls: baseCls
        });
        me.top = body.createChild({
            cls: baseCls
        });
        me.bottom = body.createChild({
            cls: baseCls
        });
        me.all = Ext.create('Ext.CompositeElement', [
            me.right,
            me.left,
            me.top,
            me.bottom
        ]);
    },
    /**
     * Show the spotlight
     */
    show: function(el, callback, scope) {
        var me = this;
        //get the target element
        me.el = Ext.get(el);
        //create the elements if they don't already exist
        if (!me.right) {
            me.createElements();
        }
        if (!me.active) {
            //if the spotlight is not active, show it
            me.all.setDisplayed('');
            me.active = true;
            Ext.on('resize', me.syncSize, me);
            me.applyBounds(me.animate, false);
        } else {
            //if the spotlight is currently active, just move it
            me.applyBounds(false, false);
        }
    },
    /**
     * Hide the spotlight
     */
    hide: function(callback, scope) {
        var me = this;
        Ext.un('resize', me.syncSize, me);
        me.applyBounds(me.animate, true);
    },
    /**
     * Resizes the spotlight with the window size.
     */
    syncSize: function() {
        this.applyBounds(false, false);
    },
    /**
     * Resizes the spotlight depending on the arguments
     * @param {Boolean} animate True to animate the changing of the bounds
     * @param {Boolean} reverse True to reverse the animation
     */
    applyBounds: function(animate, reverse) {
        var me = this,
            box = me.el.getBox(),
            //get the current view width and height
            viewWidth = Ext.Element.getViewportWidth(),
            viewHeight = Ext.Element.getViewportHeight(),
            i = 0,
            config = false,
            from, to, clone;
        //where the element should start (if animation)
        from = {
            right: {
                x: box.right,
                y: viewHeight,
                width: (viewWidth - box.right),
                height: 0
            },
            left: {
                x: 0,
                y: 0,
                width: box.x,
                height: 0
            },
            top: {
                x: viewWidth,
                y: 0,
                width: 0,
                height: box.y
            },
            bottom: {
                x: 0,
                y: (box.y + box.height),
                width: 0,
                height: (viewHeight - (box.y + box.height)) + 'px'
            }
        };
        //where the element needs to finish
        to = {
            right: {
                x: box.right,
                y: box.y,
                width: (viewWidth - box.right) + 'px',
                height: (viewHeight - box.y) + 'px'
            },
            left: {
                x: 0,
                y: 0,
                width: box.x + 'px',
                height: (box.y + box.height) + 'px'
            },
            top: {
                x: box.x,
                y: 0,
                width: (viewWidth - box.x) + 'px',
                height: box.y + 'px'
            },
            bottom: {
                x: 0,
                y: (box.y + box.height),
                width: (box.x + box.width) + 'px',
                height: (viewHeight - (box.y + box.height)) + 'px'
            }
        };
        //reverse the objects
        if (reverse) {
            clone = Ext.clone(from);
            from = to;
            to = clone;
        }
        if (animate) {
            Ext.Array.forEach([
                'right',
                'left',
                'top',
                'bottom'
            ], function(side) {
                me[side].setBox(from[side]);
                me[side].animate({
                    duration: me.duration,
                    easing: me.easing,
                    to: to[side]
                });
            }, this);
        } else {
            Ext.Array.forEach([
                'right',
                'left',
                'top',
                'bottom'
            ], function(side) {
                me[side].setBox(Ext.apply(from[side], to[side]));
                me[side].repaint();
            }, this);
        }
    },
    /**
     * Removes all the elements for the spotlight
     */
    destroy: function() {
        var me = this;
        Ext.destroy(me.right, me.left, me.top, me.bottom);
        delete me.el;
        delete me.all;
    }
});

/**
 * Plugin for adding a close context menu to tabs. Note that the menu respects
 * the closable configuration on the tab. As such, commands like remove others
 * and remove all will not remove items that are not closable.
 */
Ext.define('Ext.ux.TabCloseMenu', {
    extend: 'Ext.plugin.Abstract',
    alias: 'plugin.tabclosemenu',
    mixins: {
        observable: 'Ext.util.Observable'
    },
    /**
     * @cfg {String} closeTabText
     * The text for closing the current tab.
     */
    closeTabText: 'Close Tab',
    /**
     * @cfg {Boolean} showCloseOthers
     * Indicates whether to show the 'Close Others' option.
     */
    showCloseOthers: true,
    /**
     * @cfg {String} closeOthersTabsText
     * The text for closing all tabs except the current one.
     */
    closeOthersTabsText: 'Close Other Tabs',
    /**
     * @cfg {Boolean} showCloseAll
     * Indicates whether to show the 'Close All' option.
     */
    showCloseAll: true,
    /**
     * @cfg {String} closeAllTabsText
     * The text for closing all tabs.
     */
    closeAllTabsText: 'Close All Tabs',
    /**
     * @cfg {Array} extraItemsHead
     * An array of additional context menu items to add to the front of the context menu.
     */
    extraItemsHead: null,
    /**
     * @cfg {Array} extraItemsTail
     * An array of additional context menu items to add to the end of the context menu.
     */
    extraItemsTail: null,
    //public
    constructor: function(config) {
        this.callParent([
            config
        ]);
        this.mixins.observable.constructor.call(this, config);
    },
    init: function(tabpanel) {
        this.tabPanel = tabpanel;
        this.tabBar = tabpanel.down("tabbar");
        this.mon(this.tabPanel, {
            scope: this,
            afterlayout: this.onAfterLayout,
            single: true
        });
    },
    onAfterLayout: function() {
        this.mon(this.tabBar.el, {
            scope: this,
            contextmenu: this.onContextMenu,
            delegate: '.x-tab'
        });
    },
    destroy: function() {
        this.callParent();
        Ext.destroy(this.menu);
    },
    // private
    onContextMenu: function(event, target) {
        var me = this,
            menu = me.createMenu(),
            disableAll = true,
            disableOthers = true,
            tab = me.tabBar.getChildByElement(target),
            index = me.tabBar.items.indexOf(tab);
        me.item = me.tabPanel.getComponent(index);
        menu.child('#close').setDisabled(!me.item.closable);
        if (me.showCloseAll || me.showCloseOthers) {
            me.tabPanel.items.each(function(item) {
                if (item.closable) {
                    disableAll = false;
                    if (item !== me.item) {
                        disableOthers = false;
                        return false;
                    }
                }
                return true;
            });
            if (me.showCloseAll) {
                menu.child('#closeAll').setDisabled(disableAll);
            }
            if (me.showCloseOthers) {
                menu.child('#closeOthers').setDisabled(disableOthers);
            }
        }
        event.preventDefault();
        me.fireEvent('beforemenu', menu, me.item, me);
        menu.showAt(event.getXY());
    },
    createMenu: function() {
        var me = this;
        if (!me.menu) {
            var items = [
                    {
                        itemId: 'close',
                        text: me.closeTabText,
                        scope: me,
                        handler: me.onClose
                    }
                ];
            if (me.showCloseAll || me.showCloseOthers) {
                items.push('-');
            }
            if (me.showCloseOthers) {
                items.push({
                    itemId: 'closeOthers',
                    text: me.closeOthersTabsText,
                    scope: me,
                    handler: me.onCloseOthers
                });
            }
            if (me.showCloseAll) {
                items.push({
                    itemId: 'closeAll',
                    text: me.closeAllTabsText,
                    scope: me,
                    handler: me.onCloseAll
                });
            }
            if (me.extraItemsHead) {
                items = me.extraItemsHead.concat(items);
            }
            if (me.extraItemsTail) {
                items = items.concat(me.extraItemsTail);
            }
            me.menu = Ext.create('Ext.menu.Menu', {
                items: items,
                listeners: {
                    hide: me.onHideMenu,
                    scope: me
                }
            });
        }
        return me.menu;
    },
    onHideMenu: function() {
        var me = this;
        me.fireEvent('aftermenu', me.menu, me);
    },
    onClose: function() {
        this.tabPanel.remove(this.item);
    },
    onCloseOthers: function() {
        this.doClose(true);
    },
    onCloseAll: function() {
        this.doClose(false);
    },
    doClose: function(excludeActive) {
        var items = [];
        this.tabPanel.items.each(function(item) {
            if (item.closable) {
                if (!excludeActive || item !== this.item) {
                    items.push(item);
                }
            }
        }, this);
        Ext.suspendLayouts();
        Ext.Array.forEach(items, function(item) {
            this.tabPanel.remove(item);
        }, this);
        Ext.resumeLayouts(true);
    }
});

/**
 * This plugin allow you to reorder tabs of a TabPanel.
 */
Ext.define('Ext.ux.TabReorderer', {
    extend: 'Ext.ux.BoxReorderer',
    alias: 'plugin.tabreorderer',
    itemSelector: '.' + Ext.baseCSSPrefix + 'tab',
    init: function(tabPanel) {
        var me = this;
        me.callParent([
            tabPanel.getTabBar()
        ]);
        // Ensure reorderable property is copied into dynamically added tabs
        tabPanel.onAdd = Ext.Function.createSequence(tabPanel.onAdd, me.onAdd);
    },
    onBoxReady: function() {
        var tabs, len,
            i = 0,
            tab;
        this.callParent(arguments);
        // Copy reorderable property from card into tab
        for (tabs = this.container.items.items , len = tabs.length; i < len; i++) {
            tab = tabs[i];
            if (tab.card) {
                tab.reorderable = tab.card.reorderable;
            }
        }
    },
    onAdd: function(card, index) {
        card.tab.reorderable = card.reorderable;
    },
    afterBoxReflow: function() {
        var me = this;
        // Cannot use callParent, this is not called in the scope of this plugin, but that of its Ext.dd.DD object
        Ext.ux.BoxReorderer.prototype.afterBoxReflow.apply(me, arguments);
        // Move the associated card to match the tab order
        if (me.dragCmp) {
            me.container.tabPanel.setActiveTab(me.dragCmp.card);
            me.container.tabPanel.move(me.dragCmp.card, me.curIndex);
        }
    }
});

Ext.ns('Ext.ux');
/**
 * Plugin for adding a tab menu to a TabBar is the Tabs overflow.
 */
Ext.define('Ext.ux.TabScrollerMenu', {
    alias: 'plugin.tabscrollermenu',
    requires: [
        'Ext.menu.Menu'
    ],
    /**
     * @cfg {Number} pageSize How many items to allow per submenu.
     */
    pageSize: 10,
    /**
     * @cfg {Number} maxText How long should the title of each {@link Ext.menu.Item} be.
     */
    maxText: 15,
    /**
     * @cfg {String} menuPrefixText Text to prefix the submenus.
     */
    menuPrefixText: 'Items',
    /**
     * Creates new TabScrollerMenu.
     * @param {Object} config Configuration options
     */
    constructor: function(config) {
        Ext.apply(this, config);
    },
    //private
    init: function(tabPanel) {
        var me = this;
        me.tabPanel = tabPanel;
        tabPanel.on({
            render: function() {
                me.tabBar = tabPanel.tabBar;
                me.layout = me.tabBar.layout;
                me.layout.overflowHandler.handleOverflow = Ext.Function.bind(me.showButton, me);
                me.layout.overflowHandler.clearOverflow = Ext.Function.createSequence(me.layout.overflowHandler.clearOverflow, me.hideButton, me);
            },
            destroy: me.destroy,
            scope: me,
            single: true
        });
    },
    showButton: function() {
        var me = this,
            result = Ext.getClass(me.layout.overflowHandler).prototype.handleOverflow.apply(me.layout.overflowHandler, arguments),
            button = me.menuButton;
        if (me.tabPanel.items.getCount() > 1) {
            if (!button) {
                button = me.menuButton = me.tabBar.body.createChild({
                    cls: Ext.baseCSSPrefix + 'tab-tabmenu-right'
                }, me.tabBar.body.child('.' + Ext.baseCSSPrefix + 'box-scroller-right'));
                button.addClsOnOver(Ext.baseCSSPrefix + 'tab-tabmenu-over');
                button.on('click', me.showTabsMenu, me);
            }
            button.setVisibilityMode(Ext.dom.Element.DISPLAY);
            button.show();
            result.reservedSpace += button.getWidth();
        } else {
            me.hideButton();
        }
        return result;
    },
    hideButton: function() {
        var me = this;
        if (me.menuButton) {
            me.menuButton.hide();
        }
    },
    /**
     * Returns an the current page size (this.pageSize);
     * @return {Number} this.pageSize The current page size.
     */
    getPageSize: function() {
        return this.pageSize;
    },
    /**
     * Sets the number of menu items per submenu "page size".
     * @param {Number} pageSize The page size
     */
    setPageSize: function(pageSize) {
        this.pageSize = pageSize;
    },
    /**
     * Returns the current maxText length;
     * @return {Number} this.maxText The current max text length.
     */
    getMaxText: function() {
        return this.maxText;
    },
    /**
     * Sets the maximum text size for each menu item.
     * @param {Number} t The max text per each menu item.
     */
    setMaxText: function(t) {
        this.maxText = t;
    },
    /**
     * Returns the current menu prefix text String.;
     * @return {String} this.menuPrefixText The current menu prefix text.
     */
    getMenuPrefixText: function() {
        return this.menuPrefixText;
    },
    /**
     * Sets the menu prefix text String.
     * @param {String} t The menu prefix text.
     */
    setMenuPrefixText: function(t) {
        this.menuPrefixText = t;
    },
    showTabsMenu: function(e) {
        var me = this;
        if (me.tabsMenu) {
            me.tabsMenu.removeAll();
        } else {
            me.tabsMenu = new Ext.menu.Menu();
        }
        me.generateTabMenuItems();
        var target = Ext.get(e.getTarget()),
            xy = target.getXY();
        //Y param + 24 pixels
        xy[1] += 24;
        me.tabsMenu.showAt(xy);
    },
    // private
    generateTabMenuItems: function() {
        var me = this,
            tabPanel = me.tabPanel,
            curActive = tabPanel.getActiveTab(),
            allItems = tabPanel.items.getRange(),
            pageSize = me.getPageSize(),
            tabsMenu = me.tabsMenu,
            totalItems, numSubMenus, remainder, i, curPage, menuItems, x, item, start, index;
        tabsMenu.suspendLayouts();
        allItems = Ext.Array.filter(allItems, function(item) {
            if (item.id == curActive.id) {
                return false;
            }
            return item.hidden ? !!item.hiddenByLayout : true;
        });
        totalItems = allItems.length;
        numSubMenus = Math.floor(totalItems / pageSize);
        remainder = totalItems % pageSize;
        if (totalItems > pageSize) {
            // Loop through all of the items and create submenus in chunks of 10
            for (i = 0; i < numSubMenus; i++) {
                curPage = (i + 1) * pageSize;
                menuItems = [];
                for (x = 0; x < pageSize; x++) {
                    index = x + curPage - pageSize;
                    item = allItems[index];
                    menuItems.push(me.autoGenMenuItem(item));
                }
                tabsMenu.add({
                    text: me.getMenuPrefixText() + ' ' + (curPage - pageSize + 1) + ' - ' + curPage,
                    menu: menuItems
                });
            }
            // remaining items
            if (remainder > 0) {
                start = numSubMenus * pageSize;
                menuItems = [];
                for (i = start; i < totalItems; i++) {
                    item = allItems[i];
                    menuItems.push(me.autoGenMenuItem(item));
                }
                me.tabsMenu.add({
                    text: me.menuPrefixText + ' ' + (start + 1) + ' - ' + (start + menuItems.length),
                    menu: menuItems
                });
            }
        } else {
            for (i = 0; i < totalItems; ++i) {
                tabsMenu.add(me.autoGenMenuItem(allItems[i]));
            }
        }
        tabsMenu.resumeLayouts(true);
    },
    // private
    autoGenMenuItem: function(item) {
        var maxText = this.getMaxText(),
            text = Ext.util.Format.ellipsis(item.title, maxText);
        return {
            text: text,
            handler: this.showTabFromMenu,
            scope: this,
            disabled: item.disabled,
            tabToShow: item,
            iconCls: item.iconCls
        };
    },
    // private
    showTabFromMenu: function(menuItem) {
        this.tabPanel.setActiveTab(menuItem.tabToShow);
    },
    destroy: function() {
        Ext.destroy(this.tabsMenu, this.menuButton);
    }
});

/**
 * Plugin which allows items to be dropped onto a toolbar and be turned into new Toolbar items.
 * To use the plugin, you just need to provide a createItem implementation that takes the drop
 * data as an argument and returns an object that can be placed onto the toolbar. Example:
 * <pre>
 * Ext.create('Ext.ux.ToolbarDroppable', {
 *   createItem: function(data) {
 *     return Ext.create('Ext.Button', {text: data.text});
 *   }
 * });
 * </pre>
 * The afterLayout function can also be overridden, and is called after a new item has been
 * created and inserted into the Toolbar. Use this for any logic that needs to be run after
 * the item has been created.
 */
Ext.define('Ext.ux.ToolbarDroppable', {
    /**
     * Creates new ToolbarDroppable.
     * @param {Object} config Config options.
     */
    constructor: function(config) {
        Ext.apply(this, config);
    },
    /**
     * Initializes the plugin and saves a reference to the toolbar
     * @param {Ext.toolbar.Toolbar} toolbar The toolbar instance
     */
    init: function(toolbar) {
        /**
       * @property toolbar
       * @type Ext.toolbar.Toolbar
       * The toolbar instance that this plugin is tied to
       */
        this.toolbar = toolbar;
        this.toolbar.on({
            scope: this,
            render: this.createDropTarget
        });
    },
    /**
     * Creates a drop target on the toolbar
     */
    createDropTarget: function() {
        /**
         * @property dropTarget
         * @type Ext.dd.DropTarget
         * The drop target attached to the toolbar instance
         */
        this.dropTarget = Ext.create('Ext.dd.DropTarget', this.toolbar.getEl(), {
            notifyOver: Ext.Function.bind(this.notifyOver, this),
            notifyDrop: Ext.Function.bind(this.notifyDrop, this)
        });
    },
    /**
     * Adds the given DD Group to the drop target
     * @param {String} ddGroup The DD Group
     */
    addDDGroup: function(ddGroup) {
        this.dropTarget.addToGroup(ddGroup);
    },
    /**
     * Calculates the location on the toolbar to create the new sorter button based on the XY of the
     * drag event
     * @param {Ext.event.Event} e The event object
     * @return {Number} The index at which to insert the new button
     */
    calculateEntryIndex: function(e) {
        var entryIndex = 0,
            toolbar = this.toolbar,
            items = toolbar.items.items,
            count = items.length,
            xHover = e.getXY()[0],
            index = 0,
            el, xTotal, width, midpoint;
        for (; index < count; index++) {
            el = items[index].getEl();
            xTotal = el.getXY()[0];
            width = el.getWidth();
            midpoint = xTotal + width / 2;
            if (xHover < midpoint) {
                entryIndex = index;
                break;
            } else {
                entryIndex = index + 1;
            }
        }
        return entryIndex;
    },
    /**
     * Returns true if the drop is allowed on the drop target. This function can be overridden
     * and defaults to simply return true
     * @param {Object} data Arbitrary data from the drag source
     * @return {Boolean} True if the drop is allowed
     */
    canDrop: function(data) {
        return true;
    },
    /**
     * Custom notifyOver method which will be used in the plugin's internal DropTarget
     * @return {String} The CSS class to add
     */
    notifyOver: function(dragSource, event, data) {
        return this.canDrop.apply(this, arguments) ? this.dropTarget.dropAllowed : this.dropTarget.dropNotAllowed;
    },
    /**
     * Called when the drop has been made. Creates the new toolbar item, places it at the correct location
     * and calls the afterLayout callback.
     */
    notifyDrop: function(dragSource, event, data) {
        var canAdd = this.canDrop(dragSource, event, data),
            tbar = this.toolbar;
        if (canAdd) {
            var entryIndex = this.calculateEntryIndex(event);
            tbar.insert(entryIndex, this.createItem(data));
            tbar.doLayout();
            this.afterLayout();
        }
        return canAdd;
    },
    /**
     * Creates the new toolbar item based on drop data. This method must be implemented by the plugin instance
     * @param {Object} data Arbitrary data from the drop
     * @return {Mixed} An item that can be added to a toolbar
     */
    createItem: function(data) {
        Ext.Error.raise("The createItem method must be implemented in the ToolbarDroppable plugin");
    },
    /**
     * Called after a new button has been created and added to the toolbar. Add any required cleanup logic here
     */
    afterLayout: Ext.emptyFn
});

/**
 * A Picker field that contains a tree panel on its popup, enabling selection of tree nodes.
 */
Ext.define('Ext.ux.TreePicker', {
    extend: 'Ext.form.field.Picker',
    xtype: 'treepicker',
    uses: [
        'Ext.tree.Panel'
    ],
    triggerCls: Ext.baseCSSPrefix + 'form-arrow-trigger',
    config: {
        /**
         * @cfg {Ext.data.TreeStore} store
         * A tree store that the tree picker will be bound to
         */
        store: null,
        /**
         * @cfg {String} displayField
         * The field inside the model that will be used as the node's text.
         * Defaults to the default value of {@link Ext.tree.Panel}'s `displayField` configuration.
         */
        displayField: null,
        /**
         * @cfg {Array} columns
         * An optional array of columns for multi-column trees
         */
        columns: null,
        /**
         * @cfg {Boolean} selectOnTab
         * Whether the Tab key should select the currently highlighted item. Defaults to `true`.
         */
        selectOnTab: true,
        /**
         * @cfg {Number} maxPickerHeight
         * The maximum height of the tree dropdown. Defaults to 300.
         */
        maxPickerHeight: 300,
        /**
         * @cfg {Number} minPickerHeight
         * The minimum height of the tree dropdown. Defaults to 100.
         */
        minPickerHeight: 100
    },
    editable: false,
    /**
     * @event select
     * Fires when a tree node is selected
     * @param {Ext.ux.TreePicker} picker        This tree picker
     * @param {Ext.data.Model} record           The selected record
     */
    initComponent: function() {
        var me = this;
        me.callParent(arguments);
        me.mon(me.store, {
            scope: me,
            load: me.onLoad,
            update: me.onUpdate
        });
    },
    /**
     * Creates and returns the tree panel to be used as this field's picker.
     */
    createPicker: function() {
        var me = this,
            picker = new Ext.tree.Panel({
                shrinkWrapDock: 2,
                store: me.store,
                floating: true,
                displayField: me.displayField,
                columns: me.columns,
                minHeight: me.minPickerHeight,
                maxHeight: me.maxPickerHeight,
                manageHeight: false,
                shadow: false,
                listeners: {
                    scope: me,
                    itemclick: me.onItemClick
                },
                viewConfig: {
                    listeners: {
                        scope: me,
                        render: me.onViewRender
                    }
                }
            }),
            view = picker.getView();
        if (Ext.isIE9 && Ext.isStrict) {
            // In IE9 strict mode, the tree view grows by the height of the horizontal scroll bar when the items are highlighted or unhighlighted.
            // Also when items are collapsed or expanded the height of the view is off. Forcing a repaint fixes the problem.
            view.on({
                scope: me,
                highlightitem: me.repaintPickerView,
                unhighlightitem: me.repaintPickerView,
                afteritemexpand: me.repaintPickerView,
                afteritemcollapse: me.repaintPickerView
            });
        }
        return picker;
    },
    onViewRender: function(view) {
        view.getEl().on('keypress', this.onPickerKeypress, this);
    },
    /**
     * repaints the tree view
     */
    repaintPickerView: function() {
        var style = this.picker.getView().getEl().dom.style;
        // can't use Element.repaint because it contains a setTimeout, which results in a flicker effect
        style.display = style.display;
    },
    /**
     * Handles a click even on a tree node
     * @private
     * @param {Ext.tree.View} view
     * @param {Ext.data.Model} record
     * @param {HTMLElement} node
     * @param {Number} rowIndex
     * @param {Ext.event.Event} e
     */
    onItemClick: function(view, record, node, rowIndex, e) {
        this.selectItem(record);
    },
    /**
     * Handles a keypress event on the picker element
     * @private
     * @param {Ext.event.Event} e
     * @param {HTMLElement} el
     */
    onPickerKeypress: function(e, el) {
        var key = e.getKey();
        if (key === e.ENTER || (key === e.TAB && this.selectOnTab)) {
            this.selectItem(this.picker.getSelectionModel().getSelection()[0]);
        }
    },
    /**
     * Changes the selection to a given record and closes the picker
     * @private
     * @param {Ext.data.Model} record
     */
    selectItem: function(record) {
        var me = this;
        me.setValue(record.getId());
        me.fireEvent('select', me, record);
        me.collapse();
    },
    /**
     * Runs when the picker is expanded.  Selects the appropriate tree node based on the value of the input element,
     * and focuses the picker so that keyboard navigation will work.
     * @private
     */
    onExpand: function() {
        var me = this,
            picker = me.picker,
            store = picker.store,
            value = me.value,
            node;
        if (value) {
            node = store.getNodeById(value);
        }
        if (!node) {
            node = store.getRoot();
        }
        picker.selectPath(node.getPath());
    },
    /**
     * Sets the specified value into the field
     * @param {Mixed} value
     * @return {Ext.ux.TreePicker} this
     */
    setValue: function(value) {
        var me = this,
            record;
        me.value = value;
        if (me.store.loading) {
            // Called while the Store is loading. Ensure it is processed by the onLoad method.
            return me;
        }
        // try to find a record in the store that matches the value
        record = value ? me.store.getNodeById(value) : me.store.getRoot();
        if (value === undefined) {
            record = me.store.getRoot();
            me.value = record.getId();
        } else {
            record = me.store.getNodeById(value);
        }
        // set the raw value to the record's display field if a record was found
        me.setRawValue(record ? record.get(me.displayField) : '');
        return me;
    },
    getSubmitValue: function() {
        return this.value;
    },
    /**
     * Returns the current data value of the field (the idProperty of the record)
     * @return {Number}
     */
    getValue: function() {
        return this.value;
    },
    /**
     * Handles the store's load event.
     * @private
     */
    onLoad: function() {
        var value = this.value;
        if (value) {
            this.setValue(value);
        }
    },
    onUpdate: function(store, rec, type, modifiedFieldNames) {
        var display = this.displayField;
        if (type === 'edit' && modifiedFieldNames && Ext.Array.contains(modifiedFieldNames, display) && this.value === rec.getId()) {
            this.setRawValue(rec.get(display));
        }
    }
});

/**
 * @author Don Griffin
 *
 * This is a base class for more advanced "simlets" (simulated servers). A simlet is asked
 * to provide a response given a {@link Ext.ux.ajax.SimXhr} instance.
 */
Ext.define('Ext.ux.ajax.Simlet', function() {
    var urlRegex = /([^?#]*)(#.*)?$/,
        dateRegex = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/,
        intRegex = /^[+-]?\d+$/,
        floatRegex = /^[+-]?\d+\.\d+$/;
    function parseParamValue(value) {
        var m;
        if (Ext.isDefined(value)) {
            value = decodeURIComponent(value);
            if (intRegex.test(value)) {
                value = parseInt(value, 10);
            } else if (floatRegex.test(value)) {
                value = parseFloat(value);
            } else if (!!(m = dateRegex.test(value))) {
                value = new Date(Date.UTC(+m[1], +m[2] - 1, +m[3], +m[4], +m[5], +m[6]));
            }
        }
        return value;
    }
    return {
        alias: 'simlet.basic',
        isSimlet: true,
        responseProps: [
            'responseText',
            'responseXML',
            'status',
            'statusText'
        ],
        /**
         * @cfg {Number} responseText
         */
        /**
         * @cfg {Number} responseXML
         */
        /**
         * @cfg {Object} responseHeaders
         */
        /**
         * @cfg {Number} status
         */
        status: 200,
        /**
         * @cfg {String} statusText
         */
        statusText: 'OK',
        constructor: function(config) {
            Ext.apply(this, config);
        },
        doGet: function(ctx) {
            var me = this,
                ret = {};
            Ext.Array.forEach(me.responseProps, function(prop) {
                if (prop in me) {
                    ret[prop] = me[prop];
                }
            });
            return ret;
        },
        doPost: function(ctx) {
            var me = this,
                ret = {};
            Ext.Array.forEach(me.responseProps, function(prop) {
                if (prop in me) {
                    ret[prop] = me[prop];
                }
            });
            return ret;
        },
        doRedirect: function(ctx) {
            return false;
        },
        doDelete: function(ctx) {
            var me = this,
                xhr = ctx.xhr,
                records = xhr.options.records;
            me.removeFromData(ctx, records);
        },
        /**
         * Performs the action requested by the given XHR and returns an object to be applied
         * on to the XHR (containing `status`, `responseText`, etc.). For the most part,
         * this is delegated to `doMethod` methods on this class, such as `doGet`.
         *
         * @param {Ext.ux.ajax.SimXhr} xhr The simulated XMLHttpRequest instance.
         * @returns {Object} The response properties to add to the XMLHttpRequest.
         */
        exec: function(xhr) {
            var me = this,
                ret = {},
                method = 'do' + Ext.String.capitalize(xhr.method.toLowerCase()),
                // doGet
                fn = me[method];
            if (fn) {
                ret = fn.call(me, me.getCtx(xhr.method, xhr.url, xhr));
            } else {
                ret = {
                    status: 405,
                    statusText: 'Method Not Allowed'
                };
            }
            return ret;
        },
        getCtx: function(method, url, xhr) {
            return {
                method: method,
                params: this.parseQueryString(url),
                url: url,
                xhr: xhr
            };
        },
        openRequest: function(method, url, options, async) {
            var ctx = this.getCtx(method, url),
                redirect = this.doRedirect(ctx),
                xhr;
            if (options.action === 'destroy') {
                method = 'delete';
            }
            if (redirect) {
                xhr = redirect;
            } else {
                xhr = new Ext.ux.ajax.SimXhr({
                    mgr: this.manager,
                    simlet: this,
                    options: options
                });
                xhr.open(method, url, async);
            }
            return xhr;
        },
        parseQueryString: function(str) {
            var m = urlRegex.exec(str),
                ret = {},
                key, value, i, n;
            if (m && m[1]) {
                var pair,
                    parts = m[1].split('&');
                for (i = 0 , n = parts.length; i < n; ++i) {
                    if ((pair = parts[i].split('='))[0]) {
                        key = decodeURIComponent(pair.shift());
                        value = parseParamValue((pair.length > 1) ? pair.join('=') : pair[0]);
                        if (!(key in ret)) {
                            ret[key] = value;
                        } else if (Ext.isArray(ret[key])) {
                            ret[key].push(value);
                        } else {
                            ret[key] = [
                                ret[key],
                                value
                            ];
                        }
                    }
                }
            }
            return ret;
        },
        redirect: function(method, url, params) {
            switch (arguments.length) {
                case 2:
                    if (typeof url == 'string') {
                        break;
                    };
                    params = url;
                // fall...
                case 1:
                    url = method;
                    method = 'GET';
                    break;
            }
            if (params) {
                url = Ext.urlAppend(url, Ext.Object.toQueryString(params));
            }
            return this.manager.openRequest(method, url);
        },
        removeFromData: function(ctx, records) {
            var me = this,
                data = me.getData(ctx),
                model = (ctx.xhr.options.proxy && ctx.xhr.options.proxy.getModel()) || {},
                idProperty = model.idProperty || 'id';
            Ext.each(records, function(record) {
                var id = record.get(idProperty);
                for (var i = data.length; i-- > 0; ) {
                    if (data[i][idProperty] === id) {
                        me.deleteRecord(i);
                        break;
                    }
                }
            });
        }
    };
}());

/**
 * This base class is used to handle data preparation (e.g., sorting, filtering and
 * group summary).
 */
Ext.define('Ext.ux.ajax.DataSimlet', function() {
    function makeSortFn(def, cmp) {
        var order = def.direction,
            sign = (order && order.toUpperCase() === 'DESC') ? -1 : 1;
        return function(leftRec, rightRec) {
            var lhs = leftRec[def.property],
                rhs = rightRec[def.property],
                c = (lhs < rhs) ? -1 : ((rhs < lhs) ? 1 : 0);
            if (c || !cmp) {
                return c * sign;
            }
            return cmp(leftRec, rightRec);
        };
    }
    function makeSortFns(defs, cmp) {
        for (var sortFn = cmp,
            i = defs && defs.length; i; ) {
            sortFn = makeSortFn(defs[--i], sortFn);
        }
        return sortFn;
    }
    return {
        extend: 'Ext.ux.ajax.Simlet',
        buildNodes: function(node, path) {
            var me = this,
                nodeData = {
                    data: []
                },
                len = node.length,
                children, i, child, name;
            me.nodes[path] = nodeData;
            for (i = 0; i < len; ++i) {
                nodeData.data.push(child = node[i]);
                name = child.text || child.title;
                child.id = path ? path + '/' + name : name;
                children = child.children;
                if (!(child.leaf = !children)) {
                    delete child.children;
                    me.buildNodes(children, child.id);
                }
            }
        },
        deleteRecord: function(pos) {
            if (this.data && typeof this.data !== 'function') {
                Ext.Array.removeAt(this.data, pos);
            }
        },
        fixTree: function(ctx, tree) {
            var me = this,
                node = ctx.params.node,
                nodes;
            if (!(nodes = me.nodes)) {
                me.nodes = nodes = {};
                me.buildNodes(tree, '');
            }
            node = nodes[node];
            if (node) {
                if (me.node) {
                    me.node.sortedData = me.sortedData;
                    me.node.currentOrder = me.currentOrder;
                }
                me.node = node;
                me.data = node.data;
                me.sortedData = node.sortedData;
                me.currentOrder = node.currentOrder;
            } else {
                me.data = null;
            }
        },
        getData: function(ctx) {
            var me = this,
                params = ctx.params,
                order = (params.filter || '') + (params.group || '') + '-' + (params.sort || '') + '-' + (params.dir || ''),
                tree = me.tree,
                dynamicData, data, fields, sortFn;
            if (tree) {
                me.fixTree(ctx, tree);
            }
            data = me.data;
            if (typeof data === 'function') {
                dynamicData = true;
                data = data.call(this, ctx);
            }
            // If order is '--' then it means we had no order passed, due to the string concat above
            if (!data || order === '--') {
                return data || [];
            }
            if (!dynamicData && order == me.currentOrder) {
                return me.sortedData;
            }
            ctx.filterSpec = params.filter && Ext.decode(params.filter);
            ctx.groupSpec = params.group && Ext.decode(params.group);
            fields = params.sort;
            if (params.dir) {
                fields = [
                    {
                        direction: params.dir,
                        property: fields
                    }
                ];
            } else {
                fields = Ext.decode(params.sort);
            }
            if (ctx.filterSpec) {
                var filters = new Ext.util.FilterCollection();
                filters.add(this.processFilters(ctx.filterSpec));
                data = Ext.Array.filter(data, filters.getFilterFn());
            }
            sortFn = makeSortFns((ctx.sortSpec = fields));
            if (ctx.groupSpec) {
                sortFn = makeSortFns([
                    ctx.groupSpec
                ], sortFn);
            }
            // If a straight Ajax request, data may not be an array.
            // If an Array, preserve 'physical' order of raw data...
            data = Ext.isArray(data) ? data.slice(0) : data;
            if (sortFn) {
                Ext.Array.sort(data, sortFn);
            }
            me.sortedData = data;
            me.currentOrder = order;
            return data;
        },
        processFilters: Ext.identityFn,
        getPage: function(ctx, data) {
            var ret = data,
                length = data.length,
                start = ctx.params.start || 0,
                end = ctx.params.limit ? Math.min(length, start + ctx.params.limit) : length;
            if (start || end < length) {
                ret = ret.slice(start, end);
            }
            return ret;
        },
        getGroupSummary: function(groupField, rows, ctx) {
            return rows[0];
        },
        getSummary: function(ctx, data, page) {
            var me = this,
                groupField = ctx.groupSpec.property,
                accum,
                todo = {},
                summary = [],
                fieldValue, lastFieldValue;
            Ext.each(page, function(rec) {
                fieldValue = rec[groupField];
                todo[fieldValue] = true;
            });
            function flush() {
                if (accum) {
                    summary.push(me.getGroupSummary(groupField, accum, ctx));
                    accum = null;
                }
            }
            // data is ordered primarily by the groupField, so one pass can pick up all
            // the summaries one at a time.
            Ext.each(data, function(rec) {
                fieldValue = rec[groupField];
                if (lastFieldValue !== fieldValue) {
                    flush();
                    lastFieldValue = fieldValue;
                }
                if (!todo[fieldValue]) {
                    // if we have even 1 summary, we have summarized all that we need
                    // (again because data and page are ordered by groupField)
                    return !summary.length;
                }
                if (accum) {
                    accum.push(rec);
                } else {
                    accum = [
                        rec
                    ];
                }
                return true;
            });
            flush();
            // make sure that last pesky summary goes...
            return summary;
        }
    };
}());

/**
 * JSON Simlet.
 */
Ext.define('Ext.ux.ajax.JsonSimlet', {
    extend: 'Ext.ux.ajax.DataSimlet',
    alias: 'simlet.json',
    doGet: function(ctx) {
        var me = this,
            data = me.getData(ctx),
            page = me.getPage(ctx, data),
            reader = ctx.xhr.options.proxy && ctx.xhr.options.proxy.getReader(),
            root = reader && reader.getRootProperty(),
            ret = me.callParent(arguments),
            // pick up status/statusText
            response = {};
        if (root && Ext.isArray(page)) {
            response[root] = page;
            response[reader.getTotalProperty()] = data.length;
        } else {
            response = page;
        }
        if (ctx.groupSpec) {
            response.summaryData = me.getSummary(ctx, data, page);
        }
        ret.responseText = Ext.encode(response);
        return ret;
    },
    doPost: function(ctx) {
        return this.doGet(ctx);
    }
});

/**
 * @author Don Griffin
 *
 * Simulates an XMLHttpRequest object's methods and properties but is backed by a
 * {@link Ext.ux.ajax.Simlet} instance that provides the data.
 */
Ext.define('Ext.ux.ajax.SimXhr', {
    readyState: 0,
    mgr: null,
    simlet: null,
    constructor: function(config) {
        var me = this;
        Ext.apply(me, config);
        me.requestHeaders = {};
    },
    abort: function() {
        var me = this;
        if (me.timer) {
            clearTimeout(me.timer);
            me.timer = null;
        }
        me.aborted = true;
    },
    getAllResponseHeaders: function() {
        var headers = [];
        if (Ext.isObject(this.responseHeaders)) {
            Ext.Object.each(this.responseHeaders, function(name, value) {
                headers.push(name + ': ' + value);
            });
        }
        return headers.join('\r\n');
    },
    getResponseHeader: function(header) {
        var headers = this.responseHeaders;
        return (headers && headers[header]) || null;
    },
    open: function(method, url, async, user, password) {
        var me = this;
        me.method = method;
        me.url = url;
        me.async = async !== false;
        me.user = user;
        me.password = password;
        me.setReadyState(1);
    },
    overrideMimeType: function(mimeType) {
        this.mimeType = mimeType;
    },
    schedule: function() {
        var me = this,
            delay = me.mgr.delay;
        if (delay) {
            me.timer = setTimeout(function() {
                me.onTick();
            }, delay);
        } else {
            me.onTick();
        }
    },
    send: function(body) {
        var me = this;
        me.body = body;
        if (me.async) {
            me.schedule();
        } else {
            me.onComplete();
        }
    },
    setReadyState: function(state) {
        var me = this;
        if (me.readyState != state) {
            me.readyState = state;
            me.onreadystatechange();
        }
    },
    setRequestHeader: function(header, value) {
        this.requestHeaders[header] = value;
    },
    // handlers
    onreadystatechange: Ext.emptyFn,
    onComplete: function() {
        var me = this,
            callback;
        me.readyState = 4;
        Ext.apply(me, me.simlet.exec(me));
        callback = me.jsonpCallback;
        if (callback) {
            var text = callback + '(' + me.responseText + ')';
            eval(text);
        }
    },
    onTick: function() {
        var me = this;
        me.timer = null;
        me.onComplete();
        me.onreadystatechange && me.onreadystatechange();
    }
});

/**
 * @author Don Griffin
 *
 * This singleton manages simulated Ajax responses. This allows application logic to be
 * written unaware that its Ajax calls are being handled by simulations ("simlets"). This
 * is currently done by hooking {@link Ext.data.Connection} methods, so all users of that
 * class (and {@link Ext.Ajax} since it is a derived class) qualify for simulation.
 *
 * The requires hooks are inserted when either the {@link #init} method is called or the
 * first {@link Ext.ux.ajax.Simlet} is registered. For example:
 *
 *      Ext.onReady(function () {
 *          initAjaxSim();
 *
 *          // normal stuff
 *      });
 *
 *      function initAjaxSim () {
 *          Ext.ux.ajax.SimManager.init({
 *              delay: 300
 *          }).register({
 *              '/app/data/url': {
 *                  type: 'json',  // use JsonSimlet (type is like xtype for components)
 *                  data: [
 *                      { foo: 42, bar: 'abc' },
 *                      ...
 *                  ]
 *              }
 *          });
 *      }
 *
 * As many URL's as desired can be registered and associated with a {@link Ext.ux.ajax.Simlet}. To make
 * non-simulated Ajax requests once this singleton is initialized, add a `nosim:true` option
 * to the Ajax options:
 *
 *      Ext.Ajax.request({
 *          url: 'page.php',
 *          nosim: true, // ignored by normal Ajax request
 *          params: {
 *              id: 1
 *          },
 *          success: function(response){
 *              var text = response.responseText;
 *              // process server response here
 *          }
 *      });
 */
Ext.define('Ext.ux.ajax.SimManager', {
    singleton: true,
    requires: [
        'Ext.data.Connection',
        'Ext.ux.ajax.SimXhr',
        'Ext.ux.ajax.Simlet',
        'Ext.ux.ajax.JsonSimlet'
    ],
    /**
     * @cfg {Ext.ux.ajax.Simlet} defaultSimlet
     * The {@link Ext.ux.ajax.Simlet} instance to use for non-matching URL's. By default, this will
     * return 404. Set this to null to use real Ajax calls for non-matching URL's.
     */
    /**
     * @cfg {String} defaultType
     * The default `type` to apply to generic {@link Ext.ux.ajax.Simlet} configuration objects. The
     * default is 'basic'.
     */
    defaultType: 'basic',
    /**
     * @cfg {Number} delay
     * The number of milliseconds to delay before delivering a response to an async request.
     */
    delay: 150,
    /**
     * @property {Boolean} ready
     * True once this singleton has initialized and applied its Ajax hooks.
     * @private
     */
    ready: false,
    constructor: function() {
        this.simlets = [];
    },
    getSimlet: function(url) {
        // Strip down to base URL (no query parameters or hash):
        var me = this,
            index = url.indexOf('?'),
            simlets = me.simlets,
            len = simlets.length,
            i, simlet, simUrl, match;
        if (index < 0) {
            index = url.indexOf('#');
        }
        if (index > 0) {
            url = url.substring(0, index);
        }
        for (i = 0; i < len; ++i) {
            simlet = simlets[i];
            simUrl = simlet.url;
            if (simUrl instanceof RegExp) {
                match = simUrl.test(url);
            } else {
                match = simUrl === url;
            }
            if (match) {
                return simlet;
            }
        }
        return me.defaultSimlet;
    },
    getXhr: function(method, url, options, async) {
        var simlet = this.getSimlet(url);
        if (simlet) {
            return simlet.openRequest(method, url, options, async);
        }
        return null;
    },
    /**
     * Initializes this singleton and applies configuration options.
     * @param {Object} config An optional object with configuration properties to apply.
     * @return {Ext.ux.ajax.SimManager} this
     */
    init: function(config) {
        var me = this;
        Ext.apply(me, config);
        if (!me.ready) {
            me.ready = true;
            if (!('defaultSimlet' in me)) {
                me.defaultSimlet = new Ext.ux.ajax.Simlet({
                    status: 404,
                    statusText: 'Not Found'
                });
            }
            me._openRequest = Ext.data.Connection.prototype.openRequest;
            Ext.data.Connection.override({
                openRequest: function(options, requestOptions, async) {
                    var xhr = !options.nosim && me.getXhr(requestOptions.method, requestOptions.url, options, async);
                    if (!xhr) {
                        xhr = this.callParent(arguments);
                    }
                    return xhr;
                }
            });
            if (Ext.data.JsonP) {
                Ext.data.JsonP.self.override({
                    createScript: function(url, params, options) {
                        var fullUrl = Ext.urlAppend(url, Ext.Object.toQueryString(params)),
                            script = !options.nosim && me.getXhr('GET', fullUrl, options, true);
                        if (!script) {
                            script = this.callParent(arguments);
                        }
                        return script;
                    },
                    loadScript: function(request) {
                        var script = request.script;
                        if (script.simlet) {
                            script.jsonpCallback = request.params[request.callbackKey];
                            script.send(null);
                            // Ext.data.JsonP will attempt dom removal of a script tag, so emulate its presence
                            request.script = document.createElement('script');
                        } else {
                            this.callParent(arguments);
                        }
                    }
                });
            }
        }
        return me;
    },
    openRequest: function(method, url, async) {
        var opt = {
                method: method,
                url: url
            };
        return this._openRequest.call(Ext.data.Connection.prototype, {}, opt, async);
    },
    /**
     * Registeres one or more {@link Ext.ux.ajax.Simlet} instances.
     * @param {Array/Object} simlet Either a {@link Ext.ux.ajax.Simlet} instance or config, an Array
     * of such elements or an Object keyed by URL with values that are {@link Ext.ux.ajax.Simlet}
     * instances or configs.
     */
    register: function(simlet) {
        var me = this;
        me.init();
        function reg(one) {
            var simlet = one;
            if (!simlet.isSimlet) {
                simlet = Ext.create('simlet.' + (simlet.type || simlet.stype || me.defaultType), one);
            }
            me.simlets.push(simlet);
            simlet.manager = me;
        }
        if (Ext.isArray(simlet)) {
            Ext.each(simlet, reg);
        } else if (simlet.isSimlet || simlet.url) {
            reg(simlet);
        } else {
            Ext.Object.each(simlet, function(url, s) {
                s.url = url;
                reg(s);
            });
        }
        return me;
    }
});

/**
 * This class simulates XML-based requests.
 */
Ext.define('Ext.ux.ajax.XmlSimlet', {
    extend: 'Ext.ux.ajax.DataSimlet',
    alias: 'simlet.xml',
    /**
     * This template is used to populate the XML response. The configuration of the Reader
     * is available so that its `root` and `record` properties can be used as well as the
     * `fields` of the associated `model`. But beyond that, the way these pieces are put
     * together in the document requires the flexibility of a template.
     */
    xmlTpl: [
        '<{root}>\n',
        '<tpl for="data">',
        '    <{parent.record}>\n',
        '<tpl for="parent.fields">',
        '        <{name}>{[parent[values.name]]}</{name}>\n',
        '</tpl>',
        '    </{parent.record}>\n',
        '</tpl>',
        '</{root}>'
    ],
    doGet: function(ctx) {
        var me = this,
            data = me.getData(ctx),
            page = me.getPage(ctx, data),
            proxy = ctx.xhr.options.operation.getProxy(),
            reader = proxy && proxy.getReader(),
            model = reader && reader.getModel(),
            ret = me.callParent(arguments),
            // pick up status/statusText
            response = {
                data: page,
                reader: reader,
                fields: model && model.fields,
                root: reader && reader.getRootProperty(),
                record: reader && reader.record
            },
            tpl, xml, doc;
        if (ctx.groupSpec) {
            response.summaryData = me.getSummary(ctx, data, page);
        }
        // If a straight Ajax request there won't be an xmlTpl.
        if (me.xmlTpl) {
            tpl = Ext.XTemplate.getTpl(me, 'xmlTpl');
            xml = tpl.apply(response);
        } else {
            xml = data;
        }
        if (typeof DOMParser != 'undefined') {
            doc = (new DOMParser()).parseFromString(xml, "text/xml");
        } else {
            // IE doesn't have DOMParser, but fortunately, there is an ActiveX for XML
            doc = new ActiveXObject("Microsoft.XMLDOM");
            doc.async = false;
            doc.loadXML(xml);
        }
        ret.responseText = xml;
        ret.responseXML = doc;
        return ret;
    },
    fixTree: function() {
        this.callParent(arguments);
        var buffer = [];
        this.buildTreeXml(this.data, buffer);
        this.data = buffer.join('');
    },
    buildTreeXml: function(nodes, buffer) {
        var rootProperty = this.rootProperty,
            recordProperty = this.recordProperty;
        buffer.push('<', rootProperty, '>');
        Ext.Array.forEach(nodes, function(node) {
            buffer.push('<', recordProperty, '>');
            for (var key in node) {
                if (key == 'children') {
                    this.buildTreeXml(node.children, buffer);
                } else {
                    buffer.push('<', key, '>', node[key], '</', key, '>');
                }
            }
            buffer.push('</', recordProperty, '>');
        });
        buffer.push('</', rootProperty, '>');
    }
});

/**
 * This base class can be used by derived classes to dynamically require Google API's.
 */
Ext.define('Ext.ux.google.Api', {
    mixins: [
        'Ext.mixin.Mashup'
    ],
    requiredScripts: [
        '//www.google.com/jsapi'
    ],
    statics: {
        loadedModules: {}
    },
    /*
             *  feeds: [ callback1, callback2, .... ]  transitions to -> feeds : true  (when complete)
             */
    onClassExtended: function(cls, data, hooks) {
        var onBeforeClassCreated = hooks.onBeforeCreated,
            Api = this;
        // the Ext.ux.google.Api class
        hooks.onBeforeCreated = function(cls, data) {
            var me = this,
                apis = [],
                requiresGoogle = Ext.Array.from(data.requiresGoogle),
                loadedModules = Api.loadedModules,
                remaining = 0,
                callback = function() {
                    if (!--remaining) {
                        onBeforeClassCreated.call(me, cls, data, hooks);
                    }
                    Ext.env.Ready.unblock();
                },
                api, i, length;
            /*
             *  requiresGoogle: [
             *      'feeds',
             *      { api: 'feeds', version: '1.x',
             *        callback : fn, nocss : true }  //optionals
             *  ]
             */
            length = requiresGoogle.length;
            for (i = 0; i < length; ++i) {
                if (Ext.isString(api = requiresGoogle[i])) {
                    apis.push({
                        api: api
                    });
                } else if (Ext.isObject(api)) {
                    apis.push(Ext.apply({}, api));
                }
            }
            Ext.each(apis, function(api) {
                var name = api.api,
                    version = String(api.version || '1.x'),
                    module = loadedModules[name];
                if (!module) {
                    ++remaining;
                    Ext.env.Ready.block();
                    loadedModules[name] = module = [
                        callback
                    ].concat(api.callback || []);
                    delete api.api;
                    delete api.version;
                    //TODO:  window.google assertion?
                    google.load(name, version, Ext.applyIf({
                        callback: function() {
                            loadedModules[name] = true;
                            for (var n = module.length; n-- > 0; ) {
                                module[n]();
                            }
                        }
                    }, //iterate callbacks in reverse
                    api));
                } else if (module !== true) {
                    module.push(callback);
                }
            });
            if (!remaining) {
                onBeforeClassCreated.call(me, cls, data, hooks);
            }
        };
    }
});

/**
 * This class, when required, ensures that the Google RSS Feeds API is available.
 */
Ext.define('Ext.ux.google.Feeds', {
    extend: 'Ext.ux.google.Api',
    requiresGoogle: {
        api: 'feeds',
        nocss: true
    }
});

/**
 * This view is created by the "google-rss" `Ext.dashboard.Dashboard` part.
 */
Ext.define('Ext.ux.dashboard.GoogleRssView', {
    extend: 'Ext.Component',
    requires: [
        'Ext.tip.ToolTip',
        'Ext.ux.google.Feeds'
    ],
    feedCls: Ext.baseCSSPrefix + 'dashboard-googlerss',
    previewCls: Ext.baseCSSPrefix + 'dashboard-googlerss-preview',
    closeDetailsCls: Ext.baseCSSPrefix + 'dashboard-googlerss-close',
    nextCls: Ext.baseCSSPrefix + 'dashboard-googlerss-next',
    prevCls: Ext.baseCSSPrefix + 'dashboard-googlerss-prev',
    /**
     * The RSS feed URL. Some example RSS Feeds:
     *
     *   * http://rss.slashdot.org/Slashdot/slashdot
     *   * http://sports.espn.go.com/espn/rss/news (ESPN Top News)
     *   * http://news.google.com/news?ned=us&topic=t&output=rss (Sci/Tech - Google News)
     *   * http://rss.news.yahoo.com/rss/software (Yahoo Software News)
     *   * http://feeds.feedburner.com/extblog (Sencha Blog)
     *   * http://sencha.com/forum/external.php?type=RSS2 (Sencha Forums)
     *   * http://feeds.feedburner.com/ajaxian (Ajaxian)
     *   * http://rss.cnn.com/rss/edition.rss (CNN Top Stories)
     */
    feedUrl: null,
    scrollable: true,
    maxFeedEntries: 10,
    previewTips: false,
    mode: 'detail',
    //closeDetailsGlyph: '10008@',
    closeDetailsGlyph: '8657@',
    // black triangles
    prevGlyph: '9664@',
    nextGlyph: '9654@',
    // hollow triangles
    //prevGlyph: '9665@', nextGlyph: '9655@',
    // black pointing index
    //prevGlyph: '9754@', nextGlyph: '9755@',
    // white pointing index
    //prevGlyph: '9756@', nextGlyph: '9758@',
    // double arrows
    //prevGlyph: '8656@', nextGlyph: '8658@',
    // closed arrows
    //prevGlyph: '8678@', nextGlyph: '8680@',
    detailTpl: '<tpl for="entries[currentEntry]">' + '<div class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-detail-header">' + '<div class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-detail-nav">' + '<tpl if="parent.hasPrev">' + '<span class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-prev ' + Ext.baseCSSPrefix + 'dashboard-googlerss-glyph">' + '{parent.prevGlyph}' + '</span> ' + '</tpl>' + ' {[parent.currentEntry+1]}/{parent.numEntries} ' + '<span class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-next ' + Ext.baseCSSPrefix + 'dashboard-googlerss-glyph"' + '<tpl if="!parent.hasNext">' + ' style="visibility:hidden"' + '</tpl>' + '> {parent.nextGlyph}' + '</span> ' + '<span class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-close ' + Ext.baseCSSPrefix + 'dashboard-googlerss-glyph"> ' + '{parent.closeGlyph}' + '</span> ' + '</div>' + '<div class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-title">' + '<a href="{link}" target=_blank>{title}</a>' + '</div>' + '<div class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-author">By {author} - {publishedDate:this.date}</div>' + '</div>' + '<div class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-detail">' + '{content}' + '</div>' + '</tpl>',
    summaryTpl: '<tpl for="entries">' + '<div class="' + Ext.baseCSSPrefix + 'dashboard-googlerss">' + '<span class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-title">' + '<a href="{link}" target=_blank>{title}</a>' + '</span> ' + '<img src="' + Ext.BLANK_IMAGE_URL + '" data-index="{#}" class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-preview"><br>' + '<span class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-author">By {author} - {publishedDate:this.date}</span><br>' + '<span class="' + Ext.baseCSSPrefix + 'dashboard-googlerss-snippet">{contentSnippet}</span><br>' + '</div>' + '</tpl>',
    initComponent: function() {
        var me = this;
        me.feedMgr = new google.feeds.Feed(me.feedUrl);
        me.callParent();
    },
    afterRender: function() {
        var me = this;
        me.callParent();
        if (me.feedMgr) {
            me.refresh();
        }
        me.el.on({
            click: me.onClick,
            scope: me
        });
        if (me.previewTips) {
            me.tip = new Ext.tip.ToolTip({
                target: me.el,
                delegate: '.' + me.previewCls,
                maxWidth: 800,
                showDelay: 750,
                autoHide: false,
                scrollable: true,
                anchor: 'top',
                listeners: {
                    beforeshow: 'onBeforeShowTip',
                    scope: me
                }
            });
        }
    },
    formatDate: function(date) {
        if (!date) {
            return '';
        }
        date = new Date(date);
        var now = new Date(),
            d = Ext.Date.clearTime(now, true),
            notime = Ext.Date.clearTime(date, true).getTime();
        if (notime === d.getTime()) {
            return 'Today ' + Ext.Date.format(date, 'g:i a');
        }
        d = Ext.Date.add(d, 'd', -6);
        if (d.getTime() <= notime) {
            return Ext.Date.format(date, 'D g:i a');
        }
        if (d.getYear() === now.getYear()) {
            return Ext.Date.format(date, 'D M d \\a\\t g:i a');
        }
        return Ext.Date.format(date, 'D M d, Y \\a\\t g:i a');
    },
    getTitle: function() {
        var data = this.data;
        return data && data.title;
    },
    onBeforeShowTip: function(tip) {
        if (this.mode !== 'summary') {
            return false;
        }
        var el = tip.triggerElement,
            index = parseInt(el.getAttribute('data-index'), 10);
        tip.maxHeight = Ext.Element.getViewportHeight() / 2;
        tip.update(this.data.entries[index - 1].content);
    },
    onClick: function(e) {
        var me = this,
            entry = me.data.currentEntry,
            target = Ext.fly(e.getTarget());
        if (target.hasCls(me.nextCls)) {
            me.setCurrentEntry(entry + 1);
        } else if (target.hasCls(me.prevCls)) {
            me.setCurrentEntry(entry - 1);
        } else if (target.hasCls(me.closeDetailsCls)) {
            me.setMode('summary');
        } else if (target.hasCls(me.previewCls)) {
            me.setMode('detail', parseInt(target.getAttribute('data-index'), 10));
        }
    },
    refresh: function() {
        var me = this;
        if (!me.feedMgr) {
            return;
        }
        me.fireEvent('beforeload', me);
        //setTimeout(function () {
        me.feedMgr.setNumEntries(me.maxFeedEntries);
        me.feedMgr.load(function(result) {
            me.setFeedData(result.feed);
            me.fireEvent('load', me);
        });
    },
    //}, 2000);
    setCurrentEntry: function(current) {
        this.setMode(this.mode, current);
    },
    setFeedData: function(feedData) {
        var me = this,
            entries = feedData.entries,
            count = entries && entries.length || 0,
            data = Ext.apply({
                numEntries: count,
                closeGlyph: me.wrapGlyph(me.closeDetailsGlyph),
                prevGlyph: me.wrapGlyph(me.prevGlyph),
                nextGlyph: me.wrapGlyph(me.nextGlyph),
                currentEntry: 0
            }, feedData);
        me.data = data;
        me.setMode(me.mode);
    },
    setMode: function(mode, currentEntry) {
        var me = this,
            data = me.data,
            current = (currentEntry === undefined) ? data.currentEntry : currentEntry;
        me.tpl = me.getTpl(mode + 'Tpl');
        me.tpl.date = me.formatDate;
        me.mode = mode;
        data.currentEntry = current;
        data.hasNext = current + 1 < data.numEntries;
        data.hasPrev = current > 0;
        me.update(data);
        me.el.dom.scrollTop = 0;
    },
    wrapGlyph: function(glyph) {
        var glyphFontFamily = Ext._glyphFontFamily,
            glyphParts, html;
        if (typeof glyph === 'string') {
            glyphParts = glyph.split('@');
            glyph = glyphParts[0];
            glyphFontFamily = glyphParts[1];
        }
        html = '&#' + glyph + ';';
        if (glyphFontFamily) {
            html = '<span style="font-family:' + glyphFontFamily + '">' + html + '</span>';
        }
        return html;
    },
    // @private
    beforeDestroy: function() {
        Ext.destroy(this.tip);
        this.callParent();
    }
});

/**
 * This `part` implements a Google RSS Feed for use in a `Dashboard`.
 */
Ext.define('Ext.ux.dashboard.GoogleRssPart', {
    extend: 'Ext.dashboard.Part',
    alias: 'part.google-rss',
    requires: [
        'Ext.window.MessageBox',
        'Ext.ux.dashboard.GoogleRssView'
    ],
    viewTemplate: {
        layout: 'fit',
        items: {
            xclass: 'Ext.ux.dashboard.GoogleRssView',
            feedUrl: '{feedUrl}'
        }
    },
    type: 'google-rss',
    config: {
        suggestedFeed: 'http://rss.slashdot.org/Slashdot/slashdot'
    },
    formTitleAdd: 'Add RSS Feed',
    formTitleEdit: 'Edit RSS Feed',
    formLabel: 'RSS Feed URL',
    displayForm: function(instance, currentConfig, callback, scope) {
        var me = this,
            suggestion = currentConfig ? currentConfig.feedUrl : me.getSuggestedFeed(),
            title = instance ? me.formTitleEdit : me.formTitleAdd;
        Ext.Msg.prompt(title, me.formLabel, function(btn, text) {
            if (btn === 'ok') {
                callback.call(scope || me, {
                    feedUrl: text
                });
            }
        }, me, false, suggestion);
    }
});

/**
 * Paging Memory Proxy, allows to use paging grid with in memory dataset
 */
Ext.define('Ext.ux.data.PagingMemoryProxy', {
    extend: 'Ext.data.proxy.Memory',
    alias: 'proxy.pagingmemory',
    alternateClassName: 'Ext.data.PagingMemoryProxy',
    constructor: function() {
        Ext.log.warn('Ext.ux.data.PagingMemoryProxy functionality has been merged into Ext.data.proxy.Memory by using the enablePaging flag.');
        this.callParent(arguments);
    },
    read: function(operation, callback, scope) {
        var reader = this.getReader(),
            result = reader.read(this.data),
            sorters, filters, sorterFn, records;
        scope = scope || this;
        // filtering
        filters = operation.filters;
        if (filters.length > 0) {
            //at this point we have an array of  Ext.util.Filter objects to filter with,
            //so here we construct a function that combines these filters by ANDing them together
            records = [];
            Ext.each(result.records, function(record) {
                var isMatch = true,
                    length = filters.length,
                    i;
                for (i = 0; i < length; i++) {
                    var filter = filters[i],
                        fn = filter.filterFn,
                        scope = filter.scope;
                    isMatch = isMatch && fn.call(scope, record);
                }
                if (isMatch) {
                    records.push(record);
                }
            }, this);
            result.records = records;
            result.totalRecords = result.total = records.length;
        }
        // sorting
        sorters = operation.sorters;
        if (sorters.length > 0) {
            //construct an amalgamated sorter function which combines all of the Sorters passed
            sorterFn = function(r1, r2) {
                var result = sorters[0].sort(r1, r2),
                    length = sorters.length,
                    i;
                //if we have more than one sorter, OR any additional sorter functions together
                for (i = 1; i < length; i++) {
                    result = result || sorters[i].sort.call(this, r1, r2);
                }
                return result;
            };
            result.records.sort(sorterFn);
        }
        // paging (use undefined cause start can also be 0 (thus false))
        if (operation.start !== undefined && operation.limit !== undefined) {
            result.records = result.records.slice(operation.start, operation.start + operation.limit);
            result.count = result.records.length;
        }
        Ext.apply(operation, {
            resultSet: result
        });
        operation.setCompleted();
        operation.setSuccessful();
        Ext.Function.defer(function() {
            Ext.callback(callback, scope, [
                operation
            ]);
        }, 10);
    }
});

// A DropZone which cooperates with DragZones whose dragData contains
// a "field" property representing a form Field. Fields may be dropped onto
// grid data cells containing a matching data type.
Ext.define('Ext.ux.dd.CellFieldDropZone', {
    extend: 'Ext.dd.DropZone',
    constructor: function(cfg) {
        cfg = cfg || {};
        if (cfg.onCellDrop) {
            this.onCellDrop = cfg.onCellDrop;
        }
        if (cfg.ddGroup) {
            this.ddGroup = cfg.ddGroup;
        }
    },
    //  Call the DropZone constructor using the View's scrolling element
    //  only after the grid has been rendered.
    init: function(grid) {
        var me = this;
        if (grid.rendered) {
            me.grid = grid;
            grid.getView().on({
                render: function(v) {
                    me.view = v;
                    Ext.ux.dd.CellFieldDropZone.superclass.constructor.call(me, me.view.el);
                },
                single: true
            });
        } else {
            grid.on('render', me.init, me, {
                single: true
            });
        }
    },
    //  Scroll the main configured Element when we drag close to the edge
    containerScroll: true,
    getTargetFromEvent: function(e) {
        var me = this,
            v = me.view;
        //      Ascertain whether the mousemove is within a grid cell
        var cell = e.getTarget(v.getCellSelector());
        if (cell) {
            //          We *are* within a grid cell, so ask the View exactly which one,
            //          Extract data from the Model to create a target object for
            //          processing in subsequent onNodeXXXX methods. Note that the target does
            //          not have to be a DOM element. It can be whatever the noNodeXXX methods are
            //          programmed to expect.
            var row = v.findItemByChild(cell),
                columnIndex = cell.cellIndex;
            if (row && Ext.isDefined(columnIndex)) {
                return {
                    node: cell,
                    record: v.getRecord(row),
                    fieldName: me.grid.getVisibleColumnManager().getColumns()[columnIndex].dataIndex
                };
            }
        }
    },
    //  On Node enter, see if it is valid for us to drop the field on that type of column.
    onNodeEnter: function(target, dd, e, dragData) {
        delete this.dropOK;
        if (!target) {
            return;
        }
        //      Check that a field is being dragged.
        var f = dragData.field;
        if (!f) {
            return;
        }
        //      Check whether the data type of the column being dropped on accepts the
        //      dragged field type. If so, set dropOK flag, and highlight the target node.
        var field = target.record.fieldsMap[target.fieldName];
        if (field.isNumeric) {
            if (!f.isXType('numberfield')) {
                return;
            }
        } else if (field.isDateField) {
            if (!f.isXType('datefield')) {
                return;
            }
        } else if (field.isBooleanField) {
            if (!f.isXType('checkbox')) {
                return;
            }
        }
        this.dropOK = true;
        Ext.fly(target.node).addCls('x-drop-target-active');
    },
    //  Return the class name to add to the drag proxy. This provides a visual indication
    //  of drop allowed or not allowed.
    onNodeOver: function(target, dd, e, dragData) {
        return this.dropOK ? this.dropAllowed : this.dropNotAllowed;
    },
    //  highlight the target node.
    onNodeOut: function(target, dd, e, dragData) {
        Ext.fly(target.node).removeCls('x-drop-target-active');
    },
    //  Process the drop event if we have previously ascertained that a drop is OK.
    onNodeDrop: function(target, dd, e, dragData) {
        if (this.dropOK) {
            var value = dragData.field.getValue();
            target.record.set(target.fieldName, value);
            this.onCellDrop(target.fieldName, value);
            return true;
        }
    },
    onCellDrop: Ext.emptyFn
});

Ext.define('Ext.ux.dd.PanelFieldDragZone', {
    extend: 'Ext.dd.DragZone',
    constructor: function(cfg) {
        cfg = cfg || {};
        if (cfg.ddGroup) {
            this.ddGroup = cfg.ddGroup;
        }
    },
    //  Call the DRagZone's constructor. The Panel must have been rendered.
    init: function(panel) {
        // Panel is an HtmlElement
        if (panel.nodeType) {
            // Called via dragzone::init
            Ext.ux.dd.PanelFieldDragZone.superclass.init.apply(this, arguments);
        } else // Panel is a Component - need the el
        {
            // Called via plugin::init
            if (panel.rendered) {
                Ext.ux.dd.PanelFieldDragZone.superclass.constructor.call(this, panel.getEl());
            } else {
                panel.on('afterrender', this.init, this, {
                    single: true
                });
            }
        }
    },
    scroll: false,
    //  On mousedown, we ascertain whether it is on one of our draggable Fields.
    //  If so, we collect data about the draggable object, and return a drag data
    //  object which contains our own data, plus a "ddel" property which is a DOM
    //  node which provides a "view" of the dragged data.
    getDragData: function(e) {
        var targetLabel = e.getTarget('label', null, true),
            text, oldMark, field, dragEl;
        if (targetLabel) {
            // Get the data we are dragging: the Field
            // create a ddel for the drag proxy to display
            field = Ext.getCmp(targetLabel.up('.' + Ext.form.Labelable.prototype.formItemCls).id);
            // Temporary prevent marking the field as invalid, since it causes changes
            // to the underlying dom element which can cause problems in IE
            oldMark = field.preventMark;
            field.preventMark = true;
            if (field.isValid()) {
                field.preventMark = oldMark;
                dragEl = document.createElement('div');
                dragEl.className = Ext.baseCSSPrefix + 'form-text';
                text = field.getRawValue();
                dragEl.innerHTML = Ext.isEmpty(text) ? '&#160;' : text;
                Ext.fly(dragEl).setWidth(field.getEl().getWidth());
                return {
                    field: field,
                    ddel: dragEl
                };
            } else {
                e.stopEvent();
            }
            field.preventMark = oldMark;
        }
    },
    //  The coordinates to slide the drag proxy back to on failed drop.
    getRepairXY: function() {
        return this.dragData.field.getEl().getXY();
    }
});

/*!
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */
/**
 * @class Ext.ux.desktop.Desktop
 * @extends Ext.panel.Panel
 * <p>This class manages the wallpaper, shortcuts and taskbar.</p>
 */
Ext.define('Ext.ux.desktop.Desktop', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.desktop',
    uses: [
        'Ext.util.MixedCollection',
        'Ext.menu.Menu',
        'Ext.view.View',
        // dataview
        'Ext.window.Window',
        'Ext.ux.desktop.TaskBar',
        'Ext.ux.desktop.Wallpaper'
    ],
    activeWindowCls: 'ux-desktop-active-win',
    inactiveWindowCls: 'ux-desktop-inactive-win',
    lastActiveWindow: null,
    border: false,
    html: '&#160;',
    layout: 'fit',
    xTickSize: 1,
    yTickSize: 1,
    app: null,
    /**
     * @cfg {Array/Ext.data.Store} shortcuts
     * The items to add to the DataView. This can be a {@link Ext.data.Store Store} or a
     * simple array. Items should minimally provide the fields in the
     * {@link Ext.ux.desktop.ShortcutModel Shortcut}.
     */
    shortcuts: null,
    /**
     * @cfg {String} shortcutItemSelector
     * This property is passed to the DataView for the desktop to select shortcut items.
     * If the {@link #shortcutTpl} is modified, this will probably need to be modified as
     * well.
     */
    shortcutItemSelector: 'div.ux-desktop-shortcut',
    /**
     * @cfg {String} shortcutTpl
     * This XTemplate is used to render items in the DataView. If this is changed, the
     * {@link #shortcutItemSelector} will probably also need to changed.
     */
    shortcutTpl: [
        '<tpl for=".">',
        '<div class="ux-desktop-shortcut" id="{name}-shortcut">',
        '<div class="ux-desktop-shortcut-icon {iconCls}">',
        '<img src="',
        Ext.BLANK_IMAGE_URL,
        '" title="{name}">',
        '</div>',
        '<span class="ux-desktop-shortcut-text">{name}</span>',
        '</div>',
        '</tpl>',
        '<div class="x-clear"></div>'
    ],
    /**
     * @cfg {Object} taskbarConfig
     * The config object for the TaskBar.
     */
    taskbarConfig: null,
    windowMenu: null,
    initComponent: function() {
        var me = this;
        me.windowMenu = new Ext.menu.Menu(me.createWindowMenu());
        me.bbar = me.taskbar = new Ext.ux.desktop.TaskBar(me.taskbarConfig);
        me.taskbar.windowMenu = me.windowMenu;
        me.windows = new Ext.util.MixedCollection();
        me.contextMenu = new Ext.menu.Menu(me.createDesktopMenu());
        me.items = [
            {
                xtype: 'wallpaper',
                id: me.id + '_wallpaper'
            },
            me.createDataView()
        ];
        me.callParent();
        me.shortcutsView = me.items.getAt(1);
        me.shortcutsView.on('itemclick', me.onShortcutItemClick, me);
        var wallpaper = me.wallpaper;
        me.wallpaper = me.items.getAt(0);
        if (wallpaper) {
            me.setWallpaper(wallpaper, me.wallpaperStretch);
        }
    },
    afterRender: function() {
        var me = this;
        me.callParent();
        me.el.on('contextmenu', me.onDesktopMenu, me);
    },
    //------------------------------------------------------
    // Overrideable configuration creation methods
    createDataView: function() {
        var me = this;
        return {
            xtype: 'dataview',
            overItemCls: 'x-view-over',
            trackOver: true,
            itemSelector: me.shortcutItemSelector,
            store: me.shortcuts,
            style: {
                position: 'absolute'
            },
            x: 0,
            y: 0,
            tpl: new Ext.XTemplate(me.shortcutTpl)
        };
    },
    createDesktopMenu: function() {
        var me = this,
            ret = {
                items: me.contextMenuItems || []
            };
        if (ret.items.length) {
            ret.items.push('-');
        }
        ret.items.push({
            text: 'Tile',
            handler: me.tileWindows,
            scope: me,
            minWindows: 1
        }, {
            text: 'Cascade',
            handler: me.cascadeWindows,
            scope: me,
            minWindows: 1
        });
        return ret;
    },
    createWindowMenu: function() {
        var me = this;
        return {
            defaultAlign: 'br-tr',
            items: [
                {
                    text: 'Restore',
                    handler: me.onWindowMenuRestore,
                    scope: me
                },
                {
                    text: 'Minimize',
                    handler: me.onWindowMenuMinimize,
                    scope: me
                },
                {
                    text: 'Maximize',
                    handler: me.onWindowMenuMaximize,
                    scope: me
                },
                '-',
                {
                    text: 'Close',
                    handler: me.onWindowMenuClose,
                    scope: me
                }
            ],
            listeners: {
                beforeshow: me.onWindowMenuBeforeShow,
                hide: me.onWindowMenuHide,
                scope: me
            }
        };
    },
    //------------------------------------------------------
    // Event handler methods
    onDesktopMenu: function(e) {
        var me = this,
            menu = me.contextMenu;
        e.stopEvent();
        if (!menu.rendered) {
            menu.on('beforeshow', me.onDesktopMenuBeforeShow, me);
        }
        menu.showAt(e.getXY());
        menu.doConstrain();
    },
    onDesktopMenuBeforeShow: function(menu) {
        var me = this,
            count = me.windows.getCount();
        menu.items.each(function(item) {
            var min = item.minWindows || 0;
            item.setDisabled(count < min);
        });
    },
    onShortcutItemClick: function(dataView, record) {
        var me = this,
            module = me.app.getModule(record.data.module),
            win = module && module.createWindow();
        if (win) {
            me.restoreWindow(win);
        }
    },
    onWindowClose: function(win) {
        var me = this;
        me.windows.remove(win);
        me.taskbar.removeTaskButton(win.taskButton);
        me.updateActiveWindow();
    },
    //------------------------------------------------------
    // Window context menu handlers
    onWindowMenuBeforeShow: function(menu) {
        var items = menu.items.items,
            win = menu.theWin;
        items[0].setDisabled(win.maximized !== true && win.hidden !== true);
        // Restore
        items[1].setDisabled(win.minimized === true);
        // Minimize
        items[2].setDisabled(win.maximized === true || win.hidden === true);
    },
    // Maximize
    onWindowMenuClose: function() {
        var me = this,
            win = me.windowMenu.theWin;
        win.close();
    },
    onWindowMenuHide: function(menu) {
        Ext.defer(function() {
            menu.theWin = null;
        }, 1);
    },
    onWindowMenuMaximize: function() {
        var me = this,
            win = me.windowMenu.theWin;
        win.maximize();
        win.toFront();
    },
    onWindowMenuMinimize: function() {
        var me = this,
            win = me.windowMenu.theWin;
        win.minimize();
    },
    onWindowMenuRestore: function() {
        var me = this,
            win = me.windowMenu.theWin;
        me.restoreWindow(win);
    },
    //------------------------------------------------------
    // Dynamic (re)configuration methods
    getWallpaper: function() {
        return this.wallpaper.wallpaper;
    },
    setTickSize: function(xTickSize, yTickSize) {
        var me = this,
            xt = me.xTickSize = xTickSize,
            yt = me.yTickSize = (arguments.length > 1) ? yTickSize : xt;
        me.windows.each(function(win) {
            var dd = win.dd,
                resizer = win.resizer;
            dd.xTickSize = xt;
            dd.yTickSize = yt;
            resizer.widthIncrement = xt;
            resizer.heightIncrement = yt;
        });
    },
    setWallpaper: function(wallpaper, stretch) {
        this.wallpaper.setWallpaper(wallpaper, stretch);
        return this;
    },
    //------------------------------------------------------
    // Window management methods
    cascadeWindows: function() {
        var x = 0,
            y = 0,
            zmgr = this.getDesktopZIndexManager();
        zmgr.eachBottomUp(function(win) {
            if (win.isWindow && win.isVisible() && !win.maximized) {
                win.setPosition(x, y);
                x += 20;
                y += 20;
            }
        });
    },
    createWindow: function(config, cls) {
        var me = this,
            win,
            cfg = Ext.applyIf(config || {}, {
                stateful: false,
                isWindow: true,
                constrainHeader: true,
                minimizable: true,
                maximizable: true
            });
        cls = cls || Ext.window.Window;
        win = me.add(new cls(cfg));
        me.windows.add(win);
        win.taskButton = me.taskbar.addTaskButton(win);
        win.animateTarget = win.taskButton.el;
        win.on({
            activate: me.updateActiveWindow,
            beforeshow: me.updateActiveWindow,
            deactivate: me.updateActiveWindow,
            minimize: me.minimizeWindow,
            destroy: me.onWindowClose,
            scope: me
        });
        win.on({
            boxready: function() {
                win.dd.xTickSize = me.xTickSize;
                win.dd.yTickSize = me.yTickSize;
                if (win.resizer) {
                    win.resizer.widthIncrement = me.xTickSize;
                    win.resizer.heightIncrement = me.yTickSize;
                }
            },
            single: true
        });
        // replace normal window close w/fadeOut animation:
        win.doClose = function() {
            win.doClose = Ext.emptyFn;
            // dblclick can call again...
            win.el.disableShadow();
            win.el.fadeOut({
                listeners: {
                    afteranimate: function() {
                        win.destroy();
                    }
                }
            });
        };
        return win;
    },
    getActiveWindow: function() {
        var win = null,
            zmgr = this.getDesktopZIndexManager();
        if (zmgr) {
            // We cannot rely on activate/deactive because that fires against non-Window
            // components in the stack.
            zmgr.eachTopDown(function(comp) {
                if (comp.isWindow && !comp.hidden) {
                    win = comp;
                    return false;
                }
                return true;
            });
        }
        return win;
    },
    getDesktopZIndexManager: function() {
        var windows = this.windows;
        // TODO - there has to be a better way to get this...
        return (windows.getCount() && windows.getAt(0).zIndexManager) || null;
    },
    getWindow: function(id) {
        return this.windows.get(id);
    },
    minimizeWindow: function(win) {
        win.minimized = true;
        win.hide();
    },
    restoreWindow: function(win) {
        if (win.isVisible()) {
            win.restore();
            win.toFront();
        } else {
            win.show();
        }
        return win;
    },
    tileWindows: function() {
        var me = this,
            availWidth = me.body.getWidth(true);
        var x = me.xTickSize,
            y = me.yTickSize,
            nextY = y;
        me.windows.each(function(win) {
            if (win.isVisible() && !win.maximized) {
                var w = win.el.getWidth();
                // Wrap to next row if we are not at the line start and this Window will
                // go off the end
                if (x > me.xTickSize && x + w > availWidth) {
                    x = me.xTickSize;
                    y = nextY;
                }
                win.setPosition(x, y);
                x += w + me.xTickSize;
                nextY = Math.max(nextY, y + win.el.getHeight() + me.yTickSize);
            }
        });
    },
    updateActiveWindow: function() {
        var me = this,
            activeWindow = me.getActiveWindow(),
            last = me.lastActiveWindow;
        if (last && last.isDestroyed) {
            me.lastActiveWindow = null;
            return;
        }
        if (activeWindow === last) {
            return;
        }
        if (last) {
            if (last.el.dom) {
                last.addCls(me.inactiveWindowCls);
                last.removeCls(me.activeWindowCls);
            }
            last.active = false;
        }
        me.lastActiveWindow = activeWindow;
        if (activeWindow) {
            activeWindow.addCls(me.activeWindowCls);
            activeWindow.removeCls(me.inactiveWindowCls);
            activeWindow.minimized = false;
            activeWindow.active = true;
        }
        me.taskbar.setActiveButton(activeWindow && activeWindow.taskButton);
    }
});

/**
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 * @class Ext.ux.desktop.App
 */
Ext.define('Ext.ux.desktop.App', {
    mixins: {
        observable: 'Ext.util.Observable'
    },
    requires: [
        'Ext.container.Viewport',
        'Ext.ux.desktop.Desktop'
    ],
    isReady: false,
    modules: null,
    useQuickTips: true,
    constructor: function(config) {
        var me = this;
        me.mixins.observable.constructor.call(this, config);
        if (Ext.isReady) {
            Ext.Function.defer(me.init, 10, me);
        } else {
            Ext.onReady(me.init, me);
        }
    },
    init: function() {
        var me = this,
            desktopCfg;
        if (me.useQuickTips) {
            Ext.QuickTips.init();
        }
        me.modules = me.getModules();
        if (me.modules) {
            me.initModules(me.modules);
        }
        desktopCfg = me.getDesktopConfig();
        me.desktop = new Ext.ux.desktop.Desktop(desktopCfg);
        me.viewport = new Ext.container.Viewport({
            layout: 'fit',
            items: [
                me.desktop
            ]
        });
        Ext.getWin().on('beforeunload', me.onUnload, me);
        me.isReady = true;
        me.fireEvent('ready', me);
    },
    /**
     * This method returns the configuration object for the Desktop object. A derived
     * class can override this method, call the base version to build the config and
     * then modify the returned object before returning it.
     */
    getDesktopConfig: function() {
        var me = this,
            cfg = {
                app: me,
                taskbarConfig: me.getTaskbarConfig()
            };
        Ext.apply(cfg, me.desktopConfig);
        return cfg;
    },
    getModules: Ext.emptyFn,
    /**
     * This method returns the configuration object for the Start Button. A derived
     * class can override this method, call the base version to build the config and
     * then modify the returned object before returning it.
     */
    getStartConfig: function() {
        var me = this,
            cfg = {
                app: me,
                menu: []
            },
            launcher;
        Ext.apply(cfg, me.startConfig);
        Ext.each(me.modules, function(module) {
            launcher = module.launcher;
            if (launcher) {
                launcher.handler = launcher.handler || Ext.bind(me.createWindow, me, [
                    module
                ]);
                cfg.menu.push(module.launcher);
            }
        });
        return cfg;
    },
    createWindow: function(module) {
        var window = module.createWindow();
        window.show();
    },
    /**
     * This method returns the configuration object for the TaskBar. A derived class
     * can override this method, call the base version to build the config and then
     * modify the returned object before returning it.
     */
    getTaskbarConfig: function() {
        var me = this,
            cfg = {
                app: me,
                startConfig: me.getStartConfig()
            };
        Ext.apply(cfg, me.taskbarConfig);
        return cfg;
    },
    initModules: function(modules) {
        var me = this;
        Ext.each(modules, function(module) {
            module.app = me;
        });
    },
    getModule: function(name) {
        var ms = this.modules;
        for (var i = 0,
            len = ms.length; i < len; i++) {
            var m = ms[i];
            if (m.id == name || m.appType == name) {
                return m;
            }
        }
        return null;
    },
    onReady: function(fn, scope) {
        if (this.isReady) {
            fn.call(scope, this);
        } else {
            this.on({
                ready: fn,
                scope: scope,
                single: true
            });
        }
    },
    getDesktop: function() {
        return this.desktop;
    },
    onUnload: function(e) {
        if (this.fireEvent('beforeunload', this) === false) {
            e.stopEvent();
        }
    }
});

/*!
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */
Ext.define('Ext.ux.desktop.Module', {
    mixins: {
        observable: 'Ext.util.Observable'
    },
    constructor: function(config) {
        this.mixins.observable.constructor.call(this, config);
        this.init();
    },
    init: Ext.emptyFn
});

/*!
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */
/**
 * @class Ext.ux.desktop.ShortcutModel
 * @extends Ext.data.Model
 * This model defines the minimal set of fields for desktop shortcuts.
 */
Ext.define('Ext.ux.desktop.ShortcutModel', {
    extend: 'Ext.data.Model',
    fields: [
        {
            name: 'name'
        },
        {
            name: 'iconCls'
        },
        {
            name: 'module'
        }
    ]
});

/**
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 * @class Ext.ux.desktop.StartMenu
 */
Ext.define('Ext.ux.desktop.StartMenu', {
    extend: 'Ext.menu.Menu',
    // We want header styling like a Panel
    baseCls: Ext.baseCSSPrefix + 'panel',
    // Special styling within
    cls: 'x-menu ux-start-menu',
    bodyCls: 'ux-start-menu-body',
    defaultAlign: 'bl-tl',
    iconCls: 'user',
    bodyBorder: true,
    width: 300,
    initComponent: function() {
        var me = this;
        me.layout.align = 'stretch';
        me.items = me.menu;
        me.callParent();
        me.toolbar = new Ext.toolbar.Toolbar(Ext.apply({
            dock: 'right',
            cls: 'ux-start-menu-toolbar',
            vertical: true,
            width: 100,
            layout: {
                align: 'stretch'
            }
        }, me.toolConfig));
        me.addDocked(me.toolbar);
        delete me.toolItems;
    },
    addMenuItem: function() {
        var cmp = this.menu;
        cmp.add.apply(cmp, arguments);
    },
    addToolItem: function() {
        var cmp = this.toolbar;
        cmp.add.apply(cmp, arguments);
    }
});
// StartMenu

/*!
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */
/**
 * @class Ext.ux.desktop.TaskBar
 * @extends Ext.toolbar.Toolbar
 */
Ext.define('Ext.ux.desktop.TaskBar', {
    // This must be a toolbar. we rely on acquired toolbar classes and inherited toolbar methods for our
    // child items to instantiate and render correctly.
    extend: 'Ext.toolbar.Toolbar',
    requires: [
        'Ext.button.Button',
        'Ext.resizer.Splitter',
        'Ext.menu.Menu',
        'Ext.ux.desktop.StartMenu'
    ],
    alias: 'widget.taskbar',
    cls: 'ux-taskbar',
    /**
     * @cfg {String} startBtnText
     * The text for the Start Button.
     */
    startBtnText: 'Start',
    initComponent: function() {
        var me = this;
        me.startMenu = new Ext.ux.desktop.StartMenu(me.startConfig);
        me.quickStart = new Ext.toolbar.Toolbar(me.getQuickStart());
        me.windowBar = new Ext.toolbar.Toolbar(me.getWindowBarConfig());
        me.tray = new Ext.toolbar.Toolbar(me.getTrayConfig());
        me.items = [
            {
                xtype: 'button',
                cls: 'ux-start-button',
                iconCls: 'ux-start-button-icon',
                menu: me.startMenu,
                menuAlign: 'bl-tl',
                text: me.startBtnText
            },
            me.quickStart,
            {
                xtype: 'splitter',
                html: '&#160;',
                height: 14,
                width: 2,
                // TODO - there should be a CSS way here
                cls: 'x-toolbar-separator x-toolbar-separator-horizontal'
            },
            me.windowBar,
            '-',
            me.tray
        ];
        me.callParent();
    },
    afterLayout: function() {
        var me = this;
        me.callParent();
        me.windowBar.el.on('contextmenu', me.onButtonContextMenu, me);
    },
    /**
     * This method returns the configuration object for the Quick Start toolbar. A derived
     * class can override this method, call the base version to build the config and
     * then modify the returned object before returning it.
     */
    getQuickStart: function() {
        var me = this,
            ret = {
                minWidth: 20,
                width: Ext.themeName === 'neptune' ? 70 : 60,
                items: [],
                enableOverflow: true
            };
        Ext.each(this.quickStart, function(item) {
            ret.items.push({
                tooltip: {
                    text: item.name,
                    align: 'bl-tl'
                },
                //tooltip: item.name,
                overflowText: item.name,
                iconCls: item.iconCls,
                module: item.module,
                handler: me.onQuickStartClick,
                scope: me
            });
        });
        return ret;
    },
    /**
     * This method returns the configuration object for the Tray toolbar. A derived
     * class can override this method, call the base version to build the config and
     * then modify the returned object before returning it.
     */
    getTrayConfig: function() {
        var ret = {
                items: this.trayItems
            };
        delete this.trayItems;
        return ret;
    },
    getWindowBarConfig: function() {
        return {
            flex: 1,
            cls: 'ux-desktop-windowbar',
            items: [
                '&#160;'
            ],
            layout: {
                overflowHandler: 'Scroller'
            }
        };
    },
    getWindowBtnFromEl: function(el) {
        var c = this.windowBar.getChildByElement(el);
        return c || null;
    },
    onQuickStartClick: function(btn) {
        var module = this.app.getModule(btn.module),
            window;
        if (module) {
            window = module.createWindow();
            window.show();
        }
    },
    onButtonContextMenu: function(e) {
        var me = this,
            t = e.getTarget(),
            btn = me.getWindowBtnFromEl(t);
        if (btn) {
            e.stopEvent();
            me.windowMenu.theWin = btn.win;
            me.windowMenu.showBy(t);
        }
    },
    onWindowBtnClick: function(btn) {
        var win = btn.win;
        if (win.minimized || win.hidden) {
            btn.disable();
            win.show(null, function() {
                btn.enable();
            });
        } else if (win.active) {
            btn.disable();
            win.on('hide', function() {
                btn.enable();
            }, null, {
                single: true
            });
            win.minimize();
        } else {
            win.toFront();
        }
    },
    addTaskButton: function(win) {
        var config = {
                iconCls: win.iconCls,
                enableToggle: true,
                toggleGroup: 'all',
                width: 140,
                margin: '0 2 0 3',
                text: Ext.util.Format.ellipsis(win.title, 20),
                listeners: {
                    click: this.onWindowBtnClick,
                    scope: this
                },
                win: win
            };
        var cmp = this.windowBar.add(config);
        cmp.toggle(true);
        return cmp;
    },
    removeTaskButton: function(btn) {
        var found,
            me = this;
        me.windowBar.items.each(function(item) {
            if (item === btn) {
                found = item;
            }
            return !found;
        });
        if (found) {
            me.windowBar.remove(found);
        }
        return found;
    },
    setActiveButton: function(btn) {
        if (btn) {
            btn.toggle(true);
        } else {
            this.windowBar.items.each(function(item) {
                if (item.isButton) {
                    item.toggle(false);
                }
            });
        }
    }
});
/**
 * @class Ext.ux.desktop.TrayClock
 * @extends Ext.toolbar.TextItem
 * This class displays a clock on the toolbar.
 */
Ext.define('Ext.ux.desktop.TrayClock', {
    extend: 'Ext.toolbar.TextItem',
    alias: 'widget.trayclock',
    cls: 'ux-desktop-trayclock',
    html: '&#160;',
    timeFormat: 'g:i A',
    tpl: '{time}',
    initComponent: function() {
        var me = this;
        me.callParent();
        if (typeof (me.tpl) == 'string') {
            me.tpl = new Ext.XTemplate(me.tpl);
        }
    },
    afterRender: function() {
        var me = this;
        Ext.Function.defer(me.updateTime, 100, me);
        me.callParent();
    },
    onDestroy: function() {
        var me = this;
        if (me.timer) {
            window.clearTimeout(me.timer);
            me.timer = null;
        }
        me.callParent();
    },
    updateTime: function() {
        var me = this,
            time = Ext.Date.format(new Date(), me.timeFormat),
            text = me.tpl.apply({
                time: time
            });
        if (me.lastText != text) {
            me.setText(text);
            me.lastText = text;
        }
        me.timer = Ext.Function.defer(me.updateTime, 10000, me);
    }
});

/*!
* Ext JS Library
* Copyright(c) 2006-2014 Sencha Inc.
* licensing@sencha.com
* http://www.sencha.com/license
*/
// From code originally written by David Davis (http://www.sencha.com/blog/html5-video-canvas-and-ext-js/)
/* -NOTICE-
 * For HTML5 video to work, your server must
 * send the right content type, for more info see:
 * http://developer.mozilla.org/En/HTML/Element/Video
 */
Ext.define('Ext.ux.desktop.Video', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.video',
    layout: 'fit',
    autoplay: false,
    controls: true,
    bodyStyle: 'background-color:#000;color:#fff',
    html: '',
    tpl: [
        '<video id="{id}-video" autoPlay="{autoplay}" controls="{controls}" poster="{poster}" start="{start}" loopstart="{loopstart}" loopend="{loopend}" autobuffer="{autobuffer}" loop="{loop}" style="width:100%;height:100%">',
        '<tpl for="src">',
        '<source src="{src}" type="{type}"/>',
        '</tpl>',
        '{html}',
        '</video>'
    ],
    initComponent: function() {
        var me = this,
            fallback, size, cfg, el;
        if (me.fallbackHTML) {
            fallback = me.fallbackHTML;
        } else {
            fallback = "Your browser does not support HTML5 Video. ";
            if (Ext.isChrome) {
                fallback += 'Upgrade Chrome.';
            } else if (Ext.isGecko) {
                fallback += 'Upgrade to Firefox 3.5 or newer.';
            } else {
                var chrome = '<a href="http://www.google.com/chrome">Chrome</a>';
                fallback += 'Please try <a href="http://www.mozilla.com">Firefox</a>';
                if (Ext.isIE) {
                    fallback += ', ' + chrome + ' or <a href="http://www.apple.com/safari/">Safari</a>.';
                } else {
                    fallback += ' or ' + chrome + '.';
                }
            }
        }
        me.fallbackHTML = fallback;
        cfg = me.data = Ext.copyTo({
            tag: 'video',
            html: fallback
        }, me, 'id,poster,start,loopstart,loopend,playcount,autobuffer,loop');
        // just having the params exist enables them
        if (me.autoplay) {
            cfg.autoplay = 1;
        }
        if (me.controls) {
            cfg.controls = 1;
        }
        // handle multiple sources
        if (Ext.isArray(me.src)) {
            cfg.src = me.src;
        } else {
            cfg.src = [
                {
                    src: me.src
                }
            ];
        }
        me.callParent();
    },
    afterRender: function() {
        var me = this;
        me.callParent();
        me.video = me.body.getById(me.id + '-video');
        el = me.video.dom;
        me.supported = (el && el.tagName.toLowerCase() == 'video');
        if (me.supported) {
            me.video.on('error', me.onVideoError, me);
        }
    },
    getFallback: function() {
        return '<h1 style="background-color:#ff4f4f;padding: 10px;">' + this.fallbackHTML + '</h1>';
    },
    onVideoError: function() {
        var me = this;
        me.video.remove();
        me.supported = false;
        me.body.createChild(me.getFallback());
    },
    onDestroy: function() {
        var me = this;
        var video = me.video;
        if (me.supported && video) {
            var videoDom = video.dom;
            if (videoDom && videoDom.pause) {
                videoDom.pause();
            }
            video.remove();
            me.video = null;
        }
        me.callParent();
    }
});

/*!
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */
/**
 * @class Ext.ux.desktop.Wallpaper
 * @extends Ext.Component
 * <p>This component renders an image that stretches to fill the component.</p>
 */
Ext.define('Ext.ux.desktop.Wallpaper', {
    extend: 'Ext.Component',
    alias: 'widget.wallpaper',
    cls: 'ux-wallpaper',
    html: '<img src="' + Ext.BLANK_IMAGE_URL + '">',
    stretch: false,
    wallpaper: null,
    stateful: true,
    stateId: 'desk-wallpaper',
    afterRender: function() {
        var me = this;
        me.callParent();
        me.setWallpaper(me.wallpaper, me.stretch);
    },
    applyState: function() {
        var me = this,
            old = me.wallpaper;
        me.callParent(arguments);
        if (old != me.wallpaper) {
            me.setWallpaper(me.wallpaper);
        }
    },
    getState: function() {
        return this.wallpaper && {
            wallpaper: this.wallpaper
        };
    },
    setWallpaper: function(wallpaper, stretch) {
        var me = this,
            imgEl, bkgnd;
        me.stretch = (stretch !== false);
        me.wallpaper = wallpaper;
        if (me.rendered) {
            imgEl = me.el.dom.firstChild;
            if (!wallpaper || wallpaper == Ext.BLANK_IMAGE_URL) {
                Ext.fly(imgEl).hide();
            } else if (me.stretch) {
                imgEl.src = wallpaper;
                me.el.removeCls('ux-wallpaper-tiled');
                Ext.fly(imgEl).setStyle({
                    width: '100%',
                    height: '100%'
                }).show();
            } else {
                Ext.fly(imgEl).hide();
                bkgnd = 'url(' + wallpaper + ')';
                me.el.addCls('ux-wallpaper-tiled');
            }
            me.el.setStyle({
                backgroundImage: bkgnd || ''
            });
            if (me.stateful) {
                me.saveState();
            }
        }
        return me;
    }
});

/**
 * This is the base class for {@link Ext.ux.event.Recorder} and {@link Ext.ux.event.Player}.
 */
Ext.define('Ext.ux.event.Driver', {
    extend: 'Ext.util.Observable',
    active: null,
    specialKeysByName: {
        PGUP: 33,
        PGDN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
    },
    specialKeysByCode: {},
    /**
     * @event start
     * Fires when this object is started.
     * @param {Ext.ux.event.Driver} this
     */
    /**
     * @event stop
     * Fires when this object is stopped.
     * @param {Ext.ux.event.Driver} this
     */
    getTextSelection: function(el) {
        // See https://code.google.com/p/rangyinputs/source/browse/trunk/rangyinputs_jquery.js
        var doc = el.ownerDocument,
            range, range2, start, end;
        if (typeof el.selectionStart === "number") {
            start = el.selectionStart;
            end = el.selectionEnd;
        } else if (doc.selection) {
            range = doc.selection.createRange();
            range2 = el.createTextRange();
            range2.setEndPoint('EndToStart', range);
            start = range2.text.length;
            end = start + range.text.length;
        }
        return [
            start,
            end
        ];
    },
    getTime: function() {
        return new Date().getTime();
    },
    /**
     * Returns the number of milliseconds since start was called.
     */
    getTimestamp: function() {
        var d = this.getTime();
        return d - this.startTime;
    },
    onStart: function() {},
    onStop: function() {},
    /**
     * Starts this object. If this object is already started, nothing happens.
     */
    start: function() {
        var me = this;
        if (!me.active) {
            me.active = new Date();
            me.startTime = me.getTime();
            me.onStart();
            me.fireEvent('start', me);
        }
    },
    /**
     * Stops this object. If this object is not started, nothing happens.
     */
    stop: function() {
        var me = this;
        if (me.active) {
            me.active = null;
            me.onStop();
            me.fireEvent('stop', me);
        }
    }
}, function() {
    var proto = this.prototype;
    Ext.Object.each(proto.specialKeysByName, function(name, value) {
        proto.specialKeysByCode[value] = name;
    });
});

/**
 * Event maker.
 */
Ext.define('Ext.ux.event.Maker', {
    eventQueue: [],
    startAfter: 500,
    timerIncrement: 500,
    currentTiming: 0,
    constructor: function(config) {
        var me = this;
        me.currentTiming = me.startAfter;
        if (!Ext.isArray(config)) {
            config = [
                config
            ];
        }
        Ext.Array.each(config, function(item) {
            item.el = item.el || 'el';
            Ext.Array.each(Ext.ComponentQuery.query(item.cmpQuery), function(cmp) {
                var event = {},
                    x, y, el;
                if (!item.domQuery) {
                    el = cmp[item.el];
                } else {
                    el = cmp.el.down(item.domQuery);
                }
                event.target = '#' + el.dom.id;
                event.type = item.type;
                event.button = config.button || 0;
                x = el.getX() + (el.getWidth() / 2);
                y = el.getY() + (el.getHeight() / 2);
                event.xy = [
                    x,
                    y
                ];
                event.ts = me.currentTiming;
                me.currentTiming += me.timerIncrement;
                me.eventQueue.push(event);
            });
            if (item.screenshot) {
                me.eventQueue[me.eventQueue.length - 1].screenshot = true;
            }
        });
        return me.eventQueue;
    }
});

/**
 * @extends Ext.ux.event.Driver
 * This class manages the playback of an array of "event descriptors". For details on the
 * contents of an "event descriptor", see {@link Ext.ux.event.Recorder}. The events recorded by the
 * {@link Ext.ux.event.Recorder} class are designed to serve as input for this class.
 * 
 * The simplest use of this class is to instantiate it with an {@link #eventQueue} and call
 * {@link #method-start}. Like so:
 *
 *      var player = Ext.create('Ext.ux.event.Player', {
 *          eventQueue: [ ... ],
 *          speed: 2,  // play at 2x speed
 *          listeners: {
 *              stop: function () {
 *                  player = null; // all done
 *              }
 *          }
 *      });
 *
 *      player.start();
 *
 * A more complex use would be to incorporate keyframe generation after playing certain
 * events.
 *
 *      var player = Ext.create('Ext.ux.event.Player', {
 *          eventQueue: [ ... ],
 *          keyFrameEvents: {
 *              click: true
 *          },
 *          listeners: {
 *              stop: function () {
 *                  // play has completed... probably time for another keyframe...
 *                  player = null;
 *              },
 *              keyframe: onKeyFrame
 *          }
 *      });
 *
 *      player.start();
 *
 * If a keyframe can be handled immediately (synchronously), the listener would be:
 *
 *      function onKeyFrame () {
 *          handleKeyFrame();
 *      }
 *
 *  If the keyframe event is always handled asynchronously, then the event listener is only
 *  a bit more:
 *
 *      function onKeyFrame (p, eventDescriptor) {
 *          eventDescriptor.defer(); // pause event playback...
 *
 *          handleKeyFrame(function () {
 *              eventDescriptor.finish(); // ...resume event playback
 *          });
 *      }
 *
 * Finally, if the keyframe could be either handled synchronously or asynchronously (perhaps
 * differently by browser), a slightly more complex listener is required.
 *
 *      function onKeyFrame (p, eventDescriptor) {
 *          var async;
 *
 *          handleKeyFrame(function () {
 *              // either this callback is being called immediately by handleKeyFrame (in
 *              // which case async is undefined) or it is being called later (in which case
 *              // async will be true).
 *
 *              if (async) {
 *                  eventDescriptor.finish();
 *              } else {
 *                  async = false;
 *              }
 *          });
 *
 *          // either the callback was called (and async is now false) or it was not
 *          // called (and async remains undefined).
 *
 *          if (async !== false) {
 *              eventDescriptor.defer();
 *              async = true; // let the callback know that we have gone async
 *          }
 *      }
 */
Ext.define('Ext.ux.event.Player', function(Player) {
    var defaults = {},
        mouseEvents = {},
        keyEvents = {},
        doc,
        //HTML events supported
        uiEvents = {},
        //events that bubble by default
        bubbleEvents = {
            //scroll:     1,
            resize: 1,
            reset: 1,
            submit: 1,
            change: 1,
            select: 1,
            error: 1,
            abort: 1
        };
    Ext.each([
        'click',
        'dblclick',
        'mouseover',
        'mouseout',
        'mousedown',
        'mouseup',
        'mousemove'
    ], function(type) {
        bubbleEvents[type] = defaults[type] = mouseEvents[type] = {
            bubbles: true,
            cancelable: (type != "mousemove"),
            // mousemove cannot be cancelled
            detail: 1,
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            ctrlKey: false,
            altKey: false,
            shiftKey: false,
            metaKey: false,
            button: 0
        };
    });
    Ext.each([
        'keydown',
        'keyup',
        'keypress'
    ], function(type) {
        bubbleEvents[type] = defaults[type] = keyEvents[type] = {
            bubbles: true,
            cancelable: true,
            ctrlKey: false,
            altKey: false,
            shiftKey: false,
            metaKey: false,
            keyCode: 0,
            charCode: 0
        };
    });
    Ext.each([
        'blur',
        'change',
        'focus',
        'resize',
        'scroll',
        'select'
    ], function(type) {
        defaults[type] = uiEvents[type] = {
            bubbles: (type in bubbleEvents),
            cancelable: false,
            detail: 1
        };
    });
    var inputSpecialKeys = {
            8: function(target, start, end) {
                // backspace: 8,
                if (start < end) {
                    target.value = target.value.substring(0, start) + target.value.substring(end);
                } else if (start > 0) {
                    target.value = target.value.substring(0, --start) + target.value.substring(end);
                }
                this.setTextSelection(target, start, start);
            },
            46: function(target, start, end) {
                // delete: 46
                if (start < end) {
                    target.value = target.value.substring(0, start) + target.value.substring(end);
                } else if (start < target.value.length - 1) {
                    target.value = target.value.substring(0, start) + target.value.substring(start + 1);
                }
                this.setTextSelection(target, start, start);
            }
        };
    return {
        extend: 'Ext.ux.event.Driver',
        /**
     * @cfg {Array} eventQueue The event queue to playback. This must be provided before
     * the {@link #method-start} method is called.
     */
        /**
     * @cfg {Object} keyFrameEvents An object that describes the events that should generate
     * keyframe events. For example, `{ click: true }` would generate keyframe events after
     * each `click` event.
     */
        keyFrameEvents: {
            click: true
        },
        /**
     * @cfg {Boolean} pauseForAnimations True to pause event playback during animations, false
     * to ignore animations. Default is true.
     */
        pauseForAnimations: true,
        /**
     * @cfg {Number} speed The playback speed multiplier. Default is 1.0 (to playback at the
     * recorded speed). A value of 2 would playback at 2x speed.
     */
        speed: 1,
        stallTime: 0,
        _inputSpecialKeys: {
            INPUT: inputSpecialKeys,
            TEXTAREA: Ext.apply({}, //13: function (target, start, end) { // enter: 8,
            //TODO ?
            //}
            inputSpecialKeys)
        },
        tagPathRegEx: /(\w+)(?:\[(\d+)\])?/,
        /**
     * @event beforeplay
     * Fires before an event is played.
     * @param {Ext.ux.event.Player} this
     * @param {Object} eventDescriptor The event descriptor about to be played.
     */
        /**
     * @event keyframe
     * Fires when this player reaches a keyframe. Typically, this is after events
     * like `click` are injected and any resulting animations have been completed.
     * @param {Ext.ux.event.Player} this
     * @param {Object} eventDescriptor The keyframe event descriptor.
     */
        constructor: function(config) {
            var me = this;
            me.callParent(arguments);
            me.timerFn = function() {
                me.onTick();
            };
            me.attachTo = me.attachTo || window;
            doc = me.attachTo.document;
        },
        /**
     * Returns the element given is XPath-like description.
     * @param {String} xpath The XPath-like description of the element.
     * @return {HTMLElement}
     */
        getElementFromXPath: function(xpath) {
            var me = this,
                parts = xpath.split('/'),
                regex = me.tagPathRegEx,
                i, n, m, count, tag, child,
                el = me.attachTo.document;
            el = (parts[0] == '~') ? el.body : el.getElementById(parts[0].substring(1));
            // remove '#'
            for (i = 1 , n = parts.length; el && i < n; ++i) {
                m = regex.exec(parts[i]);
                count = m[2] ? parseInt(m[2], 10) : 1;
                tag = m[1].toUpperCase();
                for (child = el.firstChild; child; child = child.nextSibling) {
                    if (child.tagName == tag) {
                        if (count == 1) {
                            break;
                        }
                        --count;
                    }
                }
                el = child;
            }
            return el;
        },
        // Moving across a line break only counts as moving one character in a TextRange, whereas a line break in
        // the textarea value is two characters. This function corrects for that by converting a text offset into a
        // range character offset by subtracting one character for every line break in the textarea prior to the
        // offset
        offsetToRangeCharacterMove: function(el, offset) {
            return offset - (el.value.slice(0, offset).split("\r\n").length - 1);
        },
        setTextSelection: function(el, startOffset, endOffset) {
            // See https://code.google.com/p/rangyinputs/source/browse/trunk/rangyinputs_jquery.js
            if (startOffset < 0) {
                startOffset += el.value.length;
            }
            if (endOffset == null) {
                endOffset = startOffset;
            }
            if (endOffset < 0) {
                endOffset += el.value.length;
            }
            if (typeof el.selectionStart === "number") {
                el.selectionStart = startOffset;
                el.selectionEnd = endOffset;
            } else {
                var range = el.createTextRange();
                var startCharMove = this.offsetToRangeCharacterMove(el, startOffset);
                range.collapse(true);
                if (startOffset == endOffset) {
                    range.move("character", startCharMove);
                } else {
                    range.moveEnd("character", this.offsetToRangeCharacterMove(el, endOffset));
                    range.moveStart("character", startCharMove);
                }
                range.select();
            }
        },
        getTimeIndex: function() {
            var t = this.getTimestamp() - this.stallTime;
            return t * this.speed;
        },
        makeToken: function(eventDescriptor, signal) {
            var me = this,
                t0;
            eventDescriptor[signal] = true;
            eventDescriptor.defer = function() {
                eventDescriptor[signal] = false;
                t0 = me.getTime();
            };
            eventDescriptor.finish = function() {
                eventDescriptor[signal] = true;
                me.stallTime += me.getTime() - t0;
                me.schedule();
            };
        },
        /**
     * This method is called after an event has been played to prepare for the next event.
     * @param {Object} eventDescriptor The descriptor of the event just played.
     */
        nextEvent: function(eventDescriptor) {
            var me = this,
                index = ++me.queueIndex;
            // keyframe events are inserted after a keyFrameEvent is played.
            if (me.keyFrameEvents[eventDescriptor.type]) {
                Ext.Array.insert(me.eventQueue, index, [
                    {
                        keyframe: true,
                        ts: eventDescriptor.ts
                    }
                ]);
            }
        },
        /**
     * This method returns the event descriptor at the front of the queue. This does not
     * dequeue the event. Repeated calls return the same object (until {@link #nextEvent}
     * is called).
     */
        peekEvent: function() {
            return this.eventQueue[this.queueIndex] || null;
        },
        /**
     * Replaces an event in the queue with an array of events. This is often used to roll
     * up a multi-step pseudo-event and expand it just-in-time to be played. The process
     * for doing this in a derived class would be this:
     * 
     *      Ext.define('My.Player', {
     *          extend: 'Ext.ux.event.Player',
     *
     *          peekEvent: function () {
     *              var event = this.callParent();
     *
     *              if (event.multiStepSpecial) {
     *                  this.replaceEvent(null, [
     *                      ... expand to actual events
     *                  ]);
     *
     *                  event = this.callParent(); // get the new next event
     *              }
     *
     *              return event;
     *          }
     *      });
     * 
     * This method ensures that the `beforeplay` hook (if any) from the replaced event is
     * placed on the first new event and the `afterplay` hook (if any) is placed on the
     * last new event.
     * 
     * @param {Number} index The queue index to replace. Pass `null` to replace the event
     * at the current `queueIndex`.
     * @param {Event[]} events The array of events with which to replace the specified
     * event.
     */
        replaceEvent: function(index, events) {
            for (var t,
                i = 0,
                n = events.length; i < n; ++i) {
                if (i) {
                    t = events[i - 1];
                    delete t.afterplay;
                    delete t.screenshot;
                    delete events[i].beforeplay;
                }
            }
            Ext.Array.replace(this.eventQueue, (index == null) ? this.queueIndex : index, 1, events);
        },
        /**
     * This method dequeues and injects events until it has arrived at the time index. If
     * no events are ready (based on the time index), this method does nothing.
     * @return {Boolean} True if there is more to do; false if not (at least for now).
     */
        processEvents: function() {
            var me = this,
                animations = me.pauseForAnimations && me.attachTo.Ext.fx.Manager.items,
                eventDescriptor;
            while ((eventDescriptor = me.peekEvent()) !== null) {
                if (animations && animations.getCount()) {
                    return true;
                }
                if (eventDescriptor.keyframe) {
                    if (!me.processKeyFrame(eventDescriptor)) {
                        return false;
                    }
                    me.nextEvent(eventDescriptor);
                } else if (eventDescriptor.ts <= me.getTimeIndex() && me.fireEvent('beforeplay', me, eventDescriptor) !== false && me.playEvent(eventDescriptor)) {
                    me.nextEvent(eventDescriptor);
                } else {
                    return true;
                }
            }
            me.stop();
            return false;
        },
        /**
     * This method is called when a keyframe is reached. This will fire the keyframe event.
     * If the keyframe has been handled, true is returned. Otherwise, false is returned.
     * @param {Object} eventDescriptor The event descriptor of the keyframe.
     * @return {Boolean} True if the keyframe was handled, false if not.
     */
        processKeyFrame: function(eventDescriptor) {
            var me = this;
            // only fire keyframe event (and setup the eventDescriptor) once...
            if (!eventDescriptor.defer) {
                me.makeToken(eventDescriptor, 'done');
                me.fireEvent('keyframe', me, eventDescriptor);
            }
            return eventDescriptor.done;
        },
        /**
     * Called to inject the given event on the specified target.
     * @param {HTMLElement} target The target of the event.
     * @param {Object} event The event to inject. The properties of this object should be
     * those of standard DOM events but vary based on the `type` property. For details on
     * event types and their properties, see the class documentation.
     */
        injectEvent: function(target, event) {
            var me = this,
                type = event.type,
                options = Ext.apply({}, event, defaults[type]),
                handler;
            if (type === 'type') {
                handler = me._inputSpecialKeys[target.tagName];
                if (handler) {
                    return me.injectTypeInputEvent(target, event, handler);
                }
                return me.injectTypeEvent(target, event);
            }
            if (type === 'focus' && target.focus) {
                target.focus();
                return true;
            }
            if (type === 'blur' && target.blur) {
                target.blur();
                return true;
            }
            if (type === 'scroll') {
                target.scrollLeft = event.pos[0];
                target.scrollTop = event.pos[1];
                return true;
            }
            if (type === 'mduclick') {
                return me.injectEvent(target, Ext.applyIf({
                    type: 'mousedown'
                }, event)) && me.injectEvent(target, Ext.applyIf({
                    type: 'mouseup'
                }, event)) && me.injectEvent(target, Ext.applyIf({
                    type: 'click'
                }, event));
            }
            if (mouseEvents[type]) {
                return Player.injectMouseEvent(target, options, me.attachTo);
            }
            if (keyEvents[type]) {
                return Player.injectKeyEvent(target, options, me.attachTo);
            }
            if (uiEvents[type]) {
                return Player.injectUIEvent(target, type, options.bubbles, options.cancelable, options.view || me.attachTo, options.detail);
            }
            return false;
        },
        injectTypeEvent: function(target, event) {
            var me = this,
                text = event.text,
                xlat = [],
                ch, chUp, i, n, sel, upper, isInput;
            if (text) {
                delete event.text;
                upper = text.toUpperCase();
                for (i = 0 , n = text.length; i < n; ++i) {
                    ch = text.charCodeAt(i);
                    chUp = upper.charCodeAt(i);
                    xlat.push(Ext.applyIf({
                        type: 'keydown',
                        charCode: chUp,
                        keyCode: chUp
                    }, event), Ext.applyIf({
                        type: 'keypress',
                        charCode: ch,
                        keyCode: ch
                    }, event), Ext.applyIf({
                        type: 'keyup',
                        charCode: chUp,
                        keyCode: chUp
                    }, event));
                }
            } else {
                xlat.push(Ext.applyIf({
                    type: 'keydown',
                    charCode: event.keyCode
                }, event), Ext.applyIf({
                    type: 'keyup',
                    charCode: event.keyCode
                }, event));
            }
            for (i = 0 , n = xlat.length; i < n; ++i) {
                me.injectEvent(target, xlat[i]);
            }
            return true;
        },
        injectTypeInputEvent: function(target, event, handler) {
            var me = this,
                text = event.text,
                sel, n;
            if (handler) {
                sel = me.getTextSelection(target);
                if (text) {
                    n = sel[0];
                    target.value = target.value.substring(0, n) + text + target.value.substring(sel[1]);
                    n += text.length;
                    me.setTextSelection(target, n, n);
                } else {
                    if (!(handler = handler[event.keyCode])) {
                        // no handler for the special key for this element
                        if ('caret' in event) {
                            me.setTextSelection(target, event.caret, event.caret);
                        } else if (event.selection) {
                            me.setTextSelection(target, event.selection[0], event.selection[1]);
                        }
                        return me.injectTypeEvent(target, event);
                    }
                    handler.call(this, target, sel[0], sel[1]);
                    return true;
                }
            }
            return true;
        },
        playEvent: function(eventDescriptor) {
            var me = this,
                target = me.getElementFromXPath(eventDescriptor.target),
                event;
            if (!target) {
                // not present (yet)... wait for element present...
                // TODO - need a timeout here
                return false;
            }
            if (!me.playEventHook(eventDescriptor, 'beforeplay')) {
                return false;
            }
            if (!eventDescriptor.injected) {
                eventDescriptor.injected = true;
                event = me.translateEvent(eventDescriptor, target);
                me.injectEvent(target, event);
            }
            return me.playEventHook(eventDescriptor, 'afterplay');
        },
        playEventHook: function(eventDescriptor, hookName) {
            var me = this,
                doneName = hookName + '.done',
                firedName = hookName + '.fired',
                hook = eventDescriptor[hookName];
            if (hook && !eventDescriptor[doneName]) {
                if (!eventDescriptor[firedName]) {
                    eventDescriptor[firedName] = true;
                    me.makeToken(eventDescriptor, doneName);
                    if (me.eventScope && Ext.isString(hook)) {
                        hook = me.eventScope[hook];
                    }
                    if (hook) {
                        hook.call(me.eventScope || me, eventDescriptor);
                    }
                }
                return false;
            }
            return true;
        },
        schedule: function() {
            var me = this;
            if (!me.timer) {
                me.timer = setTimeout(me.timerFn, 10);
            }
        },
        _translateAcross: [
            'type',
            'button',
            'charCode',
            'keyCode',
            'caret',
            'pos',
            'text',
            'selection'
        ],
        translateEvent: function(eventDescriptor, target) {
            var me = this,
                event = {},
                modKeys = eventDescriptor.modKeys || '',
                names = me._translateAcross,
                i = names.length,
                name, xy;
            while (i--) {
                name = names[i];
                if (name in eventDescriptor) {
                    event[name] = eventDescriptor[name];
                }
            }
            event.altKey = modKeys.indexOf('A') > 0;
            event.ctrlKey = modKeys.indexOf('C') > 0;
            event.metaKey = modKeys.indexOf('M') > 0;
            event.shiftKey = modKeys.indexOf('S') > 0;
            if (target && 'x' in eventDescriptor) {
                xy = Ext.fly(target).getXY();
                xy[0] += eventDescriptor.x;
                xy[1] += eventDescriptor.y;
            } else if ('x' in eventDescriptor) {
                xy = [
                    eventDescriptor.x,
                    eventDescriptor.y
                ];
            } else if ('px' in eventDescriptor) {
                xy = [
                    eventDescriptor.px,
                    eventDescriptor.py
                ];
            }
            if (xy) {
                event.clientX = event.screenX = xy[0];
                event.clientY = event.screenY = xy[1];
            }
            if (eventDescriptor.key) {
                event.keyCode = me.specialKeysByName[eventDescriptor.key];
            }
            if (eventDescriptor.type === 'wheel') {
                if ('onwheel' in me.attachTo.document) {
                    event.wheelX = eventDescriptor.dx;
                    event.wheelY = eventDescriptor.dy;
                } else {
                    event.type = 'mousewheel';
                    event.wheelDeltaX = -40 * eventDescriptor.dx;
                    event.wheelDeltaY = event.wheelDelta = -40 * eventDescriptor.dy;
                }
            }
            return event;
        },
        //---------------------------------
        // Driver overrides
        onStart: function() {
            var me = this;
            me.queueIndex = 0;
            me.schedule();
        },
        onStop: function() {
            var me = this;
            if (me.timer) {
                clearTimeout(me.timer);
                me.timer = null;
            }
        },
        //---------------------------------
        onTick: function() {
            var me = this;
            me.timer = null;
            if (me.processEvents()) {
                me.schedule();
            }
        },
        statics: {
            ieButtonCodeMap: {
                0: 1,
                1: 4,
                2: 2
            },
            /*
         * Injects a key event using the given event information to populate the event
         * object.
         * 
         * **Note:** `keydown` causes Safari 2.x to crash.
         * 
         * @param {HTMLElement} target The target of the given event.
         * @param {Object} options Object object containing all of the event injection
         * options.
         * @param {String} options.type The type of event to fire. This can be any one of
         * the following: `keyup`, `keydown` and `keypress`.
         * @param {Boolean} [options.bubbles=true] `tru` if the event can be bubbled up.
         * DOM Level 3 specifies that all key events bubble by default.
         * @param {Boolean} [options.cancelable=true] `true` if the event can be canceled
         * using `preventDefault`. DOM Level 3 specifies that all key events can be
         * cancelled.
         * @param {Boolean} [options.ctrlKey=false] `true` if one of the CTRL keys is
         * pressed while the event is firing.
         * @param {Boolean} [options.altKey=false] `true` if one of the ALT keys is
         * pressed while the event is firing.
         * @param {Boolean} [options.shiftKey=false] `true` if one of the SHIFT keys is
         * pressed while the event is firing.
         * @param {Boolean} [options.metaKey=false] `true` if one of the META keys is
         * pressed while the event is firing.
         * @param {int} [options.keyCode=0] The code for the key that is in use.
         * @param {int} [options.charCode=0] The Unicode code for the character associated
         * with the key being used.
         * @param {Window} [view=window] The view containing the target. This is typically
         * the window object.
         * @private
         */
            injectKeyEvent: function(target, options, view) {
                var type = options.type,
                    customEvent = null;
                if (type === 'textevent') {
                    type = 'keypress';
                }
                view = view || window;
                //check for DOM-compliant browsers first
                if (doc.createEvent) {
                    try {
                        customEvent = doc.createEvent("KeyEvents");
                        // Interesting problem: Firefox implemented a non-standard
                        // version of initKeyEvent() based on DOM Level 2 specs.
                        // Key event was removed from DOM Level 2 and re-introduced
                        // in DOM Level 3 with a different interface. Firefox is the
                        // only browser with any implementation of Key Events, so for
                        // now, assume it's Firefox if the above line doesn't error.
                        // @TODO: Decipher between Firefox's implementation and a correct one.
                        customEvent.initKeyEvent(type, options.bubbles, options.cancelable, view, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.keyCode, options.charCode);
                    } catch (ex) {
                        // If it got here, that means key events aren't officially supported. 
                        // Safari/WebKit is a real problem now. WebKit 522 won't let you
                        // set keyCode, charCode, or other properties if you use a
                        // UIEvent, so we first must try to create a generic event. The
                        // fun part is that this will throw an error on Safari 2.x. The
                        // end result is that we need another try...catch statement just to
                        // deal with this mess.
                        try {
                            //try to create generic event - will fail in Safari 2.x
                            customEvent = doc.createEvent("Events");
                        } catch (uierror) {
                            //the above failed, so create a UIEvent for Safari 2.x
                            customEvent = doc.createEvent("UIEvents");
                        } finally {
                            customEvent.initEvent(type, options.bubbles, options.cancelable);
                            customEvent.view = view;
                            customEvent.altKey = options.altKey;
                            customEvent.ctrlKey = options.ctrlKey;
                            customEvent.shiftKey = options.shiftKey;
                            customEvent.metaKey = options.metaKey;
                            customEvent.keyCode = options.keyCode;
                            customEvent.charCode = options.charCode;
                        }
                    }
                    target.dispatchEvent(customEvent);
                } else if (doc.createEventObject) {
                    //IE
                    customEvent = doc.createEventObject();
                    customEvent.bubbles = options.bubbles;
                    customEvent.cancelable = options.cancelable;
                    customEvent.view = view;
                    customEvent.ctrlKey = options.ctrlKey;
                    customEvent.altKey = options.altKey;
                    customEvent.shiftKey = options.shiftKey;
                    customEvent.metaKey = options.metaKey;
                    // IE doesn't support charCode explicitly. CharCode should
                    // take precedence over any keyCode value for accurate
                    // representation.
                    customEvent.keyCode = (options.charCode > 0) ? options.charCode : options.keyCode;
                    target.fireEvent("on" + type, customEvent);
                } else {
                    return false;
                }
                return true;
            },
            /*
         * Injects a mouse event using the given event information to populate the event
         * object.
         *
         * @param {HTMLElement} target The target of the given event.
         * @param {Object} options Object object containing all of the event injection
         * options.
         * @param {String} options.type The type of event to fire. This can be any one of
         * the following: `click`, `dblclick`, `mousedown`, `mouseup`, `mouseout`,
         * `mouseover` and `mousemove`.
         * @param {Boolean} [options.bubbles=true] `tru` if the event can be bubbled up.
         * DOM Level 2 specifies that all mouse events bubble by default.
         * @param {Boolean} [options.cancelable=true] `true` if the event can be canceled
         * using `preventDefault`. DOM Level 2 specifies that all mouse events except
         * `mousemove` can be cancelled. This defaults to `false` for `mousemove`.
         * @param {Boolean} [options.ctrlKey=false] `true` if one of the CTRL keys is
         * pressed while the event is firing.
         * @param {Boolean} [options.altKey=false] `true` if one of the ALT keys is
         * pressed while the event is firing.
         * @param {Boolean} [options.shiftKey=false] `true` if one of the SHIFT keys is
         * pressed while the event is firing.
         * @param {Boolean} [options.metaKey=false] `true` if one of the META keys is
         * pressed while the event is firing.
         * @param {int} [options.detail=1] The number of times the mouse button has been
         * used.
         * @param {int} [options.screenX=0] The x-coordinate on the screen at which point
         * the event occurred.
         * @param {int} [options.screenY=0] The y-coordinate on the screen at which point
         * the event occurred.
         * @param {int} [options.clientX=0] The x-coordinate on the client at which point
         * the event occurred.
         * @param {int} [options.clientY=0] The y-coordinate on the client at which point
         * the event occurred.
         * @param {int} [options.button=0] The button being pressed while the event is
         * executing. The value should be 0 for the primary mouse button (typically the
         * left button), 1 for the tertiary mouse button (typically the middle button),
         * and 2 for the secondary mouse button (typically the right button).
         * @param {HTMLElement} [options.relatedTarget=null] For `mouseout` events, this
         * is the element that the mouse has moved to. For `mouseover` events, this is
         * the element that the mouse has moved from. This argument is ignored for all
         * other events.
         * @param {Window} [view=window] The view containing the target. This is typically
         * the window object.
         * @private
         */
            injectMouseEvent: function(target, options, view) {
                var type = options.type,
                    customEvent = null;
                view = view || window;
                //check for DOM-compliant browsers first
                if (doc.createEvent) {
                    customEvent = doc.createEvent("MouseEvents");
                    //Safari 2.x (WebKit 418) still doesn't implement initMouseEvent()
                    if (customEvent.initMouseEvent) {
                        customEvent.initMouseEvent(type, options.bubbles, options.cancelable, view, options.detail, options.screenX, options.screenY, options.clientX, options.clientY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, options.relatedTarget);
                    } else {
                        //Safari
                        //the closest thing available in Safari 2.x is UIEvents
                        customEvent = doc.createEvent("UIEvents");
                        customEvent.initEvent(type, options.bubbles, options.cancelable);
                        customEvent.view = view;
                        customEvent.detail = options.detail;
                        customEvent.screenX = options.screenX;
                        customEvent.screenY = options.screenY;
                        customEvent.clientX = options.clientX;
                        customEvent.clientY = options.clientY;
                        customEvent.ctrlKey = options.ctrlKey;
                        customEvent.altKey = options.altKey;
                        customEvent.metaKey = options.metaKey;
                        customEvent.shiftKey = options.shiftKey;
                        customEvent.button = options.button;
                        customEvent.relatedTarget = options.relatedTarget;
                    }
                    /*
                 * Check to see if relatedTarget has been assigned. Firefox
                 * versions less than 2.0 don't allow it to be assigned via
                 * initMouseEvent() and the property is readonly after event
                 * creation, so in order to keep YAHOO.util.getRelatedTarget()
                 * working, assign to the IE proprietary toElement property
                 * for mouseout event and fromElement property for mouseover
                 * event.
                 */
                    if (options.relatedTarget && !customEvent.relatedTarget) {
                        if (type == "mouseout") {
                            customEvent.toElement = options.relatedTarget;
                        } else if (type == "mouseover") {
                            customEvent.fromElement = options.relatedTarget;
                        }
                    }
                    target.dispatchEvent(customEvent);
                } else if (doc.createEventObject) {
                    //IE
                    customEvent = doc.createEventObject();
                    customEvent.bubbles = options.bubbles;
                    customEvent.cancelable = options.cancelable;
                    customEvent.view = view;
                    customEvent.detail = options.detail;
                    customEvent.screenX = options.screenX;
                    customEvent.screenY = options.screenY;
                    customEvent.clientX = options.clientX;
                    customEvent.clientY = options.clientY;
                    customEvent.ctrlKey = options.ctrlKey;
                    customEvent.altKey = options.altKey;
                    customEvent.metaKey = options.metaKey;
                    customEvent.shiftKey = options.shiftKey;
                    customEvent.button = Player.ieButtonCodeMap[options.button] || 0;
                    /*
                 * Have to use relatedTarget because IE won't allow assignment
                 * to toElement or fromElement on generic events. This keeps
                 * YAHOO.util.customEvent.getRelatedTarget() functional.
                 */
                    customEvent.relatedTarget = options.relatedTarget;
                    target.fireEvent('on' + type, customEvent);
                } else {
                    return false;
                }
                return true;
            },
            /*
         * Injects a UI event using the given event information to populate the event
         * object.
         * 
         * @param {HTMLElement} target The target of the given event.
         * @param {String} options.type The type of event to fire. This can be any one of
         * the following: `click`, `dblclick`, `mousedown`, `mouseup`, `mouseout`,
         * `mouseover` and `mousemove`.
         * @param {Boolean} [options.bubbles=true] `tru` if the event can be bubbled up.
         * DOM Level 2 specifies that all mouse events bubble by default.
         * @param {Boolean} [options.cancelable=true] `true` if the event can be canceled
         * using `preventDefault`. DOM Level 2 specifies that all mouse events except
         * `mousemove` can be canceled. This defaults to `false` for `mousemove`.
         * @param {int} [options.detail=1] The number of times the mouse button has been
         * used.
         * @param {Window} [view=window] The view containing the target. This is typically
         * the window object.
         * @private
         */
            injectUIEvent: function(target, options, view) {
                var customEvent = null;
                view = view || window;
                //check for DOM-compliant browsers first
                if (doc.createEvent) {
                    //just a generic UI Event object is needed
                    customEvent = doc.createEvent("UIEvents");
                    customEvent.initUIEvent(options.type, options.bubbles, options.cancelable, view, options.detail);
                    target.dispatchEvent(customEvent);
                } else if (doc.createEventObject) {
                    //IE
                    customEvent = doc.createEventObject();
                    customEvent.bubbles = options.bubbles;
                    customEvent.cancelable = options.cancelable;
                    customEvent.view = view;
                    customEvent.detail = options.detail;
                    target.fireEvent("on" + options.type, customEvent);
                } else {
                    return false;
                }
                return true;
            }
        }
    };
});
// statics

/**
 * @extends Ext.ux.event.Driver
 * Event recorder.
 */
Ext.define('Ext.ux.event.Recorder', function(Recorder) {
    function apply() {
        var a = arguments,
            n = a.length,
            obj = {
                kind: 'other'
            },
            i;
        for (i = 0; i < n; ++i) {
            Ext.apply(obj, arguments[i]);
        }
        if (obj.alt && !obj.event) {
            obj.event = obj.alt;
        }
        return obj;
    }
    function key(extra) {
        return apply({
            kind: 'keyboard',
            modKeys: true,
            key: true
        }, extra);
    }
    function mouse(extra) {
        return apply({
            kind: 'mouse',
            button: true,
            modKeys: true,
            xy: true
        }, extra);
    }
    var eventsToRecord = {
            keydown: key(),
            keypress: key(),
            keyup: key(),
            dragmove: mouse({
                alt: 'mousemove',
                pageCoords: true,
                whileDrag: true
            }),
            mousemove: mouse({
                pageCoords: true
            }),
            mouseover: mouse(),
            mouseout: mouse(),
            click: mouse(),
            wheel: mouse({
                wheel: true
            }),
            mousedown: mouse({
                press: true
            }),
            mouseup: mouse({
                release: true
            }),
            scroll: apply({
                listen: false
            }),
            focus: apply(),
            blur: apply()
        };
    for (var key in eventsToRecord) {
        if (!eventsToRecord[key].event) {
            eventsToRecord[key].event = key;
        }
    }
    eventsToRecord.wheel.event = null;
    // must detect later
    return {
        extend: 'Ext.ux.event.Driver',
        /**
         * @event add
         * Fires when an event is added to the recording.
         * @param {Ext.ux.event.Recorder} this
         * @param {Object} eventDescriptor The event descriptor.
         */
        /**
         * @event coalesce
         * Fires when an event is coalesced. This edits the tail of the recorded
         * event list.
         * @param {Ext.ux.event.Recorder} this
         * @param {Object} eventDescriptor The event descriptor that was coalesced.
         */
        eventsToRecord: eventsToRecord,
        ignoreIdRegEx: /ext-gen(?:\d+)/,
        inputRe: /^(input|textarea)$/i,
        constructor: function(config) {
            var me = this,
                events = config && config.eventsToRecord;
            if (events) {
                me.eventsToRecord = Ext.apply(Ext.apply({}, me.eventsToRecord), // duplicate
                events);
                // and merge
                delete config.eventsToRecord;
            }
            // don't smash
            me.callParent(arguments);
            me.clear();
            me.modKeys = [];
            me.attachTo = me.attachTo || window;
        },
        clear: function() {
            this.eventsRecorded = [];
        },
        listenToEvent: function(event) {
            var me = this,
                el = me.attachTo.document.body,
                fn = function() {
                    return me.onEvent.apply(me, arguments);
                },
                cleaner = {};
            if (el.attachEvent && el.ownerDocument.documentMode < 10) {
                event = 'on' + event;
                el.attachEvent(event, fn);
                cleaner.destroy = function() {
                    if (fn) {
                        el.detachEvent(event, fn);
                        fn = null;
                    }
                };
            } else {
                el.addEventListener(event, fn, true);
                cleaner.destroy = function() {
                    if (fn) {
                        el.removeEventListener(event, fn, true);
                        fn = null;
                    }
                };
            }
            return cleaner;
        },
        coalesce: function(rec, ev) {
            var me = this,
                events = me.eventsRecorded,
                length = events.length,
                tail = length && events[length - 1],
                tail2 = (length > 1) && events[length - 2],
                tail3 = (length > 2) && events[length - 3];
            if (!tail) {
                return false;
            }
            if (rec.type === 'mousemove') {
                if (tail.type === 'mousemove' && rec.ts - tail.ts < 200) {
                    rec.ts = tail.ts;
                    events[length - 1] = rec;
                    return true;
                }
            } else if (rec.type === 'click') {
                if (tail2 && tail.type === 'mouseup' && tail2.type === 'mousedown') {
                    if (rec.button == tail.button && rec.button == tail2.button && rec.target == tail.target && rec.target == tail2.target && me.samePt(rec, tail) && me.samePt(rec, tail2)) {
                        events.pop();
                        // remove mouseup
                        tail2.type = 'mduclick';
                        return true;
                    }
                }
            } else if (rec.type === 'keyup') {
                // tail3 = { type: "type",     text: "..." },
                // tail2 = { type: "keydown",  charCode: 65, keyCode: 65 },
                // tail  = { type: "keypress", charCode: 97, keyCode: 97 },
                // rec   = { type: "keyup",    charCode: 65, keyCode: 65 },
                if (tail2 && tail.type === 'keypress' && tail2.type === 'keydown') {
                    if (rec.target === tail.target && rec.target === tail2.target) {
                        events.pop();
                        // remove keypress
                        tail2.type = 'type';
                        tail2.text = String.fromCharCode(tail.charCode);
                        delete tail2.charCode;
                        delete tail2.keyCode;
                        if (tail3 && tail3.type === 'type') {
                            if (tail3.text && tail3.target === tail2.target) {
                                tail3.text += tail2.text;
                                events.pop();
                            }
                        }
                        return true;
                    }
                }
                // tail = { type: "keydown", charCode: 40, keyCode: 40 },
                // rec  = { type: "keyup",   charCode: 40, keyCode: 40 },
                else if (me.completeKeyStroke(tail, rec)) {
                    tail.type = 'type';
                    me.completeSpecialKeyStroke(ev.target, tail, rec);
                    return true;
                }
                // tail2 = { type: "keydown", charCode: 40, keyCode: 40 },
                // tail  = { type: "scroll",  ... },
                // rec   = { type: "keyup",   charCode: 40, keyCode: 40 },
                else if (tail.type === 'scroll' && me.completeKeyStroke(tail2, rec)) {
                    tail2.type = 'type';
                    me.completeSpecialKeyStroke(ev.target, tail2, rec);
                    // swap the order of type and scroll events
                    events.pop();
                    events.pop();
                    events.push(tail, tail2);
                    return true;
                }
            }
            return false;
        },
        completeKeyStroke: function(down, up) {
            if (down && down.type === 'keydown' && down.keyCode === up.keyCode) {
                delete down.charCode;
                return true;
            }
            return false;
        },
        completeSpecialKeyStroke: function(target, down, up) {
            var key = this.specialKeysByCode[up.keyCode];
            if (key && this.inputRe.test(target.tagName)) {
                // home,end,arrow keys + shift get crazy, so encode selection/caret
                delete down.keyCode;
                down.key = key;
                down.selection = this.getTextSelection(target);
                if (down.selection[0] === down.selection[1]) {
                    down.caret = down.selection[0];
                    delete down.selection;
                }
                return true;
            }
            return false;
        },
        getElementXPath: function(el) {
            var me = this,
                good = false,
                xpath = [],
                count, sibling, t, tag;
            for (t = el; t; t = t.parentNode) {
                if (t == me.attachTo.document.body) {
                    xpath.unshift('~');
                    good = true;
                    break;
                }
                if (t.id && !me.ignoreIdRegEx.test(t.id)) {
                    xpath.unshift('#' + t.id);
                    good = true;
                    break;
                }
                for (count = 1 , sibling = t; !!(sibling = sibling.previousSibling); ) {
                    if (sibling.tagName == t.tagName) {
                        ++count;
                    }
                }
                tag = t.tagName.toLowerCase();
                if (count < 2) {
                    xpath.unshift(tag);
                } else {
                    xpath.unshift(tag + '[' + count + ']');
                }
            }
            return good ? xpath.join('/') : null;
        },
        getRecordedEvents: function() {
            return this.eventsRecorded;
        },
        onEvent: function(ev) {
            var me = this,
                e = new Ext.event.Event(ev),
                info = me.eventsToRecord[e.type],
                root, modKeys, elXY,
                rec = {
                    type: e.type,
                    ts: me.getTimestamp(),
                    target: me.getElementXPath(e.target)
                },
                xy;
            if (!info || !rec.target) {
                return;
            }
            root = e.target.ownerDocument;
            root = root.defaultView || root.parentWindow;
            // Standards || IE
            if (root !== me.attachTo) {
                return;
            }
            if (me.eventsToRecord.scroll) {
                me.syncScroll(e.target);
            }
            if (info.xy) {
                xy = e.getXY();
                if (info.pageCoords || !rec.target) {
                    rec.px = xy[0];
                    rec.py = xy[1];
                } else {
                    elXY = Ext.fly(e.getTarget()).getXY();
                    xy[0] -= elXY[0];
                    xy[1] -= elXY[1];
                    rec.x = xy[0];
                    rec.y = xy[1];
                }
            }
            if (info.button) {
                if ('buttons' in ev) {
                    rec.button = ev.buttons;
                } else // LEFT=1, RIGHT=2, MIDDLE=4, etc.
                {
                    rec.button = ev.button;
                }
                if (!rec.button && info.whileDrag) {
                    return;
                }
            }
            if (info.wheel) {
                rec.type = 'wheel';
                if (info.event === 'wheel') {
                    // Current FireFox (technically IE9+ if we use addEventListener but
                    // checking document.onwheel does not detect this)
                    rec.dx = ev.deltaX;
                    rec.dy = ev.deltaY;
                } else if (typeof ev.wheelDeltaX === 'number') {
                    // new WebKit has both X & Y
                    rec.dx = -1 / 40 * ev.wheelDeltaX;
                    rec.dy = -1 / 40 * ev.wheelDeltaY;
                } else if (ev.wheelDelta) {
                    // old WebKit and IE
                    rec.dy = -1 / 40 * ev.wheelDelta;
                } else if (ev.detail) {
                    // Old Gecko
                    rec.dy = ev.detail;
                }
            }
            if (info.modKeys) {
                me.modKeys[0] = e.altKey ? 'A' : '';
                me.modKeys[1] = e.ctrlKey ? 'C' : '';
                me.modKeys[2] = e.metaKey ? 'M' : '';
                me.modKeys[3] = e.shiftKey ? 'S' : '';
                modKeys = me.modKeys.join('');
                if (modKeys) {
                    rec.modKeys = modKeys;
                }
            }
            if (info.key) {
                rec.charCode = e.getCharCode();
                rec.keyCode = e.getKey();
            }
            if (me.coalesce(rec, e)) {
                me.fireEvent('coalesce', me, rec);
            } else {
                me.eventsRecorded.push(rec);
                me.fireEvent('add', me, rec);
            }
        },
        onStart: function() {
            var me = this,
                ddm = me.attachTo.Ext.dd.DragDropManager,
                evproto = me.attachTo.Ext.EventObjectImpl.prototype,
                special = [];
            // FireFox does not support the 'mousewheel' event but does support the
            // 'wheel' event instead.
            Recorder.prototype.eventsToRecord.wheel.event = ('onwheel' in me.attachTo.document) ? 'wheel' : 'mousewheel';
            me.listeners = [];
            Ext.Object.each(me.eventsToRecord, function(name, value) {
                if (value && value.listen !== false) {
                    if (!value.event) {
                        value.event = name;
                    }
                    if (value.alt && value.alt !== name) {
                        // The 'drag' event is just mousemove while buttons are pressed,
                        // so if there is a mousemove entry as well, ignore the drag
                        if (!me.eventsToRecord[value.alt]) {
                            special.push(value);
                        }
                    } else {
                        me.listeners.push(me.listenToEvent(value.event));
                    }
                }
            });
            Ext.each(special, function(info) {
                me.eventsToRecord[info.alt] = info;
                me.listeners.push(me.listenToEvent(info.alt));
            });
            me.ddmStopEvent = ddm.stopEvent;
            ddm.stopEvent = Ext.Function.createSequence(ddm.stopEvent, function(e) {
                me.onEvent(e);
            });
            me.evStopEvent = evproto.stopEvent;
            evproto.stopEvent = Ext.Function.createSequence(evproto.stopEvent, function() {
                me.onEvent(this);
            });
        },
        onStop: function() {
            var me = this;
            Ext.destroy(me.listeners);
            me.listeners = null;
            me.attachTo.Ext.dd.DragDropManager.stopEvent = me.ddmStopEvent;
            me.attachTo.Ext.EventObjectImpl.prototype.stopEvent = me.evStopEvent;
        },
        samePt: function(pt1, pt2) {
            return pt1.x == pt2.x && pt1.y == pt2.y;
        },
        syncScroll: function(el) {
            var me = this,
                ts = me.getTimestamp(),
                oldX, oldY, x, y, scrolled, rec;
            for (var p = el; p; p = p.parentNode) {
                oldX = p.$lastScrollLeft;
                oldY = p.$lastScrollTop;
                x = p.scrollLeft;
                y = p.scrollTop;
                scrolled = false;
                if (oldX !== x) {
                    if (x) {
                        scrolled = true;
                    }
                    p.$lastScrollLeft = x;
                }
                if (oldY !== y) {
                    if (y) {
                        scrolled = true;
                    }
                    p.$lastScrollTop = y;
                }
                if (scrolled) {
                    //console.log('scroll x:' + x + ' y:' + y, p);
                    me.eventsRecorded.push(rec = {
                        type: 'scroll',
                        target: me.getElementXPath(p),
                        ts: ts,
                        pos: [
                            x,
                            y
                        ]
                    });
                    me.fireEvent('add', me, rec);
                }
                if (p.tagName === 'BODY') {
                    break;
                }
            }
        }
    };
});

/**
 * Recorder manager.
 * Used as a bookmarklet:
 *
 *    javascript:void(window.open("../ux/event/RecorderManager.html","recmgr"))
 */
Ext.define('Ext.ux.event.RecorderManager', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.eventrecordermanager',
    uses: [
        'Ext.ux.event.Recorder',
        'Ext.ux.event.Player'
    ],
    layout: 'fit',
    buttonAlign: 'left',
    eventsToIgnore: {
        mousemove: 1,
        mouseover: 1,
        mouseout: 1
    },
    bodyBorder: false,
    playSpeed: 1,
    initComponent: function() {
        var me = this;
        me.recorder = new Ext.ux.event.Recorder({
            attachTo: me.attachTo,
            listeners: {
                add: me.updateEvents,
                coalesce: me.updateEvents,
                buffer: 200,
                scope: me
            }
        });
        me.recorder.eventsToRecord = Ext.apply({}, me.recorder.eventsToRecord);
        function speed(text, value) {
            return {
                text: text,
                speed: value,
                group: 'speed',
                checked: value == me.playSpeed,
                handler: me.onPlaySpeed,
                scope: me
            };
        }
        me.tbar = [
            {
                text: 'Record',
                xtype: 'splitbutton',
                whenIdle: true,
                handler: me.onRecord,
                scope: me,
                menu: me.makeRecordButtonMenu()
            },
            {
                text: 'Play',
                xtype: 'splitbutton',
                whenIdle: true,
                handler: me.onPlay,
                scope: me,
                menu: [
                    speed('Qarter Speed (0.25x)', 0.25),
                    speed('Half Speed (0.5x)', 0.5),
                    speed('3/4 Speed (0.75x)', 0.75),
                    '-',
                    speed('Recorded Speed (1x)', 1),
                    speed('Double Speed (2x)', 2),
                    speed('Quad Speed (4x)', 4),
                    '-',
                    speed('Full Speed', 1000)
                ]
            },
            {
                text: 'Clear',
                whenIdle: true,
                handler: me.onClear,
                scope: me
            },
            '->',
            {
                text: 'Stop',
                whenActive: true,
                disabled: true,
                handler: me.onStop,
                scope: me
            }
        ];
        var events = me.attachTo && me.attachTo.testEvents;
        me.items = [
            {
                xtype: 'textarea',
                itemId: 'eventView',
                fieldStyle: 'font-family: monospace',
                selectOnFocus: true,
                emptyText: 'Events go here!',
                value: events ? me.stringifyEvents(events) : '',
                scrollToBottom: function() {
                    var inputEl = this.inputEl.dom;
                    inputEl.scrollTop = inputEl.scrollHeight;
                }
            }
        ];
        me.fbar = [
            {
                xtype: 'tbtext',
                text: 'Attached To: ' + (me.attachTo && me.attachTo.location.href)
            }
        ];
        me.callParent();
    },
    makeRecordButtonMenu: function() {
        var ret = [],
            subs = {},
            eventsToRec = this.recorder.eventsToRecord,
            ignoredEvents = this.eventsToIgnore;
        Ext.Object.each(eventsToRec, function(name, value) {
            var sub = subs[value.kind];
            if (!sub) {
                subs[value.kind] = sub = [];
                ret.push({
                    text: value.kind,
                    menu: sub
                });
            }
            sub.push({
                text: name,
                checked: true,
                handler: function(menuItem) {
                    if (menuItem.checked) {
                        eventsToRec[name] = value;
                    } else {
                        delete eventsToRec[name];
                    }
                }
            });
            if (ignoredEvents[name]) {
                sub[sub.length - 1].checked = false;
                Ext.Function.defer(function() {
                    delete eventsToRec[name];
                }, 1);
            }
        });
        function less(lhs, rhs) {
            return (lhs.text < rhs.text) ? -1 : ((rhs.text < lhs.text) ? 1 : 0);
        }
        ret.sort(less);
        Ext.Array.each(ret, function(sub) {
            sub.menu.sort(less);
        });
        return ret;
    },
    getEventView: function() {
        return this.down('#eventView');
    },
    onClear: function() {
        var view = this.getEventView();
        view.setValue('');
    },
    onPlay: function() {
        var me = this,
            view = me.getEventView(),
            events = view.getValue();
        if (events) {
            events = Ext.decode(events);
            if (events.length) {
                me.player = Ext.create('Ext.ux.event.Player', {
                    attachTo: window.opener,
                    eventQueue: events,
                    speed: me.playSpeed,
                    listeners: {
                        stop: me.onPlayStop,
                        scope: me
                    }
                });
                me.player.start();
                me.syncBtnUI();
            }
        }
    },
    onPlayStop: function() {
        this.player = null;
        this.syncBtnUI();
    },
    onPlaySpeed: function(menuitem) {
        this.playSpeed = menuitem.speed;
    },
    onRecord: function() {
        this.recorder.start();
        this.syncBtnUI();
    },
    onStop: function() {
        var me = this;
        if (me.player) {
            me.player.stop();
            me.player = null;
        } else {
            me.recorder.stop();
        }
        me.syncBtnUI();
        me.updateEvents();
    },
    syncBtnUI: function() {
        var me = this,
            idle = !me.player && !me.recorder.active;
        Ext.each(me.query('[whenIdle]'), function(btn) {
            btn.setDisabled(!idle);
        });
        Ext.each(me.query('[whenActive]'), function(btn) {
            btn.setDisabled(idle);
        });
        var view = me.getEventView();
        view.setReadOnly(!idle);
    },
    stringifyEvents: function(events) {
        var line,
            lines = [];
        Ext.each(events, function(ev) {
            line = [];
            Ext.Object.each(ev, function(name, value) {
                if (line.length) {
                    line.push(', ');
                } else {
                    line.push('  { ');
                }
                line.push(name, ': ');
                line.push(Ext.encode(value));
            });
            line.push(' }');
            lines.push(line.join(''));
        });
        return '[\n' + lines.join(',\n') + '\n]';
    },
    updateEvents: function() {
        var me = this,
            text = me.stringifyEvents(me.recorder.getRecordedEvents()),
            view = me.getEventView();
        view.setValue(text);
        view.scrollToBottom();
    }
});

/**
 * A control that allows selection of multiple items in a list.
 */
Ext.define('Ext.ux.form.MultiSelect', {
    extend: 'Ext.form.FieldContainer',
    mixins: [
        'Ext.util.StoreHolder',
        'Ext.form.field.Field'
    ],
    alternateClassName: 'Ext.ux.Multiselect',
    alias: [
        'widget.multiselectfield',
        'widget.multiselect'
    ],
    requires: [
        'Ext.panel.Panel',
        'Ext.view.BoundList',
        'Ext.layout.container.Fit'
    ],
    uses: [
        'Ext.view.DragZone',
        'Ext.view.DropZone'
    ],
    layout: 'anchor',
    /**
     * @cfg {String} [dragGroup=""] The ddgroup name for the MultiSelect DragZone.
     */
    /**
     * @cfg {String} [dropGroup=""] The ddgroup name for the MultiSelect DropZone.
     */
    /**
     * @cfg {String} [title=""] A title for the underlying panel.
     */
    /**
     * @cfg {Boolean} [ddReorder=false] Whether the items in the MultiSelect list are drag/drop reorderable.
     */
    ddReorder: false,
    /**
     * @cfg {Object/Array} tbar An optional toolbar to be inserted at the top of the control's selection list.
     * This can be a {@link Ext.toolbar.Toolbar} object, a toolbar config, or an array of buttons/button configs
     * to be added to the toolbar. See {@link Ext.panel.Panel#tbar}.
     */
    /**
     * @cfg {String} [appendOnly=false] `true` if the list should only allow append drops when drag/drop is enabled.
     * This is useful for lists which are sorted.
     */
    appendOnly: false,
    /**
     * @cfg {String} [displayField="text"] Name of the desired display field in the dataset.
     */
    displayField: 'text',
    /**
     * @cfg {String} [valueField="text"] Name of the desired value field in the dataset.
     */
    /**
     * @cfg {Boolean} [allowBlank=true] `false` to require at least one item in the list to be selected, `true` to allow no
     * selection.
     */
    allowBlank: true,
    /**
     * @cfg {Number} [minSelections=0] Minimum number of selections allowed.
     */
    minSelections: 0,
    /**
     * @cfg {Number} [maxSelections=Number.MAX_VALUE] Maximum number of selections allowed.
     */
    maxSelections: Number.MAX_VALUE,
    /**
     * @cfg {String} [blankText="This field is required"] Default text displayed when the control contains no items.
     */
    blankText: 'This field is required',
    /**
     * @cfg {String} [minSelectionsText="Minimum {0}item(s) required"] 
     * Validation message displayed when {@link #minSelections} is not met. 
     * The {0} token will be replaced by the value of {@link #minSelections}.
     */
    minSelectionsText: 'Minimum {0} item(s) required',
    /**
     * @cfg {String} [maxSelectionsText="Maximum {0}item(s) allowed"] 
     * Validation message displayed when {@link #maxSelections} is not met
     * The {0} token will be replaced by the value of {@link #maxSelections}.
     */
    maxSelectionsText: 'Maximum {0} item(s) required',
    /**
     * @cfg {String} [delimiter=","] The string used to delimit the selected values when {@link #getSubmitValue submitting}
     * the field as part of a form. If you wish to have the selected values submitted as separate
     * parameters rather than a single delimited parameter, set this to `null`.
     */
    delimiter: ',',
    /**
     * @cfg {String} [dragText="{0} Item{1}"] The text to show while dragging items.
     * {0} will be replaced by the number of items. {1} will be replaced by the plural
     * form if there is more than 1 item.
     */
    dragText: '{0} Item{1}',
    /**
     * @cfg {Ext.data.Store/Array} store The data source to which this MultiSelect is bound (defaults to `undefined`).
     * Acceptable values for this property are:
     * <div class="mdetail-params"><ul>
     * <li><b>any {@link Ext.data.Store Store} subclass</b></li>
     * <li><b>an Array</b> : Arrays will be converted to a {@link Ext.data.ArrayStore} internally.
     * <div class="mdetail-params"><ul>
     * <li><b>1-dimensional array</b> : (e.g., <tt>['Foo','Bar']</tt>)<div class="sub-desc">
     * A 1-dimensional array will automatically be expanded (each array item will be the combo
     * {@link #valueField value} and {@link #displayField text})</div></li>
     * <li><b>2-dimensional array</b> : (e.g., <tt>[['f','Foo'],['b','Bar']]</tt>)<div class="sub-desc">
     * For a multi-dimensional array, the value in index 0 of each item will be assumed to be the combo
     * {@link #valueField value}, while the value at index 1 is assumed to be the combo {@link #displayField text}.
     * </div></li></ul></div></li></ul></div>
     */
    ignoreSelectChange: 0,
    /**
     * @cfg {Object} listConfig
     * An optional set of configuration properties that will be passed to the {@link Ext.view.BoundList}'s constructor.
     * Any configuration that is valid for BoundList can be included.
     */
    initComponent: function() {
        var me = this;
        me.items = me.setupItems();
        me.bindStore(me.store, true);
        if (me.store.autoCreated) {
            me.valueField = me.displayField = 'field1';
            if (!me.store.expanded) {
                me.displayField = 'field2';
            }
        }
        if (!Ext.isDefined(me.valueField)) {
            me.valueField = me.displayField;
        }
        me.callParent();
        me.initField();
    },
    setupItems: function() {
        var me = this;
        me.boundList = Ext.create('Ext.view.BoundList', Ext.apply({
            anchor: 'none 100%',
            border: 1,
            multiSelect: true,
            store: me.store,
            displayField: me.displayField,
            disabled: me.disabled
        }, me.listConfig));
        me.boundList.getSelectionModel().on('selectionchange', me.onSelectChange, me);
        // Boundlist expects a reference to its pickerField for when an item is selected (see Boundlist#onItemClick).
        me.boundList.pickerField = me;
        // Only need to wrap the BoundList in a Panel if we have a title.
        if (!me.title) {
            return me.boundList;
        }
        // Wrap to add a title
        me.boundList.border = false;
        return {
            border: true,
            anchor: 'none 100%',
            layout: 'anchor',
            title: me.title,
            tbar: me.tbar,
            items: me.boundList
        };
    },
    onSelectChange: function(selModel, selections) {
        if (!this.ignoreSelectChange) {
            this.setValue(selections);
        }
    },
    getSelected: function() {
        return this.boundList.getSelectionModel().getSelection();
    },
    // compare array values
    isEqual: function(v1, v2) {
        var fromArray = Ext.Array.from,
            i = 0,
            len;
        v1 = fromArray(v1);
        v2 = fromArray(v2);
        len = v1.length;
        if (len !== v2.length) {
            return false;
        }
        for (; i < len; i++) {
            if (v2[i] !== v1[i]) {
                return false;
            }
        }
        return true;
    },
    afterRender: function() {
        var me = this,
            records;
        me.callParent();
        if (me.selectOnRender) {
            records = me.getRecordsForValue(me.value);
            if (records.length) {
                ++me.ignoreSelectChange;
                me.boundList.getSelectionModel().select(records);
                --me.ignoreSelectChange;
            }
            delete me.toSelect;
        }
        if (me.ddReorder && !me.dragGroup && !me.dropGroup) {
            me.dragGroup = me.dropGroup = 'MultiselectDD-' + Ext.id();
        }
        if (me.draggable || me.dragGroup) {
            me.dragZone = Ext.create('Ext.view.DragZone', {
                view: me.boundList,
                ddGroup: me.dragGroup,
                dragText: me.dragText
            });
        }
        if (me.droppable || me.dropGroup) {
            me.dropZone = Ext.create('Ext.view.DropZone', {
                view: me.boundList,
                ddGroup: me.dropGroup,
                handleNodeDrop: function(data, dropRecord, position) {
                    var view = this.view,
                        store = view.getStore(),
                        records = data.records,
                        index;
                    // remove the Models from the source Store
                    data.view.store.remove(records);
                    index = store.indexOf(dropRecord);
                    if (position === 'after') {
                        index++;
                    }
                    store.insert(index, records);
                    view.getSelectionModel().select(records);
                    me.fireEvent('drop', me, records);
                }
            });
        }
    },
    isValid: function() {
        var me = this,
            disabled = me.disabled,
            validate = me.forceValidation || !disabled;
        return validate ? me.validateValue(me.value) : disabled;
    },
    validateValue: function(value) {
        var me = this,
            errors = me.getErrors(value),
            isValid = Ext.isEmpty(errors);
        if (!me.preventMark) {
            if (isValid) {
                me.clearInvalid();
            } else {
                me.markInvalid(errors);
            }
        }
        return isValid;
    },
    markInvalid: function(errors) {
        // Save the message and fire the 'invalid' event
        var me = this,
            oldMsg = me.getActiveError();
        me.setActiveErrors(Ext.Array.from(errors));
        if (oldMsg !== me.getActiveError()) {
            me.updateLayout();
        }
    },
    /**
     * Clear any invalid styles/messages for this field.
     *
     * __Note:__ this method does not cause the Field's {@link #validate} or {@link #isValid} methods to return `true`
     * if the value does not _pass_ validation. So simply clearing a field's errors will not necessarily allow
     * submission of forms submitted with the {@link Ext.form.action.Submit#clientValidation} option set.
     */
    clearInvalid: function() {
        // Clear the message and fire the 'valid' event
        var me = this,
            hadError = me.hasActiveError();
        me.unsetActiveError();
        if (hadError) {
            me.updateLayout();
        }
    },
    getSubmitData: function() {
        var me = this,
            data = null,
            val;
        if (!me.disabled && me.submitValue && !me.isFileUpload()) {
            val = me.getSubmitValue();
            if (val !== null) {
                data = {};
                data[me.getName()] = val;
            }
        }
        return data;
    },
    /**
     * Returns the value that would be included in a standard form submit for this field.
     *
     * @return {String} The value to be submitted, or `null`.
     */
    getSubmitValue: function() {
        var me = this,
            delimiter = me.delimiter,
            val = me.getValue();
        return Ext.isString(delimiter) ? val.join(delimiter) : val;
    },
    getValue: function() {
        return this.value || [];
    },
    getRecordsForValue: function(value) {
        var me = this,
            records = [],
            all = me.store.getRange(),
            valueField = me.valueField,
            i = 0,
            allLen = all.length,
            rec, j, valueLen;
        for (valueLen = value.length; i < valueLen; ++i) {
            for (j = 0; j < allLen; ++j) {
                rec = all[j];
                if (rec.get(valueField) == value[i]) {
                    records.push(rec);
                }
            }
        }
        return records;
    },
    setupValue: function(value) {
        var delimiter = this.delimiter,
            valueField = this.valueField,
            i = 0,
            out, len, item;
        if (Ext.isDefined(value)) {
            if (delimiter && Ext.isString(value)) {
                value = value.split(delimiter);
            } else if (!Ext.isArray(value)) {
                value = [
                    value
                ];
            }
            for (len = value.length; i < len; ++i) {
                item = value[i];
                if (item && item.isModel) {
                    value[i] = item.get(valueField);
                }
            }
            out = Ext.Array.unique(value);
        } else {
            out = [];
        }
        return out;
    },
    setValue: function(value) {
        var me = this,
            selModel = me.boundList.getSelectionModel(),
            store = me.store;
        // Store not loaded yet - we cannot set the value
        if (!store.getCount()) {
            store.on({
                load: Ext.Function.bind(me.setValue, me, [
                    value
                ]),
                single: true
            });
            return;
        }
        value = me.setupValue(value);
        me.mixins.field.setValue.call(me, value);
        if (me.rendered) {
            ++me.ignoreSelectChange;
            selModel.deselectAll();
            if (value.length) {
                selModel.select(me.getRecordsForValue(value));
            }
            --me.ignoreSelectChange;
        } else {
            me.selectOnRender = true;
        }
    },
    clearValue: function() {
        this.setValue([]);
    },
    onEnable: function() {
        var list = this.boundList;
        this.callParent();
        if (list) {
            list.enable();
        }
    },
    onDisable: function() {
        var list = this.boundList;
        this.callParent();
        if (list) {
            list.disable();
        }
    },
    getErrors: function(value) {
        var me = this,
            format = Ext.String.format,
            errors = [],
            numSelected;
        value = Ext.Array.from(value || me.getValue());
        numSelected = value.length;
        if (!me.allowBlank && numSelected < 1) {
            errors.push(me.blankText);
        }
        if (numSelected < me.minSelections) {
            errors.push(format(me.minSelectionsText, me.minSelections));
        }
        if (numSelected > me.maxSelections) {
            errors.push(format(me.maxSelectionsText, me.maxSelections));
        }
        return errors;
    },
    onDestroy: function() {
        var me = this;
        me.bindStore(null);
        Ext.destroy(me.dragZone, me.dropZone);
        me.callParent();
    },
    onBindStore: function(store) {
        var boundList = this.boundList;
        if (boundList) {
            boundList.bindStore(store);
        }
    }
});

/*
 * Note that this control will most likely remain as an example, and not as a core Ext form
 * control.  However, the API will be changing in a future release and so should not yet be
 * treated as a final, stable API at this time.
 */
/**
 * A control that allows selection of between two Ext.ux.form.MultiSelect controls.
 */
Ext.define('Ext.ux.form.ItemSelector', {
    extend: 'Ext.ux.form.MultiSelect',
    alias: [
        'widget.itemselectorfield',
        'widget.itemselector'
    ],
    alternateClassName: [
        'Ext.ux.ItemSelector'
    ],
    requires: [
        'Ext.button.Button',
        'Ext.ux.form.MultiSelect'
    ],
    /**
     * @cfg {Boolean} [hideNavIcons=false] True to hide the navigation icons
     */
    hideNavIcons: false,
    /**
     * @cfg {Array} buttons Defines the set of buttons that should be displayed in between the ItemSelector
     * fields. Defaults to <tt>['top', 'up', 'add', 'remove', 'down', 'bottom']</tt>. These names are used
     * to build the button CSS class names, and to look up the button text labels in {@link #buttonsText}.
     * This can be overridden with a custom Array to change which buttons are displayed or their order.
     */
    buttons: [
        'top',
        'up',
        'add',
        'remove',
        'down',
        'bottom'
    ],
    /**
     * @cfg {Object} buttonsText The tooltips for the {@link #buttons}.
     * Labels for buttons.
     */
    buttonsText: {
        top: "Move to Top",
        up: "Move Up",
        add: "Add to Selected",
        remove: "Remove from Selected",
        down: "Move Down",
        bottom: "Move to Bottom"
    },
    layout: {
        type: 'hbox',
        align: 'stretch'
    },
    initComponent: function() {
        var me = this;
        me.ddGroup = me.id + '-dd';
        me.callParent();
        // bindStore must be called after the fromField has been created because
        // it copies records from our configured Store into the fromField's Store
        me.bindStore(me.store);
    },
    createList: function(title) {
        var me = this;
        return Ext.create('Ext.ux.form.MultiSelect', {
            // We don't want the multiselects themselves to act like fields,
            // so override these methods to prevent them from including
            // any of their values
            submitValue: false,
            getSubmitData: function() {
                return null;
            },
            getModelData: function() {
                return null;
            },
            flex: 1,
            dragGroup: me.ddGroup,
            dropGroup: me.ddGroup,
            title: title,
            store: {
                model: me.store.model,
                data: []
            },
            displayField: me.displayField,
            valueField: me.valueField,
            disabled: me.disabled,
            listeners: {
                boundList: {
                    scope: me,
                    itemdblclick: me.onItemDblClick,
                    drop: me.syncValue
                }
            }
        });
    },
    setupItems: function() {
        var me = this;
        me.fromField = me.createList(me.fromTitle);
        me.toField = me.createList(me.toTitle);
        return [
            me.fromField,
            {
                xtype: 'container',
                margin: '0 4',
                layout: {
                    type: 'vbox',
                    pack: 'center'
                },
                items: me.createButtons()
            },
            me.toField
        ];
    },
    createButtons: function() {
        var me = this,
            buttons = [];
        if (!me.hideNavIcons) {
            Ext.Array.forEach(me.buttons, function(name) {
                buttons.push({
                    xtype: 'button',
                    tooltip: me.buttonsText[name],
                    handler: me['on' + Ext.String.capitalize(name) + 'BtnClick'],
                    cls: Ext.baseCSSPrefix + 'form-itemselector-btn',
                    iconCls: Ext.baseCSSPrefix + 'form-itemselector-' + name,
                    navBtn: true,
                    scope: me,
                    margin: '4 0 0 0'
                });
            });
        }
        return buttons;
    },
    /**
     * Get the selected records from the specified list.
     * 
     * Records will be returned *in store order*, not in order of selection.
     * @param {Ext.view.BoundList} list The list to read selections from.
     * @return {Ext.data.Model[]} The selected records in store order.
     * 
     */
    getSelections: function(list) {
        var store = list.getStore();
        return Ext.Array.sort(list.getSelectionModel().getSelection(), function(a, b) {
            a = store.indexOf(a);
            b = store.indexOf(b);
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            }
            return 0;
        });
    },
    onTopBtnClick: function() {
        var list = this.toField.boundList,
            store = list.getStore(),
            selected = this.getSelections(list);
        store.suspendEvents();
        store.remove(selected, true);
        store.insert(0, selected);
        store.resumeEvents();
        list.refresh();
        this.syncValue();
        list.getSelectionModel().select(selected);
    },
    onBottomBtnClick: function() {
        var list = this.toField.boundList,
            store = list.getStore(),
            selected = this.getSelections(list);
        store.suspendEvents();
        store.remove(selected, true);
        store.add(selected);
        store.resumeEvents();
        list.refresh();
        this.syncValue();
        list.getSelectionModel().select(selected);
    },
    onUpBtnClick: function() {
        var list = this.toField.boundList,
            store = list.getStore(),
            selected = this.getSelections(list),
            rec,
            i = 0,
            len = selected.length,
            index = 0;
        // Move each selection up by one place if possible
        store.suspendEvents();
        for (; i < len; ++i , index++) {
            rec = selected[i];
            index = Math.max(index, store.indexOf(rec) - 1);
            store.remove(rec, true);
            store.insert(index, rec);
        }
        store.resumeEvents();
        list.refresh();
        this.syncValue();
        list.getSelectionModel().select(selected);
    },
    onDownBtnClick: function() {
        var list = this.toField.boundList,
            store = list.getStore(),
            selected = this.getSelections(list),
            rec,
            i = selected.length - 1,
            index = store.getCount() - 1;
        // Move each selection down by one place if possible
        store.suspendEvents();
        for (; i > -1; --i , index--) {
            rec = selected[i];
            index = Math.min(index, store.indexOf(rec) + 1);
            store.remove(rec, true);
            store.insert(index, rec);
        }
        store.resumeEvents();
        list.refresh();
        this.syncValue();
        list.getSelectionModel().select(selected);
    },
    onAddBtnClick: function() {
        var me = this,
            selected = me.getSelections(me.fromField.boundList);
        me.moveRec(true, selected);
        me.toField.boundList.getSelectionModel().select(selected);
    },
    onRemoveBtnClick: function() {
        var me = this,
            selected = me.getSelections(me.toField.boundList);
        me.moveRec(false, selected);
        me.fromField.boundList.getSelectionModel().select(selected);
    },
    moveRec: function(add, recs) {
        var me = this,
            fromField = me.fromField,
            toField = me.toField,
            fromStore = add ? fromField.store : toField.store,
            toStore = add ? toField.store : fromField.store;
        fromStore.suspendEvents();
        toStore.suspendEvents();
        fromStore.remove(recs);
        toStore.add(recs);
        fromStore.resumeEvents();
        toStore.resumeEvents();
        fromField.boundList.refresh();
        toField.boundList.refresh();
        me.syncValue();
    },
    // Synchronizes the submit value with the current state of the toStore
    syncValue: function() {
        var me = this;
        me.mixins.field.setValue.call(me, me.setupValue(me.toField.store.getRange()));
    },
    onItemDblClick: function(view, rec) {
        this.moveRec(view === this.fromField.boundList, rec);
    },
    setValue: function(value) {
        var me = this,
            fromField = me.fromField,
            toField = me.toField,
            fromStore = fromField.store,
            toStore = toField.store,
            selected;
        // Wait for from store to be loaded
        if (!me.fromStorePopulated) {
            me.fromField.store.on({
                load: Ext.Function.bind(me.setValue, me, [
                    value
                ]),
                single: true
            });
            return;
        }
        value = me.setupValue(value);
        me.mixins.field.setValue.call(me, value);
        selected = me.getRecordsForValue(value);
        // Clear both left and right Stores.
        // Both stores must not fire events during this process.
        fromStore.suspendEvents();
        toStore.suspendEvents();
        fromStore.removeAll();
        toStore.removeAll();
        // Reset fromStore
        me.populateFromStore(me.store);
        // Copy selection across to toStore
        Ext.Array.forEach(selected, function(rec) {
            // In the from store, move it over
            if (fromStore.indexOf(rec) > -1) {
                fromStore.remove(rec);
            }
            toStore.add(rec);
        });
        // Stores may now fire events
        fromStore.resumeEvents();
        toStore.resumeEvents();
        // Refresh both sides and then update the app layout
        Ext.suspendLayouts();
        fromField.boundList.refresh();
        toField.boundList.refresh();
        Ext.resumeLayouts(true);
    },
    onBindStore: function(store, initial) {
        var me = this;
        if (me.fromField) {
            me.fromField.store.removeAll();
            me.toField.store.removeAll();
            // Add everything to the from field as soon as the Store is loaded
            if (store.getCount()) {
                me.populateFromStore(store);
            } else {
                me.store.on('load', me.populateFromStore, me);
            }
        }
    },
    populateFromStore: function(store) {
        var fromStore = this.fromField.store;
        // Flag set when the fromStore has been loaded
        this.fromStorePopulated = true;
        fromStore.add(store.getRange());
        // setValue waits for the from Store to be loaded
        fromStore.fireEvent('load', fromStore);
    },
    onEnable: function() {
        var me = this;
        me.callParent();
        me.fromField.enable();
        me.toField.enable();
        Ext.Array.forEach(me.query('[navBtn]'), function(btn) {
            btn.enable();
        });
    },
    onDisable: function() {
        var me = this;
        me.callParent();
        me.fromField.disable();
        me.toField.disable();
        Ext.Array.forEach(me.query('[navBtn]'), function(btn) {
            btn.disable();
        });
    },
    onDestroy: function() {
        this.bindStore(null);
        this.callParent();
    }
});

Ext.define('Ext.ux.form.SearchField', {
    extend: 'Ext.form.field.Text',
    alias: 'widget.searchfield',
    triggers: {
        clear: {
            weight: 0,
            cls: Ext.baseCSSPrefix + 'form-clear-trigger',
            hidden: true,
            handler: 'onClearClick',
            scope: 'this'
        },
        search: {
            weight: 1,
            cls: Ext.baseCSSPrefix + 'form-search-trigger',
            handler: 'onSearchClick',
            scope: 'this'
        }
    },
    hasSearch: false,
    paramName: 'query',
    initComponent: function() {
        var me = this,
            store = me.store,
            proxy;
        me.callParent(arguments);
        me.on('specialkey', function(f, e) {
            if (e.getKey() == e.ENTER) {
                me.onSearchClick();
            }
        });
        if (!store || !store.isStore) {
            store = me.store = Ext.data.StoreManager.lookup(store);
        }
        // We're going to use filtering
        store.setRemoteFilter(true);
        // Set up the proxy to encode the filter in the simplest way as a name/value pair
        proxy = me.store.getProxy();
        proxy.setFilterParam(me.paramName);
        proxy.encodeFilters = function(filters) {
            return filters[0].getValue();
        };
    },
    onClearClick: function() {
        var me = this,
            activeFilter = me.activeFilter;
        if (activeFilter) {
            me.setValue('');
            me.store.getFilters().remove(activeFilter);
            me.activeFilter = null;
            me.getTrigger('clear').hide();
            me.updateLayout();
        }
    },
    onSearchClick: function() {
        var me = this,
            value = me.getValue();
        if (value.length > 0) {
            // Param name is ignored here since we use custom encoding in the proxy.
            // id is used by the Store to replace any previous filter
            me.activeFilter = new Ext.util.Filter({
                property: me.paramName,
                value: value
            });
            me.store.getFilters().add(me.activeFilter);
            me.getTrigger('clear').show();
            me.updateLayout();
        }
    }
});

/**
 * A small grid nested within a parent grid's row. 
 *
 * See the [Kitchen Sink](http://dev.sencha.com/extjs/5.0.1/examples/kitchensink/#customer-grid) for example usage.
 */
Ext.define('Ext.ux.grid.SubTable', {
    extend: 'Ext.grid.plugin.RowExpander',
    alias: 'plugin.subtable',
    rowBodyTpl: [
        '<table class="' + Ext.baseCSSPrefix + 'grid-subtable">',
        '{%',
        'this.owner.renderTable(out, values);',
        '%}',
        '</table>'
    ],
    init: function(grid) {
        var me = this,
            columns = me.columns,
            len, i, columnCfg;
        me.callParent(arguments);
        me.columns = [];
        if (columns) {
            for (i = 0 , len = columns.length; i < len; ++i) {
                // Don't register with the component manager, we create them to use
                // their rendering smarts, but don't want to treat them as real components
                columnCfg = Ext.apply({
                    preventRegister: true
                }, columns[i]);
                columnCfg.xtype = columnCfg.xtype || 'gridcolumn';
                me.columns.push(Ext.widget(columnCfg));
            }
        }
    },
    destroy: function() {
        var columns = this.columns,
            len, i;
        if (columns) {
            for (i = 0 , len = columns.length; i < len; ++i) {
                columns[i].destroy();
            }
        }
        this.columns = null;
        this.callParent();
    },
    getRowBodyFeatureData: function(record, idx, rowValues) {
        this.callParent(arguments);
        rowValues.rowBodyCls += ' ' + Ext.baseCSSPrefix + 'grid-subtable-row';
    },
    renderTable: function(out, rowValues) {
        var me = this,
            columns = me.columns,
            numColumns = columns.length,
            associatedRecords = me.getAssociatedRecords(rowValues.record),
            recCount = associatedRecords.length,
            rec, column, i, j, value;
        out.push('<thead>');
        for (j = 0; j < numColumns; j++) {
            out.push('<th class="' + Ext.baseCSSPrefix + 'grid-subtable-header">', columns[j].text, '</th>');
        }
        out.push('</thead><tbody>');
        for (i = 0; i < recCount; i++) {
            rec = associatedRecords[i];
            out.push('<tr>');
            for (j = 0; j < numColumns; j++) {
                column = columns[j];
                value = rec.get(column.dataIndex);
                if (column.renderer && column.renderer.call) {
                    value = column.renderer.call(column.scope || me, value, {}, rec);
                }
                out.push('<td class="' + Ext.baseCSSPrefix + 'grid-subtable-cell"');
                if (column.width != null) {
                    out.push(' style="width:' + column.width + 'px"');
                }
                out.push('><div class="' + Ext.baseCSSPrefix + 'grid-cell-inner">', value, '</div></td>');
            }
            out.push('</tr>');
        }
        out.push('</tbody>');
    },
    getRowBodyContentsFn: function(rowBodyTpl) {
        var me = this;
        return function(rowValues) {
            rowBodyTpl.owner = me;
            return rowBodyTpl.applyTemplate(rowValues);
        };
    },
    getAssociatedRecords: function(record) {
        return record[this.association]().getRange();
    }
});

/**
 * A Grid which creates itself from an existing HTML table element.
 */
Ext.define('Ext.ux.grid.TransformGrid', {
    extend: 'Ext.grid.Panel',
    /**
     * Creates the grid from HTML table element.
     * @param {String/HTMLElement/Ext.Element} table The table element from which this grid will be created -
     * The table MUST have some type of size defined for the grid to fill. The container will be
     * automatically set to position relative if it isn't already.
     * @param {Object} [config] A config object that sets properties on this grid and has two additional (optional)
     * properties: fields and columns which allow for customizing data fields and columns for this grid.
     */
    constructor: function(table, config) {
        config = Ext.apply({}, config);
        table = this.table = Ext.get(table);
        var configFields = config.fields || [],
            configColumns = config.columns || [],
            fields = [],
            cols = [],
            headers = table.query("thead th"),
            i = 0,
            len = headers.length,
            data = table.dom,
            width, height, store, col, text, name;
        for (; i < len; ++i) {
            col = headers[i];
            text = col.innerHTML;
            name = 'tcol-' + i;
            fields.push(Ext.applyIf(configFields[i] || {}, {
                name: name,
                mapping: 'td:nth(' + (i + 1) + ')/@innerHTML'
            }));
            cols.push(Ext.applyIf(configColumns[i] || {}, {
                text: text,
                dataIndex: name,
                width: col.offsetWidth,
                tooltip: col.title,
                sortable: true
            }));
        }
        if (config.width) {
            width = config.width;
        } else {
            width = table.getWidth() + 1;
        }
        if (config.height) {
            height = config.height;
        }
        Ext.applyIf(config, {
            store: {
                data: data,
                fields: fields,
                proxy: {
                    type: 'memory',
                    reader: {
                        record: 'tbody tr',
                        type: 'xml'
                    }
                }
            },
            columns: cols,
            width: width,
            height: height
        });
        this.callParent([
            config
        ]);
        if (config.remove !== false) {
            // Don't use table.remove() as that destroys the row/cell data in the table in
            // IE6-7 so it cannot be read by the data reader.
            data.parentNode.removeChild(data);
        }
    },
    onDestroy: function() {
        this.callParent();
        this.table.remove();
        delete this.table;
    }
});

/**
 * A {@link Ext.ux.statusbar.StatusBar} plugin that provides automatic error
 * notification when the associated form contains validation errors.
 */
Ext.define('Ext.ux.statusbar.ValidationStatus', {
    extend: 'Ext.Component',
    requires: [
        'Ext.util.MixedCollection'
    ],
    /**
     * @cfg {String} errorIconCls
     * The {@link Ext.ux.statusbar.StatusBar#iconCls iconCls} value to be applied
     * to the status message when there is a validation error.
     */
    errorIconCls: 'x-status-error',
    /**
     * @cfg {String} errorListCls
     * The css class to be used for the error list when there are validation errors.
     */
    errorListCls: 'x-status-error-list',
    /**
     * @cfg {String} validIconCls
     * The {@link Ext.ux.statusbar.StatusBar#iconCls iconCls} value to be applied
     * to the status message when the form validates.
     */
    validIconCls: 'x-status-valid',
    /**
     * @cfg {String} showText
     * The {@link Ext.ux.statusbar.StatusBar#text text} value to be applied when
     * there is a form validation error.
     */
    showText: 'The form has errors (click for details...)',
    /**
     * @cfg {String} hideText
     * The {@link Ext.ux.statusbar.StatusBar#text text} value to display when
     * the error list is displayed.
     */
    hideText: 'Click again to hide the error list',
    /**
     * @cfg {String} submitText
     * The {@link Ext.ux.statusbar.StatusBar#text text} value to be applied when
     * the form is being submitted.
     */
    submitText: 'Saving...',
    // private
    init: function(sb) {
        var me = this;
        me.statusBar = sb;
        sb.on({
            single: true,
            scope: me,
            render: me.onStatusbarRender,
            beforedestroy: me.destroy
        });
        sb.on({
            click: {
                element: 'el',
                fn: me.onStatusClick,
                scope: me,
                buffer: 200
            }
        });
    },
    onStatusbarRender: function(sb) {
        var me = this,
            startMonitor = function() {
                me.monitor = true;
            };
        me.monitor = true;
        me.errors = Ext.create('Ext.util.MixedCollection');
        me.listAlign = (sb.statusAlign === 'right' ? 'br-tr?' : 'bl-tl?');
        if (me.form) {
            me.formPanel = Ext.getCmp(me.form);
            me.basicForm = me.formPanel.getForm();
            me.startMonitoring();
            me.basicForm.on('beforeaction', function(f, action) {
                if (action.type === 'submit') {
                    // Ignore monitoring while submitting otherwise the field validation
                    // events cause the status message to reset too early
                    me.monitor = false;
                }
            });
            me.basicForm.on('actioncomplete', startMonitor);
            me.basicForm.on('actionfailed', startMonitor);
        }
    },
    // private
    startMonitoring: function() {
        this.basicForm.getFields().each(function(f) {
            f.on('validitychange', this.onFieldValidation, this);
        }, this);
    },
    // private
    stopMonitoring: function() {
        this.basicForm.getFields().each(function(f) {
            f.un('validitychange', this.onFieldValidation, this);
        }, this);
    },
    // private
    onDestroy: function() {
        this.stopMonitoring();
        this.statusBar.statusEl.un('click', this.onStatusClick, this);
        this.callParent(arguments);
    },
    // private
    onFieldValidation: function(f, isValid) {
        var me = this,
            msg;
        if (!me.monitor) {
            return false;
        }
        msg = f.getErrors()[0];
        if (msg) {
            me.errors.add(f.id, {
                field: f,
                msg: msg
            });
        } else {
            me.errors.removeAtKey(f.id);
        }
        this.updateErrorList();
        if (me.errors.getCount() > 0) {
            if (me.statusBar.getText() !== me.showText) {
                me.statusBar.setStatus({
                    text: me.showText,
                    iconCls: me.errorIconCls
                });
            }
        } else {
            me.statusBar.clearStatus().setIcon(me.validIconCls);
        }
    },
    // private
    updateErrorList: function() {
        var me = this,
            msg,
            msgEl = me.getMsgEl();
        if (me.errors.getCount() > 0) {
            msg = [
                '<ul>'
            ];
            this.errors.each(function(err) {
                msg.push('<li id="x-err-', err.field.id, '"><a href="#">', err.msg, '</a></li>');
            });
            msg.push('</ul>');
            msgEl.update(msg.join(''));
        } else {
            msgEl.update('');
        }
        // reset msgEl size
        msgEl.setSize('auto', 'auto');
    },
    // private
    getMsgEl: function() {
        var me = this,
            msgEl = me.msgEl,
            t;
        if (!msgEl) {
            msgEl = me.msgEl = Ext.DomHelper.append(Ext.getBody(), {
                cls: me.errorListCls
            }, true);
            msgEl.hide();
            msgEl.on('click', function(e) {
                t = e.getTarget('li', 10, true);
                if (t) {
                    Ext.getCmp(t.id.split('x-err-')[1]).focus();
                    me.hideErrors();
                }
            }, null, {
                stopEvent: true
            });
        }
        // prevent anchor click navigation
        return msgEl;
    },
    // private
    showErrors: function() {
        var me = this;
        me.updateErrorList();
        me.getMsgEl().alignTo(me.statusBar.getEl(), me.listAlign).slideIn('b', {
            duration: 300,
            easing: 'easeOut'
        });
        me.statusBar.setText(me.hideText);
        me.formPanel.body.on('click', me.hideErrors, me, {
            single: true
        });
    },
    // hide if the user clicks directly into the form
    // private
    hideErrors: function() {
        var el = this.getMsgEl();
        if (el.isVisible()) {
            el.slideOut('b', {
                duration: 300,
                easing: 'easeIn'
            });
            this.statusBar.setText(this.showText);
        }
        this.formPanel.body.un('click', this.hideErrors, this);
    },
    // private
    onStatusClick: function() {
        if (this.getMsgEl().isVisible()) {
            this.hideErrors();
        } else if (this.errors.getCount() > 0) {
            this.showErrors();
        }
    }
});

/**
 * @class sl.data.CacheStore
 */
Ext.define('sl.data.CacheStore', {
    extend: 'Ext.data.Store',
    alias: [
        'store.cachestore'
    ],
    uses: [
        'sl.utils.Toast',
        'Ext.util.HashMap'
    ],
    /**
         * @private
         * @property {Boolean} [loaded=false]
         * `true` if the store has been loaded at least once
         *
         * `false` if the store has never been loaded
         */
    loaded: false,
    /**
         * @cfg {Boolean} [saveIndividually=false]
         * `true`: each record that is being saved uses its own AJAX request.
         * (5 modified records would generate 5 AJAX requests).
         *
         * ***NOTE: Only records returned from store.getModifiedRecords() are saved in this scenario.***
         *
         * `false` (recommended): 1 AJAX request will be used; it contains information for all records being saved.
         * (5 modified records would generate 1 AJAX request).
         *
         * ***NOTE: You have more control over which records will saved using this approach.***
         *
         */
    saveIndividually: false,
    /**
         * @cfg {Boolean} [isStoreValidatedOnLoad=true]
         * If `true`, all loaded records are immediately validated on the store's `datachanged` event (fired during the store's loading process, & before a grid will render cell data)
         */
    isStoreValidatedOnLoad: true,
    /**
         * @cfg {Boolean} [isRecordChangeValidated=true]
         * If `true`, when the store 'update' event is fired, if a record is being edited, it will validate it
         * Can set as an object if other functionality is required
         * If setting to an object, the available properties are:
         * -- customValidation: a function that accepts the record and the existing errors object as its parameters.  Returns the error object with custom errors added
         */
    isRecordChangeValidated: true,
    /**
         * @cfg {Boolean} [isNewRecordValidated=true]
         * If `true`, when a new record is added to the store, it will immediately be validated
         */
    isNewRecordValidated: true,
    config: {
        /**
             * @cfg {String} [CacheClassName="**Required**"] (required)
             * Complete name of the class in Cach√©
             */
        CacheClassName: '',
        /**
             * @cfg {String} [CacheQueryName="**Required**"] (required)
             * Cach√© Query name
             */
        CacheQueryName: '',
        /**
             * @cfg {String} CacheMethodName
             * Cach√© Method name
             */
        CacheMethodName: '',
        /**
             * @cfg {Object} extraParams
             * Proxy's {@link Ext.data.proxy.Server#extraParams extraParams}
             *
             */
        extraParams: {},
        pageSize: 0
    },
    /**
         * @property {Object} defaultSaveConfig
         * Set of options that will be used as defaults for the user-configured {@link #saveConfig} object
         */
    defaultSaveConfig: {},
    /**
         * @cfg {Object} saveConfig
         * An optional set of configuration properties for saving.  Some of the more useful ones are:
         *
         *   - dontShowCount - Never notify user of the number of affected records during any store action (save/delete/new/etc...). Defaults to `false`.
         *   - dontShowSaveCount - Never notify user of the number of affected records during save. Defaults to `false`.
         *   - dontShowToast - Never show user a success toast. Defaults to `false`.
         *   - dontShowSaveToast - Never show user a success toast after a save. Defaults to `false`.
         */
    /**
         * @property {Ext.util.Collection} saveSessions
         * @private
         * `Collection` that holds information about each attempt at a save to Cach√© during current user session.
         */
    /**
         * @private
         * @cfg {Object} deleteConfig
         * An optional set of configuration properties for saving.  Some of the more useful ones are:
         *
         *   - dontShowCount - Never notify user of the number of affected records during any store action (save/delete/new/etc...). Defaults to `false`.
         *   - dontShowDeleteCount - Never notify user of the number of affected records during delete. Defaults to `false`.
         *   - dontShowToast - Never show user a success toast. Defaults to `false`.
         *   - dontShowDeleteToast - Never show user a success toast after a delete. Defaults to `false`.
         */
    /**
         * @property {Array} removedphantom
         * @private
         * Contains the phantom records that are removed from store
         */
    removedphantom: [],
    /**
         * @event beforerecordsave
         * @preventable
         * Fired before a record is saved in Cach√©; Return false to not save record
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save
         * @param {Ext.data.Model} record The Model instance that is about to be saved in Cach√©
         * @param {Object} recordOpts
         */
    /**
         * @event recordsave
         * Fired after a record has been saved
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save
         * @param {Ext.data.Model} record The Model instance that was saved
         * @param {Number} numToSave The number of records that are still being saved
         * @param {Boolean} success `true` if save was successful
         */
    /**
         * @event newrecordsaved
         * Fired after a new record has been saved to Cach√©
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save
         * @param {Ext.data.Model} record The Model instance that was saved
         * @param {String} newID ID of the new record
         */
    /**
         * @event beforesave
         * @preventable
         * Fired before attempt to save all modified records; Return `false` to stop save
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save
         * @param {Ext.data.Model[]} records-to-save
         * @param {Function} [callback]
         */
    /**
         * @event saving
         * Fired after the store begins the current save session.
         * Indicates that there *are* records that will be saved and that the save process will definitely be started.
         * ***{@link #beforesave} does not indicate that save process will definitely occur.***
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save
         */
    /**
         * @event save
         * Fired after save session is over (have response from all AJAX connections)
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save.
         * @param {Boolean} wasSaveSuccessful `true` if at least 1 record was saved and there were no errors.
         * @param {Ext.data.Model[]} successfullySavedRecords Records that were successfully saved.
         * @param {Ext.data.Model[]} failedSaveRecords Records that that failed to save because of Cach√© or ExtJS validation.
         * @param {Ext.data.Model[]} saveSessionRecords All records that it attempted to save during current session.
         * It does not care about result of save, just about whether a record was included to be saved.
         * @param {String} saveSessionID Key that indicated the proper {@link #property-saveSessions saveSession}.
         * @param {sl.utils.Toast/Ext.MessageBox} activeNotification Notification displayed to user after save session ended
         */
    /**
         * @event beforedelete
         * @preventable
         * Fired before defined records are deleted from Cach√©; Return `false` to stop delete
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the save
         * @param {Ext.data.Model[]} recordsToDelete The Model instances that will be deleted
         */
    /**
         * @event deleting
         * Fired after the store begins the current delete session.
         * Indicates that there *are* records that will be deleted and that the delete process will definitely be started
         * {@link #beforedelete} does not indicate that delete process will definitely occur
         * @param {sl.data.CacheStore} store The store that contains the records and initiated the delete
         * @param {Ext.data.Model[]} recordsToDelete The Model instances that will be deleted
         */
    /**
         * @event recorddelete
         * Fired after a record has been deleted from store
         * @param {sl.data.CacheStore} store The store that contains the record and initiated the delete
         * @param {Ext.data.Model} record The Model instance that was deleted
         * @param {Boolean} success `true` if delete was successful in Cach√©; `undefined` if the record did not exist in Cach√© (e.g. new record)
         */
    /**
         * @event delete
         * Fired after all included records were deleted either from Cach√© or from the store if the records were new and did not exist in Cach√©
         * @param {sl.data.CacheStore} store The store that contained the records and that initiated the delete
         * @param {sl.utils.Toast/Ext.MessageBox} activeNotification Notification displayed to user after delete session ended
         */
    /**
         * @event beforeundodelete
         * @preventable
         * Fired before a deleted record is restored
         * @param {Ext.grid.Panel} grid The grid that contains the deleted record
         * @param {Ext.data.Model[]} undoRecords The Model instances that were deleted and are about to be restored (idProperty will not be set) (uses the model's `clientIdProperty`)
         * @param {Ext.data.Model} model The store's model
         */
    /**
         * @event undodelete
         * Fired after a deleted record has been re-inserted into the grid's store
         * @param {Ext.grid.Panel} grid The grid that contains the newly re-add records
         * @param {Ext.data.Model[]} addedRecords The Model instances that were previously deleted and now have been inserted into store.
         * Model's `clientIdProperty` is not set until save)
         */
    /**
         * @event beforerecorddatasync
         * @preventable
         * @param {sl.data.CacheStore} store
         * @param {Object} [loadParams={}] Parameters used to retrieve the data from the server
         */
    /**
         * @event recorddatasync
         * @param {sl.data.CacheStore} store
         * @param {Ext.data.Model[]} updatedRecords Array of records that were modified by values from Cach√©
         * @param {Ext.data.Model[]} insertedRecords Array of records that only existed in Cach√©, so where added on client
         * @param {Ext.data.Model[]} deletedRecords Array of records that did not exist in Cach√©, so were deleted on client
         */
    /**
         * @private
         */
    constructor: function(config) {
        var store = this;
        config = config || {};
        if (config.CacheQueryName === "**Required**") {
            config.CacheQueryName = undefined;
        }
        // if CacheCommandType not defined, default to '2' if there's a query or else 1 (for CacheMethodName)
        config.CacheCommandType = config.CacheCommandType || (Ext.isString(config.CacheQueryName) && config.CacheQueryName.length > 0) ? 2 : 1;
        config.extraParams = Ext.apply({
            CacheClassName: config.CacheClassName,
            CacheQueryName: config.CacheQueryName,
            CacheMethodName: config.CacheMethodName,
            CacheCommandType: config.CacheCommandType
        }, (config.extraParams || {}));
        config.proxy = Ext.merge(// Default Config:
        {
            type: 'ajax',
            url: '../Ext.JsonRequest.cls',
            timeout: config.timeout || Ext.Ajax.getTimeout() || 300000,
            // 5 min
            reader: {
                type: 'json',
                rootProperty: 'records',
                totalProperty: 'totalCount'
            },
            writer: {
                type: 'json'
            },
            extraParams: config.extraParams,
            listeners: {
                scope: store,
                exception: function(proxy, response, operation, eOpts) {
                    if (!Ext.isEmpty(response.responseText)) {
                        var r = Ext.decode(response.responseText),
                            errMsg = '';
                        if (r && r.error && r.error.Msg) {
                            errMsg = r.error.Msg;
                            Ext.Msg.alert("Request Error", errMsg);
                        }
                        console.error('Cach√© Store Proxy Error', {
                            "extraParams": this.getExtraParams(),
                            "errorMessage": errMsg,
                            "store": this,
                            "lastOptions": this.lastOptions,
                            "args": arguments,
                            "r": r
                        });
                    }
                }
            }
        }, // custom developer-defined (king)
        config.proxy);
        // delete any unused extraParam properties (like CacheMethodName/CacheQueryName)
        Ext.Object.each(config.proxy.extraParams, function(key, value, myself) {
            if (Ext.isEmpty(value)) {
                delete config.proxy.extraParams[key];
            }
        });
        store.callParent(arguments);
        store.on({
            priority: 1000,
            beforeload: store.onCacheStoreBeforeLoad,
            load: store.onCacheStoreLoad,
            exception: store.onCacheStoreException,
            datachanged: (store.isStoreValidatedOnLoad ? store.validateOnStoreLoad : Ext.emptyFn),
            update: (store.isRecordChangeValidated ? store.validateOnRecordChange : Ext.emptyFn),
            add: (store.isNewRecordValidated ? store.validateOnRecordAdded : Ext.emptyFn),
            clear: store.onCacheStoreClear
        });
        store.remove = Ext.Function.createSequence(store.remove, // save the removed phantom records (for toasting & restoring)
        function(records) {
            records = Ext.Array.from(records);
            Ext.Array.forEach(records, function(rec, index, array) {
                if (rec.phantom) {
                    store.removedphantom.push(rec);
                }
            });
            return store.removedphantom;
        }, store);
    },
    // @private
    onCacheStoreBeforeLoad: function(store, operation) {
        // Cach√© requires an idProperty (uses the model's `clientIdProperty`)
        store.setExtraParam('idProperty', store.getExtraParam('idProperty') || store.getIDProperty());
        // Clear the arrays that store removed records.
        // Not doing so may prevent proper removal of grid's loadingmask
        // after store.reload()
        store.resetRemovedRecordsArrays();
    },
    // @private
    onCacheStoreLoad: function() {
        this.loaded = true;
    },
    onCacheStoreClear: function() {
        this.loaded = false;
    },
    onCacheStoreException: function(m) {
        if (!Ext.isEmpty(this.reader.jsonData.error.Msg)) {
            console.error('Cach√© Store Exception', {
                'Error': this.reader.jsonData.error.Msg,
                "m": m
            });
            Ext.Msg.alert("Request Error", this.reader.jsonData.error.Msg);
        }
    },
    showValidationErrorToast: function() {
        var errors = this.validateRecords();
        if (errors) {
            sl.utils.Toast.showErrorToast(errors.title, errors.message, 4000);
        }
        return errors;
    },
    /**
         * @private
         * Filter function for saved records
         */
    filterSaved: function(item) {
        return item.isSaved();
    },
    /**
         * @private
         * Filter function for saving records (record has been committed, but the AJAX request has not returned yet)
         */
    filterSaving: function(item) {
        return item.isSaving();
    },
    /**
         * @private
         * Filter function for saving records (record has been committed, but the AJAX request has not returned yet)
         */
    filterDeleting: function(item) {
        return item.isDeleting();
    },
    /**
         * @private
         * Filter function for records that could not complete delete process because of error(s)
         */
    filterNotDeleted: function(item) {
        return item.isNotDeleted();
    },
    /**
         * Gets all {@link Ext.data.Model records} that were saved during this store's last save attempt
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @param {String} [saveSessionID] Store's {@link #saveSessions} ID that a record was saved during
         * @return {Ext.data.Model[]} The last saved Model instances
         */
    getLastSavedRecords: function(records, saveSessionID) {
        return this.getSaveSessionRecords(records, saveSessionID, 'hadSuccessfulSave');
    },
    /**
         * Gets all {@link Ext.data.Model records} that failed to save during this store's last save attempt.
         * Failure could be from Cach√© validation or ExtJS model validation.
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @param {String} [saveSessionID] Store's {@link #saveSessions} ID that a record was saved during
         * @return {Ext.data.Model[]} The last save-failure Model instances
         */
    getLastSaveFailureRecords: function(records, saveSessionID) {
        return this.getSaveSessionRecords(records, saveSessionID, 'hadSaveFailure');
    },
    /**
         * Gets all {@link Ext.data.Model records} that attempted to save during this store's last save attempt.
         * This method does not consider the success of the save attempt.
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @param {String} [saveSessionID] Store's {@link #saveSessions} ID that a record was saved during
         * @return {Ext.data.Model[]} The last save-attempt Model instances
         */
    getSaveSessionRecords: function(records, saveSessionID, saveSessionFilter) {
        var store = this,
            lastSavedRecords = [];
        records = records || store.getRecords();
        saveSessionID = saveSessionID || store.getCurrentSaveSessionID();
        saveSessionFilter = Ext.valueFrom(saveSessionFilter, 'isInSaveSession');
        if (saveSessionID) {
            lastSavedRecords = Ext.Array.filter(records, function(rec) {
                // look through all of the record's saved times
                // (record could have been saved in a different store as well)
                return rec[saveSessionFilter](saveSessionID);
            });
        }
        return lastSavedRecords;
    },
    /**
         * Gets all {@link Ext.data.Model records} that have been saved (NOTE: records that are in the {@link Ext.data.Model#isSaving process of being saved} would not be returned).
         * This does not care about how recently the record was saved.
         * If you are sensitive to the session, use {@link #getLastSavedRecords}.
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @return {Ext.data.Model[]} The saved Model instances
         */
    getSavedRecords: function(records) {
        return this.getRecordCollection(records).filterBy(this.filterSaved).items;
    },
    /**
         * Gets all {@link Ext.data.Model records} that are being saved (records were committed, but the AJAX request hasn't returned yet)
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @return {Ext.data.Model[]} The saving Model instances
         */
    getSavingRecords: function(records) {
        return this.getRecordCollection(records).filterBy(this.filterSaving).items;
    },
    /**
         * Gets all {@link Ext.data.Model records} that are being deleted
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @return {Ext.data.Model[]} The deleting Model instances
         */
    getDeletingRecords: function(records) {
        return this.getRecordCollection(records).filterBy(this.filterDeleting).items;
    },
    /**
         * Gets all {@link Ext.data.Model records} that could not complete delete process because of error(s)
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @return {Ext.data.Model[]} The not-deleted Model instances
         */
    getNotDeletedRecords: function(records) {
        return this.getRecordCollection(records).filterBy(this.filterNotDeleted).items;
    },
    /**
         * Gets all {@link Ext.data.Model records} that were successfully deleted (either from Cach√© if record existed or from store if new record)
         * @param {Ext.data.Model[]} [records] If set, this function will only consider these records and
         * will return the subset of records that fit the function's conditions
         * @return {Ext.data.Model[]} The deleted Model instances
         */
    getDeletedRecords: function(records) {
        var store = this,
            removedRecs = store.getRemovedRecords(records) || [],
            newRecs = store.getPhantomRemovedRecords(records) || [],
            allRemovedRecs = removedRecs.concat(newRecs),
            deletedRecs = allRemovedRecs.length > 0 ? store.getDeletingRecords(allRemovedRecs) : [];
        // return 'removed' records where record.deleting=true
        return deletedRecs;
    },
    /**
         * Returns true/false detailing if the store has ever been loaded
         * @return {Boolean} `true` if the Store has loaded once; `false` if it has never been loaded
         */
    isLoaded: function() {
        var isLoaded = false;
        if (Ext.isBoolean(this.loaded) && this.loaded === true) {
            isLoaded = true;
        }
        return isLoaded;
    },
    /**
         * Adds a new save session ID to the end of {@link #saveSessions} array
         * @private
         * @param {String} [saveSessionID=`<current time in ms>`]
         * @return {String} new created `saveSessionID`
         */
    addSaveSession: function(saveSessionID) {
        var store = this;
        saveSessionID = saveSessionID || Date.now();
        // in milliseconds
        store.saveSessions = Ext.isDefined(store.saveSessions) ? store.saveSessions : Ext.create('Ext.util.Collection');
        store.saveSessions.add({
            id: saveSessionID,
            fn: undefined
        });
        return saveSessionID;
    },
    /**
         * @return {String} Last save attempt (time); returns `false` if no previous save attempt
         */
    getCurrentSaveSessionID: function() {
        var sessionID = false,
            attempts = this.saveSessions,
            attempt;
        if (Ext.isFunction((attempts || {}).last)) {
            attempt = attempts.last();
            if (attempt) {
                sessionID = attempts.getKey(attempt);
            }
        }
        return sessionID;
    },
    /**
         * Updates callback function for the active save session (if provided)
         * @private
         * @param {Function/String} newCallback callback The callback function to execute or the name of
         * the callback method on this `store`.
         * @param {String} [saveSessionID]
         * @return {Boolean} `true` if successfully updated the save's callback function
         */
    updateSaveCallback: function(newCallback, saveSessionID) {
        var store = this,
            attempt,
            isUpdated = false;
        newCallback = Ext.valueFrom(newCallback, Ext.emptyFn);
        if (saveSessionID) {
            attempt = (Ext.isFunction((store.saveSessions || {}).get) ? store.saveSessions.get(saveSessionID) : undefined);
            if (Ext.isObject(attempt)) {
                attempt.fn = newCallback;
                isUpdated = true;
            }
        }
        // callback function was not updated because couldn't find matching session.
        // instead, add the callback to store's `saveConfig` (eOpts)
        if (!isUpdated) {
            store.saveConfig = Ext.apply({}, store.saveConfig);
            store.saveConfig.saveCallback = newCallback;
            isUpdated = true;
        }
        return isUpdated;
    },
    /**
         * @private
         * @param {String} saveSessionID
         * @return {Function/String} callback The Save Sesssion's callback function to execute or the name of
         * the callback method on this `store`.
         */
    getSaveCallback: function(saveSessionID) {
        var store = this,
            result;
        if (saveSessionID) {
            result = (Ext.isFunction((store.saveSessions || {}).get) ? (store.saveSessions.get(saveSessionID) || {}).fn : undefined);
        }
        return result || (store.saveConfig || {}).saveCallback;
    },
    /**
         * Generic function to save all records in {#getModifiedRecords}
         *
         * @param {Function} [callback]
         * A callback function which is called when the store finishes its current save session, regardless of
         * whether it is successful or not.
         *
         *  @param {Boolean} callback.wasSaveSuccessful `true` if at least 1 record was saved and there were no errors.
         *  @param {Ext.data.Model[]} callback.successfullySavedRecords Records that were successfully saved.
         *  @param {Ext.data.Model[]} callback.failedSaveRecords Records that that failed to save because of Cach√© or ExtJS validation.
         *  @param {Ext.data.Model[]} callback.saveSessionRecords All records that it attempted to save during current session.
         *  It does not care about result of save, just about whether a record was included to be saved.
         *  @param {sl.utils.Toast/Ext.MessageBox} callback.activeNotification Notification displayed to user after save session ended
         *  @param {String} callback.saveSessionID
         *
         * @param {Object} [eOpts] An object containing configuration options.
         * It will be saved on the store as {@link #saveConfig}
         * It will be passed to & used by: {@link #initBeforeSave}, {@link #onRecordCommit}, {@link #showSaveNotification}
         **/
    saveModifiedRecords: function(callback, eOpts) {
        this.saveRecords(this.getModifiedRecords(), callback, Ext.apply({}, eOpts, {
            trackAllModifiedRecords: true
        }));
    },
    /**
         * Saves all records passed into it.
         * @param {Ext.data.Model[]} [recordsToSave=store.getModifiedRecords()] If defined, will bypass validation process
         * and force a save attempt whether dirty/modified/unchanged/invalid/etc.
         * @param {Function} [callback]
         * A callback function which is called when the store finishes its current save session, regardless of
         * whether it is successful or not.
         *
         *  @param {Boolean} callback.wasSaveSuccessful `true` if at least 1 record was saved and there were no errors.
         *  @param {Ext.data.Model[]} callback.successfullySavedRecords Records that were successfully saved.
         *  @param {Ext.data.Model[]} callback.failedSaveRecords Records that that failed to save because of Cach√© or ExtJS validation.
         *  @param {Ext.data.Model[]} callback.saveSessionRecords All records that it attempted to save during current session.
         *  It does not care about result of save, just about whether a record was included to be saved.
         *  @param {String} callback.saveSessionID
         *  @param {sl.utils.Toast/Ext.MessageBox} callback.activeNotification Notification displayed to user after save session ended
         *
         * @param {Object} [eOpts] An object containing configuration options.
         * It will be saved on the store as {@link #saveConfig}.
         * @param {String} eOpts.idField Record's unique ID from {@link Ext.data.Model#method-getData data}
         * @param {String} eOpts.clientIdProperty The name of the field treated as this Model's unique id. Defaults to `ID`.
         * @param {String} eOpts.cacheIdProperty Name of Cach√© class's ID field, defaults to "ID"
         * @param {String} eOpts.cacheClassName Name of Cach√© class where record is being saved
         * @param {String} eOpts.dontShowCount Never notify user of the number of affected records
         * during any store action (save/delete/new/etc...)
         * @param {String} eOpts.dontShowSaveCount Never notify user of the number of affected records during save
         * @param {String} eOpts.dontShowToast Never show user a success toast
         * @param {String} eOpts.dontShowSaveToast Never show user a success toast after a save
         * @param {String} eOpts.dontShowNoChangesToast Never show user toast after nothing available to save
         **/
    saveRecords: function(recordsToSave, callback, eOpts) {
        var store = this,
            delayTime = 50,
            saveSessionID;
        if (Ext.isEmpty(recordsToSave) && !Ext.isArray(recordsToSave)) {
            store.saveModifiedRecords(eOpts);
        }
        recordsToSave = Ext.Array.from(recordsToSave);
        if (store.fireEvent('beforesave', store, recordsToSave, callback, eOpts) !== false) {
            saveSessionID = store.initBeforeSave(recordsToSave, eOpts);
            if (callback) {
                if (!Ext.isString(callback) && !Ext.isFunction(callback) && Ext.isObject(callback)) {
                    sl.consoleWarn('[' + store.$className + ':saveRecords] Additional parameter (`callback`) was added. It pushed `eOpts` back a spot. Please update your code.');
                    eOpts = callback;
                } else {
                    store.updateSaveCallback(callback, saveSessionID);
                }
            }
            if (recordsToSave.length > 0) {
                store.fireEvent('saving', store, recordsToSave);
                // give app time to show mask (if store attached to grid/form/tree/container)
                Ext.Function.defer(function() {
                    store.commitChanges(recordsToSave);
                    if (!store.saveIndividually) {
                        store.saveMultipleRecords(recordsToSave, saveSessionID);
                    }
                }, // else: `saveIndividually` will have automatically jumped to `onRecordCommit`
                delayTime, store);
            } else // no records to save
            {
                store.afterAllRecordsSaved(saveSessionID);
            }
        }
    },
    /**
         * Sets up store before saving, including merging eOpts & store.defaultSaveConfig into store.saveConfig
         * @private
         * @param {Ext.data.Model[]} recordsToSave
         * @param {Object} [saveConfig] Special Store configuration that will be merged into store's saveConfig
         * @return {String} saveSessionID Save Session ID to be used for tracking
         */
    initBeforeSave: function(recordsToSave, saveConfig) {
        var store = this,
            saveSessionID;
        // saveConfig.xyz (=5) WILL BE APPLIED vs defaultSaveConfig.xyz (=3)
        // after Ext.apply, store.saveConfig.xyz = 5
        store.saveConfig = Ext.apply({}, saveConfig, store.defaultSaveConfig);
        store.saveErrors = Ext.create('Ext.util.HashMap');
        // initialize error hash
        saveSessionID = store.addSaveSession(store.saveConfig.saveSessionID || undefined);
        store.initRecordsBeforeSave(recordsToSave, saveSessionID, store.saveConfig.trackAllModifiedRecords);
        return saveSessionID;
    },
    /**
         * Sets up records by saving configuration before saving.  Once a record is committed, it loses some values
         * like what was modified, is a phantom, is it dirty?
         * If the record fails to save, we need to restore those values.
         * This also adds the record to the current save session for tracking.
         * @private
         * @param {Ext.data.Model[]} recordsToSave
         * @param {String} saveSessionID Save Session ID to be used for tracking
         * @param {Boolean} trackInvalidDirtyRecords Add records to the current Save Session that would normally be excluded
         * by `store.getModifiedRecords()` because they are invalid. This is done for reporting accuracy after the save completes.
         */
    initRecordsBeforeSave: function(recordsToSave, saveSessionID, trackInvalidDirtyRecords) {
        var store = this,
            dirtyRecs, beingDeletedRecs;
        recordsToSave = Ext.Array.from(recordsToSave);
        saveSessionID = saveSessionID || store.getCurrentSaveSessionID();
        Ext.Array.forEach(recordsToSave, function(rec, index, array) {
            rec.initBeforeSave(saveSessionID);
        });
        if (trackInvalidDirtyRecords) {
            dirtyRecs = store.getDirtyRecords();
            beingDeletedRecs = store.getDeletingRecords();
            Ext.Array.forEach(// only for dirty records that were not included in the records-to-be-saved & records-to-be-deleted groups
            Ext.Array.difference(Ext.Array.difference(dirtyRecs, recordsToSave), beingDeletedRecs), function(r) {
                r.addSaveSession(saveSessionID);
            });
        }
    },
    /**
         * All errors that are on the records will be added to the hash
         * @private
         * @param {Ext.data.Model[]} records Records to gather errors from
         * @param {Ext.util.HashMap} hash HashMap that contains all unique errors
         * @return {Ext.util.HashMap} all of the unique errors that have occured during current operation session
         */
    addRecordErrorsToHash: function(records, hash) {
        records = Ext.Array.from(records);
        if (hash) {
            Ext.Array.forEach(records, function(rec, index, array) {
                var allErrors = rec.getValidation().getErrors();
                Ext.Array.forEach(allErrors, function(err, index, array) {
                    hash.add(err.id + ': ' + ' ' + err.msg, err.source || 'ExtJS Validation');
                });
            });
        }
        return hash;
    },
    /**
         * Saves a valid record to Cach√© (only a valid record will be committed via store.commitChanges() )
         * @private
         *
         * @param {Object} record The Record that was updated
         * @param {Object} op The update operation being performed. Value may be one of: Ext.data.Record.EDIT,  Ext.data.Record.REJECT,  Ext.data.Record.COMMIT
         * @param {Object} [eOpts] An object containing configuration options.
         * It will be merged with {@link #saveConfig}, where it will take priority.
         * Please see {@link #saveRecords} for configuration options.
         */
    onRecordCommit: function(record, op, eOpts) {
        eOpts = eOpts || {};
        if (op === Ext.data.Model.COMMIT) {
            var store = this,
                recordOpts = Ext.apply(eOpts, store.saveConfig),
                idField, cacheIdProperty, cacheClassName,
                saveSessionID = record.getCurrentSaveSessionID();
            if (store.fireEvent('beforerecordsave', store, record, recordOpts) !== false) {
                // what the record calls its identifying property
                idField = recordOpts.idField || store.getIDProperty(record);
                // what Cach√© calls the class's identifying property
                cacheIdProperty = recordOpts.cacheIdProperty || store.getIDProperty(record) || "ID";
                cacheClassName = recordOpts.cacheClassName || store.getExtraParam('CacheClassName');
                store.saveIndividualRecord(record, idField, cacheIdProperty, cacheClassName, recordOpts, saveSessionID);
            } else // 'beforerecordsave' event returned false
            {
                record.restoreBeforeCommitProperties();
                var numToSave = store.getSavingRecords().length;
                if (numToSave === 0) {
                    store.afterAllRecordsSaved(saveSessionID);
                }
            }
        }
    },
    /**
         * Sends an AJAX request for for all records that are being saved
         * @private
         * @param {Ext.data.Model[]} records Models being saved
         */
    saveMultipleRecords: function(records, saveSessionID) {
        var store = this,
            eOpts = store.saveConfig || {},
            batch = [],
            properties, idField, cacheIdProperty, cacheClassName;
        Ext.Array.forEach(records, function(record, index, array) {
            if (store.fireEvent('beforerecordsave', store, record, eOpts) !== false) {
                // what the record calls its identifying property
                idField = eOpts.idField || store.getIDProperty(records[0]);
                // what Cach√© calls the class's identifying property
                cacheIdProperty = eOpts.cacheIdProperty || "ID";
                cacheClassName = eOpts.cacheClassName || store.getExtraParam('CacheClassName');
                properties = record.getFormattedPropertiesBeforeSave(cacheIdProperty, idField);
                batch.push({
                    "CacheClassName": 'JSON.Adapter',
                    "CacheMethodName": 'SaveObject',
                    "CacheCommandType": 1,
                    "JSONObject": Ext.encode({
                        "CacheClassName": cacheClassName,
                        "Properties": properties,
                        "idProperty": cacheIdProperty,
                        "OldValues": record.json
                    })
                });
            } else // `beforerecordsave` event returned false
            {
                record.restoreBeforeCommitProperties();
            }
        });
        Ext.Ajax.request({
            scope: store,
            url: '../Ext.BatchJsonRequest.cls',
            params: {
                Batch: Ext.encode(batch)
            },
            callback: function(options, success, response) {
                store.multipleRecordsSaveCallback(options, success, response, records, idField, saveSessionID);
            }
        });
    },
    /**
         * Sends an AJAX request for an individual record being saved to Cach√©
         * @private
         * @param {Ext.data.Model} record Model being saved
         * @param {String} idField Record's unique ID from {@link Ext.data.Model#method-getData data} (Uses `clientIdProperty`)
         * @param {String} cacheIdProperty Name of Cach√© class's ID field, defaults to "ID"
         * @param {String} cacheClassName Name of Cach√© class where record is being saved
         */
    saveIndividualRecord: function(record, idField, cacheIdProperty, cacheClassName, saveSessionID) {
        var store = this,
            properties = record.getFormattedPropertiesBeforeSave(cacheIdProperty, idField);
        Ext.Ajax.request({
            scope: store,
            url: '../Ext.JsonRequest.cls',
            params: {
                CacheClassName: 'JSON.Adapter',
                CacheMethodName: 'SaveObject',
                CacheCommandType: 1,
                idProperty: cacheIdProperty,
                JSONObject: Ext.encode({
                    "CacheClassName": cacheClassName,
                    "Properties": properties,
                    "OldValues": record.json
                })
            },
            callback: function(options, success, response) {
                store.recordSaveCallback(options, success, response, record, idField, saveSessionID);
            }
        });
    },
    /**
         * AJAX callback function for handling multiple records after an attempted save.
         * It will call {@link #afterAllRecordsSaved}
         * @param {Object} options The parameter to the request call.
         * @param {Boolean} success `true` if the request succeeded.
         * @param {Object} response The XMLHttpRequest object containing the response data.
         * See [www.w3.org/TR/XMLHttpRequest/](http://www.w3.org/TR/XMLHttpRequest/) for details about
         * accessing elements of the response.
         * @param {Ext.data.Model[]} records Saved records
         * @param {String} idField {@link Ext.data.Model#method-getData Record.data's} property name for the unique ID
         * @private
         */
    multipleRecordsSaveCallback: function(options, success, response, records, idField, saveSessionID) {
        var store = this,
            results = Ext.decode(response.responseText) || [],
            numToSave,
            hasError = function(record, r) {
                var errMsg = r.error ? r.error.Msg : 'Error',
                    errObj = {
                        'success': success,
                        'response': response,
                        'idField': idField,
                        'options': options
                    };
                store.handleFailedRecordSave(record, errMsg, errObj);
            };
        if (results.success === false) {
            Ext.Array.forEach(records, function(record, index, array) {
                hasError(record, results);
            });
        } else {
            Ext.Array.forEach(results, function(r, index, array) {
                var record = records[index],
                    result;
                if (!r.success) {
                    hasError(record, r);
                } else {
                    result = r.result;
                    store.handleSuccessfulRecordSave(record, result, idField, saveSessionID);
                }
                numToSave = store.getSavingRecords().length;
                store.fireEvent('recordsave', store, record, numToSave, r.success);
            });
        }
        store.afterAllRecordsSaved(saveSessionID);
    },
    /**
         * AJAX callback function for handling an individual record after an attempted save.
         * When all records have been saved, it will call {@link #afterAllRecordsSaved}
         * @param {Object} options The parameter to the request call.
         * @param {Boolean} success `true` if the request succeeded.
         * @param {Object} response The XMLHttpRequest object containing the response data.
         * See [www.w3.org/TR/XMLHttpRequest/](http://www.w3.org/TR/XMLHttpRequest/) for details about
         * accessing elements of the response.
         * @param {Ext.data.Model} record Saved record
         * @param {String} idField {@link Ext.data.Model#method-getData Record.data's} property name for the unique ID
         * @private
         */
    recordSaveCallback: function(options, success, response, record, idField, saveSessionID) {
        var store = this,
            r = Ext.decode(response.responseText) || {
                success: false
            },
            numToSave;
        if (!r.success) {
            var errMsg = r.error ? r.error.Msg : 'Error',
                errObj = {
                    'success': success,
                    'response': response,
                    'idField': idField,
                    'options': options
                };
            store.handleFailedRecordSave(record, errMsg, errObj);
        } else {
            store.handleSuccessfulRecordSave(record, r.result, idField, saveSessionID);
        }
        numToSave = store.getSavingRecords().length;
        store.fireEvent('recordsave', store, record, numToSave, r.success);
        if (numToSave === 0) {
            store.afterAllRecordsSaved(saveSessionID);
        }
    },
    /**
         * The AJAX request for saving succeeded in Cach√©
         * @private
         * @param {Ext.data.Model} record An Ext.data.Model that the save was attempted on
         * @param {String} newID The new ID for the Record. If this is different the record's existing ID, it will warn developer.  If there was no previous ID, it will fire event 'newrecordsaved'
         * @param {String} idField Record's ID property
         * @return {Boolean} `true` if a new record was saved
         */
    handleSuccessfulRecordSave: function(record, newID, idField, saveSessionID) {
        var store = this,
            oldID = record.get(idField),
            newRecSaved = Ext.isEmpty(oldID);
        record.set(idField, newID, {
            dirty: false
        });
        record.clearBeforeCommitProperties();
        record.updateSaveSessionResult(saveSessionID, true);
        if (newRecSaved) {
            store.fireEvent('newrecordsaved', store, record, newID);
        } else if (!sl.utils.areValuesEquivalent(oldID, newID)) {
            // record already had an ID before being saved.
            // AJAX request/Cach√© changed this record's ID.
            console.error('Cach√© Changed Saved Record\'s ID', {
                record: record,
                oldID: oldID,
                newID: newID
            });
        }
        return newRecSaved;
    },
    /**
         * Save ajax request failed in Cach√©
         * @private
         * @param {Ext.data.Model} record An Ext.data.Model that the save was attempted on
         * @param {Object} errMsg Contains the descriptive Cach√© error
         * @param {Object} errObj
         * @return {Number} The number of records left to be saved
         */
    handleFailedRecordSave: function(record, errMsg, errObj, saveSessionID) {
        var store = this;
        // Add Cach√©'s error to the Store's errorHash (so that we can display it to user after all records are saved)
        store.saveErrors.add(errMsg, 'Cach√©');
        record.updateSaveSessionResult(saveSessionID, errMsg);
        sl.utils.consoleWarningWithTrace('Record\'s Save Error', Ext.apply({
            record: record,
            error: errMsg
        }, errObj));
        store.fireEvent('recordfailedsave', store, record);
        return record.restoreBeforeCommitProperties();
    },
    /**
         * Shows all error messages and success messages.  Reverts records with errors to pre-save state.
         * @param {String} [mySaveSessionID] Key that indicated the proper {@link #property-saveSessions saveSession}.
         * @return {Boolean} wasSaveSuccessful `true` if at least 1 record was saved and there were no errors.
         **/
    afterAllRecordsSaved: function(mySaveSessionID) {
        var store = this,
            saveSessionID = mySaveSessionID || store.getCurrentSaveSessionID(),
            sessRecs = store.getSaveSessionRecords(undefined, saveSessionID),
            savedRecs = [],
            failedRecs = [],
            wasSaveSuccessful = false,
            activeNotification;
        Ext.Array.forEach(sessRecs, function(r, index, array) {
            var saveResult = r.getSaveSessionResult(saveSessionID);
            if (saveResult === true) {
                savedRecs.push(r);
            } else {
                failedRecs.push(r);
                if (saveResult === false) {
                    r.addValidationErrorsToSaveSession(saveSessionID);
                }
            }
        });
        if (failedRecs.length > 0) {
            store.addRecordErrorsToHash(failedRecs, store.saveErrors);
            store.revertCommittedRecords(failedRecs);
            wasSaveSuccessful = false;
        } else if (savedRecs.length > 0) {
            wasSaveSuccessful = true;
        }
        activeNotification = store.showSaveNotification(savedRecs, failedRecs);
        store.fireEvent('save', store, wasSaveSuccessful, savedRecs, failedRecs, sessRecs, saveSessionID, activeNotification);
        Ext.callback(store.getSaveCallback(saveSessionID), // fn
        store, // scope
        [
            wasSaveSuccessful,
            savedRecs,
            failedRecs,
            sessRecs,
            saveSessionID,
            activeNotification
        ]);
        // args
        return wasSaveSuccessful;
    },
    /**
         * Shows error message or success toast after save session has finished
         * store.saveConfig properties used:
         *  - dontShowCount: never notify user of the number of affected records during any store action (save/delete/new/etc...)
         *  - dontShowSaveCount: never notify user of the number of affected records during save
         *  - dontShowToast: never show user a success toast
         *  - dontShowSaveToast: never show user a success toast after a save
         *  - dontShowNoChangesToast: never show user toast after nothing available to save
         *
         * @param savedRecs
         * @param failedRecs
         * @return {sl.utils.Toast/Ext.MessageBox} Notification displayed to user after save session ended
         **/
    showSaveNotification: function(savedRecs, failedRecs) {
        var store = this,
            config = store.saveConfig || {},
            saveCount = savedRecs.length,
            failedSaveCount = failedRecs.length,
            // will always show error messages to the user; only the successful notices are optional
            dontShowToast = config.dontShowToast || config.dontShowSaveToast || false,
            dontShowCount = config.dontShowCount || config.dontShowSaveCount || false,
            dontShowNoChangesToast = dontShowToast || config.dontShowNoChangesToast || false,
            activeNotification;
        if (saveCount > 0) {
            // some/all records were saved
            if (failedSaveCount > 0) {
                // records were saved and there were errors
                activeNotification = store.notifyErrorsDuringSave(savedRecs, failedRecs);
            } else {
                // records were saved and there were no errors
                if (!dontShowToast) {
                    activeNotification = store.notifyRecordsSaved(saveCount, dontShowCount);
                }
            }
        } else {
            // no records to save
            if (failedSaveCount > 0) {
                // no records were saved and there were errors
                activeNotification = store.notifyErrorsDuringSave(savedRecs, failedRecs);
            } else {
                // no records were saved and no errors
                if (!dontShowToast && !dontShowNoChangesToast) {
                    activeNotification = store.notifyNoRecordsToSave();
                }
            }
        }
        return activeNotification;
    },
    // show toast when no records have been saved
    notifyNoRecordsToSave: function() {
        var toastTitle = 'No Changes to Save',
            toastMsg = '';
        return sl.utils.Toast.showWarningToast(toastTitle, toastMsg);
    },
    // show toast when records were saved
    notifyRecordsSaved: function(saveCount, dontShowCount) {
        return sl.utils.Toast.showActionToast('save', (dontShowCount ? '' : saveCount));
    },
    // show toast when there were errors during save
    notifyErrorsDuringSave: function(savedRecs, failedRecs) {
        var store = this,
            saveCount = savedRecs.length,
            failedSaveCount = failedRecs.length,
            msg = '',
            savedMsg = Ext.String.format('{0} record{1} saved', saveCount, (saveCount === 1 ? ' was' : 's were')),
            errMsg = Ext.String.format('{0} record{1} could not be saved', failedSaveCount, (failedSaveCount === 1 ? '' : 's')),
            errors = store.getErrors(store.saveErrors),
            recordErrors = store.getErrorMessage(errors),
            hasErrors = (errors.length > 0 || failedSaveCount > 0),
            msgBox;
        if (hasErrors) {
            sl.utils.consoleWarningWithTrace('Error(s) During Save', {
                errors: errors,
                "failed to save": failedRecs,
                store: store
            });
        }
        if (recordErrors) {
            errMsg += ' because of the following errors:<br/><br/>' + recordErrors;
        }
        msg = savedMsg + '<br/><br/><hr><br/>' + errMsg;
        msgBox = Ext.Msg.alert('Save Failed', msg);
        store.fireEvent('saveerrors', store);
        return msgBox;
    },
    /**
         * Returns the operation's error messages
         * @param {Ext.util.HashMap} hash HashMap that contains all unique errors
         * @return {Array} Contains each unique error message
         */
    getErrors: function(hash) {
        return hash.getKeys() || [];
    },
    /**
         * Uses a messagebox alert to show all error messages created during the current save/delete session
         * @param {Array} errors Contains error strings to show user
         * @param {String} [errorFormat='&#149; <b>{0}</b>"'] Text surrounding each error (can be html)
         * @return {String} Complete error message text
         */
    getErrorMessage: function(errors, errorFormat) {
        var returnMsg = '';
        errorFormat = errorFormat || '&#149; <b>{0}</b>';
        Ext.Array.forEach(errors, function(err, index, array) {
            returnMsg += (index > 0 ? '<br/><br/>' : '') + Ext.String.format(errorFormat, Ext.util.Format.stripTags(err || ''));
        });
        return returnMsg;
    },
    /**
         * When records were committed, record properties were changed.  This function reverts the record back to its pre-commit stage
         * @param {Ext.data.Model[]} [records=store.getUnsavedRecords()] Each record will be reverted if its _beforesavesettings is set
         * @return {Ext.data.Model[]} Records that were reverted
         */
    revertCommittedRecords: function(records) {
        var store = this,
            revertedRecords = [];
        records = records || store.getUnsavedRecords();
        records = Ext.Array.from(records);
        Ext.Array.forEach(records, function(rec, index, array) {
            if (rec.restoreBeforeCommitProperties()) {
                revertedRecords.push(rec);
            }
        });
        return revertedRecords;
    },
    /**
         * Generic function to delete specified records from store
         * Handles both new records not stored in Cach√© & existing records found in Cach√©
         * @param {Ext.data.Model[]} recordsToDelete All records to delete from store
         * @param {Object} [eOpts]      An object containing configuration options.  It will be saved on the store as {@link #deleteConfig}
         * It will be passed to & used by: {@link #initBeforeDelete}, {@link #splitNewAndExistingRecords}, {@link #showDeleteNotification}
         **/
    deleteRecords: function(recordsToDelete, eOpts) {
        var store = this;
        recordsToDelete = Ext.Array.from(recordsToDelete);
        eOpts = eOpts || {};
        if (store.fireEvent('beforedelete', store, recordsToDelete, eOpts)) {
            store.initBeforeDelete(eOpts);
            if (recordsToDelete.length > 0) {
                store.initRecordsBeforeDelete(recordsToDelete);
                store._showDeleteMask = true;
                store.fireEvent('deleting', store, recordsToDelete);
                var recsObj = store.splitNewAndExistingRecords(recordsToDelete),
                    recordsWithId = recsObj.hasId || [],
                    newRecords = recsObj.noId || [];
                if (recordsWithId.length > 0) {
                    // after saved records have been deleted, it will delete records that don't exist in Cach√©
                    store.deleteRecordsFromDatabase(recordsWithId, newRecords);
                } else {
                    if (newRecords.length > 0) {
                        store.deleteNewRecords(newRecords);
                    }
                    store.afterRecordsDeleted();
                }
            } else {
                // no records to remove
                store.afterRecordsDeleted();
            }
        }
    },
    deleteRecordsFromDatabase: function(recordsWithId, newRecords) {
        var store = this,
            config = store.deleteConfig,
            idsToDelete = store.getRecordIDs(recordsWithId, config),
            cacheClassName = config.cacheClassName || store.getExtraParam('CacheClassName'),
            deleteRequestParams = config.deleteRequestParams || {
                CacheClassName: 'JSON.Adapter',
                CacheMethodName: 'DeleteObjects',
                CacheCommandType: 1,
                JSONObject: Ext.encode({
                    'CacheClassName': cacheClassName,
                    'Properties': idsToDelete
                })
            };
        newRecords = newRecords || [];
        Ext.Ajax.request({
            url: '../Ext.JsonRequest.cls',
            scope: store,
            params: deleteRequestParams,
            callback: function(options, success, response) {
                store.deleteCallback(options, success, response, recordsWithId, newRecords);
            }
        });
    },
    /**
         * AJAX callback function for handling deleting a group of records
         * @param {Object} options The parameter to the request call.
         * @param {Boolean} success `true` if the request succeeded.
         * @param {Object} response The XMLHttpRequest object containing the response data.
         * See [www.w3.org/TR/XMLHttpRequest/](http://www.w3.org/TR/XMLHttpRequest/) for details about
         * accessing elements of the response.
         * @param {Ext.data.Model[]} recordsWithId Records that exist in Cach√©
         * @param {Ext.data.Model[]} newRecords Records that are new and do not exist in Cach√©
         * @private
         */
    deleteCallback: function(options, success, response, recordsWithId, newRecords) {
        var store = this,
            r = Ext.decode(response.responseText);
        recordsWithId = Ext.Array.from(recordsWithId);
        newRecords = Ext.Array.from(newRecords);
        if (r.success) {
            store.handleSuccessfulRecordsDelete(recordsWithId);
        } else {
            store.handleFailedRecordsDelete(recordsWithId, options, success, response);
        }
        Ext.Array.forEach(recordsWithId, function(record) {
            store.fireEvent('recorddelete', store, record, r.success);
        });
        if (newRecords.length > 0) {
            store.deleteNewRecords(newRecords);
        }
        store.afterRecordsDeleted();
    },
    /**
         * @private
         */
    deleteNewRecords: function(records) {
        var store = this;
        store.remove(records);
        Ext.Array.forEach(records, function(rec) {
            store.fireEvent('recorddelete', store, rec);
        });
    },
    setRecordsToDelete: function(records, isDeleting) {
        isDeleting = Ext.isDefined(isDeleting) ? isDeleting : true;
        // defaults to `true`
        Ext.Array.forEach(records, function(rec, index, array) {
            rec.deleting = isDeleting;
        });
    },
    /**
         * The AJAX delete request succeeded in Cach√©
         * This will remove the deleted record(s) from the store
         * @private
         * @param {Ext.data.Model[]} records An Ext.data.Model that the delete was attempted on
         */
    handleSuccessfulRecordsDelete: function(records) {
        var store = this;
        store.remove(records);
    },
    /**
         * The AJAX delete request failed in Cach√©
         * This will configure error messages to display to user
         * @private
         * @param {Ext.data.Model[]} records The records that the delete was attempted on
         * @param {Object} options The parameter to the request call.
         * @param {Boolean} success `true` if the request succeeded.
         * @param {Object} response The XMLHttpRequest object containing the response data.
         */
    handleFailedRecordsDelete: function(records, options, success, response) {
        var store = this,
            r = Ext.decode(response.responseText),
            errMsg = r.error ? r.error.Msg : 'Error';
        records = Ext.Array.from(records);
        Ext.Array.forEach(records, function(record) {
            // Add Cach√©'s error to the Store's errorHash (so can display it after all records are deleted)
            store.deleteErrors.add(errMsg, 'Cach√©');
            sl.utils.consoleWarningWithTrace('Record\'s Delete Error', {
                error: errMsg,
                options: options,
                response: response,
                success: success,
                record: record
            });
            store.fireEvent('recordfaileddelete', store, record);
        });
        store.addRecordErrorsToHash(records, store.errorHash);
    },
    /**
         * Shows all error messages and success messages after a delete request is completed
         * @return {sl.utils.Toast/Ext.MessageBox} Notification displayed to user after delete session ended
         **/
    afterRecordsDeleted: function() {
        var store = this,
            deletedRecs = store.getDeletedRecords(),
            notDeletedRecs = store.getNotDeletedRecords(),
            activeNotification = false;
        if (notDeletedRecs.length > 0) {
            store.addRecordErrorsToHash(notDeletedRecs, store.deleteErrors);
        }
        activeNotification = store.showDeleteNotification(deletedRecs, notDeletedRecs);
        store.fireEvent('delete', store, activeNotification);
        delete store._showDeleteMask;
        return activeNotification;
    },
    /**
         * Shows error message or success toast after delete session has finished
         * store.deleteConfig properties used:
         *  - dontShowCount: never notify user of the number of affected records during any store action (save/delete/new/etc...)
         *  - dontShowDeleteCount: never notify user of the number of affected records during delete
         *  - dontShowToast: never show user a success toast
         *  - dontShowDeleteToast: never show user a success toast after a delete
         *  - dontShowNoChangesToast: never show user toast after nothing available to delete
         *
         * @param {Ext.data.Model[]} deletedRecs All records that were deleted
         * @param {Ext.data.Model[]} notDeletedRecs All records that were not deleted, but were supposed to be
         * @return {Boolean} `true` if a notification (toast or messagebox) was displayed
         **/
    showDeleteNotification: function(deletedRecs, notDeletedRecs) {
        var store = this,
            config = store.deleteConfig || {},
            deleteCount = deletedRecs.length,
            notDeletedCount = notDeletedRecs.length,
            // dontShowToast = (Ext.isDefined(config.dontShowToast) ? config.dontShowToast : (Ext.isDefined(config.dontShowDeleteToast) ? config.dontShowDeleteToast : undefined)) || false;
            // will always show error messages to the user; only the successful notices are optional
            dontShowToast = config.dontShowToast || config.dontShowDeleteToast || false,
            dontShowCount = config.dontShowCount || config.dontShowDeleteCount || false,
            dontShowNoChangesToast = dontShowToast || config.dontShowNoChangesToast || false,
            activeNotification;
        if (deleteCount > 0) {
            // records were deleted
            if (notDeletedCount > 0) {
                // records were deleted and there were errors
                activeNotification = store.notifyErrorsDuringDelete(deletedRecs, notDeletedRecs);
            } else {
                // records were deleted and there were no errors
                if (!dontShowToast) {
                    activeNotification = store.notifyRecordsDeleted(deleteCount, dontShowCount);
                }
            }
        } else {
            // no records to delete
            if (notDeletedCount > 0) {
                // no records were deleted and there were errors
                activeNotification = store.notifyErrorsDuringDelete(deletedRecs, notDeletedRecs);
            } else {
                // no records were deleted and no errors
                if (!dontShowToast && !dontShowNoChangesToast) {
                    activeNotification = store.notifyNoRecordsToDelete();
                }
            }
        }
        return activeNotification;
    },
    // show toast when no records have been deleted
    notifyNoRecordsToDelete: function() {
        var toastTitle = 'No Records to Delete',
            toastMsg = '';
        return sl.utils.Toast.showWarningToast(toastTitle, toastMsg);
    },
    // show toast when records were deleted
    notifyRecordsDeleted: function(deleteCount, dontShowCount) {
        return sl.utils.Toast.showActionToast('delete', (dontShowCount ? '' : deleteCount));
    },
    // show toast when there were errors during delete
    notifyErrorsDuringDelete: function(deletedRecs, notDeletedRecs) {
        var store = this,
            deleteCount = deletedRecs.length,
            notDeletedCount = notDeletedRecs.length,
            msg = '',
            deletedMsg = Ext.String.format('{0} record{1} deleted', deleteCount, (deleteCount === 1 ? ' was' : 's were')),
            errMsg = Ext.String.format('{0} record{1} could not be deleted', notDeletedCount, (notDeletedCount === 1 ? '' : 's')),
            errors = store.getErrors(store.deleteErrors),
            recordErrors = store.getErrorMessage(errors),
            hasErrors = (errors.length > 0 || notDeletedCount > 0),
            msgBox;
        if (hasErrors) {
            sl.utils.consoleWarningWithTrace('Error(s) During Delete', {
                errors: errors,
                recordsNotDeleted: notDeletedRecs,
                store: store
            });
        }
        if (recordErrors) {
            errMsg += ' because of the following errors:<br/><br/>' + recordErrors;
        }
        msg = deletedMsg + '<br/><br/><hr><br/>' + errMsg;
        msgBox = Ext.Msg.alert('Delete Failed', msg);
        store.fireEvent('deleteerrors', store, msgBox);
        return msgBox;
    },
    /**
         * Sets up store before deleting, including merging eOpts & store.defaultDeleteConfig into store.deleteConfig
         * @private
         * @param {Object} [deleteConfig] Special Store configuration that will be merged into store's deleteConfig
         */
    initBeforeDelete: function(deleteConfig) {
        var store = this,
            tempConfig = {},
            // reset deleteConfig so the previous "save session" configs won't corrupt this new "save session"
            defaultDeleteConfig = Ext.clone(store.defaultDeleteConfig) || {};
        // eOpts.xyz (=5) WILL OVERWRITE existing store.deleteConfig.xyz (=3); after Ext.apply, store.deleteConfig.xyz = 5
        Ext.apply(tempConfig, deleteConfig, defaultDeleteConfig);
        store.deleteConfig = tempConfig || {};
        store.deleteErrors = Ext.create('Ext.util.HashMap');
    },
    // initialize error hash
    /**
         * Sets up records before deleting.
         * @private
         * @param {Ext.data.Model[]} recordsToDelete
         */
    initRecordsBeforeDelete: function(recordsToDelete) {
        var store = this,
            // records that previously were marked for delete
            prevRecords = store.getDeletingRecords() || [];
        store.resetRemovedRecordsArrays(recordsToDelete);
        store.setRecordsToDelete(prevRecords, false);
        // these records are no longer flagged as 'to-be-deleted'
        store.setRecordsToDelete(recordsToDelete, true);
    },
    // these records will be deleted
    /**
         * Cleans the store's `removed` and `removedphantom` arrays.
         * Useful for reporting to user after delete is finished.
         * @private
         * @param {Ext.data.Model[]} recordsToDelete
         */
    resetRemovedRecordsArrays: function(recordsToDelete) {
        var store = this;
        if (Ext.isArray(recordsToDelete)) {
            // only remove records that are not actively being deleted
            // if the records were moved (via drag&drop), they have already been removed from the store.
            // They will also already be in `s.removed`.  By clearing the array, you'll have no record of them being
            // deleted
            store.removed = (store.removed || []).filter(function(item) {
                return recordsToDelete.indexOf(item) >= 0;
            });
            store.removedphantom = (store.removedphantom || []).filter(function(item) {
                return recordsToDelete.indexOf(item) >= 0;
            });
        } else {
            store.removed = [];
            store.removedphantom = [];
        }
    },
    /**
         * Generic function to restore specified records from store
         * Handles both new records not stored in Cach√© & existing records found in Cach√©
         *
         * ***Restored records will not be in Cach√© until user clicks "Save".***
         * @param {Ext.data.Model[]} recordsToRestore All records to restore
         * @param {Object} [eOpts]  An object containing configuration options.
         * @param {String} [eOpts.addlMsg] Additional text to show user in the success toast
         * @param {String} [eOpts.newRecordOpts] Properties used by {@link Ext.data.Store#method-createNewRecord}'s eOpts
         * @param {String} [eOpts.dontShowToast] If `true` will not show success toast to user
         **/
    undoDeleteRecords: function(recordsToRestore, eOpts) {
        eOpts = eOpts || {};
        var store = this,
            undoRecs = [],
            restoredRecs = [],
            addlMsg = eOpts.addlMsg || '<br/><br/><b>You must save all restored records.</b>';
        eOpts.newRecordOpts = Ext.applyIf(eOpts.newRecordOpts || {}, {
            includeID: false
        });
        if (store.fireEvent('beforeundodelete', store, recordsToRestore, eOpts)) {
            if (recordsToRestore.length > 0) {
                Ext.Array.forEach(recordsToRestore, function(item, idx, allItems) {
                    var rec = store.createNewRecord.call(store, item.data, eOpts.newRecordOpts);
                    undoRecs.push(rec);
                });
                if (undoRecs.length > 0) {
                    restoredRecs = store.insert(0, undoRecs);
                    if (restoredRecs.length > 0) {
                        store.resetRemovedRecordsArrays();
                        if (!eOpts.dontShowToast) {
                            sl.utils.Toast.showActionToast('restore', restoredRecs.length, 4000, addlMsg);
                        }
                    }
                }
            }
            if (recordsToRestore.length === 0) {
                sl.utils.Toast.showWarningToast("No records to restore", "", 2500);
            } else if (undoRecs.length === 0 || restoredRecs.length === 0) {
                sl.utils.Toast.showErrorToast("Error", "No records restored", 3500);
                sl.utils.consoleLogWithTrace('No records restored', {
                    store: store,
                    undoRecs: undoRecs || [],
                    recordsToRestore: recordsToRestore || [],
                    restoredRecs: restoredRecs || []
                });
            }
            store.fireEvent('undodelete', store, restoredRecs, undoRecs, recordsToRestore);
        }
    },
    /**
         * Builds an object that consists of:
         * - New Records (don't have an ID from Cach√©)
         * - Existing Records (have an ID from Cach√©)
         * - All Records (that were passed as a param)
         * @param {Ext.data.Model[]} [records=store.getRecords()] If not defined, will be all records in the store
         * @return {Object} Object that has categorized the included records
         * @private
         */
    splitNewAndExistingRecords: function(records) {
        var store = this,
            config = store.deleteConfig || {},
            hasIdArr = [],
            noIdArr = [],
            idField;
        records = Ext.Array.from(records || store.getRecords());
        // builds list of rec IDs & removes rec from grid store and modified store
        Ext.Array.forEach(records, function(rec, index, array) {
            // Cach√© property for the ID (primary key) property (typically it's "ID" in Cach√© classes)
            idField = config.idField || store.getIDProperty(rec, true);
            if (!Ext.isEmpty(rec.data[idField])) {
                hasIdArr.push(rec);
            } else {
                noIdArr.push(rec);
            }
        });
        return {
            all: records,
            hasId: hasIdArr,
            noId: noIdArr
        };
    },
    /**
         * Refreshes a store's data without actually "reloading" the store. Updates store's records in place.
         *
         * {@link sl.panel.grid.DisplayGrid#method-updateUI} is usually the caller of this function.
         * `updateUI` highlights the relevant changes that result from this function.
         *
         * Best used on unmodified client-side data, but modified, dirty data can be preserved if necessary.
         * Otherwise, this function ***WILL OVERWRITE CLIENT-SIDE EDITS & CHANGES***.
         *
         * @param {Object} [loadParams={}] An object of override parameters used to retrieve the data from the server
         * If passed as undefined or an empty object then the store's last-used parameters will be used.
         * @param {Boolean} [setDirty=true] Used to tell if the modified field will be put in the model's modified array
         *     and show as dirty. If `false`, then will not mark the record as modified.
         *
         * *** NOTE: If the field is not marked dirty then any changes to the field will not be committed to the server
         * if and when a save is attempted***
         * @param {Boolean} [deleteUnsavedRecords=false] If `true`, new store records that are not saved will be deleted
         * @param {Boolean} [overwriteModifiedValues=false] If `true`, store record values that have been modified but not
         *     yet saved will be replaced with Cach√©'s data
         * @param {Function} [callbackFn] Called after store has been updated.
         * Function will be passed modified records, inserted records, and deleted records
         * @param {Object} [cbScope=store] The scope the callbackFn function will be called with
         * @param {Object} [eOpts]
         * @param {String} [eOpts.idField=store.getIDProperty()] Record's unique value to link store record to Cach√© record
         */
    syncRecordData: function(loadParams, setDirty, deleteUnsavedRecords, overwriteModifiedValues, callbackFn, cbScope, eOpts) {
        var store = this,
            lastParams = {},
            isRemovingFromStore;
        // default configurations
        loadParams = Ext.apply({}, loadParams);
        setDirty = Ext.valueFrom(setDirty, true);
        deleteUnsavedRecords = Ext.valueFrom(deleteUnsavedRecords, false);
        overwriteModifiedValues = Ext.valueFrom(overwriteModifiedValues, false);
        callbackFn = Ext.isFunction(callbackFn) ? callbackFn : Ext.emptyFn;
        cbScope = Ext.valueFrom(cbScope, store);
        eOpts = Ext.apply({}, eOpts);
        lastParams = Ext.apply({}, (store.lastOptions || {}).params, store.getExtraParams());
        loadParams = Ext.apply({}, loadParams, lastParams);
        // may delegate responsibility of removing record from store to allow visual enhancement
        isRemovingFromStore = (eOpts._delegateDeleteHandling !== true);
        if (store.fireEvent('beforerecorddatasync', store, loadParams)) {
            Ext.Ajax.request({
                url: '../Ext.JsonRequest.cls',
                timeout: 3600000,
                // loadParams is king, then use following object
                params: Ext.applyIf(loadParams, {
                    "CacheClassName": store.getExtraParam('CacheClassName'),
                    "CacheQueryName": store.getExtraParam('CacheQueryName'),
                    "CacheCommandType": 2
                }),
                callback: function(opts, success, response) {
                    var r = Ext.JSON.decode(response.responseText),
                        onlyInStoreHash = Ext.create('Ext.util.HashMap'),
                        onlyInCacheHash = Ext.create('Ext.util.HashMap'),
                        inBothHash = Ext.create('Ext.util.HashMap'),
                        idProp = eOpts.idField || store.getIDProperty(),
                        storeRecords = store.getRecords(),
                        cacheRecords = (Ext.Array.from(r.records) || []).map(function(recData) {
                            // converts raw Cach√© data into actual record to allow accurate data comparison with store's existing records
                            return store.model.prototype.createNewRecord.apply(store.model, [
                                recData,
                                {
                                    includeID: true
                                }
                            ]);
                        }),
                        cacheLookup = {},
                        // contains all Cach√© recs, stored by record ID for fast lookup
                        inBothArray = [],
                        onlyInCacheArray = [],
                        onlyInStoreArray = [],
                        // returned to developer in `uiupdate` event
                        updatedRecords = [],
                        insertedRecords = [],
                        deletedRecords = [];
                    cacheRecords.forEach(function(cacheRec, index, array) {
                        var cacheIdValue = cacheRec.get(idProp) || ("undefined-" + index),
                            storeRec = store.getAt(store.findExact(idProp, cacheIdValue));
                        if (storeRec) {
                            inBothHash.add(cacheIdValue, {
                                cacheRecord: cacheRec,
                                storeRecord: storeRec
                            });
                        } else {
                            onlyInCacheHash.add(cacheIdValue, {
                                cacheRecord: cacheRec
                            });
                        }
                        // { <<<record ID>>> : record }
                        cacheLookup[cacheIdValue] = cacheRec;
                    });
                    // loop through all of the store records and find matching Cach√© records
                    storeRecords.forEach(function(storeRec, index, array) {
                        var storeIdValue = storeRec.get(idProp) || ("undefined-" + index),
                            cacheRec = cacheLookup[storeIdValue];
                        if (cacheRec) {
                            inBothHash.add(storeIdValue, {
                                cacheRecord: cacheRec,
                                storeRecord: storeRec
                            });
                        } else {
                            onlyInStoreHash.add(storeIdValue, {
                                storeRecord: storeRec
                            });
                        }
                    });
                    /*
                         * if there are many records being changed, the rec.set can be very slow unless store events are suspended
                         * based on sencha support advice: http://www.sencha.com/forum/showthread.php?237507-record.set-method-really-slow-in-Ext-4.1.1&p=872970
                         */
                    store.suspendEvent('update');
                    // record is in Cach√© & in the store, so update where appropriately
                    inBothArray = inBothHash.getValues();
                    inBothArray.forEach(function(obj, index, array) {
                        var cacheRec = obj.cacheRecord,
                            storeRec = obj.storeRecord;
                        // Update current record
                        Ext.Object.each(cacheRec.getData(), function(property, cacheValue, cachePropertyValues) {
                            if (storeRec.idProperty !== property) {
                                var storePropWasModifed = storeRec.isModified(property),
                                    storeValue = storeRec.get(property);
                                // storeRec's field cannot be modified, or there must be explicit permission to
                                // overwrite it
                                if (!storePropWasModifed || (storePropWasModifed && overwriteModifiedValues)) {
                                    storeValue = !Ext.isEmpty(storeValue) ? storeValue : '';
                                    cacheValue = !Ext.isEmpty(cacheValue) ? cacheValue : '';
                                    // If they are not equal then update store's record
                                    if (!sl.utils.areValuesEquivalent(storeValue, cacheValue)) {
                                        storeRec.set(property, cacheValue, {
                                            dirty: setDirty
                                        });
                                        storeRec._updateProperties = Ext.Array.from(storeRec._updateProperties);
                                        storeRec._updateProperties.push(property);
                                        updatedRecords.push(storeRec);
                                    }
                                }
                            }
                        });
                    });
                    // record is only in the store.
                    // it will delete it if there is not a good reason for it not existing in DB
                    onlyInStoreArray = onlyInStoreHash.getValues();
                    // record is only in Cach√©, not in store
                    // it will create & add a new record to the store
                    onlyInCacheArray = onlyInCacheHash.getValues();
                    onlyInCacheArray.forEach(function(obj, index, array) {
                        var cacheRec = obj.cacheRecord;
                        store.insert(0, cacheRec);
                        insertedRecords.push(cacheRec);
                    });
                    onlyInStoreArray.forEach(function(obj, index, array) {
                        var storeRec = obj.storeRecord;
                        // is the record dirty/invalid/new
                        if (deleteUnsavedRecords || (!store.filterDirty(storeRec) && !store.filterInvalid(storeRec) && !Ext.isEmpty(storeRec.get(idProp)))) {
                            deletedRecords.push(storeRec);
                            // when a UI component is involved, the component (grid/tree/etc) will remove the record from the store
                            // after it has visually highlighted the record.
                            // having the store remove it here would not allow a visual highlight of the deleted record
                            if (isRemovingFromStore) {
                                store.remove(storeRec);
                            }
                        }
                    });
                    store.resumeEvent('update');
                    updatedRecords = Ext.Array.unique(updatedRecords);
                    insertedRecords = Ext.Array.unique(insertedRecords);
                    deletedRecords = Ext.Array.unique(deletedRecords);
                    callbackFn.call(cbScope, updatedRecords, insertedRecords, deletedRecords);
                    // clean up
                    updatedRecords.forEach(function(rec) {
                        delete rec._updateProperties;
                    });
                    store.fireEvent('recorddatasync', store, updatedRecords, insertedRecords, deletedRecords);
                }
            });
        } else {
            return false;
        }
    }
}, function() {
    var Store = this;
    Store.createAlias({
        getBaseParam: 'getExtraParam',
        setBaseParam: 'setExtraParam'
    });
});

/**
 * @class sl.data.CacheTreeStore
 */
Ext.define('sl.data.CacheTreeStore', {
    extend: 'Ext.data.TreeStore',
    alias: [
        'store.cachetreestore'
    ],
    mixins: {
        cachestore: 'sl.data.CacheStore'
    },
    config: {
        /**
         * @cfg {String} CacheClassName Complete name of the class in Cach√©
         */
        CacheClassName: '',
        /**
         * @cfg {String} CacheQueryName Cach√© Query name
         */
        CacheQueryName: '',
        /**
         * @cfg {String} CacheMethodName Cach√© Method name
         */
        CacheMethodName: '',
        /**
         * @cfg {String} [idField="NodeId"]
         * node.id is set to this property's value
         */
        idField: 'NodeId',
        /**
         * @cfg {String} [textField="Text"]
         * {@link Ext.data.NodeInterface#text node.text} is set to this property's value
         */
        textField: 'Text',
        /**
         * @cfg {String} [leafField='isLeaf']
         * {@link Ext.data.NodeInterface#leaf node.leaf} is set to this property's value
         * If this property's value is true, then Cache's TreeLoader will set {@link Ext.data.NodeInterface#leaf leaf} to true
         */
        leafField: 'isLeaf',
        /**
         * @cfg {Boolean} [walkTree=false]
         * If `true`, all data will be preloaded instead of waiting until a tree node is expanded to load its children
         */
        walkTree: false,
        /**
         * @cfg {Boolean} [addLeafCheckbox=false]
         * If `true`, all leaf nodes will have a checkbox in the tree
         */
        addLeafCheckbox: false,
        /**
         * @cfg {String} [nodeParam='nodeId']
         * @inheritdoc
         */
        nodeParam: 'nodeId'
    },
    //
    // CURRENTLY NOT IN USE: cfg {Object} nodeParams
    // This is an object of variables to send to the Cache query
    //
    /**
     * @event loadcomplete
     * Each branch node could be conducting its own store load so listening to `load` may give
     * an inaccurate picture of how many store loads are taking place.
     * This event is fired when there are no more ongoing loads taking place.
     * @param {sl.data.CacheStore} store The tree store that finished loading
     */
    /**
     * @private
     */
    constructor: function(config) {
        var store = this;
        config = config || {};
        if (config.CacheQueryName === "**Required**") {
            config.CacheQueryName = undefined;
        }
        // if CacheCommandType not defined, default to '2' if there's a query or else 1 (for CacheMethodName)
        config.CacheCommandType = config.CacheCommandType || (Ext.isString(config.CacheQueryName) && config.CacheQueryName.length > 0) ? 2 : 1;
        config.extraParams = Ext.apply({
            CacheClassName: config.CacheClassName,
            CacheQueryName: config.CacheQueryName,
            CacheMethodName: config.CacheMethodName,
            CacheCommandType: config.CacheCommandType,
            idField: config.idField,
            // will set node.id = ?
            leafField: config.leafField,
            // will set node.leaf = ?
            textField: config.textField
        }, // will set node.text = ?
        config.extraParams);
        // when nodeParams is implemented, add following to config.extraParams:
        // nodeParams: Ext.encode(config.nodeParamsConfig),
        if (config.addLeafCheckbox) {
            config.extraParams.addLeafCheckbox = (config.addLeafCheckbox ? 1 : 0);
        }
        if (config.walkTree) {
            config.extraParams.walkTree = (config.walkTree ? 1 : 0);
        }
        config.proxy = Ext.merge(// Default Config:
        {
            type: 'ajax',
            url: '../Ext.TreeLoader.cls',
            timeout: config.timeout || Ext.Ajax.getTimeout() || 300000,
            // 5 min
            reader: {
                type: 'json',
                rootProperty: 'records',
                totalProperty: 'totalCount'
            },
            writer: {
                type: 'json'
            },
            extraParams: config.extraParams,
            listeners: {
                scope: store,
                exception: function(proxy, response, operation, eOpts) {
                    if (!Ext.isEmpty(response.responseText)) {
                        var r = Ext.decode(response.responseText),
                            errMsg = '';
                        if (r && r.error && r.error.Msg) {
                            errMsg = r.error.Msg;
                            Ext.Msg.alert("Request Error", errMsg);
                        }
                        console.error('Cach√© Tree Store Proxy Error', {
                            "extraParams": this.getExtraParams(),
                            "errorMessage": errMsg,
                            "store": this,
                            "lastOptions": this.lastOptions,
                            "args": arguments,
                            "r": r
                        });
                    }
                }
            }
        }, // custom developer-defined (king)
        config.proxy);
        // delete any unused extraParam properties (like CacheMethodName/CacheQueryName)
        Ext.Object.each(config.proxy.extraParams, function(key, value, myself) {
            if (Ext.isEmpty(value)) {
                delete config.proxy.extraParams[key];
            }
        });
        store.callParent(arguments);
        // add sl.data.CacheStore functions to the tree store
        store = Ext.applyIf(store, store.mixins.cachestore);
        store.on({
            priority: 1000,
            beforeload: store.onCacheStoreBeforeLoad,
            load: store.onCacheTreeStoreLoad,
            exception: store.onCacheStoreException,
            datachanged: (store.isStoreValidatedOnLoad ? store.validateOnStoreLoad : Ext.emptyFn),
            update: (store.isRecordChangeValidated ? store.validateOnRecordChange : Ext.emptyFn),
            add: (store.isNewRecordValidated ? store.validateOnRecordAdded : Ext.emptyFn),
            clear: store.onCacheStoreClear
        });
        store.remove = Ext.Function.createSequence(store.remove, function(records) {
            records = Ext.Array.from(records) || [];
            Ext.Array.forEach(records, function(rec, index, array) {
                if (rec.phantom) {
                    store.removedphantom.push(rec);
                }
            });
        }, store);
    },
    handleSuccessfulRecordSave: function(record, newID, idField) {
        var store = this,
            newRecSaved = store.mixins.cachestore.handleSuccessfulRecordSave.apply(store, arguments);
        if (newRecSaved) {
            // for some reason, ExtJS isn't updating this flag so we have to do it
            record.dirty = false;
        }
        return newRecSaved;
    },
    /**
     * @private
     */
    deleteNewRecords: function(records) {
        var store = this;
        Ext.Array.forEach(records, function(rec) {
            rec.parentNode.removeChild(rec);
            store.fireEvent('recorddelete', store, rec);
        });
    },
    /**
     * The AJAX delete request succeeded in Cach√©
     * This will remove the deleted record(s) from the tree view and the store
     * @private
     * @param {Ext.data.Model[]} records Array of Ext.data.Models that were successfully deleted in Cach√©
     */
    handleSuccessfulRecordsDelete: function(records) {
        Ext.Array.forEach(records, function(rec) {
            rec.parentNode.removeChild(rec);
        });
    },
    // returns all records that are actively loading
    getLoadingRecords: function() {
        var store = this;
        return store.getData().items.filter(function(r) {
            return r.isLoading();
        });
    },
    onCacheTreeStoreLoad: function(store, records, successful, operation, node, eOpts) {
        store.onCacheStoreLoad.apply(store, arguments);
        if (store.getLoadingRecords().length === 0) {
            store.fireEvent('loadcomplete', store);
        }
    }
});

/**
 * @class sl.data.file.Packet
 *        The Packet class read data from binary, plaintext and Base64
 *        sources and allows retrieving the data in any of the other formats.
 *
 * @mixins Ext.util.Observable
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.Packet', {
    mixins: {
        observable: 'Ext.util.Observable'
    },
    //
    config: {
        /**
		 * @cfg format
		 *      The format of the input data. Will be guessed if none is provided.
		 *      Valid values are 'binary', 'text', or 'base64'.
		 * @type {"binary"|"text"|"base64"}
		 */
        format: 'binary',
        /**
		 * @cfg data
		 *      The input data.
		 * @type {String}
		 */
        data: null,
        /**
		 * @private
		 * @cfg binary
		 *      The binary value of the input data.
		 * @type {String}
		 */
        binary: null,
        /**
		 * @cfg name
		 *      The name of the file.
		 * @type {String}
		 */
        name: '',
        /**
		 * @cfg extension
		 *      The extension of the file.
		 * @type {String}
		 */
        extension: '',
        /**
		 * @cfg type
		 *      The mime type of the file.
		 * @type {String}
		 */
        type: '',
        /**
		 * @cfg size
		 *      The size of the binary data.
		 * @type {String}
		 */
        size: null
    },
    //
    /**
	 * @method constructor
	 * @param  {Object} config
	 * @return {sl.data.file.Packet}
	 */
    constructor: function(config) {
        this.initConfig(config);
        if (this.hasData()) {
            this.set(this.getData(), this.getFormat());
        }
        this.mixins.observable.constructor.call(this, config);
        return this.callParent(arguments);
    },
    //
    /**
	 * @method reset
	 *         Reset the #binary, #type, #size and #name properties.
	 * @return {void}
	 */
    reset: function() {
        this.setBinary(null);
        this.setType(null);
        this.setSize(0);
        this.setName('');
    },
    /**
	 * @method getReader Returns a new FileReader
	 * @return {FileReader}
	 */
    getReader: function() {
        var me = this,
            reader = new FileReader();
        return reader;
    },
    /**
	 * @method read
	 *         Reads data from a blob and triggers a callback with the read data.
	 * @param  {Object}   operation 	The blob.
	 * @param  {Function} cb
	 *         A callback function to call with the binary read data as the first argument.
	 * @return {void}
	 */
    read: function(operation, cb) {
        return this.readBlob(operation, cb);
    },
    /**
	 * @method readBlob
	 *         Read data from a Blob and store it in #binary.
	 *         If cb is set, call it with the binary data as its argument.
	 * @param  {Object}   blob 	The blob to read
	 * @param  {Function} cb
	 *         Callback function for when te reader is done loading the file.
	 * @return {void}
	 */
    readBlob: function(blob, cb) {
        this.reset();
        var me = this,
            reader = this.getReader();
        reader.onload = function(e) {
            var result = e.target.result;
            me.setBinary(result);
            if (typeof cb === 'function') {
                cb(result);
            }
        };
        reader.readAsArrayBuffer(blob);
    },
    /**
	 * @accessor
	 * @param {Object} data 	The binary data.
	 */
    setBinary: function(data) {
        var len = 0;
        if (data) {
            if (!this.isBinary(data)) {
                data = new Uint8Array(data);
            }
            len = data.length;
        }
        this.setSize(len);
        this.binary = data;
        return this;
    },
    /**
	 * @accessor
	 * @param {Object} data 	Data in text format.
	 * @param {String} type 	The mime type of the read file.
	 */
    setText: function(data, type) {
        if (type) {
            this.setType(type);
        }
        var i = 0,
            len = data.length,
            buf = new ArrayBuffer(len),
            bufView = new Uint8Array(buf);
        for (; i < len; i++) {
            bufView[i] = data.charCodeAt(i);
        }
        this.setBinary(bufView);
        return this;
    },
    /**
	 * @accessor
	 * @param {Object} data 	Data in Base64 format.
	 * @param {String} type 	The mime type of the read file.
	 */
    setBase64: function(data, type) {
        if (type) {
            this.setType(type);
        }
        var i = 0,
            bytes = window.atob(data),
            len = bytes.length,
            buf = new ArrayBuffer(len),
            bufView = new Uint8Array(buf);
        for (; i < len; i++) {
            bufView[i] = bytes.charCodeAt(i);
        }
        this.setBinary(bufView);
        return this;
    },
    /**
	 * @method set
	 *         Process data, according to the given format and mime type. If no
	 *         format is given, try to {@link #guessFormat guess} it.
	 * @param {Object} data 	Data in text format.
	 * @param {"binary"|"text"|"base64"} format 	The data format.
	 * @param {String} type 	The mime type of the read file.
	 */
    set: function(data, format, type) {
        if (!format) {
            format = this.guessFormat(data);
        }
        this.setFormat(format);
        if (type) {
            this.setType(type);
        }
        switch (format) {
            case 'text':
                return this.setText(data);
            case 'base64':
                return this.setBase64(data);
            default:
                return this.setBinary(data);
        }
    },
    /**
	 * @method getText Returns the previously read data as plaintext.
	 * @return {String} {@link #binary binary} in plaintext format.
	 */
    getText: function() {
        var i = 0,
            data = this.getBinary(),
            len = data.length,
            text = '';
        for (; i < len; i++) {
            text += String.fromCharCode(data[i]);
        }
        return text;
    },
    /**
	 * @method getBase64 Returns the previously read data as a Base64 string.
	 * @return {String} {@link #binary binary} as Base64 String.
	 */
    getBase64: function() {
        return btoa(this.getText());
    },
    /**
	 * @method getBinary Returns the previously read data as binary data.
	 * @return {Mixed} {@link #binary binary}
	 */
    getBinary: function() {
        return this.binary;
    },
    /**
	 * @method getBlob Returns the previously read data as a Blob.
	 * @return {Object} {@link #binary binary} as Blob.
	 */
    getBlob: function(type) {
        type = type || this.getType();
        var binary = this.getBinary();
        return new Blob([
            binary.buffer
        ], {
            type: type
        });
    },
    /**
	 * @method save
	 *         Make the user download the #binary data.
	 * @return {void}
	 */
    save: function() {
        this.saveAs(this.getName());
    },
    /**
	 * @method saveAs
	 *         Make the user download the #binary data, overriding the filename.
	 * @return {void}
	 */
    saveAs: function(name) {
        saveAs(this.getBlob(), name);
    },
    /**
	 * @method get
	 *         Get the #binary data in a different format or type.
	 * @return {Object|String}
	 */
    get: function(format, type) {
        var me = this,
            data = me.data;
        format = format || me.guessFormat(data);
        type = type || me.getType();
        switch (format) {
            case 'base64':
                return me.getBase64();
            case 'binary':
                return me.getBinary(type);
            default:
                return me.getText();
        }
    },
    /**
	 * @accessor
	 * @return {String} The mime #type.
	 */
    getType: function() {
        var type = this.type;
        if (type) {
            return type;
        }
        var extension = this.extension;
        switch (extension) {
            case 'csv':
                return 'text/csv';
            case 'xls':
                return 'application/vnd.ms-excel';
            case 'xlsx':
                return 'application/vnd.openxmlformats-' + 'officedocument.spreadsheetml.sheet';
            default:
                return 'text/plain';
        }
    },
    /**
	 * @method isText
	 *         Test whether the given data is in plaintext format.
	 * @param  {Object}  data The data to test
	 * @return {Boolean}
	 */
    isText: function(data) {
        return !this.isBinary(data) && !this.isBase64(data);
    },
    /**
	 * @method isBinary
	 *         Test whether the given data is in binary format.
	 * @param  {Object}  data The data to test
	 * @return {Boolean}
	 */
    isBinary: function(data) {
        return (data instanceof Uint8Array || data instanceof Uint16Array);
    },
    /**
	 * @method isBase64
	 *         Test whether the given data is in Base64 format.
	 *         Returns true if the data complies to the following regex:
	 *             '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
	 * @param  {Object}  data The data to test
	 * @return {Boolean}
	 */
    isBase64: function(data) {
        var r = new RegExp('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$');
        return r.test(data);
    },
    /**
	 * @method hasData
	 *         Returns false if no data has been read.
	 * @return {Boolean}
	 */
    hasData: function() {
        return (this.data && this.data.length);
    },
    /**
	 * @method guessFormat
	 *         Attempts to guess the format of the data using #isBinary, #isBase64 and #isText.
	 * @param  {Object} data The data to inspect.
	 * @return {"binary"|"text"|"base64"}
	 */
    guessFormat: function(data) {
        if (this.isBinary(data)) {
            return 'binary';
        } else if (this.isBase64(data)) {
            return 'base64';
        }
        return 'text';
    }
});

/*global FuzzySet*/
/**
 * @class sl.data.file.reader.FileReader
 *        The Gearbox Import Reader is a specialized {@link Ext.data.reader.Reader Ext Reader}
 *        for reading files. It can also {@link #guessMapping attempt to map} the field names of the data in
 *        the file to those in a given {@link Ext.data.Model}.
 * @alias reader.file
 *
 *
 * @extends {Ext.data.reader.Reader}
 * @alternateClassName sl.data.file.Reader
 *
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.reader.FileReader', {
    extend: 'Ext.data.reader.Reader',
    alternateClassName: [
        'sl.data.file.Reader'
    ],
    alias: 'reader.file',
    idProperty: null,
    totalProperty: null,
    successProperty: null,
    /**
	 * @cfg model
	 * The model to use for this reader. This config is only required if the
	 * reader is being used without a proxy, otherwise the proxy will automatically set the model.
	 * @type {Ext.data.Model}
	 */
    format: 'binary',
    /**
	 * @evented
	 * @cfg mapping
	 *      The ({@link #guessMapping guessed}) mapping from
	 *      {@link #rawHeaders headers} to model fields.
	 *
	 * for example:
	 *    {
	 *	‚ÄÇ‚ÄÇ	'name': {source: 'Name'},
	 *	   	'value': {value: 'Value'}
	 *	  }
	 *
	 * @type {Object}
	 */
    mapping: null,
    /**
	 * @property rawData The raw data the Reader is currently holding.
	 * @type {Object|String}
	 */
    rawData: null,
    /**
	 * @property rawHeaders The headers as they were read from the data source.
	 * @type {Array.<String>}
	 */
    rawHeaders: null,
    /**
	 * @property rawHeaders The headers as they were read in a FuzzySet.
	 * @type {FuzzySet}
	 */
    rawHeadersFuzzySet: null,
    /**
	 * @property matchScore
	 * The rating for how confident the reader is that its mapping is correct
	 * @type {Number}
	 */
    matchScore: 0.3,
    /**
	 * @property autoCreateModelFromHeader
	 * Automatically create model from raw header.
	 * @type {Boolean}
	 */
    autoCreateModelFromHeader: false,
    /**
	 * @cfg autoGuessMapping Set to false to disable automatically guessing the
	 *      				 mapping of loaded files. Defaults to true.
	 * @type {Boolean=true}
	 */
    autoGuessMapping: true,
    /**
	 * @method setModel Applies a model to the Reader.
	 * @param {Ext.data.Model} model The new model.
	 * @param {Boolean=} setOnProxy Set to true to propagate the setting to
	 *                              the #model. Defaults to false.
	 * @param {Boolean=} dontSetRawMapping
	 *        			 Set to false to prevent the Reader changing its
	 *        			 mapping accordingly. Defaults to true.
	 * @return {void}
	 */
    setModel: function(model, setOnProxy, dontSetRawMapping) {
        this.callParent(arguments);
        if (!dontSetRawMapping) {
            this.setMapping(this.getRawMapping());
        }
    },
    /**
	 * @method  getRawMapping Create a crude mapping from the #model and return it.
	 * @return {Object} {@link #mapping mapping}
	 */
    getRawMapping: function() {
        var me = this,
            model = me.getModel() || {},
            modelProto = model.prototype || {},
            fieldsProto = modelProto.fields || {},
            fields = fieldsProto.items || [],
            mapping = {};
        Ext.Array.each(fields, function(field, key) {
            var name = field.name,
                fieldMapping = field.importMapping || field.mapping || null;
            if (Ext.Array.indexOf([
                'id'
            ], name) !== -1) {
                return;
            }
            if (Ext.Array.indexOf([
                'hasMany'
            ], field.type.type) !== -1) {
                return;
            }
            if (!field.persist) {
                return;
            }
            mapping[name] = fieldMapping;
        });
        return mapping;
    },
    /**
	 * @accessor getMapping Returns the mapping for this Reader.
	 * @return {Object} The mapping.
	 */
    getMapping: function() {
        return this.mapping;
    },
    /**
	 * @protected
	 * @chainable
	 * @fires mappingchange
	 * @accessor Sets the mapping for data fields to model fields.
	 * @param {Object} mapping The mapping.
	 * @param {Boolean=false} suppressEvent Suppress mappingchange event.
	 */
    setMapping: function(mapping, suppressEvent) {
        var me = this,
            model = this.getModel(),
            fieldCls,
            newMapping = {};
        Ext.Object.each(mapping, function(key, item) {
            fieldCls = me.findField(model, key);
            if (!fieldCls) {
                throw new Error('Can\'t set mapping for unknown field: ' + key);
            }
            if (typeof item === 'string') {
                item = {
                    source: item
                };
            } else if (item === null) {
                item = {
                    source: fieldCls.mapping || fieldCls.name
                };
            }
            newMapping[key] = item;
        });
        this.mapping = newMapping;
        /**
		 * @event mappingchange Fired when the mapping changes.
		 * @param {sl.data.file.reader.FileReader} reader The reader that fired the event.
		 * @param {Object} mapping The new {@link #mapping mapping}.
		 * @param {Object} data The raw data of the reader.
		 */
        if (!suppressEvent) {
            var records = this.getMappedRecords();
            this.onMappingChange(mapping, records);
        }
        return this.mapping;
    },
    onMappingChange: function(mapping, records) {
        this.fireEvent('mappingchange', this, mapping, records);
    },
    /**
	 * @method findField
	 *         Find a {@link Ext.data.Field field} in a {@link Ext.data.Model model}. <br/>
	 *         Returns undefined if the field could not be found.
	 * @param  {Ext.data.Model} model     	The model to search in.
	 * @param  {String} dataIndex 			The name of the field.
	 * @return {Ext.data.Field|undefined}   The field or undefined.
	 */
    findField: function(model, dataIndex) {
        return Ext.Array.findBy(model.getFields(), function(field) {
            return field.name === dataIndex;
        });
    },
    /**
	 * @template
	 * @method guessMapping
	 *         Try to guess the mapping from the raw data to the model.
	 * @param  {Boolean} dontSave
	 *         Set to false to just return the mapping,
	 *         instead of saving it with {@link #setMapping setMapping}.
	 * @return {Object} The guessed mapping.
	 */
    guessMapping: function(dontSave, suppressEvent) {
        // Steps:
        // 1. Get current (raw) mapping from the model
        // 2. Map the current (raw) mapping to new mapping
        // 2.1. If currently mapped as {value: %}, goto 3
        // 2.2. If mapped as string or {source: %}, use for finding target
        // 2.3. Look in field class: name, (import)Mapping, header?,
        //      if match goto 3
        // 2.4. If defaultValue: {value: defaultValue}, goto 3
        // 3. Save the new mapping if asked with .setMapping, save the result
        //    as the new mapping
        // 4. Return the new mapping
        // 1
        var me = this,
            mapping = me.getRawMapping(),
            newMapping = {},
            model = me.getModel(),
            importStore = me.importStore,
            fuzzySet = this.rawHeadersFuzzySet;
        // 2
        Ext.Object.each(mapping, function(dataIndex, item) {
            var fieldMapping;
            // 2.1
            if (item !== null && typeof item === 'object' && item.value) {
                fieldMapping = item;
            } else {
                // 2.2
                var mappingSource;
                if (typeof item === 'string') {
                    mappingSource = item;
                } else if (item !== null && typeof item === 'object' && item.source) {
                    mappingSource = item.source;
                }
                // 2.3
                var fieldCls = me.findField(model, dataIndex),
                    fieldHeader = me.getModelHeader && me.getModelHeader(dataIndex),
                    candidates = [
                        dataIndex,
                        mappingSource,
                        fieldHeader
                    ],
                    matches = [];
                if (fuzzySet) {
                    Ext.each(candidates, function(candidate) {
                        if (candidate) {
                            var result = fuzzySet.get(candidate);
                            if (result) {
                                matches = matches.concat(result);
                            }
                        }
                    });
                }
                var sortedMatches = Ext.Array.sort(matches, 0),
                    match = Ext.Array.slice(sortedMatches, -1)[0];
                if (match && match.length === 2) {
                    var score = match[0],
                        value = match[1];
                    if (score > me.matchScore) {
                        fieldMapping = {
                            source: value
                        };
                    }
                }
                // 2.4
                if (!fieldMapping && fieldCls.defaultValue) {
                    fieldMapping = {
                        value: fieldCls.defaultValue
                    };
                }
            }
            newMapping[dataIndex] = fieldMapping;
        });
        // 3
        if (!dontSave) {
            newMapping = this.setMapping(newMapping, suppressEvent);
        }
        // 4
        return newMapping;
    },
    /**
	 * @method getMappedRecords [description]

	 * @return {void}
	 */
    getMappedRecords: function() {
        var me = this,
            rawData = me.rawData,
            data = me.getData(rawData),
            root = me.getRoot(data),
            records = [];
        if (root) {
            records = me.extractData(root);
        }
        return records;
    },
    /**
	 * @accessor buildExtractors
	 * @hide
	 */
    buildExtractors: Ext.emptyFn,
    /**
	 * @accessor getIdProperty
	 * @hide
	 */
    getIdProperty: Ext.emptyFn,
    /**
	 * @accessor getId
	 * @hide
	 */
    getId: Ext.emptyFn,
    /**
	 * @accessor buildRecordDataExtractor
	 * @hide
	 */
    buildRecordDataExtractor: Ext.emptyFn,
    /**
	 * @accessor
	 * @hide
	 */
    createFieldAccessExpression: Ext.emptyFn,
    /**
	 * @accessor returns whether reading was successful.
	 * @param  {Object} root The root.
	 * @return {Boolean} success
	 */
    getSuccess: function(root) {
        return root.length > 0;
    },
    /**
	 * @accessor getCount returns the number of records read
	 * @param  {Object} root The raw data read.
	 * @return {Number} root.length
	 */
    getCount: function(root) {
        return root.length;
    },
    /**
	 * @accessor getTotal returns the number of records read
	 * @alias getCount
	 * @param  {Object} root The raw data read.
	 * @return {Number} root.length
	 */
    getTotal: function(root) {
        return root.length;
    },
    /**
	 * @protected
	 * @template
	 * @abstract
	 * @method read Read data from a file.
	 */
    /**
	 * @method convertRecordData
	 *         Reads data from a source object, and writes the converted data to dest.
	 *
	 * @param  {Object} dest
	 *         The object to write the converted data to.
	 * @param  {Object} source
	 *         The object to read the data from.
	 * @param  {Ext.data.Model} record
	 *         The data object containing the Model as read so far by the Reader.
	 *         Note that the Model may not be fully populated at this point as
	 *         the fields are read in the order that they are defined in your fields array.
	 *
	 * @return {void}
	 */
    convertRecordData: function(dest, source, record) {
        var me = this,
            fields = me.getModel().getFields();
        Ext.Array.each(fields, function(field, idx) {
            var name = field.name;
            if (name === 'id') {
                return;
            }
            dest[name] = this.readField(field, record, name);
        }, this);
    },
    /**
	 * @method readRecords
	 * @param  {Object} data The raw data to read records from
	 * @return {Ext.data.ResultSet}      The records read.
	 */
    readRecords: function(data) {
        var record = Ext.Array.from(data)[0] || {},
            proxy = this.proxy || {},
            store = proxy.store || {};
        this.rawData = data;
        this.rawHeaders = Ext.Object.getKeys(record);
        this.rawHeadersFuzzySet = new window.FuzzySet(this.rawHeaders);
        if (this.autoCreateModelFromHeader || proxy.autoCreateModelFromHeader) {
            var fields = Ext.Array.map(this.rawHeaders, function(header) {
                    return {
                        name: header
                    };
                });
            var model = Ext.define('Ext.data.Store.ImplicitModel-' + Ext.id(), {
                    extend: 'Ext.data.Model',
                    fields: fields
                });
            this.model = model;
            proxy.model = model;
            if (proxy.store) {
                proxy.store.model = model;
            }
        }
        if (this.autoGuessMapping || (typeof this.autoGuessMapping === 'undefined' && store.autoGuessMapping)) {
            this.guessMapping();
        }
        return this.callParent(arguments);
    },
    /**
	 * @method readPacket
	 *         Reads a packet of data.
	 * @param  {String|Object} packet 	A binary packet to read.
	 * @return {Object} 				The data read from the packet.
	 */
    readPacket: function(packet) {
        return this.read(packet.getText(), {
            type: 'binary'
        });
    },
    defaultRecordCreator: function() {
        var record = this.callParent(arguments);
        delete record.data.id;
        return record;
    },
    extractModelData: function(raw, fieldExtractorInfo) {
        var me = this,
            mapping = this.getMapping(),
            Model = this.getModel(),
            fields = Model.getFields(),
            data = {};
        Ext.Array.each(fields, function(field) {
            var name = field.name;
            data[name] = me.readField(field, raw, name);
        });
        return data;
    },
    readField: function(field, record, name) {
        name = name || field.name;
        var mapping = this.getMapping(),
            fieldMapping = mapping[name],
            value;
        if (fieldMapping && typeof fieldMapping !== 'object') {
            fieldMapping = {
                source: fieldMapping
            };
        }
        var mappingType = Ext.Object.getKeys(fieldMapping)[0],
            mappingValue = Ext.Object.getValues(fieldMapping)[0];
        if (mappingType === 'value') {
            value = mappingValue;
        } else {
            value = record[mappingValue || name];
        }
        if (typeof value === 'undefined' || value === null) {
            if (field.defaultValue) {
                value = field.defaultValue;
            }
        }
        if (field.convert) {
            value = field.convert(value, record);
        }
        return value;
    }
});

/**
 * @class sl.data.file.reader.Csv
 * The CSV reader is used to read data in CSV format. This usually happens as a
 * result of loading a Store - for example we might create something like this:
 *
 *    	var store = this.getStore();
 *
 *		Ext.Msg.prompt('Load CSV', 'Paste CSV file here', function(btn, data) {
 *			if (btn !== 'ok') {
 *				return;
 *			}
 *
 *			// set store reader to csv
 *			store.getProxy().setReader('file.csv');
 *
 *			// and load the new data
 *			store.loadRawData(data);
 *		}, this, true, store.rawData);
 *
 * @extends {sl.data.file.reader.FileReader}
 * @alias reader.file.csv
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.reader.Csv', {
    extend: 'sl.data.file.reader.FileReader',
    alias: 'reader.file.csv',
    format: 'text',
    /**
	 * @private
	 * @property lineEnding
	 * The lineEnding the reader will use to split the data into lines
	 * @type {String}
	 */
    lineEnding: null,
    /**
	 * @private
	 * @property delimiter
	 * The delimiter the reader will use to split the lines into fields
	 * @type {String}
	 */
    delimiter: null,
    /**
	 * @property lineEndings
	 * Possible values for the line endings, they are tried in-order by {@link #guessLineEnding}.
	 * @type {Array}
	 */
    lineEndings: [
        '\r\n',
        '\r',
        '\n'
    ],
    /**
	 * @property delimiters
	 * Possible values for the delimiters, they are tried in-order by {@link #guessLineEnding}.
	 * @type {Array}
	 */
    delimiters: [
        ',',
        ';',
        '\t'
    ],
    /**
	 * @method read
	 * Read raw csv data into a {@link Ext.data.ResultSet result set }
	 *
	 * @param  {string} data Raw data to read.
	 * @return {Ext.data.ResultSet} The resulting dataset
	 */
    read: function(data) {
        var lineEnding = this.lineEnding || this.guessLineEnding(data),
            delimiter = this.delimiter || this.guessDelimiter(data, lineEnding),
            parser, error;
        data = this.alwaysTrailingLineEnding(data, lineEnding);
        try {
            data = window.CSV.parse(data, {
                header: true,
                line: lineEnding,
                delimiter: delimiter
            });
            return this.callParent(arguments);
        } catch (e) {
            error = new Ext.data.ResultSet({
                total: 0,
                count: 0,
                records: [],
                success: false,
                message: e.message
            });
            this.fireEvent('exception', this, data, error);
            console.error('Unable to parse the provided CSV: ' + e.message);
            return error;
        }
    },
    /**
	 * @method guessLineEnding
	 * Guess the line ending character for the supplied data.
	 *
	 * @param  {string} data Raw data to guess from.
	 * @return {string} The guessed line ending.
	 */
    guessLineEnding: function(data) {
        var lineEndings = this.lineEndings,
            lineEndingsRegExp = new RegExp('(' + lineEndings.join('|') + ')', 'g'),
            matches = data.match(lineEndingsRegExp),
            maxIndex = 0,
            max = 0,
            lineEndingsCounts = Ext.Array.map(lineEndings, function(lineEnding, idx) {
                var count = 0;
                Ext.Array.forEach(matches, function(lineEndingMatch) {
                    if (lineEnding === lineEndingMatch) {
                        count++;
                    }
                });
                if (count > max) {
                    maxIndex = idx;
                    max = count;
                }
                return count;
            });
        return lineEndings[maxIndex];
    },
    /**
	 * @method guessDelimiter
	 * Guess the delimiter character for the supplied data.
	 *
	 * @param  {string} data Raw data to guess from.
	 * @return {string} The guessed delimiter.
	 */
    guessDelimiter: function(data, lineEnding) {
        var delimiters = this.delimiters,
            delimiterRegExps = Ext.Array.map(delimiters, function(delimiter) {
                return new RegExp(delimiter, 'g');
            }),
            prevDelimiterCount = [],
            lines = data.split(lineEnding);
        Ext.each(lines, function(line) {
            var delimiterCount = Ext.Array.map(delimiterRegExps, function(delimiterRegExp) {
                    return (line.match(delimiterRegExp) || []).length;
                });
            if (Ext.Array.max(delimiterCount) > 0 && Ext.Array.equals(prevDelimiterCount, delimiterCount)) {
                return false;
            }
            prevDelimiterCount = delimiterCount;
        });
        var max = Ext.Array.max(prevDelimiterCount),
            maxIndex = Ext.Array.indexOf(prevDelimiterCount, max),
            delimiter = delimiters[maxIndex];
        return delimiter;
    },
    /**
	 * @method alwaysTrailingLineEnding
	 * Ensure the data ends with a trailing line ending. This method doesn't
	 * append an extra line ending if the data already ends in the line ending.
	 *
	 * @param  {string} data Raw data to read.
	 * @return {string} Raw data ending with line ending.
	 */
    alwaysTrailingLineEnding: function(data, lineEnding) {
        var len = lineEnding.length;
        if (data.slice(-len) !== lineEnding) {
            data += lineEnding;
        }
        return data;
    }
});

/**
 * @class sl.data.file.reader.Xls
 * The XLS reader is used to read data in XLS format. This usually happens as a
 * result of loading a Store - for example we might create something like this:
 *
 *    	Ext.define('User', {
 *    		extend: 'Ext.data.Model',
 *	     	fields: ['id', 'name', 'email']
 *	    });
 *
 *     	var store = Ext.create('Ext.data.Store', {
 *      	model: 'User',
 *       	proxy: {
 *	        	type: 'ajax',
 *	         	url : 'users.xls',
 *	          		reader: {
 *	            		type: 'xls',
 *	              		record: 'user',
 *	                	root: 'users'
 *	                }
 *	        }
 *	    });
 *
 * The reader we set up is ready to read data from the server - it will accept
 * a string representing binary xls file with columns "id", "name" and "email"
 * as input.
 *
 * @extends {sl.data.file.reader.FileReader}
 * @alias {reader.file.xls}
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.reader.Xls', {
    extend: 'sl.data.file.reader.FileReader',
    alias: 'reader.file.xls',
    /**
	 * @protected
	 * @property parserFnName
	 * The name of the function to use for parsing the input.
	 * @type {Array}
	 */
    parserFnName: 'XLS',
    /**
	 * @method read
	 * @param  {String} data   		The binary data string to read.
	 * @param  {Object} config 		Additional config.
	 * @return {Ext.data.ResultSet} The resulting dataset.
	 */
    read: function(data, config) {
        Ext.applyIf(config || {}, this.readerConfig || {});
        config = Ext.applyIf(config, {
            type: this.format || this.proxy.format || 'binary'
        });
        var me = this,
            parser = window[me.parserFnName],
            wb = parser.read(data, config),
            records = [],
            success = true;
        wb.SheetNames.forEach(function(sheetName) {
            var roa = parser.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);
            if (roa.length > 0) {
                records = records.concat(roa);
            }
        });
        return this.callParent([
            records
        ]);
    }
});

/**
 * @class sl.data.file.reader.Xlsx
 * @extends {sl.data.file.reader.Xls}
 * @alias reader.file.xlsx
 *
 *
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.reader.Xlsx', {
    extend: 'sl.data.file.reader.Xls',
    alias: 'reader.file.xlsx',
    /**
	 * @protected
	 * @property {String} parserFnName
	 * The name of the function to use for parsing the input.
	 */
    parserFnName: 'XLSX'
});

/**
 * @class sl.data.file.writer.FileWriter
 *        A specialized writer for working with CSV and xlsx files.
 *
 * @extends { Ext.data.writer.Writer}
 * @alternateClassName sl.data.file.Writer
 * @alias writer.file
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.writer.FileWriter', {
    extend: 'Ext.data.writer.Writer',
    alternateClassName: [
        'sl.data.file.Writer'
    ],
    alias: 'writer.file',
    config: {
        nameProperty: 'mapping',
        writeAllFields: true,
        /**
		 * @cfg writeRecordId Set to true to include the records id field in the output.
		 * @type {Boolean=}
		 */
        writeRecordId: false
    },
    //
    /**
	 * @cfg model The {@link Ext.data.Model} to use.
	 * @type {Ext.data.Model}
	 */
    model: null,
    /**
	 * @cfg title The title of the file
	 * @type {String}
	 */
    title: null,
    /**
	 * @accessor Set the title of the file.
	 * @param {String} title
	 */
    setTitle: function(title) {
        this.title = title.substring(0, title.lastIndexOf('.'));
    },
    /**
	 * @accessor Returns the title of the file.
	 * @return {String}
	 */
    getTitle: function() {
        return this.title || '';
    },
    /**
	 * @method getRawColumns
	 *         Returns the columns of a set of data.
	 * @param  {Object} data The data to retrieve the columns from.
	 * @return {{dataIndex: String, text: String}}
	 */
    getRawColumns: function(data) {
        var head = Ext.isArray(data) && data.length > 0 ? data[0] : null,
            columns = [];
        if (head) {
            Ext.Array.each(head, function(item, key) {
                columns.push({
                    dataIndex: key,
                    text: key
                });
            });
        }
        return columns;
    },
    write: function() {
        return this.callParent(arguments);
    },
    getRecordData: function(record, operation) {
        var data = Ext.clone(record.data);
        delete data.id;
        return data;
    }
});

/**
 * @class sl.data.file.writer.Csv
 *        A writer for CSV files.
 *
 * @extends sl.data.file.writer.FileWriter
 * @alias writer.file.csv
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.writer.Csv', {
    extend: 'sl.data.file.writer.FileWriter',
    alias: 'writer.file.csv',
    /**
	 * @method  writerRecords Write records to the CSV file.
	 * @param  {Object} request
	 * @param  {Ext.data.Operation} [request.operation]
	 * @param  {Ext.data.Batch} [request.operation.batch] The batch to write to
	 * @param  {Object[]} data The records to write.
	 * @return {Object} request.
	 */
    writeRecords: function(request, data) {
        var operation = request.operation || request.getOperation(),
            batch = operation.batch || operation.getBatch(),
            packet = batch.packet,
            title = (batch.title || 'Data') + '.csv',
            result = window.CSV.encode(data, {
                header: true
            });
        this.setTitle(title);
        batch.packet.setText(result);
        batch.packet.setName(title);
        return request;
    },
    /**
	 * @method writeValue
	 *         Write a value to a particular field in a data set.
	 * @param  {Object} data  	The data to write to the field.
	 * @param  {Ext.data.Model} field The field to write to
	 * @return {void}
	 */
    writeValue: function(data, field) {
        var name = field[this.nameProperty];
        if (name === null) {
            name = field.name;
        }
        if (typeof data[name] === 'undefined' || data[name] === null) {
            data[name] = '';
        }
    }
});

/**
 * @class sl.data.file.writer.Xlsx
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.writer.Xlsx', {
    extend: 'sl.data.file.writer.FileWriter',
    alias: 'writer.file.xlsx',
    /**
	 * @method  writerRecords Write records to the xlsx file.
	 * @param  {Object} request
	 * @param  {Ext.data.Operation} [request.operation]
	 * @param  {Ext.data.Batch} [request.operation.batch] The batch to write to
	 * @param  {Object[]} data The records to write.
	 * @return {Object} request.
	 */
    writeRecords: function(request, data) {
        var operation = request.operation || request.getOperation(),
            batch = operation.batch || operation.getBatch(),
            wb,
            title = (batch.title || 'Data') + '.xlsx',
            columns = batch.columns || this.getRawColumns(data);
        this.setTitle(title);
        wb = {
            SheetNames: [
                this.getTitle()
            ],
            Sheets: {}
        };
        wb.Sheets[this.getTitle()] = this.createSheet(columns, data);
        var binary = window.XLSX.write(wb, {
                type: 'binary'
            });
        batch.packet.setText(binary);
        batch.packet.setName(title);
        return request;
    },
    /**
	 * @method writeValue
	 *         Write a value to a particular field in a data set.
	 * @param  {Object} value  	The value to write to the field.
	 * @return {void}
	 *
	 * STEWARTS CUSTOM CODE IS BASED ON v2.0.2
	 */
    writeValue: function(value) {
        var cell = {
                v: /** CUSTOM CODE TO REMOVE `null` FROM CELL **/
                Ext.isEmpty(value) ? '' : /**END CUSTOM CODE **/
                value
            };
        if (typeof cell.v === 'number') {
            cell.t = 'n';
        } else if (typeof cell.v === 'boolean') {
            cell.t = 'b';
        } else if (Ext.isDate(value)) {
            cell.t = 'n';
            cell.z = window.XLSX.SSF._table[14];
            cell.v = this.convertDate(cell.v);
        } else {
            cell.t = 's';
        }
        return cell;
    },
    createSheet: function(columns, data) {
        var me = this,
            ws = {};
        Ext.Array.each(columns, function(column, key) {
            ws[window.XLSX.utils.encode_cell({
                c: column.getVisibleIndex(),
                r: 0
            })] = {
                t: 's',
                v: column.text
            };
        });
        Ext.Array.each(data, function(record, row) {
            Ext.Array.each(columns, function(column) {
                ws[window.XLSX.utils.encode_cell({
                    c: column.getVisibleIndex(),
                    r: row + 1
                })] = me.writeValue(record[column.dataIndex]);
            });
        });
        ws['!ref'] = window.XLSX.utils.encode_range({
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: columns.length - 1,
                r: data.length
            }
        });
        return ws;
    },
    convertDate: function(v, date1904) {
        if (date1904) {
            v += 1462;
        }
        var epoch = Date.parse(v);
        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }
});

/**
 * @class sl.data.file.FileProxy
 *        Proxies are used by Stores to handle the loading and saving of
 *        {@link Ext.data.Model Model} data. Usually developers will not need to
 *        create or interact with proxies directly.
 *
 * @extends {Ext.data.proxy.Proxy}
 * @alias proxy.file
 *
 * @requires sl.data.file.Packet
 * @requires sl.data.file.reader.FileReader
 * @requires sl.data.file.reader.Csv
 * @requires sl.data.file.reader.Xls
 * @requires sl.data.file.reader.Xlsx
 * @requires sl.data.file.writer.FileWriter
 * @requires sl.data.file.writer.Csv
 * @requires sl.data.file.writer.Xlsx
 */
/**
 * @notArchitectComponent
 */
Ext.define('sl.data.file.FileProxy', {
    extend: 'Ext.data.proxy.Memory',
    alias: 'proxy.file',
    requires: [
        'sl.data.file.Packet',
        'sl.data.file.reader.FileReader',
        'sl.data.file.reader.Csv',
        'sl.data.file.reader.Xls',
        'sl.data.file.reader.Xlsx',
        'sl.data.file.writer.FileWriter',
        'sl.data.file.writer.Csv',
        'sl.data.file.writer.Xlsx'
    ],
    /**
	 * @cfg defaultReaderType Default type for the #reader.
	 * @type {String}
	 */
    defaultReaderType: 'file',
    /**
	 * @cfg defaultWriterType Default type for the #writer.
	 * @type {String}
	 */
    defaultWriterType: 'file',
    /**
	 * @cfg reader The {@type of {@link sl.data.file.reader.FileReader reader} to use.
	 * @type {String}
	 */
    reader: 'file',
    /**
	 * @cfg writer The type of {@link Ext.data.writer.Writer writer} to use.
	 * @type {String}
	 */
    writer: 'file',
    /**
	 * @cfg isSynchronous
	 * @type {Boolean}
	 */
    isSynchronous: false,
    /**
	 * @cfg binary Set to true if the output is supposed to be binary data.
	 * @type {Boolean}
	 */
    binary: true,
    /**
	 * @cfg format The format for the output.
	 * @type {"binary"|"text"|"base64"}
	 */
    format: 'binary',
    packet: null,
    /**
	 * @property autoCreateModelFromHeader
	 * Automatically create model from raw header. Used by the reader.
	 * @type {Boolean}
	 */
    autoCreateModelFromHeader: false,
    /**
	 * @method read
	 *         Read data from a data source. Returns false if the reading was
	 *         not succesful. This usually means the source was neither
	 *         blob, url or data.
	 *
	 * @param  {Object}   operation The data source.
	 * @param  {Function} callback  A callback function.
	 * @param  {Object}   scope     The scope for the callback function.
	 * @return {Boolean}            True iff reading was succesful.
	 */
    read: function(operation, callback, scope) {
        var me = this;
        operation.packet = me.getPacket();
        if (operation.config) {
            if (operation.config.blob) {
                operation.blob = operation.config.blob;
            }
            if (operation.config.url) {
                operation.url = operation.config.url;
            }
            if (operation.config.data) {
                operation.data = operation.config.data;
            }
        }
        if (operation.blob) {
            return me.readBlob.apply(me, arguments);
        } else if (operation.url) {
            return me.readUrl.apply(me, arguments);
        } else if (operation.data) {
            return me.readData.apply(me, arguments);
        } else if (me.data) {
            operation.data = me.data;
            operation.format = me.format || 'binary';
            return me.readData.apply(me, arguments);
        }
        console.error('Read operation without blob, url or data');
        return false;
    },
    /**
	 * @method readBlob Read data from a blob.
	 * @param  {{blob: Object, packet: sl.data.file.Packet}} operation The blob to read from.
	 * @return {void}
	 */
    readBlob: function(operation) {
        var me = this,
            args = arguments,
            blob = operation.blob,
            packet = operation.packet;
        delete operation.blob;
        packet.readBlob(blob, function() {
            me.readPacket.apply(me, args);
        });
    },
    /**
	 * @experimental
	 * @method readUrl Not yet implemented.
	 * @param  {String} operation The URL to read the data from.
	 * @return {void} Error('Not yet implemented.');
	 */
    readUrl: function(operation) {
        throw new Error('Not yet implemented.');
    },
    /**
	 * @method readData Read
	 * @param  {{format: String, packet: sl.data.file.Packet}} operation
	 *         The data source.
	 * @param  {Function} callback A callback function.
	 * @param  {Object} scope The scope for the callback function.
	 * @return {void}
	 */
    readData: function(operation, callback, scope) {
        var me = this,
            args = arguments,
            data = operation.data,
            format = operation.format,
            packet = operation.packet;
        delete operation.data;
        delete operation.format;
        packet.set(data, format);
        return me.readPacket.apply(me, args);
    },
    /**
	 * @method readPacket Read data from a {@link sl.data.file.Packet packet}.
	 * @param  {sl.data.file.Packet}   operation The packet to read from.
	 * @param  {Function} callback  A callback function.
	 * @param  {Object}   scope     The scope for the callback function.
	 * @return {void}
	 */
    readPacket: function(operation, callback, scope) {
        var me = this,
            reader = me.getReader();
        var resultSet = reader.readPacket(operation.packet);
        operation.setResultSet(resultSet);
        this.finishOperation(operation);
        Ext.callback(callback, scope || me, [
            operation
        ]);
    },
    /**
	 * @method create Call the #writer to export data.
	 * @param  {Object}   operation The data source
	 * @param  {Function} callback  A callback function.
	 * @param  {Object}   scope     The scope of the callback function.
	 * @return {void}
	 */
    create: function(operation, callback, scope) {
        var request = new Ext.data.Request({
                operation: operation,
                callback: callback,
                scope: scope
            });
        this.getWriter().write(request);
        this.finishOperation(operation);
        Ext.callback(callback, scope || this, [
            operation
        ]);
    },
    /**
	 * @method batch
	 * @inheritdoc
	 */
    batch: function(options) {
        options.batch = new Ext.data.Batch({
            proxy: this
        });
        options.batch.packet = Ext.create('sl.data.file.Packet');
        options.batch.title = options.title;
        options.batch.columns = options.columns;
        return this.callParent(arguments);
    },
    update: function(operation) {
        this.finishOperation(operation);
    },
    erase: function(operation) {
        this.finishOperation(operation);
    },
    /**
	 * @accessor setModel
	 * @param {Ext.data.Model} model The Model.
	 */
    setModel: function(model) {
        this.callParent(arguments);
        this.getReader().setModel(model);
        /**
		 * @event modelchange
		 * @param {sl.data.file.FileProxy} proxy The proxy that fired the event
		 * @param {Ext.data.Model} model The new model of the proxy
		 */
        this.fireEvent('modelchange', this, this.model);
    },
    /**
	 * @accessor setReader
	 *           Sets the reader and listen for its
	 *           {@link sl.data.file.reader.FileReader#event-mappingchange mappingchange} event.
	 */
    updateReader: function(reader) {
        this.callParent(arguments);
        if (reader && reader.onMappingChange) {
            reader.onMappingChange = Ext.Function.createSequence(reader.onMappingChange, this.onMappingChange, this);
        }
    },
    /**
	 * @method onMappingChange
	 *         Handler for when the reader changes it's mapping and fires an
	 *         {@link sl.data.file.reader.FileReader#event-mappingchange mappingchange event}
	 *
	 * @param  {Object} mapping 				 The new {@ink sl.data.file.reader.FileReader#mapping mapping}
	 * @param  {Object} records    				 The records from the reader.
	 * @return {void}
	 */
    onMappingChange: function(mapping, records) {
        /**
		 * @event mappingchange fired when the mapping of the proxy's #reader changes.
		 * @param {sl.data.file.FileProxy} this
		 * @param {Object} mapping
		 * @param {Object} records
		 */
        this.fireEvent('mappingchange', this, mapping, records);
    },
    /**
	 * @accessor getPacket Returns a new sl.data.file.Packet
	 * @return {sl.data.file.Packet}
	 */
    getPacket: function() {
        if (!this.packet) {
            this.setPacket(Ext.create('sl.data.file.Packet'));
        }
        return this.packet;
    },
    /**
	 * @accessor setPacket
	 * @param {sl.data.file.Packet} packet #packet
	 */
    setPacket: function(packet) {
        this.packet = packet;
        return this;
    },
    /**
	 * @accessor getMapping
	 * @return {Object} #mapping
	 */
    getMapping: function() {
        return this.getReader().getMapping();
    },
    /**
	 * @accessor setMapping
	 * @param {Object} mapping #mapping
	 * @param {Boolean=false} suppressEvent Suppress mappingchange event.
	 */
    setMapping: function(mapping, suppressEvent) {
        return this.getReader().setMapping(mapping, suppressEvent);
    },
    /**
	 * @method guessMapping
	 *         Delegate guessing the mapping of the data to the #reader.
	 *         See {@link sl.data.file.reader.FileReader#guessMapping}
	 *
	 * @return {Object} The guessed mapping.
	 */
    guessMapping: function() {
        return this.getReader().guessMapping();
    }
});

/**
 * @class sl.data.file.FileStore
 * @extends {Ext.data.Store}
 * @requires sl.data.file.FileProxy
 *
 * @mixin Ext.data.Store
 * @alias store.file
 *
 * A specialized {@link Ext.data.Store store} for working with data from files.
 *
 */
Ext.define('sl.data.file.FileStore', {
    extend: 'Ext.data.Store',
    alias: 'store.file',
    mixins: [
        'Ext.data.Store'
    ],
    requires: [
        'sl.data.file.FileProxy'
    ],
    /**
	 * @cfg defaultProxyType The default type of proxy to use.
	 * @type {String}
	 */
    defaultProxyType: 'file',
    /**
	 * @cfg proxy The type of proxy to use.
	 * @type {String}
	 */
    proxy: 'file',
    /**
	 * @cfg mapping The mapping to use to map the file data onto the #model.
	 * @type {Object}
	 */
    mapping: null,
    /**
	 * @cfg autoGuessMapping Set to false to disable automatically guessing the
	 *      				 mapping of loaded files. Defaults to true.
	 * @type {Boolean=true}
	 */
    autoGuessMapping: true,
    /**
	 * @method constructor
	 * @param {Object} config
	 * @param {Ext.data.Model} [config.model] The model to use for this stores data.
	 * @param {Ext.data.Model[]} [config.data] Initial data to load.
	 * @param {Mixed} [config.rawData] Initial raw data to load.
	 * @return {sl.data.file.FileStore}
	 */
    constructor: function(config) {
        config = config || {};
        this.callParent(arguments);
        if (config.mapping) {
            this.getProxy().setMapping(config.model);
        }
        if (config.model) {
            this.setModel(config.model);
        }
        if (config.data) {
            this.loadRawData(config.data, false, config.format || 'binary');
        }
        if (this.rawData) {
            this.loadRawData(this.rawData, false, config.format || 'binary');
        }
    },
    /**
	 * @method loadRawData
	 * @param {Object[]} data The CSV data you'd like to load into the Data store.
	 * @param  {Boolean} append Set to true if the data should be appended to the
	 *                          data already in the store.
	 * @param  {"binary"|"text"|"base64"} format The format of the data to read.
	 * @return {void}
	 */
    loadRawData: function(data, append, format) {
        this.getProxy().getReader().format = format;
        this.rawData = data;
        return this.callParent(arguments);
    },
    /**
	 * @method getNewRecords Returns the new records.
	 * @return {Ext.data.Model[]}
	 */
    getNewRecords: function() {
        return this.data.items;
    },
    /**
	 * @accessor setProxy Set the {@link sl.data.file.FileProxy proxy} for this store.
	 * @param {Object} proxy A config for the proxy.
	 */
    updateProxy: function(proxy) {
        if (proxy) {
            proxy.on('mappingchange', this.onMappingChange, this);
        }
    },
    /**
	 * @accessor setModel
	 * @param {Ext.data.Model} model
	 * @param {Boolean} dontSetOnProxy {@link sl.data.file.FileProxy#setModel Don't propagate} the setting to the #proxy.
	 */
    setModel: function(model, dontSetOnProxy) {
        this.model = model;
        if (!dontSetOnProxy && this.getProxy()) {
            this.getProxy().setModel(model);
        }
        this.fireEvent('modelchange', this, model);
    },
    /**
	 * @accessor getMapping
	 * @return {Object} {@link #mapping mapping}
	 */
    getMapping: function() {
        var proxy = this.getProxy();
        return proxy.getMapping.apply(proxy, arguments);
    },
    /**
	 * @accessor setMapping
	 * @param {Object} mapping
	 * @param {Boolean=false} suppressEvent Suppress mappingchange event.
	 */
    setMapping: function(mapping, suppressEvent) {
        return this.getProxy().setMapping(mapping, suppressEvent);
    },
    /**
	 * @method guessMapping
	 * @return {Object} Tries to guess the mapping from the data to the model.
	 *                  See {@link sl.data.file.reader.FileReader#guessMapping}
	 */
    guessMapping: function() {
        var proxy = this.getProxy();
        return proxy.guessMapping.apply(proxy, arguments);
    },
    /**
	 * @method onMappingChange Handler for when the proxy's mapping changes.
	 * @param  {Object} mapping The new mapping
	 * @param  {Ext.data.Model[]} records The data according to the new mapping
	 * @return {void}
	 */
    onMappingChange: function(proxy, mapping, records) {
        this.loadData(records);
        this.fireEvent('mappingchange', this, mapping, records);
    },
    /**
	 * @method bindDrop Handler for dropping files.
	 * @param  {HTMLElement} target The DOM element to listen to.
	 * @return {void}
	 */
    bindDrop: function(target) {
        var me = this,
            domElement = target.getEl().dom;
        domElement.ondrop = Ext.bind(function(target, event) {
            event.preventDefault();
            me.onDrop(target, event.dataTransfer.files);
        }, this, [
            target
        ], 0);
        this.onDragBind(target.getMaskTarget());
    },
    /**
	 * @method onDragBind Handler for when a file is dragged over an element.
	 * @param  {HTMLElement} maskable The HTML element to watch
	 * @return {void}
	 */
    onDragBind: function(maskable) {
        var curElement = null;
        document.ondragenter = function(event) {
            curElement = event.toElement;
            return false;
        }.bind(this);
        document.ondragleave = function(event) {
            if (curElement !== null) {
                curElement = null;
                return;
            }
            if (maskable.isMasked()) {
                maskable.unmask();
            }
            return false;
        }.bind(this);
        document.ondragover = function() {
            if (!maskable.isMasked()) {
                maskable.mask('Drag and drop files here to upload', '');
            }
            return false;
        }.bind(this);
        maskable.on('destroy', this.onDragUnbind, this);
    },
    /**
	 * @method  onDragUnbind Stop listening for drag events.
	 * @return {void}
	 */
    onDragUnbind: function() {
        document.ondragenter = null;
        document.ondragleave = null;
        document.ondragover = null;
    },
    /**
	 * @method destroy See #onDragUnbind.
	 * @return {void}
	 */
    destroy: function() {
        this.onDragUnbind();
    },
    /**
	 * @method onDrop Handler to process file drops.
	 * @param  {HTMLElement} target The HTML element the file was dropped on.
	 * @param  {Mixed[]} files The dropped files.
	 * @return {void}
	 */
    onDrop: function(target, files) {
        this.loadFiles(files);
        target.unmask();
    },
    /**
	 * @method loadFiles Loads the contents of an array of files into records.
	 *         			 See #loadFile
	 * @param  {Mixed} files The files to load.
	 * @return {void}
	 */
    loadFiles: function(files) {
        if (files.length) {
            this.loadFile(files[0]);
        }
    },
    /**
	 * @method loadFile Loads the contents of a file into records.
	 * @param  {Mixed} file The file to load.
	 * @return {void}
	 */
    loadFile: function(file) {
        var name = file.name,
            ext = 'csv',
            extIdx = name.lastIndexOf('.');
        if (extIdx !== -1) {
            ext = name.substring(extIdx + 1);
        }
        this.getProxy().setReader('file.' + ext);
        this.load({
            blob: file,
            format: 'binary'
        });
    },
    /**
	 * @method exportFile Exports a grid to a file
	 * @param  {Ext.grid.Panel} grid The grid to extract the data from
	 * @param  {String=} name The filename to export to, without extension. Optional.
	 * @param  {("csv"|"xlsx")=} ext The type of file to export. Defaults to "csv".
	 * @return {void}
	 */
    exportFile: function(grid, name, ext) {
        if (typeof ext !== 'undefined') {
            ext = 'file.' + ext;
        } else {
            ext = this.getProxy().getReader().type;
        }
        name = name || grid.title;
        this.getProxy().setWriter(ext);
        this.sync({
            title: name,
            columns: grid.columns,
            callback: function(batch) {
                batch.packet.save();
            }
        });
    }
});

/**
 * @class sl.data.validator.Any
 *
 * Validates that at least 1 of the fields has a value
 *
 * For example, if the fields are "Shop Number" and "Is Company?", one of them must have a value
 *
 * @notArchitectComponent
 */
Ext.define('sl.data.validator.Any', {
    extend: 'Ext.data.validator.Validator',
    mixins: {
        'presence': 'Ext.data.validator.Presence'
    },
    alias: 'data.validator.any',
    config: {
        /**
         * @cfg {String} message
         * The error message to return when the value is not specified.
         */
        message: '{0} must have AT LEAST ONE value',
        /**
         * @cfg {String/String[]} additionalFields
         * Other fields to compare against.
         * At least one of the fields (including parent field) must have a value
         */
        additionalFields: null,
        /**
         * @cfg {Boolean} allowFalse
         * `true` to allow `false` as a valid value.
         */
        allowFalse: false,
        /**
         * @cfg {String} messageNames
         * If defined, injects into {@link #cfg-message}
         */
        messageNames: null
    },
    validate: function(value, record) {
        var me = this,
            valid = me.getValidValues(value, record).length > 0;
        return ((valid === true) ? true : Ext.String.trim(Ext.String.format(me.getMessage(), me.getMessageNames())));
    },
    /**
     * @private
     * @param {Object} fieldValue The validator's value
     * @param {Ext.data.Model} record The record that contains additional fields to also test
     * @return {String[]} Array of values that pass {@link #method-isValueValid} test.
     */
    getValidValues: function(fieldValue, record) {
        var me = this,
            testValues = me.getAdditionalFieldValues(record).concat(fieldValue);
        return testValues.filter(function(val) {
            return me.isValueValid(val);
        });
    },
    /**
     * Tests if a value has a value.
     * Will return `false` if value is `false` and {@link #cfg-allowFalse} is disabled.
     * @private
     * @param {Object} value The value to test
     * @return {Boolean}
     */
    isValueValid: function(value) {
        var me = this,
            presenceValidate = me.mixins.presence.validate.bind(me),
            isValid;
        if (value === false && !me.getAllowFalse()) {
            isValid = false;
        } else {
            isValid = (presenceValidate(value) === true);
        }
        return isValid;
    }
});

/**
 * @class sl.data.validator.GreaterThan
 *
 * Validates that the field's value is greater number than any of the additional fields' values.
 *
 * For example, if the fields are "Stop Date", "Start Date" (addlField),
 * then the "Stop Date" must be greater than the "Start Date".
 *
 * If "Stop Date" is a number, but "Start Date" is empty/NaN, then returns `True`.
 *
 * If "Stop Date" is empty/NaN, but "Start Date" is a Number, then returns `True`.
 *
 * If both are empty/NaN, then return `True`.
 *
 * @notArchitectComponent
 */
Ext.define('sl.data.validator.GreaterThan', {
    extend: 'Ext.data.validator.Validator',
    alias: 'data.validator.greaterthan',
    config: {
        /**
         * @cfg {String} message
         * The error message to return when the value is not specified.
         */
        message: 'must be GREATER THAN {0}',
        /**
         * @cfg {String/String[]} additionalFields
         * Other fields to compare against
         */
        additionalFields: null,
        /**
         * @cfg {String} messageNames
         * If defined, injects into {@link #cfg-message}
         */
        messageNames: 'them',
        /**
         * @cfg {Boolean} allowEqual
         * If `true`, then matching values are valid
         */
        allowEqual: false
    },
    /**
     * @private
     */
    compare: function(val1, val2) {
        return (this.getAllowEqual() ? val1 >= val2 : val1 > val2);
    },
    validate: function(value, record) {
        var me = this,
            addlFields = Ext.Array.from(me.getAdditionalFields()),
            field = me.findField(record),
            isDateField = field ? field.isDateField : false,
            isNumberField = field ? field.isNumeric : false,
            isEmpty = Ext.isEmpty(value);
        if (isDateField || isNumberField) {
            valid = isEmpty || addlFields.every(function(field) {
                var testVal = record.get(field),
                    val1, val2;
                if (Ext.isEmpty(testVal)) {
                    isValid = true;
                } else {
                    if (isDateField) {
                        val1 = (new Date(value)).getTime();
                        val2 = (new Date(testVal)).getTime();
                    } else {
                        val1 = Number(value);
                        val2 = Number(testVal);
                    }
                    isValid = me.compare(val1, val2);
                }
                return isValid;
            });
            return ((valid === true) ? true : Ext.String.trim(Ext.String.format(me.getMessage(), me.getMessageNames())));
        } else {
            Ext.Error.raise({
                msg: '[ ' + this.$className + ' validator] Field must be a numberfield, integerfield or datefield'
            });
        }
    }
});

/**
 * @class sl.data.validator.LessThan
 *
 * Validates that the field's value is less number than any of the additional fields' values.
 *
 * For example, if the fields are "Start Date", "Stop Date" (addlField),
 * then the "Start Date" must be less than the "Stop Date".
 *
 * If "Start Date" is a number, but "Stop Date" is empty/NaN, then returns `True`.
 *
 * If "Start Date" is empty/NaN, but "Stop Date" is a Number, then returns `True`.
 *
 * If both are empty/NaN, then return `True`.
 *
 * @notArchitectComponent
 */
Ext.define('sl.data.validator.LessThan', {
    extend: 'sl.data.validator.GreaterThan',
    alias: 'data.validator.lessthan',
    config: {
        /**
         * @cfg {String} message
         * The error message to return when the value is not specified.
         */
        message: 'must be LESS THAN {0}'
    },
    /**
     * @private
     */
    compare: function(val1, val2) {
        return (this.getAllowEqual() ? val1 <= val2 : val1 < val2);
    }
});

/**
 * @class sl.data.validator.OneAndOnly
 *
 * Validates that only 1 field is set.  There must be a field set. If 0 or 2 fields have a value, it would fail validation.
 *
 * For example, if the fields are "Is Shop?", "Is Company?", "Is Vendor?",
 * only 1 of these fields can be set to `True`.
 *
 * If none is set, it fails validation.
 *
 * @notArchitectComponent
 */
Ext.define('sl.data.validator.OneAndOnly', {
    extend: 'sl.data.validator.Any',
    alias: 'data.validator.oneandonly',
    config: {
        /**
         * @cfg {String} message
         * The error message to return when the value is not specified.
         */
        message: 'must have ONE & ONLY ONE value between {0}',
        /**
         * @cfg {String} messageNames
         * If defined, injects into {@link #cfg-message}
         */
        messageNames: 'them'
    },
    validate: function(value, record) {
        var me = this,
            valid = me.getValidValues(value, record).length === 1;
        return ((valid === true) ? true : Ext.String.trim(Ext.String.format(me.getMessage(), me.getMessageNames())));
    }
});

/**
 * @class sl.data.validator.Only
 *
 * Validates that only 1 field is set.  No fields being set is also acceptable.
 *
 * For example, if the fields are "Is Shop?", "Is Company?", "Is Vendor?",
 * only 1 of these fields can be set to `true`.
 *
 * All fields being false may also being acceptable based on configs.
 *
 * @notArchitectComponent
 */
Ext.define('sl.data.validator.Only', {
    extend: 'sl.data.validator.Any',
    alias: 'data.validator.only',
    config: {
        /**
         * @cfg {String} message
         * The error message to return when the value is not specified.
         */
        message: 'must have ONLY one value between {0}',
        /**
         * @cfg {String} messageNames
         * If defined, injects into {@link #cfg-message}
         */
        messageNames: 'them'
    },
    validate: function(value, record) {
        var me = this,
            valid = me.getValidValues(value, record).length <= 1;
        return ((valid === true) ? true : Ext.String.trim(Ext.String.format(me.getMessage(), me.getMessageNames())));
    }
});

/**
 * @class sl.data.validator.Unique
 *
 * Validates that the given value is unique. No other record can have that value for that field
 *
 * For example, if the field is "Age", only 1 record can have the value `5`
 *
 * @notArchitectComponent
 */
Ext.define('sl.data.validator.Unique', {
    extend: 'Ext.data.validator.Validator',
    alias: 'data.validator.unique',
    config: {
        /**
         * @cfg {String} message
         * The error message to return when the value is not specified.
         */
        message: 'must be UNIQUE'
    },
    validate: function(value, record) {
        var me = this,
            field = me.findField(record),
            valid = true,
            name;
        if (!field) {
            Ext.Error.raise({
                msg: '[unique validator] Cannot find the field that is being validated'
            });
        }
        name = field.getName();
        valid = !(record.store.getRecords().some(function(r) {
            // exclude the current record &
            // compare original record's value to all others in its store
            return r !== record && sl.utils.areValuesEquivalent(r.get(name), value);
        }));
        return ((valid === true) ? true : me.getMessage());
    }
});

/**
 * @class sl.field.ComboBox
 */
Ext.define('sl.field.ComboBox', {
    extend: 'Ext.form.field.ComboBox',
    alias: [
        'widget.slcombo'
    ],
    requires: [
        'sl.data.CacheStore',
        'sl.panel.grid.GridEditorFunctions'
    ],
    uses: [
        'sl.panel.grid.GridRenderers'
    ],
    /**
     * @cfg {Boolean} [anyMatch=true]
     * @inheritdoc
     */
    anyMatch: true,
    /**
     * @cfg {String} [queryMode='local']
     * @inheritdoc
     */
    queryMode: 'local',
    /**
     * @cfg {String} [triggerAction='all']
     * @inheritdoc
     */
    triggerAction: 'all',
    /**
     * @cfg {Boolean} [forceSelection=true]
     * @inheritdoc
     */
    forceSelection: true,
    /**
     * @cfg {Boolean} [selectOnFocus=true]
     * @inheritdoc
     */
    selectOnFocus: true,
    /**
     * @cfg {Boolean} [typeAhead=true]
     * @inheritdoc
     */
    typeAhead: true,
    /**
     * @cfg {Number} [typeAheadDelay=500]
     * @inheritdoc
     */
    typeAheadDelay: 500,
    /**
     * @cfg {Number} [minChars=2]
     * @inheritdoc
     */
    minChars: 2,
    /**
     * @cfg {String} [valueField='ID'] (required)
     * @inheritdoc
     */
    valueField: 'ID',
    /**
     * @cfg {String} [displayField='**Required**'] (required)
     * @inheritdoc
     */
    /**
     * @cfg {String} rendererValueNotFoundText
     * When using a name/value combo, if the value passed to the renderer is not found in the store, rendererValueNotFoundText will
     * be displayed as the field text if defined.
     */
    rendererValueNotFoundText: 'Value Not Found',
    /**
     * @cfg {String} [gridDisplayField='']
     * Only used when combo box is a grid editor
     * This is the parent grid's (this.picker) field from a record that has the display text
     * The field it matches in the parent grid's record must contain the text that you want to show in the grid cell
     */
    gridDisplayField: '',
    /**
     * @cfg {Object} [storeConfig]
     * Shortcut config to automatically build a simple Cach√© Store
     * If it is set, then {@link #createStore} is called.
     * Uses the following properties: fields, autoLoad, CacheClassName, CacheQueryName, listeners
     */
    /**
     * @event clear
     * Fired when combo's value is cleared
     * @param {sl.field.ComboBox} combo
     */
    /**
     * @private
     */
    initComponent: function() {
        var me = this;
        // shortcut for building a simple combo store.  storeConfig must be defined correctly
        if (!Ext.Object.isEmpty(me.storeConfig)) {
            if (!Ext.isEmpty(me.store)) {
                console.error('[' + this.$className + '] Cannot have storeConfig & store both defined on the combo', {
                    combo: me,
                    store: me.store,
                    storeConfig: me.storeConfig
                });
            }
            me.store = me.createStore();
        }
        if (me.isGridEditor()) {
            me.gridValueField = me.gridValueField || (Ext.isFunction(me.getColumn) ? (me.getColumn() || {}).dataIndex : false);
            me.on({
                'select': me.onSelectInGrid,
                'clear': me.onClearInGrid
            });
        }
        me.callParent();
    },
    addBlankRecordToStore: function() {
        var me = this,
            store = me.getStore(),
            newRec;
        if (!store.isEmptyStore) {
            if ((Ext.isFunction(store.isLoaded) ? store.isLoaded() : true) && !store.loading) {
                newRec = store.createNewRecord();
                me.store.insert(0, newRec);
            }
        }
    },
    clearValue: function() {
        this.callParent(arguments);
        this.fireEvent('clear', this);
    },
    /**
     * @return {sl.data.CacheStore} Properly configured Combobox store
     */
    createStore: function() {
        var me = this,
            config = me.storeConfig || {},
            hasModel = !Ext.isEmpty(config.model) || false,
            autoLoad = Ext.isDefined(config.autoLoad) ? config.autoLoad : false,
            proxyConfig = {},
            store;
        if (config) {
            if (!hasModel) {
                me.fields = me.fields || config.fields || [];
                if (Ext.isArray(me.fields) && me.fields.length === 0) {
                    me.fields.push(me.displayField, me.valueField);
                }
            }
            proxyConfig.extraParams = Ext.apply({
                CacheClassName: config.CacheClassName,
                CacheQueryName: config.CacheQueryName,
                CacheCommandType: 2
            }, config.extraParams || {}) || {};
        }
        store = Ext.createByAlias('store.cachestore', Ext.apply({
            autoLoad: autoLoad,
            fields: me.fields,
            proxy: proxyConfig,
            listeners: config.listeners || {},
            autoStore: true
        }, config));
        if (store && !store.isLoading() && autoLoad) {
            store.load();
        }
        if (!hasModel) {
            store.updateModelIDProperty(config.clientIdProperty || me.valueField);
        }
        return store;
    },
    /**
     * if a combo is an editor field in a grid, then when a value is selected it will adjust a few properties and update the grid's record
     * @private
     */
    onSelectInGrid: function(combo, records, eOpts) {
        var gridRec, rec;
        records = Ext.Array.from(records) || [];
        if (records.length === 1) {
            rec = records[0];
            gridRec = combo.getActiveRecord();
            if (gridRec) {
                if (combo.gridDisplayField) {
                    gridRec.set(combo.gridDisplayField, rec.get(combo.displayField));
                }
                if (combo.getGridValueField()) {
                    gridRec.set(combo.getGridValueField(), rec.get(combo.valueField));
                }
            }
        } else {
            sl.consoleWarn('[' + this.$className + '] Feature not implemented for selecting multiple records', {
                combo: combo,
                records: records
            });
        }
    },
    /**
     * if a combo is an editor field in a grid, then when the field is cleared, adjust reset the corresponding fields on the grid's record
     * @private
     */
    onClearInGrid: function(combo) {
        var gridRec = combo.getActiveRecord(true),
            gridDisplayField, gridValueField;
        if (gridRec) {
            gridDisplayField = combo.gridDisplayField;
            gridValueField = combo.getGridValueField();
            if (gridDisplayField) {
                gridRec.set(gridDisplayField, '');
            }
            if (gridValueField) {
                gridRec.set(gridValueField, '');
            }
        }
    },
    /**
     * special configuration for how an ENTER key is handled in a grid
     * @private
     */
    onEnterKeyInGrid: function(combo, e, eOpts) {
        var grid = combo.getParentGrid(),
            editingPlugin = grid.getEditingPlugin();
        // move to next row if combo is not expanded showing store contents
        if (!combo.isExpanded && grid) {
            grid.getSelectionModel().onKeyEnter(editingPlugin, e);
        }
    },
    /**
     * Automatically converts value to rendered text
     *
     * See {@link Ext.grid.column.Column#cfg-renderer} for more information about parameters
     * @param {Object} value
     * @param {Object} metadata
     * @param {Ext.data.Model} record
     * @param {Number} rowIndex
     * @param {Number} colIndex
     * @param {Ext.data.Store} store
     * @param {Ext.view.View} view
     * @return {String} The HTML string to be rendered.
     */
    renderer: function(value, metadata, record, rowIndex, colIndex, store, view) {
        //noinspection UnnecessaryLocalVariableJS
        var originalValue = value,
            grid = this,
            column, editor;
        try {
            column = grid.getColumnAt(colIndex);
            editor = column.getColumnEditor();
            value = sl.panel.grid.GridRenderers.comboRenderer.apply(editor, arguments);
        } catch (error) {
            value = originalValue;
            console.error('[' + (editor || {}).$className || 'Component' + '] Renderer Error', {
                error: error,
                grid: grid,
                column: column,
                editor: editor,
                args: arguments
            });
        }
        return value;
    }
});

/**
 * @class sl.view.ComboGridKeyNav
 * @notArchitectComponent
 */
Ext.define('sl.view.ComboGridKeyNav', {
    extend: 'Ext.view.BoundListKeyNav',
    alias: 'view.navigation.combogrid',
    uses: [
        'Ext.grid.CellContext',
        'Ext.grid.CellContext'
    ],
    /**
     * Overwrite tweaks references so it will work with BoundListKeyNav's default functions
     */
    initKeyNav: function(view) {
        var me = this,
            picker = view.grid,
            pickerView = picker.getView();
        view.pickerField = picker.pickerField;
        picker.highlightItem = pickerView.highlightItem.bind(pickerView);
        picker.getNode = pickerView.getNode.bind(pickerView);
        me.position = new Ext.grid.CellContext(view);
        me.callParent(arguments);
    },
    /**
     * Overwrite so that it works with buffered renderer in grid
     */
    getPosition: function() {
        var me = this,
            position = Ext.apply({}, me.position, {
                view: this.view,
                record: this.record,
                column: this.view.pickerField.getPicker().getColumnAt(0),
                rowIdx: 0
            }),
            curIndex, view, dataSource;
        if (position.record && position.column) {
            view = position.view;
            dataSource = view.dataSource;
            curIndex = dataSource.indexOf(position.record);
            // The record may have been replaced by one with the same ID.
            if (curIndex === -1) {
                curIndex = dataSource.indexOfId(position.record.id);
                // If not with the same ID, at the same index if that is in range
                if (curIndex === -1) {
                    curIndex = position.rowIdx;
                    // If no record now at that index (even if its les than the totalCount, it may be a BufferedStore)
                    // then there is no focus position, and we must return null
                    if (!dataSource.getAt(curIndex)) {
                        curIndex = -1;
                    }
                }
                position.record = dataSource.getAt(curIndex);
            }
            // If the positioned record or column has gone away, we have no position
            if (curIndex === -1 || view.getVisibleColumnManager().indexOf(position.column) === -1) {
                position.setAll();
                me.record = me.column = me.recordIndex = me.columnIndex = null;
            } else {
                return position;
            }
        }
        return null;
    },
    /**
     * Overwrite kills process if the store is loading or is about to load
     */
    onKeyEnter: function(e) {
        var view = this.view,
            field = view.pickerField,
            store = field.getPickerStore();
        // if store is loading or has a pending load
        if (store.loading || (field.doQueryTask || {}).id) {
            return false;
        }
        return this.callParent(arguments);
    },
    onKeyUp: function(keyEvent) {
        var me = this,
            view = me.view,
            oldItemIdx = view.indexInStore(view.highlightedItem),
            newItemIdx = view.walkRows(oldItemIdx, -1),
            field, grid, store;
        if (oldItemIdx === newItemIdx) {
            // loop and go to last record (does not work with bufferred)
            field = view.pickerField;
            grid = field.getPicker();
            store = grid.getStore();
            newItemIdx = store.getAt(store.getCount() - 1);
        }
        me.setPosition(newItemIdx);
    },
    onKeyDown: function(keyEvent) {
        var me = this,
            view = me.view,
            oldItemIdx = view.indexInStore(view.highlightedItem),
            newItemIdx = view.walkRows(oldItemIdx, 1);
        if (oldItemIdx === newItemIdx) {
            // loop and go back to first record (does not work with bufferred)
            newItemIdx = 0;
        }
        me.setPosition(newItemIdx);
    },
    /**
     * Select all text in field
     */
    onSelectAllKeyPress: function(keyEvent) {
        var view = this.view,
            field = view.pickerField;
        field.selectText();
    },
    /**
     * Home button only moves cursor in the field, does not affect grid row selection
     * Function is required, else `HOME` will select from grid as well as move cursor
     */
    onKeyHome: Ext.returnTrue,
    /**
     * End button only moves cursor in the field, does not affect grid row selection
     * Function is required, else `END` will select from grid as well as move cursor
     */
    onKeyEnd: Ext.returnTrue,
    /**
     * Go one page down from the lastFocused record in the grid.
     * Adjusted from Ext.grid.NavigationModel's
     */
    onKeyPageDown: function(keyEvent) {
        var me = this,
            view = me.view,
            field = view.pickerField,
            grid = field.getPicker(),
            gridView = grid.getView(),
            rowsVisible = me.getRowsVisible(),
            newIdx, newRecord;
        if (rowsVisible) {
            // If rendering is buffered, we cannot just increment the row - the row may not be there
            // We have to ask the BufferedRenderer to navigate to the target.
            // And that may involve asynchronous I/O, so must postprocess in a callback.
            if (gridView.bufferedRenderer) {
                newIdx = Math.min(me.recordIndex + rowsVisible, gridView.dataSource.getCount() - 1);
                me.lastKeyEvent = keyEvent;
                gridView.bufferedRenderer.scrollTo(newIdx, false, me.afterBufferedScrollTo, me);
            } else {
                newRecord = view.walkRecs(me.record, rowsVisible);
                me.setPosition(newRecord, null, keyEvent);
            }
        }
    },
    /**
     * Go one page up from the lastFocused record in the grid.
     * Adjusted from Ext.grid.NavigationModel's
     */
    onKeyPageUp: function(keyEvent) {
        var me = this,
            view = me.view,
            field = view.pickerField,
            grid = field.getPicker(),
            gridView = grid.getView(),
            rowsVisible = me.getRowsVisible(),
            newIdx, newRecord;
        if (rowsVisible) {
            // If rendering is buffered, we cannot just increment the row - the row may not be there
            // We have to ask the BufferedRenderer to navigate to the target.
            // And that may involve asynchronous I/O, so must postprocess in a callback.
            if (gridView.bufferedRenderer) {
                newIdx = Math.max(me.recordIndex - rowsVisible, 0);
                me.lastKeyEvent = keyEvent;
                gridView.bufferedRenderer.scrollTo(newIdx, false, me.afterBufferedScrollTo, me);
            } else {
                newRecord = view.walkRecs(me.record, -rowsVisible);
                me.setPosition(newRecord, null, keyEvent);
            }
        }
    },
    /**
     * Copied from Ext.grid.NavigationModel
     * Needed for PageUp/PageDown keys
     */
    afterBufferedScrollTo: function(newIdx, newRecord) {
        this.setPosition(newRecord, null, this.lastKeyEvent, null, !this.lastKeyEvent);
    },
    getRowsVisible: function() {
        var rowsVisible = false,
            view = this.view,
            firstRow = view.all.first(),
            rowHeight, gridViewHeight;
        if (firstRow) {
            rowHeight = firstRow.getHeight();
            gridViewHeight = view.el.getHeight();
            rowsVisible = Math.floor(gridViewHeight / rowHeight);
        }
        return rowsVisible;
    },
    setPosition: function(recordIndex, keyEvent, suppressEvent, preventNavigation) {
        var me = this,
            view = me.view,
            selModel = view.getSelectionModel(),
            dataSource = view.dataSource,
            newRecord, newRecordIndex;
        /////////////////////////////////////////
        // CUSTOM CODE
        //
        var field = view.pickerField,
            grid = field.getPicker(),
            gridView = grid.getView();
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        if (recordIndex == null || !view.all.getCount()) {
            me.record = me.recordIndex = null;
        } else {
            if (typeof recordIndex === 'number') {
                newRecordIndex = Math.max(Math.min(recordIndex, dataSource.getCount() - 1), 0);
                newRecord = dataSource.getAt(recordIndex);
            }
            // row is a Record
            else if (recordIndex.isEntity) {
                newRecord = dataSource.getById(recordIndex.id);
                newRecordIndex = dataSource.indexOf(newRecord);
                // Previous record is no longer present; revert to first.
                if (newRecordIndex === -1) {
                    newRecord = dataSource.getAt(0);
                    newRecordIndex = 0;
                }
            }
            // row is a grid row
            else if (recordIndex.tagName) {
                newRecord = view.getRecord(recordIndex);
                newRecordIndex = dataSource.indexOf(newRecord);
            } else {
                newRecord = newRecordIndex = null;
            }
        }
        // No movement; just ensure the correct item is focused and return early.
        // Do not push current position into previous position, do not fire events.
        // We must check record instances, not indices because of store reloads (combobox remote filtering).
        // If there's a new record, focus it.
        if (newRecord === me.record) {
            return me.focusPosition(me.recordIndex);
        }
        if (me.item) {
            me.item.removeCls(me.focusCls);
        }
        // Track the last position.
        // Used by SelectionModels as the navigation "from" position.
        me.previousRecordIndex = me.recordIndex;
        me.previousRecord = me.record;
        me.previousItem = me.item;
        // Update our position
        me.recordIndex = newRecordIndex;
        me.record = newRecord;
        // Prevent navigation if focus has not moved
        preventNavigation = preventNavigation || me.record === me.lastFocused;
        // Maintain lastFocused, so that on non-specific focus of the View, we can focus the correct descendant.
        if (newRecord) {
            /////////////////////////////////////////
            // CUSTOM CODE
            //   if buffered, scroll into position then focus
            //
            if (gridView.bufferedRenderer) {
                gridView.bufferedRenderer.scrollTo(Math.min(me.recordIndex, dataSource.getCount() - 1), false, function() {
                    me.focusPosition(me.recordIndex);
                }, me);
            } else {
                me.focusPosition(me.recordIndex);
            }
        } else //
        // END CUSTOM CODE
        /////////////////////////////////////////
        {
            me.item = null;
        }
        if (!suppressEvent) {
            selModel.fireEvent('focuschange', selModel, me.previousRecord, me.record);
        }
        // If we have moved, fire an event
        if (!preventNavigation && keyEvent) {
            me.fireNavigateEvent(keyEvent);
        }
    }
});

/**
* @class sl.field.ComboGrid
*/
Ext.define('sl.field.ComboGrid', {
    extend: 'sl.field.ComboBox',
    alias: [
        'widget.combogrid'
    ],
    mixins: [
        'sl.field.utils.ValueToDisplayHash'
    ],
    requires: [
        'sl.view.ComboGridKeyNav'
    ],
    uses: [
        'Ext.util.Format',
        'Ext.view.Table',
        'sl.utils.Toast'
    ],
    /**
     * @cfg {Boolean} selectOnFocus
     * @inheritdoc
     */
    selectOnFocus: false,
    /**
     * @cfg {String} queryMode
     * @inheritdoc
     */
    queryMode: 'remote',
    /**
     * @cfg {Number} queryDelay
     * @inheritdoc
     */
    queryDelay: 750,
    /**
     * @cfg {String} triggerAction
     * @inheritdoc
     */
    triggerAction: 'query',
    /**
     * @cfg {Boolean} typeAhead
     * @inheritdoc
     */
    typeAhead: false,
    /**
     * @cfg {Boolean} matchFieldWidth
     * @inheritdoc Ext.form.field.Picker#matchFieldWidth
     */
    matchFieldWidth: false,
    /**
     * @cfg {Number} minChars
     * @inheritdoc
     */
    minChars: 0,
    /**
     * @cfg {String} minCharsMsg
     * Template for toast message when the {@link #minChars minimum number of characters}
     * has not been met.
     */
    minCharsMsg: 'You must enter at least {0} character{1}',
    /**
     * @cfg {Boolean} disableAutoRecordSort
     * If `false` will sort & rank records when the store's `datachanged`
     * event fires based on best-match algorithm.
     */
    disableAutoRecordSort: false,
    /**
     * @cfg {Boolean} disableSingleRecordAutoSelect
     * If `false`, will auto-select & collapse picker if only 1 record is found after XHR search
     */
    disableSingleRecordAutoSelect: false,
    /**
     * @cfg {Boolean} disableSearchOnEnter
     * If `false`, enter key press will immediately trigger search if user has typed anything
     */
    disableSearchOnEnter: false,
    /**
     * @cfg {Number} defaultPickerWidth
     * Default width of drop-down picker
     */
    defaultPickerWidth: 800,
    /**
     * @cfg {Number} defaultPickerHeight
     * Default height of drop-down picker
     */
    /**
     * @cfg {Object} defaultListConfig
     * Set of options that will be used as defaults for the user-configured {@link #listConfig} object.
     */
    defaultListConfig: {
        minWidth: 70,
        shadow: 'frame'
    },
    /**
     * @cfg {Object} [pickerViewConfig]
     * Set of options that will be used for picker's View
     */
    /**
     * @cfg {String} gridXType
     * The {@link Ext.Component#cfg-xtype xtype} of the grid to be used.
     *
     * Defaults to generic grid and will require {@link #cfg-columns} to be defined.
     * Overwrite to use a custom grid definition.
     */
    gridXType: 'displaygrid',
    /**
     * @cfg {Array} [columns]
     * @inheritdoc Ext.grid.Panel#columns
     */
    /**
     * @cfg {Boolean} disableHighlightMatching
     * When `false`, it will automatically update the {@link Ext.data.Store#searchedText store's searchedText},
     * which will highlight any matches in the grid picker using the
     * {@link sl.panel.grid.GridRenderers#method-highlightMatchesRenderer column's highlightMatchesRenderer renderer}.
     */
    disableHighlightMatching: false,
    /**
     * @cfg {Boolean} clearQueryOnRowChange
     * If `true`, it will not use cached queries unless it is on the same grid record as the previous query.
     * This is especially helpful when store's loader has row-specific params
     */
    clearQueryOnRowChange: false,
    /**
     * @cfg {Boolean} disableQueryTextConvert
     * If `false`, it will auto convert the query text before sending it to Cach√©.
     * This is done specifically to fix problems when the rawValue is a concatenated value
     * that Cach√© will find a match for, like when `ItemDisplayDesc` is `{SKU} + {Description}`.
     */
    disableQueryTextConvert: false,
    /**
     * @cfg {RegExp/String} queryTextSeparator
     * Defines how the query text is divided when {@link #disableQueryTextConvert} is `false`.
     * The default RegExp object will split on every character that is not:
     * alphanumeric, whitespace, or some punctuation that is not used to divide different categories
     */
    queryTextSeparator: /[^\w\s'.]/,
    /**
     * @cfg {String} [customNoMatchesMessage]
     * Message to mask search grid with when no matches were found.
     *
     * Defaults to 'No Matches'
     */
    triggers: {
        clearTrigger: {
            cls: Ext.baseCSSPrefix + "form-clear-trigger",
            weight: -1,
            // positions this custom trigger ahead of default ComboBox trigger.
            handler: function() {
                this.onClearTriggerClick();
            }
        }
    },
    initComponent: function(config) {
        var me = this;
        me.callParent(arguments);
        // initialize value-to-display hash
        me.getValueToDisplayHash();
        me.getParams = Ext.Function.createSequence(me.getParams, function(queryString) {
            var store = me.store;
            // saves the Cach√© query word, so that the search renderer can work
            if (store && Ext.isFunction(store.setSearchedText) && !me.disableHighlightMatching) {
                store.setSearchedText(queryString);
            }
        }, me);
        me.on({
            'beforequery': {
                priority: 1000,
                fn: me.onBeforeQuery
            },
            'specialkey': (!me.disableSearchOnEnter ? function(field, e) {
                if (e.getKey() == e.ENTER) {
                    me.forceQueryTaskExecute();
                }
            } : Ext.emptyFn)
        });
        me.showMinCharMessage = Ext.Function.createThrottled(me.showMinCharMessage, 2500);
    },
    // wait 2.5 secs before showing warning again
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PROBLEM AREAS INHERITED FROM COMBO BOX ///////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-doSetValue
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    doSetValue: function(value, /* private for use by addValue */
    add) {
        var me = this,
            store = me.getStore(),
            Model = store.getModel(),
            matchedRecords = [],
            valueArray = [],
            autoLoadOnValue = me.autoLoadOnValue,
            isLoaded = store.getCount() > 0 || store.isLoaded(),
            pendingLoad = store.hasPendingLoad(),
            unloaded = autoLoadOnValue && !isLoaded && !pendingLoad,
            forceSelection = me.forceSelection,
            selModel = me.pickerSelectionModel,
            displayIsValue = me.displayField === me.valueField,
            isEmptyStore = store.isEmptyStore,
            lastSelection = me.lastSelection,
            i, len, record, dataObj, valueChanged, key,
            /* CUSTOM CODE */
            lookingForValue = !Ext.isEmpty(value),
            hasRecInStore = (lookingForValue && isLoaded && store.findNewInstanceOfRecords(value).length > 0),
            hasValueInStore = (lookingForValue && isLoaded && me.findRecordByValue(value) !== false),
            storeHasCurrentValue = (hasRecInStore || hasValueInStore),
            hash = Ext.isFunction(me.getValueToDisplayHash) ? me.getValueToDisplayHash() : false,
            rawValue;
        /* END CUSTOM CODE */
        if (add && !me.multiSelect) {
            Ext.Error.raise('Cannot add values to non multiSelect ComboBox');
        }
        // Called while the Store is loading or we don't have the real store bound yet.
        // Ensure it is processed by the onLoad/bindStore.
        // Even if displayField === valueField, we still MUST kick off a load because even though
        // the value may be correct as the raw value, we must still load the store, and
        // upon load, match the value and select a record sop we can publish the *selection* to
        // a ViewModel.
        if (pendingLoad || unloaded || !isLoaded || isEmptyStore || /* CUSTOM CODE */
        (!storeHasCurrentValue && (lookingForValue || me.queryMode !== 'remote'))) /* END CUSTOM CODE */
        {
            // If they are setting the value to a record instance, we can
            // just add it to the valueCollection and continue with the setValue.
            // We MUST do this before kicking off the load in case the load is synchronous;
            // this.value must be available to the onLoad handler.
            if (!value.isModel) {
                if (add) {
                    me.value = Ext.Array.from(me.value).concat(value);
                } else {
                    me.value = value;
                }
                me.setHiddenValue(me.value);
                /////////////////////////////////////////
                // CUSTOM CODE
                //  use hash cache instead of depending on store to have matching record
                //
                if (hash) {
                    // the hash may have cached the raw value already, so we don't have to rely on the store
                    rawValue = hash.get(value);
                }
                // If we know that the display value is the same as the value, then show it.
                // A store load is still scheduled so that the matching record can be published.
                me.setRawValue(displayIsValue ? value : rawValue);
                if (!Ext.isEmpty(rawValue)) {
                    return me;
                }
            }
            //
            // END CUSTOM CODE
            /////////////////////////////////////////
            // Kick off a load. Doesn't matter whether proxy is remote - it needs loading
            // so we can select the correct record for the value.
            //
            // Must do this *after* setting the value above in case the store loads synchronously
            // and fires the load event, and therefore calls onLoad inline.
            //
            // If it is still the default empty store, then the real store must be arriving
            // in a tick through binding. bindStore will call setValueOnData.
            if ((unloaded || /*CUSTOM CODE */
            !storeHasCurrentValue && (lookingForValue || me.queryMode !== 'remote')) && /*END CUSTOM CODE*/
            !isEmptyStore) {
                store.load();
            }
            // If they had set a string value, another setValue call is scheduled in the onLoad handler.
            // If the store is the defauilt empty one, the setValueOnData call will be made in bindStore
            // when the real store arrives.
            if (!value.isModel || isEmptyStore) {
                return me;
            }
        }
        // This method processes multi-values, so ensure value is an array.
        value = add ? Ext.Array.from(me.value).concat(value) : Ext.Array.from(value);
        // Loop through values, matching each from the Store, and collecting matched records
        for (i = 0 , len = value.length; i < len; i++) {
            record = value[i];
            // Set value was a key, look up in the store by that key
            if (!record || !record.isModel) {
                record = me.findRecordByValue(key = record);
                // The value might be in a new record created from an unknown value (if !me.forceSelection).
                // Or it could be a picked record which is filtered out of the main store.
                // Or it could be a setValue(record) passed to an empty store with autoLoadOnValue and aded above.
                if (!record) {
                    record = me.valueCollection.find(me.valueField, key);
                }
            }
            // record was not found, this could happen because
            // store is not loaded or they set a value not in the store
            if (!record) {
                // If we are allowing insertion of values not represented in the Store, then push the value and
                // create a new record to push as a display value for use by the displayTpl
                if (!forceSelection) {
                    // We are allowing added values to create their own records.
                    // Only if the value is not empty.
                    if (!record && value[i]) {
                        dataObj = {};
                        dataObj[me.displayField] = value[i];
                        if (me.valueField && me.displayField !== me.valueField) {
                            dataObj[me.valueField] = value[i];
                        }
                        record = new Model(dataObj);
                    }
                }
                // Else, if valueNotFoundText is defined, display it, otherwise display nothing for this value
                else if (me.valueNotFoundRecord) {
                    record = me.valueNotFoundRecord;
                }
            }
            // record found, select it.
            if (record) {
                matchedRecords.push(record);
                valueArray.push(record.get(me.valueField));
            }
        }
        // If the same set of records are selected, this setValue has been a no-op
        if (lastSelection) {
            len = lastSelection.length;
            if (len === matchedRecords.length) {
                for (i = 0; !valueChanged && i < len; i++) {
                    if (Ext.Array.indexOf(me.lastSelection, matchedRecords[i]) === -1) {
                        valueChanged = true;
                    }
                }
            } else {
                valueChanged = true;
            }
        } else {
            valueChanged = matchedRecords.length;
        }
        if (valueChanged) {
            // beginUpdate which means we only want to notify this.onValueCollectionEndUpdate after it's all changed.
            me.suspendEvent('select');
            me.valueCollection.beginUpdate();
            if (matchedRecords.length) {
                selModel.select(matchedRecords, false);
            } else {
                selModel.deselectAll();
            }
            me.valueCollection.endUpdate();
            me.resumeEvent('select');
        } else {
            me.updateValue();
        }
        if (me.inputEl && me.emptyText) {
            me.inputEl.removeCls(me.emptyCls);
            me.valueContainsPlaceholder = false;
        }
        me.applyEmptyText();
        return me;
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-getValue
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    getValue: function() {
        // If the user has not changed the raw field value since a value was selected from the list,
        // then return the structured value from the selection. If the raw field value is different
        // than what would be displayed due to selection, return that raw value.
        var me = this,
            store = me.getStore(),
            picker = me.picker,
            rawValue = me.getRawValue(),
            //current value of text field
            value = me.value;
        //stored value from last selection or setValue() call
        // getValue may be called from initValue before a valid store is bound - may still be the default empty one.
        // Also, may be called before the store has been loaded.
        // In these cases, just return the value.
        // In other cases, check that the rawValue matches the selected records.
        //jscs:disable
        if (/*custom*/
        !me.doesTextHaveCachedValue() && /*end custom*/
        //jscs:enable
        !store.isEmptyStore && me.getDisplayValue() !== rawValue) {
            me.displayTplData = undefined;
            if (picker) {
                // We do not need to hear about this clearing out of the value collection,
                // so suspend events.
                me.valueCollection.suspendEvents();
                picker.getSelectionModel().deselectAll();
                me.valueCollection.resumeEvents();
                me.lastSelection = null;
            }
            // If the raw input value gets out of sync in a multiple ComboBox, then we have to give up.
            // Multiple is not designed for typing *and* displaying the comma separated result of selection.
            // Same in the case of forceSelection.
            // Unless the store is not yet loaded, which case will be handled in onLoad
            if (store.isLoaded() && (me.multiSelect || me.forceSelection)) {
                value = me.value = undefined;
            } else {
                /////////////////////////////////////////
                // CUSTOM CODE
                //  test if our hash-cache has a matching text entry for what the user entered
                //  if the cache has no proper match, reset the value to be the text entry
                //
                var hash = me.getValueToDisplayHash(),
                    hashTxt = hash.get(value);
                if (!sl.utils.areValuesEquivalent(rawValue, hashTxt)) {
                    //
                    // END CUSTOM CODE
                    /////////////////////////////////////////
                    value = me.value = rawValue;
                }
            }
        }
        /* jshint ignore:start */
        // Return null if value is undefined/null, not falsy.
        me.value = value == null ? null : value;
        /* jshint ignore:end */
        return me.value;
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-assertValue
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    assertValue: function() {
        var me = this,
            value = me.getRawValue(),
            displayValue = me.getDisplayValue(),
            /* CUSTOM CODE lastRecords = me.lastSelectedRecords, END CUSTOM CODE*/
            rec;
        /////////////////////////////////////////
        // CUSTOM CODE
        //  cannot assume that the record is in the store due its dynamic nature,
        //  so dont bother adjusting the `value`, unless combogrid has been edited.
        //
        if (me.isDirty()) {
            //
            // END CUSTOM CODE
            /////////////////////////////////////////
            if (me.forceSelection) {
                if (me.multiSelect) {
                    // For multiselect, check that the current displayed value matches the current
                    // selection, if it does not then revert to the most recent selection.
                    if (value !== displayValue) {
                        me.setRawValue(displayValue);
                    }
                } else {
                    // For single-select, match the displayed value to a record and select it,
                    // if it does not match a record then revert to the most recent selection.
                    rec = me.findRecordByDisplay(value);
                    if (rec) {
                        // Prevent an issue where we have duplicate display values with
                        // different underlying values.
                        if (me.getDisplayValue([
                            me.getRecordDisplayData(rec)
                        ]) !== displayValue) {
                            me.select(rec, true);
                        }
                    } else /* CUSTOM CODE
                     else if (lastRecords) {
                     me.setValue(lastRecords);
                     }
                     END CUSTOM CODE */
                    {
                        // We need to reset any value that could have been set in the dom before or during a store load
                        // for remote combos.  If we don't reset this, then ComboBox#getValue() will think that the value
                        // has changed and will then set `undefined` as the .value for forceSelection combos.  This then
                        // gets changed AGAIN to `null`, which will get set into the model field for editors. This is BAD.
                        /////////////////////////////////////////
                        // CUSTOM CODE
                        //  when in a grid and store may have loaded for different row (so will not have a match),
                        //  use the hash's cached value that matches the rawValue
                        //
                        var usedStewartsFix = false,
                            rawValue = value,
                            hash = me.getValueToDisplayHash(),
                            hashTxt = hash.get(me.value);
                        if (me.isGridEditor()) {
                            if (sl.utils.areValuesEquivalent(rawValue, hashTxt)) {
                                value = me.value;
                                if (!Ext.isEmpty(value)) {
                                    me.setValue(value);
                                    usedStewartsFix = true;
                                }
                            }
                        }
                        // `forceSelection` is enabled and our cache has no values that match the entered raw value text,
                        // so reset the field's text because we don't allow arbitrary text entry
                        if (!usedStewartsFix) {
                            //
                            // END CUSTOM CODE
                            /////////////////////////////////////////
                            me.setRawValue('');
                            if (Ext.isEmpty(me.value)) {
                                me.fireEvent('clear', me);
                            }
                        }
                    }
                }
            }
        }
        me.collapse();
    },
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// INHERITED CODE FROM COMBO BOX ////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-getStoreListeners
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    getStoreListeners: function(store) {
        var me = this,
            result = me.callParent(arguments);
        if (!store.isEmptyStore) {
            result = Ext.apply({}, result, {
                beforeload: me.onStoreBeforeLoad,
                scope: me
            });
            if (Ext.isFunction(result.load)) {
                // add priority to the load listener
                result.load = {
                    fn: result.load,
                    priority: 1000
                };
            }
        }
        return result;
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-bindStoreListeners
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     * When a new store is attached to the combogrid, make sure that every
     *  time the `store.setExtraParam` function is called, it tests if the
     *  the `extraParam`'s value has changed.  If is different, then remove
     *  all store records and force fresh search.
     */
    bindStoreListeners: function(store) {
        var me = this;
        if (store && !store._bindSetExtraParam && Ext.isFunction(store.setExtraParam)) {
            store.setExtraParam = Ext.Function.createSequence(function(param, value) {
                // delete all store recs that were found for a different loading-param value.
                if (!sl.utils.areValuesEquivalent(store.getExtraParam(param), value)) {
                    store.removeAll();
                    delete me.lastQuery;
                }
            }, store.setExtraParam, store);
            store._bindSetExtraParam = true;
        }
        return me.callParent(arguments);
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-createPicker
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     * The created picker is a grid instead of a boundlist
     */
    createPicker: function() {
        var me = this,
            picker;
        me.listConfig = Ext.apply({}, me.listConfig);
        me.defaultListConfig = Ext.apply({}, me.defaultListConfig);
        if (Ext.isEmpty(me.listConfig.columns) && (me.columns || []).length > 0) {
            me.listConfig.columns = me.columns;
        }
        me.defaultPickerWidth = (me.defaultPickerWidth || me.listConfig.width || me.defaultListConfig.width || me.getWidth());
        // set to field width if nothing else specified
        me.defaultPickerHeight = (me.defaultPickerHeight || me.listConfig.height || me.defaultListConfig.height);
        me.defaultPickerMaxHeight = (me.defaultPickerMaxHeight || me.listConfig.maxHeight || me.defaultListConfig.maxHeight);
        me.listConfig = Ext.apply(// Default. Every other object can overwrite
        {
            xtype: me.gridXType,
            plugins: [],
            selModel: me.pickerSelectionModel,
            includeRefreshBtn: false,
            includeSearch: false,
            includeRowCount: false,
            columnLines: true,
            refresh: Ext.emptyFn,
            // `doQuery` rarely calls picker.refresh(), which was undefined for grids
            viewConfig: Ext.apply({
                navigationModel: 'combogrid',
                cls: 'combogrid',
                overItemCls: Ext.view.Table.prototype.overItemCls + ' ' + 'combogrid-row-over',
                refreshSelmodelOnRefresh: true,
                emptyText: me.customNoMatchesMessage || 'No Matches',
                loadingHeight: 50
            }, me.pickerViewConfig)
        }, // 1st choice. Nothing can overwrite these values
        {
            title: '',
            width: me.defaultPickerWidth,
            height: me.defaultPickerHeight,
            maxHeight: Math.max(150, sl.utils.adjHeight(0.5, me.defaultPickerMaxHeight))
        }, // 2nd choice
        me.listConfig);
        picker = me.callParent(arguments);
        if (picker.getColumns().length === 0) {
            console.error('[' + me.$className + '] No Columns in Grid Picker', {
                picker: picker,
                columns: picker.getColumns(),
                combogrid: me
            });
        }
        picker.on({
            scope: me,
            afterlayout: function() {
                // fix alignment issue when at the bottom of the screen
                if (picker.getStore().getCount() > 0) {
                    me.alignPicker();
                }
            }
        });
        return picker;
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-alignPicker
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     * Will resize picker grid so it fits into the viewport
     */
    alignPicker: function() {
        var me = this,
            picker = me.getPicker();
        if (me.rendered) {
            // don't let picker be wider than the screen size
            picker.setWidth(Math.max(me.getWidth(), sl.utils.adjWidth(0.8, me.defaultPickerWidth)));
        }
        return me.callParent(arguments);
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-onExpand
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     * Overwrite will put cursor back in textfield (like combobox).
     * This allows user to type letters, or use arrow keys to navigate
     */
    onExpand: function() {
        var me = this;
        me.callParent(arguments);
        me.suspendEvent('focus');
        if (Ext.isFunction(me.focusInput)) {
            me.focusInput();
        } else {
            me.focus();
        }
        me.selectText(me.getRawValue().length);
        // put cursor at the end of text
        me.resumeEvent('focus');
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-doAutoSelect
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     * If the autoSelect config is true, and the picker is open, highlights the first item.
     * Override helps for dynamic nature of ComboGrid store & finding last selRec.
     */
    doAutoSelect: function() {
        var me = this,
            picker = me.picker,
            lastSelected, lastSelectedIdx, gridRec, val;
        if (picker && me.autoSelect && me.store.getCount() > 0) {
            lastSelected = me.picker.getSelectionModel().lastSelected;
            lastSelectedIdx = picker.store.indexOf(lastSelected);
            // store is dynamic especially when used as a grid editor,
            // so last selRec may not be in the store or may be at new index
            if (lastSelectedIdx < 0) {
                if (me.isGridEditor()) {
                    gridRec = me.getActiveRecord();
                    val = (gridRec && Ext.isFunction(gridRec.get)) ? gridRec.get(me.getGridValueField()) : null;
                }
                if (Ext.isEmpty(val)) {
                    val = me.getValue();
                }
                if (val) {
                    lastSelected = me.findRecordByValue(val);
                    if (lastSelected) {
                        lastSelectedIdx = me.getStore().indexOf(lastSelected);
                    }
                }
            }
            // Highlight the last selected item and scroll it into view
            picker.getNavigationModel().setPosition(((Ext.isNumber(lastSelectedIdx) && lastSelectedIdx >= 0) ? lastSelectedIdx : 0));
        }
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-onLoad
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    onLoad: function(store, records, success) {
        var me = this,
            // This flag is saying that we need to call setValue to match the value property with the
            // just loaded record set and update the valueCollection (and thereby any bound ViewModel)
            // with that matched record.
            needsValueUpdating = !me.valueCollection.byValue.get(me.value);
        // If not returning from a query, and the value was set from a raw data value, unrelated to a record
        // because the displayField was not honoured when calculating the raw value, then we update
        // the raw value.
        if (success && needsValueUpdating && !(store.lastOptions && 'rawQuery' in store.lastOptions)) {
            me.setValueOnData();
        }
        /////////////////////////////////////////
        // CUSTOM CODE
        //  * handles autoselecting of a single record
        //
        // This synchronizes the value based upon contents of the store
        // me.checkValueOnChange();
        records = Ext.Array.from(records) || [];
        // easily expose store's load event to grid (makes life easier in Architect)
        me.fireEvent('load', me, store, records, success);
        // if there's only one matching result,
        // it will automatically select that value without expanding picker,
        // unless the user purposely clicked the search button or keyed down arrow/enter
        if (records.length === 1 && !me.disableSingleRecordAutoSelect && !me._userClickedSearch) {
            var selRec = records[0],
                hasFiredSelect = false;
            // make sure the `select` event is fired at some point
            me.on({
                single: true,
                'select': function(cg, recs) {
                    // in some ExtJS 5 versions, `me.select()` will fire `select`,
                    // sometimes, it does not.
                    hasFiredSelect = true;
                }
            });
            me.select(selRec, true);
            // When it auto selects a record, it'll update the raw value to matching record's.
            // The cursor will now be at end of text, not wherever it was while the user was typing.
            // To avoid confusion for the user, disable typing in the field temporarily.
            me.setReadOnly(true);
            Ext.defer(function() {
                me.setReadOnly(false);
                // make sure that the `select` event fires
                if (!hasFiredSelect) {
                    me.fireEvent('select', me, selRec);
                }
            }, 500, me);
        }
        delete me._userClickedSearch;
    },
    //
    // END CUSTOM CODE
    /////////////////////////////////////////
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-onCollapse
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    onCollapse: function() {
        var me = this;
        me.resetPicker();
        me.callParent(arguments);
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-reset
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    reset: function() {
        var me = this;
        me.callParent();
        me.store.removeAll();
        me.clearValue();
        me.originalValue = undefined;
        me.lastQuery = false;
        me.collapse();
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-resetOriginalValue
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    resetOriginalValue: function() {
        this.originalValue = /////////////////////////////////////////
        // CUSTOM CODE
        //  previously used this.getValue() returned wrong value
        //
        (Ext.isDefined(this.value) ? this.value : this.getRawValue());
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        this.checkDirty();
    },
    /**
     * @localdoc STEWARTS OVERRIDE
     * @inheritdoc Ext.form.field.ComboBox#method-onTriggerClick
     * @overrideVersion ExtJS 5.1.2.748
     * @private
     */
    onTriggerClick: function() {
        var me = this,
            fieldHasChanged = me.isDirty(),
            matchingRec = // if user typed new search query and combogrid is in a grid
            // (grid combogrid's have very dynamic, row-based stores),
            // then force reload the store
            ((!fieldHasChanged || !me.isGridEditor()) ? me.findRecordByValue(me.getValue()) : false);
        // found the matching record, so select in the picker data & highlight it
        if (matchingRec) {
            me.lastQuery = matchingRec.get(me.displayField);
            me.expand();
        } else {
            me._userClickedSearch = true;
            me.loadPickerData(me.getQueryText());
        }
    },
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// NEW CODE UNIQUE TO THIS CLASS ////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    onBeforeQuery: function(queryPlan) {
        var me = this,
            grid, currentRowIndex, gridRec;
        if (me.clearQueryOnRowChange) {
            grid = Ext.isFunction(me.getParentGrid) ? me.getParentGrid() : undefined;
            if (grid) {
                gridRec = me.getActiveRecord() || grid.getSelectionModel().selected.first();
                currentRowIndex = grid.getIndexForRecord(gridRec);
                if (currentRowIndex !== me._queryRowIndex) {
                    delete me.lastQuery;
                }
                me._queryRowIndex = currentRowIndex;
            }
        }
        queryPlan[me.queryParam] = me.getQueryText(queryPlan[me.queryParam]);
    },
    /**
     * Only used when the ComboGrid is a grid cell editor.
     *
     * Hitting enter in a grid cell can mean multiple things, such as:
     *
     *  - Move to next row
     *  - Select highlighted row in picker
     *  - Search immediately for typed text
     */
    onEnterKeyInGrid: function(field, e, eOpts) {
        var me = field,
            grid = me.getParentGrid(),
            storeIsUpdating = me.getStore().isLoading(),
            storeWillBeUpdating = !Ext.isEmpty((me.doQueryTask || {}).id);
        // move to next row if combo is not expanded or looking for more records
        if (grid && !me.isExpanded && !storeIsUpdating && !storeWillBeUpdating) {
            grid.getSelectionModel().onKeyEnter(grid.getEditingPlugin(), e);
        }
    },
    forceQueryTaskExecute: function() {
        var me = this,
            tsk = me.doQueryTask,
            storeWillBeUpdating = (tsk ? !Ext.isEmpty(tsk.id) : false);
        if (storeWillBeUpdating) {
            // force immediate search instead of waiting for the full queryDelay
            tsk.delay(0);
        }
    },
    onClearTriggerClick: function() {
        var me = this;
        me.reset();
        me.focus(true, true);
    },
    /**
     * @private
     */
    loadPickerData: function(query) {
        var me = this,
            forceQuery = me.allowForceQuery,
            nothingChanged = !me.isDirty();
        query = String(!Ext.isEmpty(query) ? query : me.getQueryText());
        // there aren't enough characters to cause a new query search
        if (!forceQuery && query.length < Math.max(me.minChars, 0)) {
            delete me._userClickedSearch;
            // the user has not typed & store has previously found records => show the picker
            if (nothingChanged && me.getStore().getCount() > 0) {
                me.expand();
                return false;
            } else {
                me.showMinCharMessage();
                return false;
            }
        }
        // modeled after combobox's `onTriggerClick`
        if (!me.readOnly && !me.disabled) {
            if (me.isExpanded && nothingChanged) {
                me.collapse();
            } else {
                me.onFocus();
                if (me.triggerAction === 'all') {
                    me.doQuery(me.allQuery, true);
                } else if (me.triggerAction === 'last') {
                    me.doQuery(me.lastQuery, true);
                } else {
                    me.doQuery(query, forceQuery, true);
                }
            }
            me.inputEl.focus();
        }
    },
    getQueryText: function() {
        var me = this,
            rv = me.getRawValue(),
            phrases,
            longestPhrase = '';
        if (!me.disableQueryTextConvert) {
            // splits on every character that is not alphanumeric or whitespace
            phrases = String(rv || '').split(me.queryTextSeparator);
            Ext.Array.forEach(phrases, function(phrase, index, array) {
                if (phrase.length > longestPhrase.length) {
                    longestPhrase = phrase;
                }
            });
        } else {
            longestPhrase = rv;
        }
        return String(longestPhrase || '').trim();
    },
    showMinCharMessage: function() {
        var me = this;
        myMinCharsMsg = Ext.String.format(me.minCharsMsg, me.minChars, (me.minChars === 1 ? '' : 's'));
        sl.utils.Toast.showWarningToast('Error', myMinCharsMsg);
    },
    resetPicker: function() {
        var me = this,
            grid = me.getPicker(),
            store = grid.store,
            rankingSorters = (store && Ext.isFunction(store.getRankingSorters) ? store.getRankingSorters() : []);
        grid.highlightedIndex = undefined;
        if (Ext.isArray(rankingSorters) && rankingSorters.length) {
            store.sorters.remove(rankingSorters);
        }
        store.fireEvent('needfilterremoval', store);
        me.cancelRunningQueries();
    },
    /**
     * Configures store so it will:
     *
     *  - filter based on query text
     *  - kill any running queries
     *  - auto sort records based on revelency
     */
    onStoreBeforeLoad: function(store) {
        var me = this;
        // `beforeload` exposes store's event to field for Architect
        if (me.fireEvent('beforeload', me, store, me.picker) !== false) {
            me.cancelRunningQueries();
            me.getFieldsToSearch();
            store.setExtraParam('searchAnyOrder', (me.anyMatch ? 1 : 0));
            me._records_ranked_by_search = false;
            if ((me.picker || {}).el) {
                me.picker.el.unmask();
            }
            store.removeAll();
            if (!me.disableAutoRecordSort) {
                // 'datachanged' will be called before store 'load' and before grid rows are created
                store.on({
                    scope: me,
                    priority: 1000,
                    single: true,
                    'datachanged': function(store) {
                        store.suspendEvent('datachanged');
                        me.rankAndSortRecordsBySearchStr();
                        store.resumeEvent('datachanged');
                    }
                });
            }
        } else {
            // don't show picker grid when cannot load a store
            me.collapse();
            // force data refresh next time trigger is pressed
            me.lastQuery = false;
            // store load is cancelled
            return false;
        }
    },
    /**
     * If the ComboGrid's store does not have a `fields` param defined as an extraParam,
     * it will update the `fields` param to all of the dataIndexes from all of the picker's columns
     * @return {Array} fields
     */
    getFieldsToSearch: function() {
        var me = this,
            fieldsToSearch = me.store.getFieldsToSearch() || me.setFieldsToSearch();
        return Ext.isString(fieldsToSearch) ? Ext.decode(fieldsToSearch) : fieldsToSearch;
    },
    /**
     * Updates the CacheStore's `fields` extraParam to be the ComboGrid`s grid's columns as the Cach√© properties to
     * search.
     * @return {Array} fieldsToSearch
     */
    setFieldsToSearch: function() {
        var me = this,
            store = me.getStore(),
            fieldsToSearch = [],
            fieldsToSearchStr,
            picker = me.getPicker(),
            pickerStore = picker ? picker.getStore() : false,
            columns = [];
        if (picker) {
            if (pickerStore) {
                fieldsToSearch = pickerStore.model.prototype.getFieldsToSearch() || [];
            }
            if (fieldsToSearch.length === 0) {
                columns = picker.getColumnsToSearch(true) || [];
            }
        } else if (store) {
            fieldsToSearch = store.model.prototype.getFieldsToSearch() || [];
        }
        if (fieldsToSearch.length === 0 && columns.length > 0) {
            Ext.Array.forEach(columns, function(col, index, array) {
                fieldsToSearch.push(col.dataIndex);
            });
        }
        if (Ext.isArray(fieldsToSearch)) {
            if (fieldsToSearch.length === 0) {
                sl.consoleWarn('[' + me.$className + '] No Fields to Search', {
                    component: me,
                    store: store
                });
            }
            fieldsToSearchStr = Ext.encode(fieldsToSearch);
        }
        store.setExtraParam('fields', fieldsToSearchStr);
        return fieldsToSearch;
    },
    cancelRunningQueries: function() {
        // console.log('cancel running queries');
        var me = this;
        me.doQueryTask.cancel();
        if (me.queryMode === 'remote') {
            me.getStore().abortPreviousRequests();
        }
    },
    /**
     * When the user searched for a specific term,
     * that means the most valuable records have this search term in a prominent position.
     * @param {Boolean} [forceRank=false] If `true`, will always re-sort the records
     */
    rankAndSortRecordsBySearchStr: function(forceRank) {
        var me = this,
            store = me.store,
            records = store.getRecords(),
            recCount = records.length,
            searchStr, fieldsToScore, foundMatch;
        if (recCount) {
            if (!me._records_ranked_by_search || forceRank === true) {
                // set variable so that:
                // a.) records are only ranked once per store load
                // b.) it won't get stuck in a loop (sorting the store fires the `datachanged` evt, which calls
                // this function, which sorts the recs...)
                me._records_ranked_by_search = true;
                if (Ext.isFunction(store.getSearchedText)) {
                    searchStr = sl.utils.stripNonAlphanumericChars(store.getSearchedText() || '');
                }
                fieldsToScore = me.getFieldsToSearch();
                if (!Ext.isEmpty(searchStr)) {
                    foundMatch = store.setSortRanking(searchStr, undefined, me.getGridDataToRank(), records);
                    if (foundMatch) {
                        // sort so best records are at top (based on searchStr matching)
                        store.sortRankedRecords();
                    }
                }
            }
        }
    },
    /**
     * @private
     * Returns the rendered grid text instead of using the store's data for better ranking results
     * @return {String[][]}
     */
    getGridDataToRank: function() {
        var me = this,
            grid = me.getPicker(),
            store = me.store,
            records = store.getRecords(),
            fieldsToSearch = me.getFieldsToSearch(),
            storeData = [],
            gridData, recData;
        Ext.Array.forEach(records, function(rec, recIdx, recArray) {
            storeData[recIdx] = [];
            gridData = [];
            recData = [];
            Ext.Array.forEach(fieldsToSearch, function(fieldName, fieldIndex, fieldArray) {
                var colIdx = grid.getColumnIndexByDataIndex(fieldName),
                    txt = '';
                if (colIdx >= 0) {
                    txt = grid.getTextInCell(colIdx, rec);
                    txt = sl.utils.AllTrim(Ext.util.Format.htmlDecode(txt));
                    gridData[colIdx] = txt;
                } else {
                    txt = rec.get(fieldName);
                    recData.push(txt);
                }
            });
            // order of the array is important,
            // data from the first column is more significant than 5th column,
            // which is more significant than data not in the grid
            storeData[recIdx] = gridData.concat(recData);
        }, records);
        return storeData;
    },
    /**
     * Searches the hash cache for a value that exactly matches the user's entered text.
     * @return {Boolean} `true` if raw value has a value in hash
     */
    doesTextHaveCachedValue: function() {
        var me = this,
            txt = me.getRawValue(),
            hasMatch = false,
            hash;
        if (!Ext.isEmpty(txt)) {
            hash = me.getValueToDisplayHash();
            hasMatch = !Ext.isEmpty(hash.findKey(txt));
        }
        return hasMatch;
    }
}, function() {
    var ComboGrid = this;
    ComboGrid.createAlias({
        onSearchTriggerClick: 'onTriggerClick',
        onTrigger2Click: 'onTriggerClick',
        onTrigger1Click: 'onClearTriggerClick'
    });
});

/**
 * @class sl.field.ListCombo
 */
Ext.define('sl.field.ListCombo', {
    extend: 'sl.field.ComboBox',
    alias: [
        'widget.listcombo'
    ],
    uses: [
        'Ext.grid.column.Column'
    ],
    /**
     * @cfg {String} [CacheClassName='**Required**'] (required)
     * The Cach√© Class to where combo's data is located
     * If in a grid, this will default to the grid store's CacheClassName
     */
    CacheClassName: '',
    /**
     * @cfg {String} [CachePropertyName='**Required**'] (required)
     * The property in Cach√© that has the Display List/Value List
     * If in a grid, this will default to the column's dataIndex
     */
    CachePropertyName: '',
    /**
     * @cfg {String} [displayField='Display']
     * @inheritdoc
     */
    displayField: 'Display',
    /**
     * @cfg {String} [valueField='Value']
     * @inheritdoc
     */
    valueField: 'Value',
    /**
     * @cfg {Object[]} fields
     * This may be used in place of specifying a {@link sl.data.CacheStore#model} configuration. The fields should be a
     * set of {@link Ext.data.Field} configuration objects. The store will automatically create a {@link Ext.data.Model}
     * with these fields. In general this configuration option should only be used for simple stores like
     * a two-field store of ComboBox. For anything more complicated, such as specifying a particular id property or
     * associations, a {@link Ext.data.Model} should be defined and specified for the {@link sl.data.CacheStore#model}
     * config.
     * @since 2.3.0
     */
    fields: [
        'Display',
        'Value'
    ],
    /**
     * @cfg {String} initExpr
     * If set, the combo will be set to this value on every store load
     */
    initExpr: '',
    /**
     * @cfg {Boolean} [useInitialExpression=true]
     * Set to `true` to automatically set the combo to the property's defined InitialExpression in Cach√© on every store load
     * This config will be ignored if the {@link #initExpr} is set
     */
    useInitialExpression: true,
    /**
     * @cfg {Boolean} [useExternalValue=true]
     * Set to `true` to use the {@link #displayField} as the {@link #valueField}
     */
    useExternalValue: true,
    initComponent: function() {
        var me = this;
        me._defaultValueField = me.valueField;
        if (me.useExternalValue) {
            me.valueField = me.displayField;
        }
        me.name = me.name || me.CachePropertyName;
        me.initExpr = me.value = (me.initExpr || me.value);
        // if this list combo is the editor for a column, it can get all its Cach√© information from the grid itself
        if (Ext.isFunction(me.isGridEditor) && me.isGridEditor() && sl.utils.isInstanceOf(me.column, Ext.grid.column.Column)) {
            // var grid = Ext.isFunction(me.column.up) ? me.column.up('grid') : undefined;
            var grid = me.getParentGrid();
            if (grid) {
                if (Ext.isEmpty(me.CacheClassName)) {
                    me.CacheClassName = grid.getStore().getCacheClassName();
                }
                if (Ext.isEmpty(me.CachePropertyName)) {
                    me.CachePropertyName = me.column.dataIndex;
                }
            }
        }
        me.store = me.store || me.createStore();
        me.callParent(arguments);
    },
    getStoreListeners: function() {
        var me = this;
        return {
            'load': me.setToInitialExpression,
            priority: 1000,
            scope: me
        };
    },
    /**
     * @return {sl.data.CacheStore} Properly configured List Combobox store
     */
    createStore: function() {
        var me = this,
            config = me.storeConfig || {},
            hasModel = !Ext.isEmpty(config.model) || false,
            proxyConfig = {},
            store;
        if (config) {
            if (!hasModel) {
                me.fields = me.fields || config.fields || [];
                if (Ext.isArray(me.fields) && me.fields.length === 0) {
                    me.fields.push(me.displayField, me._defaultValueField);
                }
            }
            proxyConfig.extraParams = Ext.apply({
                ClassName: me.CacheClassName,
                PropertyName: me.CachePropertyName,
                allowBlank: me.allowBlank
            }, config.extraParams || {}) || {};
            store = Ext.createByAlias('store.cachestore', Ext.apply({
                autoLoad: true,
                isStoreValidatedOnLoad: false,
                CacheClassName: 'ClassDef.Utilities',
                CacheQueryName: 'DisplayListValueList',
                CacheCommandType: 2,
                fields: me.fields,
                proxy: proxyConfig,
                listeners: config.listeners || {}
            }, config));
            store.updateModelIDProperty(me._defaultValueField);
        }
        return store;
    },
    /**
     * @private
     * On Store's load, this will set the listcombo to the initial value (if defined) or it will lookup the initial expression from Cach√© (if {@link #useInitialExpression} is set to `true`)
     */
    setToInitialExpression: function() {
        var me = this;
        // if initial value hasn't already been set, then lookup the initial expression from Cach√©'s property definition
        if (me.useInitialExpression && !me.initExpr) {
            me.loadInitialExpression();
        } else if (me.initExpr) {
            me.suspendEvents(false);
            me.setValue(me.initExpr);
            me.resumeEvents();
        }
    },
    /**
     * @private
     * After looking up the Initial Expression from Cach√©, this will set the listcombo to that value
     */
    loadInitialExpression: function() {
        var me = this,
            store = me.getStore();
        Ext.Ajax.request({
            timeout: 900000,
            url: "../Ext.JsonRequest.cls",
            params: {
                CacheClassName: "ClassDef.Utilities",
                CacheMethodName: "PropertyInitialExpression",
                CacheCommandType: 1,
                ClassName: store.getExtraParam('ClassName'),
                PropertyName: store.getExtraParam('PropertyName')
            },
            scope: me,
            callback: function(options, success, response) {
                // Gets the result of the update
                var r = Ext.decode(response.responseText);
                if (!r.success) {
                    Ext.Msg.alert("Error", r.error.Msg);
                    console.error("loadInitialExpression Error", {
                        msg: r.error.Msg,
                        r: r,
                        options: options,
                        success: success,
                        response: response
                    });
                } else if (r.result) {
                    // value being returned is a cacheString and needs to have extra "" (double quotes) removed
                    var resultVal = r.result.replace(/\"/g, ''),
                        rec = me.store.findRecord(me._defaultValueField, resultVal),
                        convertedVal = rec ? rec.get(me.valueField) : resultVal;
                    me.initExpr = me.value = convertedVal;
                    me.setValue(me.initExpr);
                }
            }
        });
    }
});

/**
 * @class sl.field.button.AllOKButton
 */
Ext.define('sl.field.button.AllOKButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.allOKbutton',
    text: 'All OK',
    itemId: 'allokbutton',
    icon: '/resources/icons/fam/accept.png'
});

/**
 * @class sl.field.button.BuildButton
 */
Ext.define('sl.field.button.BuildButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.buildbutton',
    text: 'Build',
    itemId: 'buildbutton',
    icon: '/resources/icons/fam/brick_go.png'
});

/**
 * @class sl.field.button.CancelButton
 */
Ext.define('sl.field.button.CancelButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.cancelbutton',
    text: 'Cancel',
    itemId: 'cancelbutton',
    icon: '/resources/icons/fam/cancel.png'
});

/**
 * @class sl.field.button.ClearButton
 */
Ext.define('sl.field.button.ClearButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.clearbutton',
    text: 'Clear',
    itemId: 'clearbutton',
    icon: '/resources/icons/fam/page_white_delete.png'
});

/**
 * @class sl.field.button.ConfirmButton
 */
Ext.define('sl.field.button.ConfirmButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.confirmbutton',
    text: 'Confirm',
    itemId: 'confirmbutton',
    icon: '/resources/icons/fam/tick.png'
});

/**
 * @class sl.field.button.CopyButton
 */
Ext.define('sl.field.button.CopyButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.copybutton',
    text: 'Copy',
    itemId: 'copybutton',
    icon: '/resources/icons/fam/page_white_stack.png'
});

/**
 * @class sl.field.button.DeleteButton
 */
Ext.define('sl.field.button.DeleteButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.deletebutton',
    text: 'Delete',
    itemId: 'deletebutton',
    icon: '/resources/icons/fam/delete.png',
    hasUndo: false
});

/**
 * @class sl.field.button.DeleteWithUndoButton
 */
Ext.define('sl.field.button.DeleteWithUndoButton', {
    extend: 'Ext.button.Split',
    alias: 'widget.deletewithundobutton',
    requires: [
        'Ext.menu.Item',
        'Ext.menu.Menu'
    ],
    text: 'Delete',
    itemId: 'deletewithundobutton',
    icon: '/resources/icons/fam/delete.png',
    undoText: 'Undo Delete',
    hasUndo: true,
    initComponent: function() {
        this.menu = Ext.create('Ext.menu.Menu', {
            itemId: 'deletemenu'
        });
        this.undoDeleteButton = Ext.create('Ext.menu.Item', {
            text: this.undoText,
            iconCls: 'ReverseButton',
            itemId: 'undodeletebutton',
            disabled: true
        });
        this.menu.add(this.undoDeleteButton);
        this.callParent();
    }
});

/**
 * @class sl.field.button.EditButton
 */
Ext.define('sl.field.button.EditButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.editbutton',
    text: 'Edit',
    itemId: 'editbutton',
    icon: '/resources/icons/fam/page_white_edit.png'
});

/**
 * @class sl.field.button.ExcelButton
 */
Ext.define('sl.field.button.ExcelButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.excelbutton',
    text: '',
    overflowText: 'Send To Excel',
    itemId: 'sendtoexcelbutton',
    icon: '/resources/icons/Excel-16.gif'
});

/**
 * @class sl.field.button.FindButton
 */
Ext.define('sl.field.button.FindButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.findbutton',
    text: 'Find',
    itemId: 'findbutton',
    icon: '/resources/icons/fam/find.png'
});

/**
 * @class sl.field.button.GarbageButton
 */
Ext.define('sl.field.button.GarbageButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.garbagebutton',
    text: 'Empty Garbage',
    itemId: 'garbagebutton',
    icon: '/resources/icons/fam/garbage.png'
});

/**
 * @class sl.field.button.HomeButton
 */
Ext.define('sl.field.button.HomeButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.homebutton',
    text: '',
    itemId: 'homebutton',
    icon: '/resources/icons/fam/house.png'
});

/**
 * @class sl.field.button.ImportButton
 */
Ext.define('sl.field.button.ImportButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.importbutton',
    text: 'Import',
    itemId: 'importbutton',
    icon: '/resources/icons/fam/page_white_get.png'
});

/**
 * @class sl.field.button.NewButton
 */
Ext.define('sl.field.button.NewButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.newbutton',
    text: 'New',
    itemId: 'newbutton',
    icon: '/resources/icons/fam/add.png'
});

/**
 * @class sl.field.button.PasteButton
 */
Ext.define('sl.field.button.PasteButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.pastebutton',
    text: 'Paste',
    itemId: 'pastebutton',
    icon: '/resources/icons/fam/page_paste.png'
});

/**
 * @class sl.field.button.PostButton
 */
Ext.define('sl.field.button.PostButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.postbutton',
    text: 'Post',
    itemId: 'postbutton',
    icon: '/resources/icons/fam/database_go.png'
});

/**
 * @class sl.field.button.PrintButton
 */
Ext.define('sl.field.button.PrintButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.printbutton',
    text: 'Print',
    itemId: 'printbutton',
    icon: '/resources/icons/fam/printer.png'
});

/**
 * @class sl.field.button.QuickUpdateButton
 */
Ext.define('sl.field.button.QuickUpdateButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.quickUpdateButton',
    text: 'Update Status',
    itemId: 'quickupdatebutton',
    icon: '/resources/icons/fam/lightning.png'
});

/**
 * @class sl.field.button.RefreshButton
 */
Ext.define('sl.field.button.RefreshButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.refreshbutton',
    text: 'Refresh',
    itemId: 'refreshbutton',
    icon: '/resources/icons/fam/arrow_refresh.png'
});

/**
 * @class sl.field.button.ReverseButton
 */
Ext.define('sl.field.button.ReverseButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.reversebutton',
    text: 'Reverse',
    itemId: 'reversebutton',
    icon: '/resources/icons/fam/arrow_undo.png'
});

/**
 * @class sl.field.button.SaveButton
 */
Ext.define('sl.field.button.SaveButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.savebutton',
    text: 'Save',
    itemId: 'savebutton',
    icon: '/resources/icons/fam/disk.png'
});

/**
 * @class sl.field.button.SendButton
 */
Ext.define('sl.field.button.SendButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.sendbutton',
    text: 'Send/Resend',
    itemId: 'sendbutton',
    icon: '/resources/icons/fam/email_go.png'
});

/**
 * @class sl.field.button.SwitchButton
 */
Ext.define('sl.field.button.SwitchButton', {
    extend: 'Ext.button.Button',
    alias: 'widget.switchbutton',
    text: 'Switch',
    itemId: 'switchbutton',
    icon: '/resources/icons/fam/arrow_switch.png'
});

/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 2015-01-04
 *
 * By Eli Grey, http://eligrey.com
 * License: X11/MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */
/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */
/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs = saveAs || // IE 10+ (native saveAs)
    (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator)) || // Everyone else
    (function(view) {
        "use strict";
        // IE <10 is explicitly unsupported
        if (typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
            return;
        }
        var doc = view.document,
            // only get URL when necessary in case Blob.js hasn't overridden it yet
            get_URL = function() {
                return view.URL || view.webkitURL || view;
            },
            save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"),
            can_use_save_link = "download" in save_link,
            click = function(node) {
                var event = doc.createEvent("MouseEvents");
                event.initMouseEvent("click", true, false, view, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                node.dispatchEvent(event);
            },
            webkit_req_fs = view.webkitRequestFileSystem,
            req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem,
            throw_outside = function(ex) {
                (view.setImmediate || view.setTimeout)(function() {
                    throw ex;
                }, 0);
            },
            force_saveable_type = "application/octet-stream",
            fs_min_size = 0,
            // See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and
            // https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047
            // for the reasoning behind the timeout and revocation flow
            arbitrary_revoke_timeout = 500,
            // in ms
            revoke = function(file) {
                var revoker = function() {
                        if (typeof file === "string") {
                            // file is an object URL
                            get_URL().revokeObjectURL(file);
                        } else {
                            // file is a File
                            file.remove();
                        }
                    };
                if (view.chrome) {
                    revoker();
                } else {
                    setTimeout(revoker, arbitrary_revoke_timeout);
                }
            },
            dispatch = function(filesaver, event_types, event) {
                event_types = [].concat(event_types);
                var i = event_types.length;
                while (i--) {
                    var listener = filesaver["on" + event_types[i]];
                    if (typeof listener === "function") {
                        try {
                            listener.call(filesaver, event || filesaver);
                        } catch (ex) {
                            throw_outside(ex);
                        }
                    }
                }
            },
            FileSaver = function(blob, name) {
                // First try a.download, then web filesystem, then object URLs
                var filesaver = this,
                    type = blob.type,
                    blob_changed = false,
                    object_url, target_view,
                    dispatch_all = function() {
                        dispatch(filesaver, "writestart progress write writeend".split(" "));
                    },
                    // on any filesys errors revert to saving with object URLs
                    fs_error = function() {
                        // don't create more object URLs than needed
                        if (blob_changed || !object_url) {
                            object_url = get_URL().createObjectURL(blob);
                        }
                        if (target_view) {
                            target_view.location.href = object_url;
                        } else {
                            var new_tab = view.open(object_url, "_blank");
                            if (new_tab == undefined && typeof safari !== "undefined") {
                                //Apple do not allow window.open, see http://bit.ly/1kZffRI
                                view.location.href = object_url;
                            }
                        }
                        filesaver.readyState = filesaver.DONE;
                        dispatch_all();
                        revoke(object_url);
                    },
                    abortable = function(func) {
                        return function() {
                            if (filesaver.readyState !== filesaver.DONE) {
                                return func.apply(this, arguments);
                            }
                        };
                    },
                    create_if_not_found = {
                        create: true,
                        exclusive: false
                    },
                    slice;
                filesaver.readyState = filesaver.INIT;
                if (!name) {
                    name = "download";
                }
                if (can_use_save_link) {
                    object_url = get_URL().createObjectURL(blob);
                    save_link.href = object_url;
                    save_link.download = name;
                    click(save_link);
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                    revoke(object_url);
                    return;
                }
                // Object and web filesystem URLs have a problem saving in Google Chrome when
                // viewed in a tab, so I force save with application/octet-stream
                // http://code.google.com/p/chromium/issues/detail?id=91158
                // Update: Google errantly closed 91158, I submitted it again:
                // https://code.google.com/p/chromium/issues/detail?id=389642
                if (view.chrome && type && type !== force_saveable_type) {
                    slice = blob.slice || blob.webkitSlice;
                    blob = slice.call(blob, 0, blob.size, force_saveable_type);
                    blob_changed = true;
                }
                // Since I can't be sure that the guessed media type will trigger a download
                // in WebKit, I append .download to the filename.
                // https://bugs.webkit.org/show_bug.cgi?id=65440
                if (webkit_req_fs && name !== "download") {
                    name += ".download";
                }
                if (type === force_saveable_type || webkit_req_fs) {
                    target_view = view;
                }
                if (!req_fs) {
                    fs_error();
                    return;
                }
                fs_min_size += blob.size;
                req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                    fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                        var save = function() {
                                dir.getFile(name, create_if_not_found, abortable(function(file) {
                                    file.createWriter(abortable(function(writer) {
                                        writer.onwriteend = function(event) {
                                            target_view.location.href = file.toURL();
                                            filesaver.readyState = filesaver.DONE;
                                            dispatch(filesaver, "writeend", event);
                                            revoke(file);
                                        };
                                        writer.onerror = function() {
                                            var error = writer.error;
                                            if (error.code !== error.ABORT_ERR) {
                                                fs_error();
                                            }
                                        };
                                        "writestart progress write abort".split(" ").forEach(function(event) {
                                            writer["on" + event] = filesaver["on" + event];
                                        });
                                        writer.write(blob);
                                        filesaver.abort = function() {
                                            writer.abort();
                                            filesaver.readyState = filesaver.DONE;
                                        };
                                        filesaver.readyState = filesaver.WRITING;
                                    }), fs_error);
                                }), fs_error);
                            };
                        dir.getFile(name, {
                            create: false
                        }, abortable(function(file) {
                            // delete file if it already exists
                            file.remove();
                            save();
                        }), abortable(function(ex) {
                            if (ex.code === ex.NOT_FOUND_ERR) {
                                save();
                            } else {
                                fs_error();
                            }
                        }));
                    }), fs_error);
                }), fs_error);
            },
            FS_proto = FileSaver.prototype,
            saveAs = function(blob, name) {
                return new FileSaver(blob, name);
            };
        FS_proto.abort = function() {
            var filesaver = this;
            filesaver.readyState = filesaver.DONE;
            dispatch(filesaver, "abort");
        };
        FS_proto.readyState = FS_proto.INIT = 0;
        FS_proto.WRITING = 1;
        FS_proto.DONE = 2;
        FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
        return saveAs;
    }(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window
if (typeof module !== "undefined" && module.exports) {
    module.exports.saveAs = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
    define([], function() {
        return saveAs;
    });
}

/* cpexcel.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
/*jshint -W100 */
var cptable = {
        version: "1.3.4"
    };
cptable[874] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩÔøΩÔøΩÔøΩ\u2026ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\xa0‡∏Å‡∏Ç‡∏É‡∏Ñ‡∏Ö‡∏Ü‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏å‡∏ç‡∏é‡∏è‡∏ê‡∏ë‡∏í‡∏ì‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏§‡∏•‡∏¶‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏¨‡∏≠‡∏Æ‡∏Ø‡∏∞‡∏±‡∏≤‡∏≥‡∏¥‡∏µ‡∏∂‡∏∑‡∏∏‡∏π‡∏∫ÔøΩÔøΩÔøΩÔøΩ‡∏ø‡πÄ‡πÅ‡πÇ‡πÉ‡πÑ‡πÖ‡πÜ‡πá‡πà‡πâ‡πä‡πã‡πå‡πç‡πé‡πè‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô‡πö‡πõÔøΩÔøΩÔøΩÔøΩ",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[932] = (function() {
    var d = [],
        e = {},
        D = [],
        j;
    D[0] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔΩ°ÔΩ¢ÔΩ£ÔΩ§ÔΩ•ÔΩ¶ÔΩßÔΩ®ÔΩ©ÔΩ™ÔΩ´ÔΩ¨ÔΩ≠ÔΩÆÔΩØÔΩ∞ÔΩ±ÔΩ≤ÔΩ≥ÔΩ¥ÔΩµÔΩ∂ÔΩ∑ÔΩ∏ÔΩπÔΩ∫ÔΩªÔΩºÔΩΩÔΩæÔΩøÔæÄÔæÅÔæÇÔæÉÔæÑÔæÖÔæÜÔæáÔæàÔæâÔæäÔæãÔæåÔæçÔæéÔæèÔæêÔæëÔæíÔæìÔæîÔæïÔæñÔæóÔæòÔæôÔæöÔæõÔæúÔæùÔæûÔæüÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) {
        e[D[0][j]] = 0 + j;
        d[0 + j] = D[0][j];
    };
    D[129] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u3000„ÄÅ„ÄÇÔºåÔºé„ÉªÔºöÔºõÔºüÔºÅ„Çõ„Çú¬¥ÔΩÄ¬®ÔºæÔø£Ôºø„ÉΩ„Éæ„Çù„Çû„ÄÉ‰ªù„ÄÖ„ÄÜ„Äá„Éº\u2015\u2010ÔºèÔººÔΩû‚à•ÔΩú\u2026\u2025\u2018\u2019\u201c\u201dÔºàÔºâ„Äî„ÄïÔºªÔºΩÔΩõÔΩù„Äà„Äâ„Ää„Äã„Äå„Äç„Äé„Äè„Äê„ÄëÔºãÔºç¬±√óÔøΩ√∑Ôºù‚â†ÔºúÔºû‚â¶‚âß‚àû‚à¥‚ôÇ‚ôÄ¬∞\u2032\u2033‚ÑÉÔø•ÔºÑÔø†Ôø°ÔºÖÔºÉÔºÜÔºäÔº†¬ß‚òÜ‚òÖ‚óã‚óè‚óé‚óá‚óÜ‚ñ°‚ñ†‚ñ≥‚ñ≤‚ñΩ‚ñº\u203b„Äí‚Üí‚Üê‚Üë‚Üì„ÄìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚àà‚àã‚äÜ‚äá‚äÇ‚äÉ‚à™‚à©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚àß‚à®Ôø¢‚áí‚áî‚àÄ‚àÉÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚à†‚ä•‚åí‚àÇ‚àá‚â°‚âí‚â™‚â´‚àö‚àΩ‚àù‚àµ‚à´‚à¨ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚Ñ´\u2030‚ôØ‚ô≠‚ô™\u2020\u2021¬∂ÔøΩÔøΩÔøΩÔøΩ‚óØÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 65533) {
        e[D[129][j]] = 33024 + j;
        d[33024 + j] = D[129][j];
    };
    D[130] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔºêÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔΩóÔΩòÔΩôÔΩöÔøΩÔøΩÔøΩÔøΩ„ÅÅ„ÅÇ„ÅÉ„ÅÑ„ÅÖ„ÅÜ„Åá„Åà„Åâ„Åä„Åã„Åå„Åç„Åé„Åè„Åê„Åë„Åí„Åì„Åî„Åï„Åñ„Åó„Åò„Åô„Åö„Åõ„Åú„Åù„Åû„Åü„Å†„Å°„Å¢„Å£„Å§„Å•„Å¶„Åß„Å®„Å©„Å™„Å´„Å¨„Å≠„ÅÆ„ÅØ„Å∞„Å±„Å≤„Å≥„Å¥„Åµ„Å∂„Å∑„Å∏„Åπ„Å∫„Åª„Åº„ÅΩ„Åæ„Åø„ÇÄ„ÇÅ„ÇÇ„ÇÉ„ÇÑ„ÇÖ„ÇÜ„Çá„Çà„Çâ„Çä„Çã„Çå„Çç„Çé„Çè„Çê„Çë„Çí„ÇìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 65533) {
        e[D[130][j]] = 33280 + j;
        d[33280 + j] = D[130][j];
    };
    D[131] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„Ç°„Ç¢„Ç£„Ç§„Ç•„Ç¶„Çß„Ç®„Ç©„Ç™„Ç´„Ç¨„Ç≠„ÇÆ„ÇØ„Ç∞„Ç±„Ç≤„Ç≥„Ç¥„Çµ„Ç∂„Ç∑„Ç∏„Çπ„Ç∫„Çª„Çº„ÇΩ„Çæ„Çø„ÉÄ„ÉÅ„ÉÇ„ÉÉ„ÉÑ„ÉÖ„ÉÜ„Éá„Éà„Éâ„Éä„Éã„Éå„Éç„Éé„Éè„Éê„Éë„Éí„Éì„Éî„Éï„Éñ„Éó„Éò„Éô„Éö„Éõ„Éú„Éù„Éû„ÉüÔøΩ„É†„É°„É¢„É£„É§„É•„É¶„Éß„É®„É©„É™„É´„É¨„É≠„ÉÆ„ÉØ„É∞„É±„É≤„É≥„É¥„Éµ„É∂ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 65533) {
        e[D[131][j]] = 33536 + j;
        d[33536 + j] = D[131][j];
    };
    D[132] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–ØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–ΩÔøΩ–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚îÄ‚îÇ‚îå‚îê‚îò‚îî‚îú‚î¨‚î§‚î¥‚îº‚îÅ‚îÉ‚îè‚îì‚îõ‚îó‚î£‚î≥‚î´‚îª‚ïã‚î†‚îØ‚î®‚î∑‚îø‚îù‚î∞‚î•‚î∏‚ïÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 65533) {
        e[D[132][j]] = 33792 + j;
        d[33792 + j] = D[132][j];
    };
    D[135] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®‚ë©‚ë™‚ë´‚ë¨‚ë≠‚ëÆ‚ëØ‚ë∞‚ë±‚ë≤‚ë≥‚Ö†‚Ö°‚Ö¢‚Ö£‚Ö§‚Ö•‚Ö¶‚Öß‚Ö®‚Ö©ÔøΩ„çâ„åî„å¢„çç„åò„åß„åÉ„å∂„çë„çó„åç„å¶„å£„å´„çä„åª„éú„éù„éû„éé„éè„èÑ„é°ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„çªÔøΩ„Äù„Äü‚Ññ„èç‚Ñ°„ä§„ä•„ä¶„äß„ä®„à±„à≤„àπ„çæ„çΩ„çº‚âí‚â°‚à´‚àÆ‚àë‚àö‚ä•‚à†‚àü‚äø‚àµ‚à©‚à™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 65533) {
        e[D[135][j]] = 34560 + j;
        d[34560 + j] = D[135][j];
    };
    D[136] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰∫úÂîñÂ®ÉÈòøÂìÄÊÑõÊå®Âß∂ÈÄ¢ËëµËåúÁ©êÊÇ™Êè°Ê∏•Êó≠Ëë¶Ëä¶ÈØµÊ¢ìÂúßÊñ°Êâ±ÂÆõÂßêËôªÈ£¥Áµ¢Á∂æÈÆéÊàñÁ≤üË¢∑ÂÆâÂ∫µÊåâÊöóÊ°àÈóáÈûçÊùè‰ª•‰ºä‰Ωç‰æùÂÅâÂõ≤Â§∑ÂßîÂ®ÅÂ∞âÊÉüÊÑèÊÖ∞ÊòìÊ§ÖÁÇ∫ÁïèÁï∞ÁßªÁ∂≠Á∑ØËÉÉËêéË°£Ë¨ÇÈÅïÈÅ∫Âåª‰∫ï‰∫•ÂüüËÇ≤ÈÉÅÁ£Ø‰∏ÄÂ£±Ê∫¢ÈÄ∏Á®≤Ëå®ËäãÈ∞ØÂÖÅÂç∞ÂíΩÂì°Âõ†ÂßªÂºïÈ£≤Ê∑´ËÉ§Ëî≠ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 65533) {
        e[D[136][j]] = 34816 + j;
        d[34816 + j] = D[136][j];
    };
    D[137] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈô¢Èô∞Èö†ÈüªÂêãÂè≥ÂÆáÁÉèÁæΩËøÇÈõ®ÂçØÈµúÁ™∫‰∏ëÁ¢ìËáºÊ∏¶ÂòòÂîÑÊ¨ùËîöÈ∞ªÂß•Âé©Êµ¶ÁìúÈñèÂôÇ‰∫ëÈÅãÈõ≤ËçèÈ§åÂè°Âñ∂Â¨∞ÂΩ±Êò†Êõ≥Ê†ÑÊ∞∏Ê≥≥Ê¥©ÁëõÁõàÁ©éÈ†¥Ëã±Ë°õË©†Èã≠Ê∂≤Áñ´ÁõäÈßÖÊÇ¶Ë¨ÅË∂äÈñ≤Ê¶éÂé≠ÂÜÜÔøΩÂúíÂ†∞Â•ÑÂÆ¥Âª∂ÊÄ®Êé©Êè¥Ê≤øÊºîÁÇéÁÑîÁÖôÁáïÁåøÁ∏ÅËâ∂ËãëËñóÈÅ†ÈâõÈ¥õÂ°©ÊñºÊ±öÁî•ÂáπÂ§ÆÂ••ÂæÄÂøúÊäºÊó∫Ê®™Ê¨ßÊÆ¥ÁéãÁøÅË•ñÈ¥¨È¥éÈªÑÂ≤°Ê≤ñËçªÂÑÑÂ±ãÊÜ∂ËáÜÊ°∂Áâ°‰πô‰ø∫Âç∏ÊÅ©Ê∏©Á©èÈü≥‰∏ãÂåñ‰ªÆ‰Ωï‰ºΩ‰æ°‰Ω≥Âä†ÂèØÂòâÂ§èÂ´ÅÂÆ∂ÂØ°ÁßëÊöáÊûúÊû∂Ê≠åÊ≤≥ÁÅ´ÁèÇÁ¶çÁ¶æÁ®ºÁÆáËä±ËãõËåÑËç∑ËèØËèìËù¶Ë™≤Âò©Ë≤®Ëø¶ÈÅéÈúûËöä‰øÑÂ≥®ÊàëÁâôÁîªËá•ËäΩËõæË≥ÄÈõÖÈ§ìÈßï‰ªã‰ºöËß£ÂõûÂ°äÂ£äÂªªÂø´ÊÄ™ÊÇîÊÅ¢ÊáêÊàíÊãêÊîπÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 65533) {
        e[D[137][j]] = 35072 + j;
        d[35072 + j] = D[137][j];
    };
    D[138] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ≠ÅÊô¶Ê¢∞Êµ∑ÁÅ∞ÁïåÁöÜÁµµËä•ËüπÈñãÈöéË≤ùÂá±ÂäæÂ§ñÂí≥ÂÆ≥Â¥ñÊÖ®Ê¶ÇÊ∂ØÁ¢çËìãË°óË©≤ÈéßÈ™∏Êµ¨È¶®ËõôÂû£ÊüøËõéÈàéÂäÉÂöáÂêÑÂªìÊã°ÊíπÊ†ºÊ†∏ÊÆªÁç≤Á¢∫Á©´Ë¶öËßíËµ´ËºÉÈÉ≠Èñ£ÈöîÈù©Â≠¶Â≤≥Ê•ΩÈ°çÈ°éÊéõÁ¨†Ê®´ÔøΩÊ©øÊ¢∂È∞çÊΩüÂâ≤ÂñùÊÅ∞Êã¨Ê¥ªÊ∏áÊªëËëõË§êËΩÑ‰∏îÈ∞πÂè∂Ê§õÊ®∫ÈûÑÊ†™ÂÖúÁ´ÉËí≤ÈáúÈéåÂôõÈ¥®Ê†¢ËåÖËê±Á≤•ÂààËãÖÁì¶‰πæ‰æÉÂÜ†ÂØíÂàäÂãòÂãßÂ∑ªÂñöÂ†™Âß¶ÂÆåÂÆòÂØõÂπ≤ÂππÊÇ£ÊÑüÊÖ£ÊÜæÊèõÊï¢ÊüëÊ°ìÊ£∫Ê¨æÊ≠ìÊ±óÊº¢ÊæóÊΩÖÁí∞ÁîòÁõ£ÁúãÁ´øÁÆ°Á∞°Á∑©Áº∂Áø∞ËÇùËâ¶ËéûË¶≥Ë´åË≤´ÈÇÑÈëëÈñìÈñëÈñ¢Èô•ÈüìÈ§®Ëàò‰∏∏Âê´Â≤∏Â∑åÁé©ÁôåÁúºÂ≤©Áø´Ë¥ãÈõÅÈ†ëÈ°îÈ°ò‰ºÅ‰ºéÂç±ÂñúÂô®Âü∫Â•áÂ¨âÂØÑÂ≤êÂ∏åÂπæÂøåÊèÆÊú∫ÊóóÊó¢ÊúüÊ£ãÊ£ÑÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 65533) {
        e[D[138][j]] = 35328 + j;
        d[35328 + j] = D[138][j];
    };
    D[139] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ©üÂ∏∞ÊØÖÊ∞óÊ±ΩÁïøÁ•àÂ≠£Á®ÄÁ¥ÄÂæΩË¶èË®òË≤¥Ëµ∑ËªåËºùÈ£¢È®éÈ¨º‰∫ÄÂÅΩÂÑÄÂ¶ìÂÆúÊàØÊäÄÊì¨Ê¨∫Áä†ÁñëÁ•áÁæ©ËüªË™ºË≠∞Êé¨ËèäÈû†ÂêâÂêÉÂñ´Ê°îÊ©òË©∞Á†ßÊùµÈªçÂç¥ÂÆ¢ËÑöËôêÈÄÜ‰∏ò‰πÖ‰ªá‰ºëÂèäÂê∏ÂÆÆÂºìÊÄ•ÊïëÔøΩÊúΩÊ±ÇÊ±≤Ê≥£ÁÅ∏ÁêÉÁ©∂Á™ÆÁ¨àÁ¥öÁ≥æÁµ¶ÊóßÁâõÂéªÂ±ÖÂ∑®ÊãíÊã†ÊåôÊ∏†ËôöË®±Ë∑ùÈã∏ÊºÅÁ¶¶È≠ö‰∫®‰∫´‰∫¨‰æõ‰æ†ÂÉëÂÖáÁ´∂ÂÖ±Âá∂ÂçîÂå°ÂçøÂè´Âñ¨Â¢ÉÂ≥°Âº∑ÂΩäÊÄØÊÅêÊÅ≠ÊåüÊïôÊ©ãÊ≥ÅÁãÇÁã≠ÁüØËÉ∏ËÑÖËààËïéÈÉ∑Èè°ÈüøÈ•óÈ©ö‰ª∞ÂáùÂ∞≠ÊöÅÊ•≠Â±ÄÊõ≤Ê•µÁéâÊ°êÁ≤ÅÂÉÖÂã§ÂùáÂ∑æÈå¶Êñ§Ê¨£Ê¨ΩÁê¥Á¶ÅÁ¶ΩÁ≠ãÁ∑äËäπËèåË°øË•üË¨πËøëÈáëÂêüÈäÄ‰πùÂÄ∂Âè•Âå∫ÁãóÁéñÁü©Ëã¶Ë∫ØÈßÜÈßàÈßíÂÖ∑ÊÑöËôûÂñ∞Á©∫ÂÅ∂ÂØìÈÅáÈöÖ‰∏≤Ê´õÈáßÂ±ëÂ±àÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 65533) {
        e[D[139][j]] = 35584 + j;
        d[35584 + j] = D[139][j];
    };
    D[140] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊéòÁ™üÊ≤ìÈù¥ËΩ°Á™™ÁÜäÈöàÁ≤ÇÊ†óÁπ∞Ê°ëÈç¨Âã≤ÂêõËñ´Ë®ìÁæ§ËªçÈÉ°Âç¶Ë¢àÁ•Å‰øÇÂÇæÂàëÂÖÑÂïìÂú≠Áè™ÂûãÂ•ëÂΩ¢ÂæÑÊÅµÊÖ∂ÊÖßÊÜ©Êé≤Êê∫Êï¨ÊôØÊ°ÇÊ∏ìÁï¶Á®ΩÁ≥ªÁµåÁ∂ôÁπãÁΩ´ËåéËçäËõçË®àË©£Ë≠¶ËªΩÈ†öÈ∂èËä∏ËøéÈØ®ÔøΩÂäáÊàüÊíÉÊøÄÈöôÊ°ÅÂÇëÊ¨†Ê±∫ÊΩîÁ©¥ÁµêË°ÄË®£Êúà‰ª∂ÂÄπÂÄ¶ÂÅ•ÂÖºÂà∏Ââ£ÂñßÂúèÂ†ÖÂ´åÂª∫ÊÜ≤Êá∏Êã≥Êç≤Ê§úÊ®©ÁâΩÁä¨ÁåÆÁ†îÁ°ØÁµπÁúåËÇ©Ë¶ãË¨ôË≥¢ËªíÈÅ£ÈçµÈô∫È°ïÈ®ìÈπ∏ÂÖÉÂéüÂé≥ÂπªÂº¶Ê∏õÊ∫êÁéÑÁèæÁµÉËà∑Ë®ÄË´∫Èôê‰πéÂÄãÂè§ÂëºÂõ∫ÂßëÂ≠§Â∑±Â∫´ÂºßÊà∏ÊïÖÊûØÊπñÁãêÁ≥äË¢¥ËÇ°ËÉ°Ëè∞ËôéË™áË∑®Èà∑ÈõáÈ°ßÈºì‰∫î‰∫í‰ºçÂçàÂëâÂêæÂ®ØÂæåÂæ°ÊÇüÊ¢ßÊ™éÁëöÁ¢ÅË™ûË™§Ë≠∑ÈÜê‰πûÈØâ‰∫§‰Ωº‰æØÂÄôÂÄñÂÖâÂÖ¨ÂäüÂäπÂãæÂéöÂè£ÂêëÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 65533) {
        e[D[140][j]] = 35840 + j;
        d[35840 + j] = D[140][j];
    };
    D[141] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂêéÂñâÂùëÂû¢Â•ΩÂ≠îÂ≠ùÂÆèÂ∑•Â∑ßÂ∑∑Âπ∏Â∫ÉÂ∫öÂ∫∑ÂºòÊÅíÊÖåÊäóÊãòÊéßÊîªÊòÇÊôÉÊõ¥Êù≠Ê†°Ê¢óÊßãÊ±üÊ¥™Êµ©Ê∏ØÊ∫ùÁî≤ÁöáÁ°¨Á®øÁ≥†Á¥ÖÁ¥òÁµûÁ∂±ËÄïËÄÉËÇØËÇ±ËÖîËÜèËà™ËçíË°åË°°Ë¨õË≤¢Ë≥ºÈÉäÈÖµÈâ±Á†øÈãºÈñ§ÈôçÔøΩÈ†ÖÈ¶ôÈ´òÈ¥ªÂâõÂä´Âè∑ÂêàÂ£ïÊã∑Êø†Ë±™ËΩüÈ∫πÂÖãÂàªÂëäÂõΩÁ©ÄÈÖ∑Èµ†ÈªíÁçÑÊºâËÖ∞ÁîëÂøΩÊÉöÈ™®ÁãõËæºÊ≠§È†É‰ªäÂõ∞Âù§Â¢æÂ©öÊÅ®ÊááÊòèÊòÜÊ†πÊ¢±Ê∑∑ÁóïÁ¥∫ËâÆÈ≠Ç‰∫õ‰ΩêÂèâÂîÜÂµØÂ∑¶Â∑ÆÊüªÊ≤ôÁë≥Á†ÇË©êÈéñË£üÂùêÂ∫ßÊå´ÂÇµÂÇ¨ÂÜçÊúÄÂìâÂ°ûÂ¶ªÂÆ∞ÂΩ©ÊâçÊé°Ê†ΩÊ≠≥Ê∏àÁÅΩÈááÁäÄÁ†ïÁ†¶Á•≠ÊñéÁ¥∞ËèúË£ÅËºâÈöõÂâ§Âú®ÊùêÁΩ™Ë≤°ÂÜ¥ÂùÇÈò™Â†∫Ê¶äËÇ¥Âí≤Â¥éÂüºÁ¢ïÈ∑∫‰ΩúÂâäÂíãÊêæÊò®ÊúîÊüµÁ™ÑÁ≠ñÁ¥¢ÈåØÊ°úÈÆ≠Á¨πÂåôÂÜäÂà∑ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 65533) {
        e[D[141][j]] = 36096 + j;
        d[36096 + j] = D[141][j];
    };
    D[142] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂØüÊã∂ÊíÆÊì¶Êú≠ÊÆ∫Ëñ©ÈõëÁöêÈØñÊçåÈåÜÈÆ´ÁöøÊôí‰∏âÂÇòÂèÇÂ±±ÊÉ®ÊííÊï£Ê°üÁá¶ÁèäÁî£ÁÆóÁ∫ÇËöïËÆÉË≥õÈÖ∏È§êÊñ¨Êö´ÊÆã‰ªï‰ªî‰º∫‰ΩøÂà∫Âè∏Âè≤Âó£ÂõõÂ£´ÂßãÂßâÂßøÂ≠êÂ±çÂ∏ÇÂ∏´ÂøóÊÄùÊåáÊîØÂ≠úÊñØÊñΩÊó®ÊûùÊ≠¢ÔøΩÊ≠ªÊ∞èÁçÖÁ•âÁßÅÁ≥∏Á¥ôÁ¥´ËÇ¢ËÑÇËá≥Ë¶ñË©ûË©©Ë©¶Ë™åË´ÆË≥áË≥úÈõåÈ£ºÊ≠Ø‰∫ã‰ºº‰æçÂÖêÂ≠óÂØ∫ÊÖàÊåÅÊôÇÊ¨°ÊªãÊ≤ªÁàæÁíΩÁóîÁ£ÅÁ§∫ËÄåËÄ≥Ëá™ËíîËæûÊ±êÈπøÂºèË≠òÈ¥´Á´∫Ëª∏ÂÆçÈõ´‰∏ÉÂè±Âü∑Â§±Â´âÂÆ§ÊÇâÊπøÊºÜÁñæË≥™ÂÆüËîÄÁØ†ÂÅ≤Êü¥ËäùÂ±°ËïäÁ∏ûËàéÂÜôÂ∞ÑÊç®Ëµ¶ÊñúÁÖÆÁ§æÁ¥óËÄÖË¨ùËªäÈÅÆËõáÈÇ™ÂÄüÂã∫Â∞∫ÊùìÁÅºÁàµÈÖåÈáàÈå´Ëã•ÂØÇÂº±ÊÉπ‰∏ªÂèñÂÆàÊâãÊú±ÊÆäÁã©Áè†Á®ÆËÖ´Ë∂£ÈÖíÈ¶ñÂÑíÂèóÂë™ÂØøÊéàÊ®πÁ∂¨ÈúÄÂõöÂèéÂë®ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 65533) {
        e[D[142][j]] = 36352 + j;
        d[36352 + j] = D[142][j];
    };
    D[143] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂÆóÂ∞±Â∑û‰øÆÊÑÅÊãæÊ¥≤ÁßÄÁßãÁµÇÁπçÁøíËá≠ËàüËíêË°ÜË•≤ËÆêËπ¥ËºØÈÄ±ÈÖãÈÖ¨ÈõÜÈÜú‰ªÄ‰ΩèÂÖÖÂçÅÂæìÊàéÊüîÊ±ÅÊ∏ãÁç£Á∏¶ÈáçÈäÉÂèîÂ§ôÂÆøÊ∑ëÁ•ùÁ∏ÆÁ≤õÂ°æÁÜüÂá∫Ë°ìËø∞‰øäÂ≥ªÊò•Áû¨Á´£ËàúÈßøÂáÜÂæ™Êó¨Ê•ØÊÆâÊ∑≥ÔøΩÊ∫ñÊΩ§ÁõæÁ¥îÂ∑°ÈÅµÈÜáÈ†ÜÂá¶ÂàùÊâÄÊöëÊõôÊ∏öÂ∫∂Á∑íÁΩ≤Êõ∏ËñØËó∑Ë´∏Âä©ÂèôÂ•≥Â∫èÂæêÊÅïÈã§Èô§ÂÇ∑ÂÑüÂãùÂå†ÂçáÂè¨Âì®ÂïÜÂî±ÂòóÂ•®Â¶æÂ®ºÂÆµÂ∞ÜÂ∞èÂ∞ëÂ∞öÂ∫ÑÂ∫äÂª†ÂΩ∞ÊâøÊäÑÊãõÊéåÊç∑ÊòáÊòåÊò≠Êô∂ÊùæÊ¢¢Ê®üÊ®µÊ≤ºÊ∂àÊ∏âÊπòÁÑºÁÑ¶ÁÖßÁóáÁúÅÁ°ùÁ§ÅÁ••Áß∞Á´†Á¨ëÁ≤ßÁ¥πËÇñËèñËíãËïâË°ùË£≥Ë®üË®ºË©îË©≥Ë±°Ë≥ûÈÜ§Èâ¶ÈçæÈêòÈöúÈûò‰∏ä‰∏à‰∏û‰πóÂÜóÂâ∞ÂüéÂ†¥Â£åÂ¨¢Â∏∏ÊÉÖÊìæÊù°ÊùñÊµÑÁä∂Áï≥Á©£Ëí∏Ë≠≤ÈÜ∏Èå†Âò±Âü¥È£æÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 65533) {
        e[D[143][j]] = 36608 + j;
        d[36608 + j] = D[143][j];
    };
    D[144] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊã≠Ê§çÊÆñÁá≠ÁπîËÅ∑Ëâ≤Ëß¶È£üËùïËæ±Â∞ª‰º∏‰ø°‰æµÂîáÂ®†ÂØùÂØ©ÂøÉÊÖéÊåØÊñ∞ÊôãÊ£ÆÊ¶õÊµ∏Ê∑±Áî≥ÁñπÁúüÁ•ûÁß¶Á¥≥Ëá£ËäØËñ™Ë¶™Ë®∫Ë∫´ËæõÈÄ≤ÈáùÈúá‰∫∫‰ªÅÂàÉÂ°µÂ£¨Â∞ãÁîöÂ∞ΩËÖéË®äËøÖÈô£Èù≠Á¨•Ë´èÈ†àÈÖ¢Âõ≥Âé®ÔøΩÈÄóÂêπÂûÇÂ∏•Êé®Ê∞¥ÁÇäÁù°Á≤ãÁø†Ë°∞ÈÅÇÈÖîÈåêÈåòÈöèÁëûÈ´ÑÂ¥áÂµ©Êï∞Êû¢Ë∂®ÈõõÊçÆÊùâÊ§ôËèÖÈ†óÈõÄË£æÊæÑÊë∫ÂØ∏‰∏ñÁÄ¨ÁïùÊòØÂáÑÂà∂Âã¢ÂßìÂæÅÊÄßÊàêÊîøÊï¥ÊòüÊô¥Ê£≤Ê†ñÊ≠£Ê∏ÖÁâ≤ÁîüÁõõÁ≤æËÅñÂ£∞Ë£ΩË•øË™†Ë™ìË´ãÈÄùÈÜíÈùíÈùôÊñâÁ®éËÑÜÈöªÂ∏≠ÊÉúÊàöÊñ•ÊòîÊûêÁü≥Á©çÁ±çÁ∏æËÑäË≤¨Ëµ§Ë∑°ËπüÁ¢©ÂàáÊãôÊé•ÊëÇÊäòË®≠Á™ÉÁØÄË™¨Èõ™Áµ∂ËàåËùâ‰ªôÂÖàÂçÉÂç†ÂÆ£Â∞ÇÂ∞ñÂ∑ùÊà¶ÊâáÊí∞Ê†ìÊ†¥Ê≥âÊµÖÊ¥óÊüìÊΩúÁÖéÁÖΩÊóãÁ©øÁÆ≠Á∑öÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 65533) {
        e[D[144][j]] = 36864 + j;
        d[36864 + j] = D[144][j];
    };
    D[145] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁπäÁæ®ËÖ∫ËàõËàπËñ¶Ë©ÆË≥éË∑µÈÅ∏ÈÅ∑Èä≠ÈäëÈñÉÈÆÆÂâçÂñÑÊº∏ÁÑ∂ÂÖ®Á¶ÖÁπïËÜ≥Á≥éÂôåÂ°ëÂ≤®Êé™ÊõæÊõΩÊ•öÁãôÁñèÁñéÁ§éÁ•ñÁßüÁ≤óÁ¥†ÁµÑËòáË®¥ÈòªÈÅ°Èº†ÂÉßÂâµÂèåÂè¢ÂÄâÂñ™Â£ÆÂ•èÁàΩÂÆãÂ±§ÂåùÊÉ£ÊÉ≥ÊçúÊéÉÊåøÊéªÔøΩÊìçÊó©ÊõπÂ∑£ÊßçÊßΩÊºïÁá•‰∫âÁó©Áõ∏Á™ìÁ≥üÁ∑èÁ∂úËÅ°ËçâËçòËë¨ËíºËóªË£ÖËµ∞ÈÄÅÈÅ≠ÈéóÈúúÈ®íÂÉèÂ¢óÊÜéËáìËîµË¥àÈÄ†‰øÉÂÅ¥ÂâáÂç≥ÊÅØÊçâÊùüÊ∏¨Ë∂≥ÈÄü‰øóÂ±ûË≥äÊóèÁ∂öÂçíË¢ñÂÖ∂ÊèÉÂ≠òÂ≠´Â∞äÊêçÊùëÈÅú‰ªñÂ§öÂ§™Ê±∞Ë©ëÂîæÂ†ïÂ¶•ÊÉ∞ÊâìÊüÅËàµÊ•ïÈôÄÈßÑÈ®®‰ΩìÂ†ÜÂØæËÄêÂ≤±Â∏ØÂæÖÊÄ†ÊÖãÊà¥ÊõøÊ≥∞ÊªûËÉéËÖøËãîË¢ãË≤∏ÈÄÄÈÄÆÈöäÈªõÈØõ‰ª£Âè∞Â§ßÁ¨¨ÈÜçÈ°åÈ∑πÊªùÁÄßÂçìÂïÑÂÆÖÊâòÊäûÊãìÊ≤¢ÊøØÁê¢Ë®óÈê∏ÊøÅË´æËå∏ÂáßËõ∏Âè™ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 65533) {
        e[D[145][j]] = 37120 + j;
        d[37120 + j] = D[145][j];
    };
    D[146] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂè©‰ΩÜÈÅîËæ∞Â•™ËÑ±Â∑ΩÁ´™ËæøÊ£öË∞∑Áã∏È±àÊ®ΩË™∞‰∏πÂçòÂòÜÂù¶ÊãÖÊé¢Êó¶Ê≠éÊ∑°ÊπõÁÇ≠Áü≠Á´ØÁÆ™Á∂ªËÄΩËÉÜËõãË™ïÈçõÂõ£Â£áÂºæÊñ≠ÊöñÊ™ÄÊÆµÁî∑Ë´áÂÄ§Áü•Âú∞ÂºõÊÅ•Êô∫Ê±†Áó¥Á®öÁΩÆËá¥ËúòÈÅÖÈ¶≥ÁØâÁïúÁ´πÁ≠ëËìÑÔøΩÈÄêÁß©Á™íËå∂Â´°ÁùÄ‰∏≠‰ª≤ÂÆôÂø†ÊäΩÊòºÊü±Ê≥®Ëô´Ë°∑Ë®ªÈÖéÈã≥ÈßêÊ®óÁÄ¶Áå™ËãßËëóË≤Ø‰∏ÅÂÖÜÂáãÂñãÂØµÂ∏ñÂ∏≥Â∫ÅÂºîÂºµÂΩ´Âæ¥Êá≤ÊåëÊö¢ÊúùÊΩÆÁâíÁî∫Áú∫ËÅ¥ËÑπËÖ∏Ëù∂Ë™øË´úË∂ÖË∑≥ÈäöÈï∑È†ÇÈ≥•ÂãÖÊçóÁõ¥ÊúïÊ≤àÁèçË≥ÉÈéÆÈô≥Ê¥•Â¢úÊ§éÊßåËøΩÈéöÁóõÈÄöÂ°öÊ†ÇÊé¥Êßª‰ΩÉÊº¨ÊüòËæªËî¶Á∂¥ÈçîÊ§øÊΩ∞Âù™Â£∑Â¨¨Á¥¨Áà™ÂêäÈá£È∂¥‰∫≠‰ΩéÂÅúÂÅµÂâÉË≤ûÂëàÂ†§ÂÆöÂ∏ùÂ∫ïÂ∫≠Âª∑ÂºüÊÇåÊäµÊå∫ÊèêÊ¢ØÊ±ÄÁ¢áÁ¶éÁ®ãÁ∑†ËâáË®ÇË´¶ËπÑÈÄìÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 65533) {
        e[D[146][j]] = 37376 + j;
        d[37376 + j] = D[146][j];
    };
    D[147] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÇ∏ÈÑ≠ÈáòÈºéÊ≥•ÊëòÊì¢ÊïµÊª¥ÁöÑÁ¨õÈÅ©ÈèëÊ∫∫Âì≤ÂæπÊí§ËΩçËø≠ÈâÑÂÖ∏Â°´Â§©Â±ïÂ∫óÊ∑ªÁ∫èÁîúË≤ºËª¢È°õÁÇπ‰ºùÊÆøÊæ±Áî∞ÈõªÂÖéÂêêÂ†µÂ°óÂ¶¨Â±†ÂæíÊñóÊùúÊ∏°ÁôªËèüË≥≠ÈÄîÈÉΩÈççÁ†•Á†∫Âä™Â∫¶ÂúüÂ•¥ÊÄíÂÄíÂÖöÂÜ¨ÔøΩÂáçÂàÄÂîêÂ°îÂ°òÂ•óÂÆïÂ≥∂Â∂ãÊÇºÊäïÊê≠Êù±Ê°ÉÊ¢ºÊ£üÁõóÊ∑òÊπØÊ∂õÁÅØÁáàÂΩìÁóòÁ•∑Á≠âÁ≠îÁ≠íÁ≥ñÁµ±Âà∞Ëë£Ëï©Ëó§Ë®éË¨ÑË±ÜË∏èÈÄÉÈÄèÈêôÈô∂È†≠È®∞ÈóòÂÉçÂãïÂêåÂ†ÇÂ∞éÊÜßÊíûÊ¥ûÁû≥Á´•ËÉ¥ËêÑÈÅìÈäÖÂ≥†È¥áÂåøÂæóÂæ≥Ê∂úÁâπÁù£Á¶øÁØ§ÊØíÁã¨Ë™≠Ê†ÉÊ©°Âá∏Á™ÅÊ§¥Â±äÈ≥∂Ëã´ÂØÖÈÖâÁÄûÂô∏Â±ØÊÉáÊï¶Ê≤åË±öÈÅÅÈ†ìÂëëÊõáÈàçÂ•àÈÇ£ÂÜÖ‰πçÂá™ËñôË¨éÁÅòÊç∫ÈçãÊ•¢È¶¥Á∏ÑÁï∑ÂçóÊ•†ËªüÈõ£Ê±ù‰∫åÂ∞ºÂºêËø©ÂåÇË≥ëËÇâËôπÂªøÊó•‰π≥ÂÖ•ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 65533) {
        e[D[147][j]] = 37632 + j;
        d[37632 + j] = D[147][j];
    };
    D[148] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ¶ÇÂ∞øÈüÆ‰ªªÂ¶äÂøçË™çÊø°Á¶∞Á•¢ÂØßËë±Áå´ÁÜ±Âπ¥ÂøµÊçªÊíöÁáÉÁ≤ò‰πÉÂªº‰πãÂüúÂö¢ÊÇ©ÊøÉÁ¥çËÉΩËÑ≥ËÜøËæ≤Ë¶óËö§Â∑¥ÊääÊí≠Ë¶áÊù∑Ê≥¢Ê¥æÁê∂Á†¥Â©ÜÁΩµËä≠È¶¨‰ø≥ÂªÉÊãùÊéíÊïóÊùØÁõÉÁâåËÉåËÇ∫Ëº©ÈÖçÂÄçÂüπÂ™íÊ¢ÖÔøΩÊ•≥ÁÖ§ÁãΩË≤∑Â£≤Ë≥†Èô™ÈÄôËùøÁß§ÁüßËê©‰ºØÂâ•ÂçöÊãçÊüèÊ≥äÁôΩÁÆîÁ≤ïËà∂ËñÑËø´ÊõùÊº†ÁàÜÁ∏õËé´ÈßÅÈ∫¶ÂáΩÁÆ±Á°≤ÁÆ∏ËÇáÁ≠àÊ´®Âπ°ËÇåÁïëÁï†ÂÖ´Èâ¢Ê∫åÁô∫ÈÜóÈ´™‰ºêÁΩ∞ÊäúÁ≠èÈñ•È≥©Âô∫Â°ôËõ§Èöº‰º¥Âà§ÂçäÂèçÂèõÂ∏ÜÊê¨ÊñëÊùøÊ∞æÊ±éÁâàÁäØÁè≠ÁïîÁπÅËà¨Ëó©Ë≤©ÁØÑÈáÜÁÖ©È†íÈ£ØÊåΩÊô©Áï™Áõ§Á£êËïÉËõÆÂå™ÂçëÂê¶Â¶ÉÂ∫áÂΩºÊÇ≤ÊââÊâπÊä´ÊñêÊØîÊ≥åÁñ≤ÁöÆÁ¢ëÁßòÁ∑ãÁΩ∑ËÇ•Ë¢´Ë™πË≤ªÈÅøÈùûÈ£õÊ®ãÁ∞∏ÂÇôÂ∞æÂæÆÊûáÊØòÁêµÁúâÁæéÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 65533) {
        e[D[148][j]] = 37888 + j;
        d[37888 + j] = D[148][j];
    };
    D[149] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈºªÊüäÁ®óÂåπÁñãÈ´≠ÂΩ¶ËÜùËè±ËÇòÂººÂøÖÁï¢Á≠ÜÈÄºÊ°ßÂß´Â™õÁ¥êÁôæË¨¨‰øµÂΩ™Ê®ôÊ∞∑ÊºÇÁì¢Á•®Ë°®Ë©ïË±πÂªüÊèèÁóÖÁßíËãóÈå®Èã≤ËíúËõ≠È∞≠ÂìÅÂΩ¨ÊñåÊµúÁÄïË≤ßË≥ìÈ†ªÊïèÁì∂‰∏ç‰ªòÂü†Â§´Â©¶ÂØåÂÜ®Â∏ÉÂ∫úÊÄñÊâ∂Êï∑ÔøΩÊñßÊôÆÊµÆÁà∂Á¨¶ËÖêËÜöËäôË≠úË≤†Ë≥¶Ëµ¥ÈòúÈôÑ‰æÆÊí´Ê≠¶ËàûËë°Ëï™ÈÉ®Â∞ÅÊ•ìÈ¢®Ëë∫Ëïó‰ºèÂâØÂæ©ÂπÖÊúçÁ¶èËÖπË§áË¶ÜÊ∑µÂºóÊâïÊ≤∏‰ªèÁâ©ÈÆíÂàÜÂêªÂô¥Â¢≥ÊÜ§ÊâÆÁÑöÂ•ÆÁ≤âÁ≥ûÁ¥õÈõ∞ÊñáËÅû‰∏ô‰ΩµÂÖµÂ°ÄÂπ£Âπ≥ÂºäÊüÑ‰∏¶ËîΩÈñâÈôõÁ±≥È†ÅÂÉªÂ£ÅÁôñÁ¢ßÂà•Áû•ËîëÁÆÜÂÅèÂ§âÁâáÁØáÁ∑®Ëæ∫ËøîÈÅç‰æøÂãâÂ®©ÂºÅÈû≠‰øùËàóÈã™ÂúÉÊçïÊ≠©Áî´Ë£úËºîÁ©ÇÂãüÂ¢ìÊÖïÊàäÊöÆÊØçÁ∞øËè©ÂÄ£‰ø∏ÂåÖÂëÜÂ†±Â•âÂÆùÂ≥∞Â≥ØÂ¥©Â∫ñÊä±ÊçßÊîæÊñπÊúãÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 65533) {
        e[D[149][j]] = 38144 + j;
        d[38144 + j] = D[149][j];
    };
    D[150] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ≥ïÊ≥°ÁÉπÁ†≤Á∏´ËÉûËä≥ËêåËì¨ËúÇË§íË®™Ë±äÈÇ¶ÈãíÈ£ΩÈ≥≥Èµ¨‰πè‰∫°ÂÇçÂâñÂùäÂ¶®Â∏ΩÂøòÂøôÊàøÊö¥ÊúõÊüêÊ£íÂÜíÁ¥°ËÇ™ËÜ®Ë¨ÄË≤åË≤øÈâæÈò≤Âê†È†¨ÂåóÂÉïÂçúÂ¢®Êí≤Êú¥ÁâßÁù¶Á©ÜÈá¶ÂãÉÊ≤°ÊÆÜÂ†ÄÂπåÂ•îÊú¨ÁøªÂá°ÁõÜÔøΩÊë©Á£®È≠îÈ∫ªÂüãÂ¶πÊòßÊûöÊØéÂì©ÊßôÂπïËÜúÊûïÈÆ™ÊüæÈ±íÊ°ù‰∫¶‰ø£ÂèàÊäπÊú´Ê≤´ËøÑ‰æ≠Áπ≠È∫ø‰∏áÊÖ¢Ê∫ÄÊº´ËîìÂë≥Êú™È≠ÖÂ∑≥ÁÆïÂ≤¨ÂØÜËúúÊπäËìëÁ®îËÑàÂ¶ôÁ≤çÊ∞ëÁú†ÂãôÂ§¢ÁÑ°ÁâüÁüõÈúßÈµ°Ê§ãÂ©øÂ®òÂÜ•ÂêçÂëΩÊòéÁõüËø∑ÈäòÈ≥¥Âß™ÁâùÊªÖÂÖçÊ£âÁ∂øÁ∑¨Èù¢È∫∫Êë∏Ê®°ËåÇÂ¶ÑÂ≠üÊØõÁåõÁõ≤Á∂≤ËÄóËíôÂÑ≤Êú®ÈªôÁõÆÊù¢ÂãøÈ§ÖÂ∞§ÊàªÁ±æË≤∞ÂïèÊÇ∂Á¥ãÈñÄÂåÅ‰πüÂÜ∂Â§úÁà∫ËÄ∂ÈáéÂº•Áü¢ÂéÑÂΩπÁ¥ÑËñ¨Ë®≥Ë∫çÈùñÊü≥ËñÆÈëìÊÑâÊÑàÊ≤πÁôíÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 65533) {
        e[D[150][j]] = 38400 + j;
        d[38400 + j] = D[150][j];
    };
    D[151] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË´≠Ëº∏ÂîØ‰ΩëÂÑ™ÂãáÂèãÂÆ•ÂπΩÊÇ†ÊÜÇÊèñÊúâÊüöÊπßÊ∂åÁå∂Áå∑Áî±Á•êË£ïË™òÈÅäÈÇëÈÉµÈõÑËûçÂ§ï‰∫à‰Ωô‰∏éË™âËºøÈ†êÂÇ≠ÂπºÂ¶ñÂÆπÂ∫∏ÊèöÊè∫ÊìÅÊõúÊ•äÊßòÊ¥ãÊ∫∂ÁÜîÁî®Á™ØÁæäËÄÄËëâËìâË¶ÅË¨°Ë∏äÈÅ•ÈôΩÈ§äÊÖæÊäëÊ¨≤ÔøΩÊ≤ÉÊµ¥ÁøåÁøºÊ∑ÄÁæÖËû∫Ë£∏Êù•Ëé±È†ºÈõ∑Ê¥õÁµ°ËêΩÈÖ™‰π±ÂçµÂµêÊ¨ÑÊø´ËóçËò≠Ë¶ßÂà©ÂêèÂ±•ÊùéÊ¢®ÁêÜÁíÉÁó¢Ë£èË£°ÈáåÈõ¢Èô∏ÂæãÁéáÁ´ãËëéÊé†Áï•ÂäâÊµÅÊ∫úÁêâÁïôÁ°´Á≤íÈöÜÁ´úÈæç‰æ∂ÊÖÆÊóÖËôú‰∫Ü‰∫ÆÂÉö‰∏°ÂáåÂØÆÊñôÊ¢ÅÊ∂ºÁåüÁôÇÁû≠Á®úÁ≥ßËâØË´íÈÅºÈáèÈôµÈ†òÂäõÁ∑ëÂÄ´ÂéòÊûóÊ∑ãÁáêÁê≥Ëá®Ëº™Èö£È±óÈ∫üÁë†Â°ÅÊ∂ôÁ¥ØÈ°û‰ª§‰º∂‰æãÂÜ∑Âä±Â∂∫ÊÄúÁé≤Á§ºËãìÈà¥Èö∑Èõ∂ÈúäÈ∫óÈΩ¢Êö¶Ê≠¥ÂàóÂä£ÁÉàË£ÇÂªâÊÅãÊÜêÊº£ÁÖâÁ∞æÁ∑¥ËÅØÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 65533) {
        e[D[151][j]] = 38656 + j;
        d[38656 + j] = D[151][j];
    };
    D[152] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËìÆÈÄ£Èå¨ÂëÇÈ≠ØÊ´ìÁÇâË≥ÇË∑ØÈú≤Âä¥Â©ÅÂªäÂºÑÊúóÊ•ºÊ¶îÊµ™ÊºèÁâ¢ÁãºÁØ≠ËÄÅËÅæËùãÈÉéÂÖ≠È∫ìÁ¶ÑËÇãÈå≤Ë´ñÂÄ≠ÂíåË©±Ê≠™Ë≥ÑËÑáÊÉëÊû†È∑≤‰∫ô‰∫òÈ∞êË©´ËóÅËï®Ê§ÄÊπæÁ¢óËÖïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂºå‰∏ê‰∏ï‰∏™‰∏±‰∏∂‰∏º‰∏ø‰πÇ‰πñ‰πò‰∫Ç‰∫ÖË±´‰∫äËàíÂºç‰∫é‰∫û‰∫ü‰∫†‰∫¢‰∫∞‰∫≥‰∫∂‰ªé‰ªç‰ªÑ‰ªÜ‰ªÇ‰ªó‰ªû‰ª≠‰ªü‰ª∑‰ºâ‰Ωö‰º∞‰Ωõ‰Ωù‰Ωó‰Ωá‰Ω∂‰æà‰æè‰æò‰Ωª‰Ω©‰Ω∞‰æë‰ΩØ‰æÜ‰æñÂÑò‰øî‰øü‰øé‰øò‰øõ‰øë‰øö‰øê‰ø§‰ø•ÂÄöÂÄ®ÂÄîÂÄ™ÂÄ•ÂÄÖ‰ºú‰ø∂ÂÄ°ÂÄ©ÂÄ¨‰øæ‰øØÂÄëÂÄÜÂÅÉÂÅáÊúÉÂÅïÂÅêÂÅàÂÅöÂÅñÂÅ¨ÂÅ∏ÂÇÄÂÇöÂÇÖÂÇ¥ÂÇ≤ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 65533) {
        e[D[152][j]] = 38912 + j;
        d[38912 + j] = D[152][j];
    };
    D[153] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂÉâÂÉäÂÇ≥ÂÉÇÂÉñÂÉûÂÉ•ÂÉ≠ÂÉ£ÂÉÆÂÉπÂÉµÂÑâÂÑÅÂÑÇÂÑñÂÑïÂÑîÂÑöÂÑ°ÂÑ∫ÂÑ∑ÂÑºÂÑªÂÑøÂÖÄÂÖíÂÖåÂÖîÂÖ¢Á´∏ÂÖ©ÂÖ™ÂÖÆÂÜÄÂÜÇÂõòÂÜåÂÜâÂÜèÂÜëÂÜìÂÜïÂÜñÂÜ§ÂÜ¶ÂÜ¢ÂÜ©ÂÜ™ÂÜ´ÂÜ≥ÂÜ±ÂÜ≤ÂÜ∞ÂÜµÂÜΩÂáÖÂáâÂáõÂá†ËôïÂá©Âá≠ÔøΩÂá∞ÂáµÂáæÂàÑÂàãÂàîÂàéÂàßÂà™ÂàÆÂà≥ÂàπÂâèÂâÑÂâãÂâåÂâûÂâîÂâ™Ââ¥Ââ©Ââ≥ÂâøÂâΩÂäçÂäîÂäíÂâ±ÂäàÂäëËæ®ËæßÂä¨Âä≠ÂäºÂäµÂãÅÂãçÂãóÂãûÂã£Âã¶È£≠Âã†Âã≥ÂãµÂã∏ÂãπÂåÜÂåàÁî∏ÂåçÂåêÂåèÂåïÂåöÂå£ÂåØÂå±Âå≥Âå∏ÂçÄÂçÜÂçÖ‰∏óÂçâÂççÂáñÂçûÂç©ÂçÆÂ§òÂçªÂç∑ÂéÇÂéñÂé†Âé¶Âé•ÂéÆÂé∞Âé∂ÂèÉÁ∞íÈõôÂèüÊõºÁáÆÂèÆÂè®Âè≠Âè∫ÂêÅÂêΩÂëÄÂê¨Âê≠ÂêºÂêÆÂê∂Âê©ÂêùÂëéÂíèÂëµÂíéÂëüÂë±Âë∑Âë∞ÂííÂëªÂíÄÂë∂ÂíÑÂíêÂíÜÂìáÂí¢Âí∏Âí•Âí¨ÂìÑÂìàÂí®ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 65533) {
        e[D[153][j]] = 39168 + j;
        d[39168 + j] = D[153][j];
    };
    D[154] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂí´ÂìÇÂí§ÂíæÂíºÂìòÂì•Âì¶ÂîèÂîîÂìΩÂìÆÂì≠Âì∫Âì¢ÂîπÂïÄÂï£ÂïåÂîÆÂïúÂïÖÂïñÂïóÂî∏Âî≥ÂïùÂñôÂñÄÂíØÂñäÂñüÂïªÂïæÂñòÂñûÂñÆÂïºÂñÉÂñ©ÂñáÂñ®ÂóöÂóÖÂóüÂóÑÂóúÂó§ÂóîÂòîÂó∑ÂòñÂóæÂóΩÂòõÂóπÂôéÂôêÁáüÂò¥Âò∂Âò≤Âò∏ÔøΩÂô´Âô§ÂòØÂô¨Âô™ÂöÜÂöÄÂöäÂö†ÂöîÂöèÂö•ÂöÆÂö∂Âö¥ÂõÇÂöºÂõÅÂõÉÂõÄÂõàÂõéÂõëÂõìÂõóÂõÆÂõπÂúÄÂõøÂúÑÂúâÂúàÂúãÂúçÂúìÂúòÂúñÂóáÂúúÂú¶Âú∑Âú∏ÂùéÂúªÂùÄÂùèÂù©ÂüÄÂûàÂù°ÂùøÂûâÂûìÂû†Âû≥Âû§Âû™Âû∞ÂüÉÂüÜÂüîÂüíÂüìÂ†äÂüñÂü£Â†ãÂ†ôÂ†ùÂ°≤Â†°Â°¢Â°ãÂ°∞ÊØÄÂ°íÂ†ΩÂ°πÂ¢ÖÂ¢πÂ¢üÂ¢´Â¢∫Â£ûÂ¢ªÂ¢∏Â¢ÆÂ£ÖÂ£ìÂ£ëÂ£óÂ£ôÂ£òÂ£•Â£úÂ£§Â£üÂ£ØÂ£∫Â£πÂ£ªÂ£ºÂ£ΩÂ§ÇÂ§äÂ§êÂ§õÊ¢¶Â§•Â§¨Â§≠Â§≤Â§∏Â§æÁ´íÂ•ïÂ•êÂ•éÂ•öÂ•òÂ•¢Â•†Â•ßÂ•¨Â•©ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 65533) {
        e[D[154][j]] = 39424 + j;
        d[39424 + j] = D[154][j];
    };
    D[155] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ•∏Â¶ÅÂ¶ù‰Ωû‰æ´Â¶£Â¶≤ÂßÜÂß®ÂßúÂ¶çÂßôÂßöÂ®•Â®üÂ®ëÂ®úÂ®âÂ®öÂ©ÄÂ©¨Â©âÂ®µÂ®∂Â©¢Â©™Â™öÂ™ºÂ™æÂ´ãÂ´ÇÂ™ΩÂ´£Â´óÂ´¶Â´©Â´ñÂ´∫Â´ªÂ¨åÂ¨ãÂ¨ñÂ¨≤Â´êÂ¨™Â¨∂Â¨æÂ≠ÉÂ≠ÖÂ≠ÄÂ≠ëÂ≠ïÂ≠öÂ≠õÂ≠•Â≠©Â≠∞Â≠≥Â≠µÂ≠∏ÊñàÂ≠∫ÂÆÄÔøΩÂÆÉÂÆ¶ÂÆ∏ÂØÉÂØáÂØâÂØîÂØêÂØ§ÂØ¶ÂØ¢ÂØûÂØ•ÂØ´ÂØ∞ÂØ∂ÂØ≥Â∞ÖÂ∞áÂ∞àÂ∞çÂ∞ìÂ∞†Â∞¢Â∞®Â∞∏Â∞πÂ±ÅÂ±ÜÂ±éÂ±ìÂ±êÂ±èÂ≠±Â±¨Â±Æ‰π¢Â±∂Â±πÂ≤åÂ≤ëÂ≤îÂ¶õÂ≤´Â≤ªÂ≤∂Â≤ºÂ≤∑Â≥ÖÂ≤æÂ≥áÂ≥ôÂ≥©Â≥ΩÂ≥∫Â≥≠Â∂åÂ≥™Â¥ãÂ¥ïÂ¥óÂµúÂ¥üÂ¥õÂ¥ëÂ¥îÂ¥¢Â¥öÂ¥ôÂ¥òÂµåÂµíÂµéÂµãÂµ¨Âµ≥Âµ∂Â∂áÂ∂ÑÂ∂ÇÂ∂¢Â∂ùÂ∂¨Â∂ÆÂ∂ΩÂ∂êÂ∂∑Â∂ºÂ∑âÂ∑çÂ∑ìÂ∑íÂ∑ñÂ∑õÂ∑´Â∑≤Â∑µÂ∏ãÂ∏öÂ∏ôÂ∏ëÂ∏õÂ∏∂Â∏∑ÂπÑÂπÉÂπÄÂπéÂπóÂπîÂπüÂπ¢Âπ§ÂπáÂπµÂπ∂Âπ∫È∫ºÂπøÂ∫†ÂªÅÂªÇÂªàÂªêÂªèÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 65533) {
        e[D[155][j]] = 39680 + j;
        d[39680 + j] = D[155][j];
    };
    D[156] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂªñÂª£ÂªùÂªöÂªõÂª¢Âª°Âª®Âª©Âª¨Âª±Âª≥Âª∞Âª¥Âª∏ÂªæÂºÉÂºâÂΩùÂΩúÂºãÂºëÂºñÂº©Âº≠Âº∏ÂΩÅÂΩàÂΩåÂΩéÂºØÂΩëÂΩñÂΩóÂΩôÂΩ°ÂΩ≠ÂΩ≥ÂΩ∑ÂæÉÂæÇÂΩøÂæäÂæàÂæëÂæáÂæûÂæôÂæòÂæ†Âæ®Âæ≠ÂæºÂøñÂøªÂø§Âø∏Âø±ÂøùÊÇ≥ÂøøÊÄ°ÊÅ†ÔøΩÊÄôÊÄêÊÄ©ÊÄéÊÄ±ÊÄõÊÄïÊÄ´ÊÄ¶ÊÄèÊÄ∫ÊÅöÊÅÅÊÅ™ÊÅ∑ÊÅüÊÅäÊÅÜÊÅçÊÅ£ÊÅÉÊÅ§ÊÅÇÊÅ¨ÊÅ´ÊÅôÊÇÅÊÇçÊÉßÊÇÉÊÇöÊÇÑÊÇõÊÇñÊÇóÊÇíÊÇßÊÇãÊÉ°ÊÇ∏ÊÉ†ÊÉìÊÇ¥Âø∞ÊÇΩÊÉÜÊÇµÊÉòÊÖçÊÑïÊÑÜÊÉ∂ÊÉ∑ÊÑÄÊÉ¥ÊÉ∫ÊÑÉÊÑ°ÊÉªÊÉ±ÊÑçÊÑéÊÖáÊÑæÊÑ®ÊÑßÊÖäÊÑøÊÑºÊÑ¨ÊÑ¥ÊÑΩÊÖÇÊÖÑÊÖ≥ÊÖ∑ÊÖòÊÖôÊÖöÊÖ´ÊÖ¥ÊÖØÊÖ•ÊÖ±ÊÖüÊÖùÊÖìÊÖµÊÜôÊÜñÊÜáÊÜ¨ÊÜîÊÜöÊÜäÊÜëÊÜ´ÊÜÆÊáåÊáäÊáâÊá∑ÊáàÊáÉÊáÜÊÜ∫ÊáãÁΩπÊáçÊá¶Êá£Êá∂Êá∫Êá¥ÊáøÊáΩÊáºÊáæÊàÄÊààÊàâÊàçÊàåÊàîÊàõÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 65533) {
        e[D[156][j]] = 39936 + j;
        d[39936 + j] = D[156][j];
    };
    D[157] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊàûÊà°Êà™ÊàÆÊà∞Êà≤Êà≥ÊâÅÊâéÊâûÊâ£ÊâõÊâ†Êâ®ÊâºÊäÇÊäâÊâæÊäíÊäìÊäñÊãîÊäÉÊäîÊãóÊãëÊäªÊãèÊãøÊãÜÊìîÊãàÊãúÊãåÊãäÊãÇÊãáÊäõÊãâÊååÊãÆÊã±ÊåßÊåÇÊåàÊãØÊãµÊçêÊåæÊççÊêúÊçèÊéñÊééÊéÄÊé´Êç∂Êé£ÊéèÊéâÊéüÊéµÊç´ÔøΩÊç©ÊéæÊè©ÊèÄÊèÜÊè£ÊèâÊèíÊè∂ÊèÑÊêñÊê¥ÊêÜÊêìÊê¶Êê∂ÊîùÊêóÊê®ÊêèÊëßÊëØÊë∂ÊëéÊî™ÊíïÊíìÊí•Êí©ÊíàÊíºÊìöÊìíÊìÖÊìáÊíªÊìòÊìÇÊì±ÊìßËàâÊì†Êì°Êä¨Êì£ÊìØÊî¨Êì∂Êì¥Êì≤Êì∫ÊîÄÊìΩÊîòÊîúÊîÖÊî§Êî£Êî´Êî¥ÊîµÊî∑Êî∂Êî∏ÁïãÊïàÊïñÊïïÊïçÊïòÊïûÊïùÊï≤Êï∏ÊñÇÊñÉËÆäÊñõÊñüÊñ´Êñ∑ÊóÉÊóÜÊóÅÊóÑÊóåÊóíÊóõÊóôÊó†Êó°Êó±Êù≤ÊòäÊòÉÊóªÊù≥ÊòµÊò∂Êò¥ÊòúÊôèÊôÑÊôâÊôÅÊôûÊôùÊô§ÊôßÊô®ÊôüÊô¢Êô∞ÊöÉÊöàÊöéÊöâÊöÑÊöòÊöùÊõÅÊöπÊõâÊöæÊöºÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 65533) {
        e[D[157][j]] = 40192 + j;
        d[40192 + j] = D[157][j];
    };
    D[158] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊõÑÊö∏ÊõñÊõöÊõ†ÊòøÊõ¶Êõ©Êõ∞ÊõµÊõ∑ÊúèÊúñÊúûÊú¶ÊúßÈú∏ÊúÆÊúøÊú∂ÊùÅÊú∏Êú∑ÊùÜÊùûÊù†ÊùôÊù£Êù§ÊûâÊù∞Êû©ÊùºÊù™ÊûåÊûãÊû¶Êû°ÊûÖÊû∑ÊüØÊû¥Êü¨Êû≥Êü©Êû∏Êü§ÊüûÊüùÊü¢ÊüÆÊûπÊüéÊüÜÊüßÊ™úÊ†ûÊ°ÜÊ†©Ê°ÄÊ°çÊ†≤Ê°éÔøΩÊ¢≥Ê†´Ê°ôÊ°£Ê°∑Ê°øÊ¢üÊ¢èÊ¢≠Ê¢îÊ¢ùÊ¢õÊ¢ÉÊ™ÆÊ¢πÊ°¥Ê¢µÊ¢†Ê¢∫Ê§èÊ¢çÊ°æÊ§ÅÊ£äÊ§àÊ£òÊ§¢Ê§¶Ê£°Ê§åÊ£çÊ£îÊ£ßÊ£ïÊ§∂Ê§íÊ§ÑÊ£óÊ££Ê§•Ê£πÊ£†Ê£ØÊ§®Ê§™Ê§öÊ§£Ê§°Ê£ÜÊ•πÊ•∑Ê•úÊ•∏Ê•´Ê•îÊ•æÊ•ÆÊ§πÊ•¥Ê§ΩÊ•ôÊ§∞Ê•°Ê•ûÊ•ùÊ¶ÅÊ•™Ê¶≤Ê¶ÆÊßêÊ¶øÊßÅÊßìÊ¶æÊßéÂØ®ÊßäÊßùÊ¶ªÊßÉÊ¶ßÊ®ÆÊ¶ëÊ¶†Ê¶úÊ¶ïÊ¶¥ÊßûÊß®Ê®ÇÊ®õÊßøÊ¨äÊßπÊß≤ÊßßÊ®ÖÊ¶±Ê®ûÊß≠Ê®îÊß´Ê®äÊ®íÊ´ÅÊ®£Ê®ìÊ©ÑÊ®åÊ©≤Ê®∂Ê©∏Ê©áÊ©¢Ê©ôÊ©¶Ê©àÊ®∏Ê®¢Ê™êÊ™çÊ™†Ê™ÑÊ™¢Ê™£ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 65533) {
        e[D[158][j]] = 40448 + j;
        d[40448 + j] = D[158][j];
    };
    D[159] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ™óËòóÊ™ªÊ´ÉÊ´ÇÊ™∏Ê™≥Ê™¨Ê´ûÊ´ëÊ´üÊ™™Ê´öÊ´™Ê´ªÊ¨ÖËòñÊ´∫Ê¨íÊ¨ñÈ¨±Ê¨üÊ¨∏Ê¨∑ÁõúÊ¨πÈ£ÆÊ≠áÊ≠ÉÊ≠âÊ≠êÊ≠ôÊ≠îÊ≠õÊ≠üÊ≠°Ê≠∏Ê≠πÊ≠øÊÆÄÊÆÑÊÆÉÊÆçÊÆòÊÆïÊÆûÊÆ§ÊÆ™ÊÆ´ÊÆØÊÆ≤ÊÆ±ÊÆ≥ÊÆ∑ÊÆºÊØÜÊØãÊØìÊØüÊØ¨ÊØ´ÊØ≥ÊØØÔøΩÈ∫æÊ∞àÊ∞ìÊ∞îÊ∞õÊ∞§Ê∞£Ê±ûÊ±ïÊ±¢Ê±™Ê≤ÇÊ≤çÊ≤öÊ≤ÅÊ≤õÊ±æÊ±®Ê±≥Ê≤íÊ≤êÊ≥ÑÊ≥±Ê≥ìÊ≤ΩÊ≥óÊ≥ÖÊ≥ùÊ≤ÆÊ≤±Ê≤æÊ≤∫Ê≥õÊ≥ØÊ≥ôÊ≥™Ê¥üË°çÊ¥∂Ê¥´Ê¥ΩÊ¥∏Ê¥ôÊ¥µÊ¥≥Ê¥íÊ¥åÊµ£Ê∂ìÊµ§ÊµöÊµπÊµôÊ∂éÊ∂ïÊø§Ê∂ÖÊ∑πÊ∏ïÊ∏äÊ∂µÊ∑áÊ∑¶Ê∂∏Ê∑ÜÊ∑¨Ê∑ûÊ∑åÊ∑®Ê∑íÊ∑ÖÊ∑∫Ê∑ôÊ∑§Ê∑ïÊ∑™Ê∑ÆÊ∏≠ÊπÆÊ∏ÆÊ∏ôÊπ≤ÊπüÊ∏æÊ∏£Êπ´Ê∏´Êπ∂ÊπçÊ∏üÊπÉÊ∏∫ÊπéÊ∏§ÊªøÊ∏ùÊ∏∏Ê∫ÇÊ∫™Ê∫òÊªâÊ∫∑ÊªìÊ∫ΩÊ∫ØÊªÑÊ∫≤ÊªîÊªïÊ∫èÊ∫•ÊªÇÊ∫üÊΩÅÊºëÁÅåÊª¨Êª∏ÊªæÊºøÊª≤Êº±ÊªØÊº≤ÊªåÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 65533) {
        e[D[159][j]] = 40704 + j;
        d[40704 + j] = D[159][j];
    };
    D[224] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊºæÊºìÊª∑ÊæÜÊΩ∫ÊΩ∏ÊæÅÊæÄÊΩØÊΩõÊø≥ÊΩ≠ÊæÇÊΩºÊΩòÊæéÊæëÊøÇÊΩ¶Êæ≥Êæ£Êæ°Êæ§ÊæπÊøÜÊæ™ÊøüÊøïÊø¨ÊøîÊøòÊø±ÊøÆÊøõÁÄâÁÄãÊø∫ÁÄëÁÄÅÁÄèÊøæÁÄõÁÄöÊΩ¥ÁÄùÁÄòÁÄüÁÄ∞ÁÄæÁÄ≤ÁÅëÁÅ£ÁÇôÁÇíÁÇØÁÉ±ÁÇ¨ÁÇ∏ÁÇ≥ÁÇÆÁÉüÁÉãÁÉùÔøΩÁÉôÁÑâÁÉΩÁÑúÁÑôÁÖ•ÁÖïÁÜàÁÖ¶ÁÖ¢ÁÖåÁÖñÁÖ¨ÁÜèÁáªÁÜÑÁÜïÁÜ®ÁÜ¨ÁáóÁÜπÁÜæÁáíÁáâÁáîÁáéÁá†Áá¨ÁáßÁáµÁáºÁáπÁáøÁàçÁàêÁàõÁà®Áà≠Áà¨Áà∞Áà≤ÁàªÁàºÁàøÁâÄÁâÜÁâãÁâòÁâ¥ÁâæÁäÇÁäÅÁäáÁäíÁäñÁä¢ÁäßÁäπÁä≤ÁãÉÁãÜÁãÑÁãéÁãíÁã¢Áã†Áã°ÁãπÁã∑ÂÄèÁåóÁåäÁåúÁåñÁåùÁå¥ÁåØÁå©Áå•ÁåæÁçéÁçèÈªòÁçóÁç™Áç®Áç∞Áç∏ÁçµÁçªÁç∫ÁèàÁé≥ÁèéÁéªÁèÄÁè•ÁèÆÁèûÁí¢ÁêÖÁëØÁê•Áè∏Áê≤Áê∫ÁëïÁêøÁëüÁëôÁëÅÁëúÁë©Áë∞Áë£Áë™Áë∂ÁëæÁíãÁíûÁíßÁìäÁìèÁìîÁè±ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) {
        e[D[224][j]] = 57344 + j;
        d[57344 + j] = D[224][j];
    };
    D[225] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁì†Áì£ÁìßÁì©ÁìÆÁì≤Áì∞Áì±Áì∏Áì∑ÁîÑÁîÉÁîÖÁîåÁîéÁîçÁîïÁîìÁîûÁî¶Áî¨ÁîºÁïÑÁïçÁïäÁïâÁïõÁïÜÁïöÁï©Áï§ÁïßÁï´Áï≠Áï∏Áï∂ÁñÜÁñáÁï¥ÁñäÁñâÁñÇÁñîÁñöÁñùÁñ•Áñ£ÁóÇÁñ≥ÁóÉÁñµÁñΩÁñ∏ÁñºÁñ±ÁóçÁóäÁóíÁóôÁó£ÁóûÁóæÁóøÔøΩÁóºÁòÅÁó∞Áó∫Áó≤Áó≥ÁòãÁòçÁòâÁòüÁòßÁò†Áò°Áò¢Áò§Áò¥Áò∞ÁòªÁôáÁôàÁôÜÁôúÁôòÁô°Áô¢Áô®Áô©Áô™ÁôßÁô¨Áô∞Áô≤Áô∂Áô∏ÁôºÁöÄÁöÉÁöàÁöãÁöéÁöñÁöìÁöôÁööÁö∞Áö¥Áö∏ÁöπÁö∫ÁõÇÁõçÁõñÁõíÁõûÁõ°Áõ•ÁõßÁõ™ËòØÁõªÁúàÁúáÁúÑÁú©Áú§ÁúûÁú•Áú¶ÁúõÁú∑Áú∏ÁùáÁùöÁù®Áù´ÁùõÁù•ÁùøÁùæÁùπÁûéÁûãÁûëÁû†ÁûûÁû∞Áû∂ÁûπÁûøÁûºÁûΩÁûªÁüáÁüçÁüóÁüöÁüúÁü£ÁüÆÁüºÁ†åÁ†íÁ§¶Á††Á§™Á°ÖÁ¢éÁ°¥Á¢ÜÁ°ºÁ¢öÁ¢åÁ¢£Á¢µÁ¢™Á¢ØÁ£ëÁ£ÜÁ£ãÁ£îÁ¢æÁ¢ºÁ£ÖÁ£äÁ£¨ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) {
        e[D[225][j]] = 57600 + j;
        d[57600 + j] = D[225][j];
    };
    D[226] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ£ßÁ£öÁ£ΩÁ£¥Á§áÁ§íÁ§ëÁ§ôÁ§¨Á§´Á•ÄÁ•†Á•óÁ•üÁ•öÁ•ïÁ•ìÁ•∫Á•øÁ¶äÁ¶ùÁ¶ßÈΩãÁ¶™Á¶ÆÁ¶≥Á¶πÁ¶∫ÁßâÁßïÁßßÁß¨Áß°Áß£Á®àÁ®çÁ®òÁ®ôÁ®†Á®üÁ¶ÄÁ®±Á®ªÁ®æÁ®∑Á©ÉÁ©óÁ©âÁ©°Á©¢Á©©ÈæùÁ©∞Á©πÁ©ΩÁ™àÁ™óÁ™ïÁ™òÁ™ñÁ™©Á´àÁ™∞ÔøΩÁ™∂Á´ÖÁ´ÑÁ™øÈÇÉÁ´áÁ´äÁ´çÁ´èÁ´ïÁ´ìÁ´ôÁ´öÁ´ùÁ´°Á´¢Á´¶Á´≠Á´∞Á¨ÇÁ¨èÁ¨äÁ¨ÜÁ¨≥Á¨òÁ¨ôÁ¨ûÁ¨µÁ¨®Á¨∂Á≠êÁ≠∫Á¨ÑÁ≠çÁ¨ãÁ≠åÁ≠ÖÁ≠µÁ≠•Á≠¥Á≠ßÁ≠∞Á≠±Á≠¨Á≠ÆÁÆùÁÆòÁÆüÁÆçÁÆúÁÆöÁÆãÁÆíÁÆèÁ≠ùÁÆôÁØãÁØÅÁØåÁØèÁÆ¥ÁØÜÁØùÁØ©Á∞ëÁ∞îÁØ¶ÁØ•Á±†Á∞ÄÁ∞áÁ∞ìÁØ≥ÁØ∑Á∞óÁ∞çÁØ∂Á∞£Á∞ßÁ∞™Á∞üÁ∞∑Á∞´Á∞ΩÁ±åÁ±ÉÁ±îÁ±èÁ±ÄÁ±êÁ±òÁ±üÁ±§Á±ñÁ±•Á±¨Á±µÁ≤ÉÁ≤êÁ≤§Á≤≠Á≤¢Á≤´Á≤°Á≤®Á≤≥Á≤≤Á≤±Á≤ÆÁ≤πÁ≤ΩÁ≥ÄÁ≥ÖÁ≥ÇÁ≥òÁ≥íÁ≥úÁ≥¢È¨ªÁ≥ØÁ≥≤Á≥¥Á≥∂Á≥∫Á¥ÜÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) {
        e[D[226][j]] = 57856 + j;
        d[57856 + j] = D[226][j];
    };
    D[227] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¥ÇÁ¥úÁ¥ïÁ¥äÁµÖÁµãÁ¥ÆÁ¥≤Á¥øÁ¥µÁµÜÁµ≥ÁµñÁµéÁµ≤Áµ®ÁµÆÁµèÁµ£Á∂ìÁ∂âÁµõÁ∂èÁµΩÁ∂õÁ∂∫Á∂ÆÁ∂£Á∂µÁ∑áÁ∂ΩÁ∂´Á∏ΩÁ∂¢Á∂ØÁ∑úÁ∂∏Á∂üÁ∂∞Á∑òÁ∑ùÁ∑§Á∑ûÁ∑ªÁ∑≤Á∑°Á∏ÖÁ∏äÁ∏£Á∏°Á∏íÁ∏±Á∏üÁ∏âÁ∏ãÁ∏¢ÁπÜÁπ¶Á∏ªÁ∏µÁ∏πÁπÉÁ∏∑ÔøΩÁ∏≤Á∏∫ÁπßÁπùÁπñÁπûÁπôÁπöÁππÁπ™Áπ©ÁπºÁπªÁ∫ÉÁ∑ïÁπΩËæÆÁπøÁ∫àÁ∫âÁ∫åÁ∫íÁ∫êÁ∫ìÁ∫îÁ∫ñÁ∫éÁ∫õÁ∫úÁº∏Áº∫ÁΩÖÁΩåÁΩçÁΩéÁΩêÁΩëÁΩïÁΩîÁΩòÁΩüÁΩ†ÁΩ®ÁΩ©ÁΩßÁΩ∏ÁæÇÁæÜÁæÉÁæàÁæáÁæåÁæîÁæûÁæùÁæöÁæ£ÁæØÁæ≤ÁæπÁæÆÁæ∂Áæ∏Ë≠±ÁøÖÁøÜÁøäÁøïÁøîÁø°Áø¶Áø©Áø≥ÁøπÈ£úËÄÜËÄÑËÄãËÄíËÄòËÄôËÄúËÄ°ËÄ®ËÄøËÄªËÅäËÅÜËÅíËÅòËÅöËÅüËÅ¢ËÅ®ËÅ≥ËÅ≤ËÅ∞ËÅ∂ËÅπËÅΩËÅøËÇÑËÇÜËÇÖËÇõËÇìËÇöËÇ≠ÂÜêËÇ¨ËÉõËÉ•ËÉôËÉùËÉÑËÉöËÉñËÑâËÉØËÉ±ËÑõËÑ©ËÑ£ËÑØËÖãÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) {
        e[D[227][j]] = 58112 + j;
        d[58112 + j] = D[227][j];
    };
    D[228] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈöãËÖÜËÑæËÖìËÖëËÉºËÖ±ËÖÆËÖ•ËÖ¶ËÖ¥ËÜÉËÜàËÜäËÜÄËÜÇËÜ†ËÜïËÜ§ËÜ£ËÖüËÜìËÜ©ËÜ∞ËÜµËÜæËÜ∏ËÜΩËáÄËáÇËÜ∫ËáâËáçËáëËáôËáòËáàËáöËáüËá†ËáßËá∫ËáªËáæËàÅËàÇËàÖËàáËàäËàçËàêËàñËà©Ëà´Ëà∏Ëà≥ËâÄËâôËâòËâùËâöËâüËâ§ÔøΩËâ¢Ëâ®Ëâ™Ëâ´ËàÆËâ±Ëâ∑Ëâ∏ËâæËäçËäíËä´ËäüËäªËä¨Ëã°Ëã£ËãüËãíËã¥Ëã≥Ëã∫ËéìËåÉËãªËãπËãûËåÜËãúËåâËãôËåµËå¥ËåñËå≤Ëå±ËçÄËåπËçêËçÖËåØËå´ËåóËåòËéÖËéöËé™ËéüËé¢ËéñËå£ËééËéáËéäËçºËéµËç≥ËçµËé†ËéâËé®Ëè¥ËêìËè´ËèéËèΩËêÉËèòËêãËèÅËè∑ËêáËè†Ëè≤ËêçËê¢Ëê†ËéΩËê∏ËîÜËèªËë≠Ëê™ËêºËïöËíÑËë∑Ëë´Ëí≠ËëÆËíÇËë©ËëÜËê¨ËëØËëπËêµËìäËë¢ËíπËíøËíüËìôËìçËíªËìöËìêËìÅËìÜËìñËí°Ëî°ËìøËì¥ËîóËîòËî¨ËîüËîïËîîËìºËïÄËï£ËïòËïàÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) {
        e[D[228][j]] = 58368 + j;
        d[58368 + j] = D[228][j];
    };
    D[229] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËïÅËòÇËïãËïïËñÄËñ§ËñàËñëËñäËñ®Ëï≠ËñîËñõËó™ËñáËñúËï∑ËïæËñêËóâËñ∫ËóèËñπËóêËóïËóùËó•ËóúËóπËòäËòìËòãËóæËó∫ËòÜËò¢ËòöËò∞ËòøËôç‰πïËôîËôüËôßËô±ËöìËö£Ëö©Ëö™ËöãËöåËö∂ËöØËõÑËõÜËö∞ËõâË†£Ëö´ËõîËõûËõ©Ëõ¨ÔøΩËõüËõõËõØËúíËúÜËúàËúÄËúÉËõªËúëËúâËúçËõπËúäËú¥ËúøËú∑ËúªËú•Ëú©ËúöËù†ËùüËù∏ËùåËùéËù¥ËùóËù®ËùÆËùôËùìËù£Ëù™Ë†ÖËû¢ËûüËûÇËûØËüãËûΩËüÄËüêÈõñËû´ËüÑËû≥ËüáËüÜËûªËüØËü≤Ëü†Ë†èË†çËüæËü∂Ëü∑Ë†éËüíË†ëË†ñË†ïË†¢Ë†°Ë†±Ë†∂Ë†πË†ßË†ªË°ÑË°ÇË°íË°ôË°ûË°¢Ë°´Ë¢ÅË°æË¢ûË°µË°ΩË¢µË°≤Ë¢ÇË¢óË¢íË¢ÆË¢ôË¢¢Ë¢çË¢§Ë¢∞Ë¢øË¢±Ë£ÉË£ÑË£îË£òË£ôË£ùË£πË§ÇË£ºË£¥Ë£®Ë£≤Ë§ÑË§åË§äË§ìË•ÉË§ûË§•Ë§™Ë§´Ë•ÅË•ÑË§ªË§∂Ë§∏Ë•åË§ùË•†Ë•ûÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) {
        e[D[229][j]] = 58624 + j;
        d[58624 + j] = D[229][j];
    };
    D[230] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË•¶Ë•§Ë•≠Ë•™Ë•ØË•¥Ë•∑Ë•æË¶ÉË¶àË¶äË¶ìË¶òË¶°Ë¶©Ë¶¶Ë¶¨Ë¶ØË¶≤Ë¶∫Ë¶ΩË¶øËßÄËßöËßúËßùËßßËß¥Ëß∏Ë®ÉË®ñË®êË®åË®õË®ùË®•Ë®∂Ë©ÅË©õË©íË©ÜË©àË©ºË©≠Ë©¨Ë©¢Ë™ÖË™ÇË™ÑË™®Ë™°Ë™ëË™•Ë™¶Ë™öË™£Ë´ÑË´çË´ÇË´öË´´Ë´≥Ë´ßÔøΩË´§Ë´±Ë¨îË´†Ë´¢Ë´∑Ë´ûË´õË¨åË¨áË¨öË´°Ë¨ñË¨êË¨óË¨†Ë¨≥Èû´Ë¨¶Ë¨´Ë¨æË¨®Ë≠ÅË≠åË≠èË≠éË≠âË≠ñË≠õË≠öË≠´Ë≠üË≠¨Ë≠ØË≠¥Ë≠ΩËÆÄËÆåËÆéËÆíËÆìËÆñËÆôËÆöË∞∫Ë±ÅË∞øË±àË±åË±éË±êË±ïË±¢Ë±¨Ë±∏Ë±∫Ë≤ÇË≤âË≤ÖË≤äË≤çË≤éË≤îË±ºË≤òÊàùË≤≠Ë≤™Ë≤ΩË≤≤Ë≤≥Ë≤ÆË≤∂Ë≥àË≥ÅË≥§Ë≥£Ë≥öË≥ΩË≥∫Ë≥ªË¥ÑË¥ÖË¥äË¥áË¥èË¥çË¥êÈΩéË¥ìË≥çË¥îË¥ñËµßËµ≠Ëµ±Ëµ≥Ë∂ÅË∂ôË∑ÇË∂æË∂∫Ë∑èË∑öË∑ñË∑åË∑õË∑ãË∑™Ë∑´Ë∑üË∑£Ë∑ºË∏àË∏âË∑øË∏ùË∏ûË∏êË∏üËπÇË∏µË∏∞Ë∏¥ËπäÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) {
        e[D[230][j]] = 58880 + j;
        d[58880 + j] = D[230][j];
    };
    D[231] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËπáËπâËπåËπêËπàËπôËπ§Ëπ†Ë∏™Ëπ£ËπïËπ∂Ëπ≤ËπºË∫ÅË∫áË∫ÖË∫ÑË∫ãË∫äË∫ìË∫ëË∫îË∫ôË∫™Ë∫°Ë∫¨Ë∫∞ËªÜË∫±Ë∫æËªÖËªàËªãËªõËª£ËªºËªªËª´ËªæËºäËºÖËºïËºíËºôËºìËºúËºüËºõËºåËº¶Ëº≥ËºªËºπËΩÖËΩÇËºæËΩåËΩâËΩÜËΩéËΩóËΩúÔøΩËΩ¢ËΩ£ËΩ§ËæúËæüËæ£Ëæ≠ËæØËæ∑ËøöËø•Ëø¢Ëø™ËøØÈÇáËø¥ÈÄÖËøπËø∫ÈÄëÈÄïÈÄ°ÈÄçÈÄûÈÄñÈÄãÈÄßÈÄ∂ÈÄµÈÄπËø∏ÈÅèÈÅêÈÅëÈÅíÈÄéÈÅâÈÄæÈÅñÈÅòÈÅûÈÅ®ÈÅØÈÅ∂Èö®ÈÅ≤ÈÇÇÈÅΩÈÇÅÈÇÄÈÇäÈÇâÈÇèÈÇ®ÈÇØÈÇ±ÈÇµÈÉ¢ÈÉ§ÊâàÈÉõÈÑÇÈÑíÈÑôÈÑ≤ÈÑ∞ÈÖäÈÖñÈÖòÈÖ£ÈÖ•ÈÖ©ÈÖ≥ÈÖ≤ÈÜãÈÜâÈÜÇÈÜ¢ÈÜ´ÈÜØÈÜ™ÈÜµÈÜ¥ÈÜ∫ÈáÄÈáÅÈáâÈáãÈáêÈáñÈáüÈá°ÈáõÈáºÈáµÈá∂ÈàûÈáøÈàîÈà¨ÈàïÈàëÈâûÈâóÈâÖÈââÈâ§ÈâàÈäïÈàøÈâãÈâêÈäúÈäñÈäìÈäõÈâöÈãèÈäπÈä∑Èã©ÈåèÈã∫ÈçÑÈåÆÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) {
        e[D[231][j]] = 59136 + j;
        d[59136 + j] = D[231][j];
    };
    D[232] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈåôÈå¢ÈåöÈå£Èå∫ÈåµÈåªÈçúÈç†ÈçºÈçÆÈçñÈé∞Èé¨Èé≠ÈéîÈéπÈèñÈèóÈè®Èè•ÈèòÈèÉÈèùÈèêÈèàÈè§ÈêöÈêîÈêìÈêÉÈêáÈêêÈê∂Èê´ÈêµÈê°Èê∫ÈëÅÈëíÈëÑÈëõÈë†Èë¢ÈëûÈë™Èà©Èë∞ÈëµÈë∑ÈëΩÈëöÈëºÈëæÈíÅÈëøÈñÇÈñáÈñäÈñîÈññÈñòÈñôÔøΩÈñ†Èñ®ÈñßÈñ≠ÈñºÈñªÈñπÈñæÈóäÊø∂ÈóÉÈóçÈóåÈóïÈóîÈóñÈóúÈó°Èó•Èó¢Èò°Èò®ÈòÆÈòØÈôÇÈôåÈôèÈôãÈô∑ÈôúÈôûÈôùÈôüÈô¶Èô≤Èô¨ÈöçÈöòÈöïÈöóÈö™ÈößÈö±Èö≤Èö∞Èö¥Èö∂Èö∏ÈöπÈõéÈõãÈõâÈõçË•çÈõúÈúçÈõïÈõπÈúÑÈúÜÈúàÈúìÈúéÈúëÈúèÈúñÈúôÈú§Èú™Èú∞ÈúπÈúΩÈúæÈùÑÈùÜÈùàÈùÇÈùâÈùúÈù†Èù§Èù¶Èù®ÂãíÈù´Èù±ÈùπÈûÖÈùºÈûÅÈù∫ÈûÜÈûãÈûèÈûêÈûúÈû®Èû¶Èû£Èû≥Èû¥ÈüÉÈüÜÈüàÈüãÈüúÈü≠ÈΩèÈü≤Á´üÈü∂ÈüµÈ†èÈ†åÈ†∏È†§È†°È†∑È†ΩÈ°ÜÈ°èÈ°ãÈ°´È°ØÈ°∞ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) {
        e[D[232][j]] = 59392 + j;
        d[59392 + j] = D[232][j];
    };
    D[233] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ°±È°¥È°≥È¢™È¢ØÈ¢±È¢∂È£ÑÈ£ÉÈ£ÜÈ£©È£´È§ÉÈ§âÈ§íÈ§îÈ§òÈ§°È§ùÈ§ûÈ§§È§†È§¨È§ÆÈ§ΩÈ§æÈ•ÇÈ•âÈ•ÖÈ•êÈ•ãÈ•ëÈ•íÈ•åÈ•ïÈ¶óÈ¶òÈ¶•È¶≠È¶ÆÈ¶ºÈßüÈßõÈßùÈßòÈßëÈß≠ÈßÆÈß±Èß≤ÈßªÈß∏È®ÅÈ®èÈ®ÖÈß¢È®ôÈ®´È®∑È©ÖÈ©ÇÈ©ÄÈ©ÉÔøΩÈ®æÈ©ïÈ©çÈ©õÈ©óÈ©üÈ©¢È©•È©§È©©È©´È©™È™≠È™∞È™ºÈ´ÄÈ´èÈ´ëÈ´ìÈ´îÈ´ûÈ´üÈ´¢È´£È´¶È´ØÈ´´È´ÆÈ´¥È´±È´∑È´ªÈ¨ÜÈ¨òÈ¨öÈ¨üÈ¨¢È¨£È¨•È¨ßÈ¨®È¨©È¨™È¨ÆÈ¨ØÈ¨≤È≠ÑÈ≠ÉÈ≠èÈ≠çÈ≠éÈ≠ëÈ≠òÈ≠¥ÈÆìÈÆÉÈÆëÈÆñÈÆóÈÆüÈÆ†ÈÆ®ÈÆ¥ÈØÄÈØäÈÆπÈØÜÈØèÈØëÈØíÈØ£ÈØ¢ÈØ§ÈØîÈØ°È∞∫ÈØ≤ÈØ±ÈØ∞È∞ïÈ∞îÈ∞âÈ∞ìÈ∞åÈ∞ÜÈ∞àÈ∞íÈ∞äÈ∞ÑÈ∞ÆÈ∞õÈ∞•È∞§È∞°È∞∞È±áÈ∞≤È±ÜÈ∞æÈ±öÈ±†È±ßÈ±∂È±∏È≥ßÈ≥¨È≥∞È¥âÈ¥àÈ≥´È¥ÉÈ¥ÜÈ¥™È¥¶È∂ØÈ¥£È¥üÈµÑÈ¥ïÈ¥íÈµÅÈ¥øÈ¥æÈµÜÈµàÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) {
        e[D[233][j]] = 59648 + j;
        d[59648 + j] = D[233][j];
    };
    D[234] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈµùÈµûÈµ§ÈµëÈµêÈµôÈµ≤È∂âÈ∂áÈ∂´ÈµØÈµ∫È∂öÈ∂§È∂©È∂≤È∑ÑÈ∑ÅÈ∂ªÈ∂∏È∂∫È∑ÜÈ∑èÈ∑ÇÈ∑ôÈ∑ìÈ∑∏È∑¶È∑≠È∑ØÈ∑ΩÈ∏öÈ∏õÈ∏ûÈπµÈππÈπΩÈ∫ÅÈ∫àÈ∫ãÈ∫åÈ∫íÈ∫ïÈ∫ëÈ∫ùÈ∫•È∫©È∫∏È∫™È∫≠Èù°ÈªåÈªéÈªèÈªêÈªîÈªúÈªûÈªùÈª†Èª•Èª®ÈªØÔøΩÈª¥Èª∂Èª∑ÈªπÈªªÈªºÈªΩÈºáÈºàÁö∑ÈºïÈº°Èº¨ÈºæÈΩäÈΩíÈΩîÈΩ£ÈΩüÈΩ†ÈΩ°ÈΩ¶ÈΩßÈΩ¨ÈΩ™ÈΩ∑ÈΩ≤ÈΩ∂ÈæïÈæúÈæ†Â†ØÊßáÈÅôÁë§ÂáúÁÜôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) {
        e[D[234][j]] = 59904 + j;
        d[59904 + j] = D[234][j];
    };
    D[237] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ∫äË§úÈçàÈäàËìú‰øâÁÇªÊò±Ê£àÈãπÊõªÂΩÖ‰∏®‰ª°‰ªº‰ºÄ‰ºÉ‰ºπ‰Ωñ‰æí‰æä‰æö‰æî‰øçÂÅÄÂÄ¢‰øøÂÄûÂÅÜÂÅ∞ÂÅÇÂÇîÂÉ¥ÂÉòÂÖäÂÖ§ÂÜùÂÜæÂá¨ÂàïÂäúÂä¶ÂãÄÂãõÂåÄÂåáÂå§Âç≤ÂéìÂé≤ÂèùÔ®éÂíúÂíäÂí©ÂìøÂñÜÂùôÂù•Âû¨ÂüàÂüáÔ®èÔøΩÔ®êÂ¢ûÂ¢≤Â§ãÂ•ìÂ•õÂ•ùÂ•£Â¶§Â¶∫Â≠ñÂØÄÁîØÂØòÂØ¨Â∞ûÂ≤¶Â≤∫Â≥µÂ¥ßÂµìÔ®ëÂµÇÂµ≠Â∂∏Â∂πÂ∑êÂº°Âº¥ÂΩßÂæ∑ÂøûÊÅùÊÇÖÊÇäÊÉûÊÉïÊÑ†ÊÉ≤ÊÑëÊÑ∑ÊÑ∞ÊÜòÊàìÊä¶ÊèµÊë†ÊíùÊìéÊïéÊòÄÊòïÊòªÊòâÊòÆÊòûÊò§Êô•ÊôóÊôôÔ®íÊô≥ÊöôÊö†Êö≤ÊöøÊõ∫ÊúéÔ§©Êù¶ÊûªÊ°íÊüÄÊ†ÅÊ°ÑÊ£èÔ®ìÊ•®Ô®îÊ¶òÊß¢Ê®∞Ê©´Ê©ÜÊ©≥Ê©æÊ´¢Ê´§ÊØñÊ∞øÊ±úÊ≤ÜÊ±ØÊ≥öÊ¥ÑÊ∂áÊµØÊ∂ñÊ∂¨Ê∑èÊ∑∏Ê∑≤Ê∑ºÊ∏πÊπúÊ∏ßÊ∏ºÊ∫øÊæàÊæµÊøµÁÄÖÁÄáÁÄ®ÁÇÖÁÇ´ÁÑèÁÑÑÁÖúÁÖÜÁÖáÔ®ïÁáÅÁáæÁä±ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) {
        e[D[237][j]] = 60672 + j;
        d[60672 + j] = D[237][j];
    };
    D[238] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁäæÁå§Ô®ñÁç∑ÁéΩÁèâÁèñÁè£ÁèíÁêáÁèµÁê¶Áê™Áê©ÁêÆÁë¢ÁíâÁíüÁîÅÁïØÁöÇÁöúÁöûÁöõÁö¶Ô®óÁùÜÂäØÁ†°Á°éÁ°§Á°∫Á§∞Ô®òÔ®ôÔ®öÁ¶îÔ®õÁ¶õÁ´ëÁ´ßÔ®úÁ´´ÁÆûÔ®ùÁµàÁµúÁ∂∑Á∂†Á∑ñÁπíÁΩáÁæ°Ô®ûËåÅËç¢ËçøËèáËè∂ËëàËí¥ËïìËïôÔøΩËï´Ô®üËñ∞Ô®†Ô®°Ë†áË£µË®íË®∑Ë©πË™ßË™æË´üÔ®¢Ë´∂Ë≠ìË≠øË≥∞Ë≥¥Ë¥íËµ∂Ô®£ËªèÔ®§Ô®•ÈÅßÈÉûÔ®¶ÈÑïÈÑßÈáöÈáóÈáûÈá≠ÈáÆÈá§Èá•ÈàÜÈàêÈàäÈà∫ÈâÄÈàºÈâéÈâôÈâëÈàπÈâßÈäßÈâ∑Èâ∏ÈãßÈãóÈãôÈãêÔ®ßÈãïÈã†ÈãìÈå•Èå°ÈãªÔ®®ÈåûÈãøÈåùÈåÇÈç∞ÈçóÈé§ÈèÜÈèûÈè∏Èê±ÈëÖÈëàÈñíÔßúÔ®©ÈöùÈöØÈú≥ÈúªÈùÉÈùçÈùèÈùëÈùïÈ°óÈ°•Ô®™Ô®´È§ßÔ®¨È¶ûÈ©éÈ´ôÈ´úÈ≠µÈ≠≤ÈÆèÈÆ±ÈÆªÈ∞ÄÈµ∞Èµ´Ô®≠È∏ôÈªëÔøΩÔøΩ‚Ö∞‚Ö±‚Ö≤‚Ö≥‚Ö¥‚Öµ‚Ö∂‚Ö∑‚Ö∏‚ÖπÔø¢Ôø§ÔºáÔºÇÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) {
        e[D[238][j]] = 60928 + j;
        d[60928 + j] = D[238][j];
    };
    D[250] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚Ö∞‚Ö±‚Ö≤‚Ö≥‚Ö¥‚Öµ‚Ö∂‚Ö∑‚Ö∏‚Öπ‚Ö†‚Ö°‚Ö¢‚Ö£‚Ö§‚Ö•‚Ö¶‚Öß‚Ö®‚Ö©Ôø¢Ôø§ÔºáÔºÇ„à±‚Ññ‚Ñ°‚àµÁ∫äË§úÈçàÈäàËìú‰øâÁÇªÊò±Ê£àÈãπÊõªÂΩÖ‰∏®‰ª°‰ªº‰ºÄ‰ºÉ‰ºπ‰Ωñ‰æí‰æä‰æö‰æî‰øçÂÅÄÂÄ¢‰øøÂÄûÂÅÜÂÅ∞ÂÅÇÂÇîÂÉ¥ÂÉòÂÖäÔøΩÂÖ§ÂÜùÂÜæÂá¨ÂàïÂäúÂä¶ÂãÄÂãõÂåÄÂåáÂå§Âç≤ÂéìÂé≤ÂèùÔ®éÂíúÂíäÂí©ÂìøÂñÜÂùôÂù•Âû¨ÂüàÂüáÔ®èÔ®êÂ¢ûÂ¢≤Â§ãÂ•ìÂ•õÂ•ùÂ•£Â¶§Â¶∫Â≠ñÂØÄÁîØÂØòÂØ¨Â∞ûÂ≤¶Â≤∫Â≥µÂ¥ßÂµìÔ®ëÂµÇÂµ≠Â∂∏Â∂πÂ∑êÂº°Âº¥ÂΩßÂæ∑ÂøûÊÅùÊÇÖÊÇäÊÉûÊÉïÊÑ†ÊÉ≤ÊÑëÊÑ∑ÊÑ∞ÊÜòÊàìÊä¶ÊèµÊë†ÊíùÊìéÊïéÊòÄÊòïÊòªÊòâÊòÆÊòûÊò§Êô•ÊôóÊôôÔ®íÊô≥ÊöôÊö†Êö≤ÊöøÊõ∫ÊúéÔ§©Êù¶ÊûªÊ°íÊüÄÊ†ÅÊ°ÑÊ£èÔ®ìÊ•®Ô®îÊ¶òÊß¢Ê®∞Ê©´Ê©ÜÊ©≥Ê©æÊ´¢Ê´§ÊØñÊ∞øÊ±úÊ≤ÜÊ±ØÊ≥öÊ¥ÑÊ∂áÊµØÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 65533) {
        e[D[250][j]] = 64000 + j;
        d[64000 + j] = D[250][j];
    };
    D[251] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ∂ñÊ∂¨Ê∑èÊ∑∏Ê∑≤Ê∑ºÊ∏πÊπúÊ∏ßÊ∏ºÊ∫øÊæàÊæµÊøµÁÄÖÁÄáÁÄ®ÁÇÖÁÇ´ÁÑèÁÑÑÁÖúÁÖÜÁÖáÔ®ïÁáÅÁáæÁä±ÁäæÁå§Ô®ñÁç∑ÁéΩÁèâÁèñÁè£ÁèíÁêáÁèµÁê¶Áê™Áê©ÁêÆÁë¢ÁíâÁíüÁîÅÁïØÁöÇÁöúÁöûÁöõÁö¶Ô®óÁùÜÂäØÁ†°Á°éÁ°§Á°∫Á§∞Ô®òÔ®ôÔøΩÔ®öÁ¶îÔ®õÁ¶õÁ´ëÁ´ßÔ®úÁ´´ÁÆûÔ®ùÁµàÁµúÁ∂∑Á∂†Á∑ñÁπíÁΩáÁæ°Ô®ûËåÅËç¢ËçøËèáËè∂ËëàËí¥ËïìËïôËï´Ô®üËñ∞Ô®†Ô®°Ë†áË£µË®íË®∑Ë©πË™ßË™æË´üÔ®¢Ë´∂Ë≠ìË≠øË≥∞Ë≥¥Ë¥íËµ∂Ô®£ËªèÔ®§Ô®•ÈÅßÈÉûÔ®¶ÈÑïÈÑßÈáöÈáóÈáûÈá≠ÈáÆÈá§Èá•ÈàÜÈàêÈàäÈà∫ÈâÄÈàºÈâéÈâôÈâëÈàπÈâßÈäßÈâ∑Èâ∏ÈãßÈãóÈãôÈãêÔ®ßÈãïÈã†ÈãìÈå•Èå°ÈãªÔ®®ÈåûÈãøÈåùÈåÇÈç∞ÈçóÈé§ÈèÜÈèûÈè∏Èê±ÈëÖÈëàÈñíÔßúÔ®©ÈöùÈöØÈú≥ÈúªÈùÉÈùçÈùèÈùëÈùïÈ°óÈ°•Ô®™Ô®´È§ßÔ®¨È¶ûÈ©éÈ´ôÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 65533) {
        e[D[251][j]] = 64256 + j;
        d[64256 + j] = D[251][j];
    };
    D[252] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ´úÈ≠µÈ≠≤ÈÆèÈÆ±ÈÆªÈ∞ÄÈµ∞Èµ´Ô®≠È∏ôÈªëÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 65533) {
        e[D[252][j]] = 64512 + j;
        d[64512 + j] = D[252][j];
    };
    return {
        "enc": e,
        "dec": d
    };
})();
cptable[936] = (function() {
    var d = [],
        e = {},
        D = [],
        j;
    D[0] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) {
        e[D[0][j]] = 0 + j;
        d[0 + j] = D[0][j];
    };
    D[129] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰∏Ç‰∏Ñ‰∏Ö‰∏Ü‰∏è‰∏í‰∏ó‰∏ü‰∏†‰∏°‰∏£‰∏¶‰∏©‰∏Æ‰∏Ø‰∏±‰∏≥‰∏µ‰∏∑‰∏º‰πÄ‰πÅ‰πÇ‰πÑ‰πÜ‰πä‰πë‰πï‰πó‰πö‰πõ‰π¢‰π£‰π§‰π•‰πß‰π®‰π™‰π´‰π¨‰π≠‰πÆ‰πØ‰π≤‰π¥‰πµ‰π∂‰π∑‰π∏‰ππ‰π∫‰πª‰πº‰πΩ‰πø‰∫Ä‰∫Å‰∫Ç‰∫É‰∫Ñ‰∫Ö‰∫á‰∫äÔøΩ‰∫ê‰∫ñ‰∫ó‰∫ô‰∫ú‰∫ù‰∫û‰∫£‰∫™‰∫Ø‰∫∞‰∫±‰∫¥‰∫∂‰∫∑‰∫∏‰∫π‰∫º‰∫Ω‰∫æ‰ªà‰ªå‰ªè‰ªê‰ªí‰ªö‰ªõ‰ªú‰ª†‰ª¢‰ª¶‰ªß‰ª©‰ª≠‰ªÆ‰ªØ‰ª±‰ª¥‰ª∏‰ªπ‰ª∫‰ªº‰ªæ‰ºÄ‰ºÇ‰ºÉ‰ºÑ‰ºÖ‰ºÜ‰ºá‰ºà‰ºã‰ºå‰ºí‰ºì‰ºî‰ºï‰ºñ‰ºú‰ºù‰º°‰º£‰º®‰º©‰º¨‰º≠‰ºÆ‰º±‰º≥‰ºµ‰º∑‰ºπ‰ºª‰ºæ‰ºø‰ΩÄ‰ΩÅ‰ΩÇ‰ΩÑ‰ΩÖ‰Ωá‰Ωà‰Ωâ‰Ωä‰Ωã‰Ωå‰Ωí‰Ωî‰Ωñ‰Ω°‰Ω¢‰Ω¶‰Ω®‰Ω™‰Ω´‰Ω≠‰ΩÆ‰Ω±‰Ω≤‰Ωµ‰Ω∑‰Ω∏‰Ωπ‰Ω∫‰ΩΩ‰æÄ‰æÅ‰æÇ‰æÖ‰æÜ‰æá‰æä‰æå‰æé‰æê‰æí‰æì‰æï‰æñ‰æò‰æô‰æö‰æú‰æû‰æü‰æ°‰æ¢ÔøΩ".split("");
    for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 65533) {
        e[D[129][j]] = 33024 + j;
        d[33024 + j] = D[129][j];
    };
    D[130] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰æ§‰æ´‰æ≠‰æ∞‰æ±‰æ≤‰æ≥‰æ¥‰æ∂‰æ∑‰æ∏‰æπ‰æ∫‰æª‰æº‰æΩ‰ææ‰øÄ‰øÅ‰øÇ‰øÜ‰øá‰øà‰øâ‰øã‰øå‰øç‰øí‰øì‰øî‰øï‰øñ‰øô‰øõ‰ø†‰ø¢‰ø§‰ø•‰øß‰ø´‰ø¨‰ø∞‰ø≤‰ø¥‰øµ‰ø∂‰ø∑‰øπ‰øª‰øº‰øΩ‰øøÂÄÄÂÄÅÂÄÇÂÄÉÂÄÑÂÄÖÂÄÜÂÄáÂÄàÂÄâÂÄäÔøΩÂÄãÂÄéÂÄêÂÄëÂÄìÂÄïÂÄñÂÄóÂÄõÂÄùÂÄûÂÄ†ÂÄ¢ÂÄ£ÂÄ§ÂÄßÂÄ´ÂÄØÂÄ∞ÂÄ±ÂÄ≤ÂÄ≥ÂÄ¥ÂÄµÂÄ∂ÂÄ∑ÂÄ∏ÂÄπÂÄªÂÄΩÂÄøÂÅÄÂÅÅÂÅÇÂÅÑÂÅÖÂÅÜÂÅâÂÅäÂÅãÂÅçÂÅêÂÅëÂÅíÂÅìÂÅîÂÅñÂÅóÂÅòÂÅôÂÅõÂÅùÂÅûÂÅüÂÅ†ÂÅ°ÂÅ¢ÂÅ£ÂÅ§ÂÅ¶ÂÅßÂÅ®ÂÅ©ÂÅ™ÂÅ´ÂÅ≠ÂÅÆÂÅØÂÅ∞ÂÅ±ÂÅ≤ÂÅ≥ÂÅ¥ÂÅµÂÅ∏ÂÅπÂÅ∫ÂÅºÂÅΩÂÇÅÂÇÇÂÇÉÂÇÑÂÇÜÂÇáÂÇâÂÇäÂÇãÂÇåÂÇéÂÇèÂÇêÂÇëÂÇíÂÇìÂÇîÂÇïÂÇñÂÇóÂÇòÂÇôÂÇöÂÇõÂÇúÂÇùÂÇûÂÇüÂÇ†ÂÇ°ÂÇ¢ÂÇ§ÂÇ¶ÂÇ™ÂÇ´ÂÇ≠ÂÇÆÂÇØÂÇ∞ÂÇ±ÂÇ≥ÂÇ¥ÂÇµÂÇ∂ÂÇ∑ÂÇ∏ÂÇπÂÇºÔøΩ".split("");
    for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 65533) {
        e[D[130][j]] = 33280 + j;
        d[33280 + j] = D[130][j];
    };
    D[131] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂÇΩÂÇæÂÇøÂÉÄÂÉÅÂÉÇÂÉÉÂÉÑÂÉÖÂÉÜÂÉáÂÉàÂÉâÂÉäÂÉãÂÉåÂÉçÂÉéÂÉêÂÉëÂÉíÂÉìÂÉîÂÉïÂÉóÂÉòÂÉôÂÉõÂÉúÂÉùÂÉûÂÉüÂÉ†ÂÉ°ÂÉ¢ÂÉ£ÂÉ§ÂÉ•ÂÉ®ÂÉ©ÂÉ™ÂÉ´ÂÉØÂÉ∞ÂÉ±ÂÉ≤ÂÉ¥ÂÉ∂ÂÉ∑ÂÉ∏ÂÉπÂÉ∫ÂÉºÂÉΩÂÉæÂÉøÂÑÄÂÑÅÂÑÇÂÑÉÂÑÑÂÑÖÂÑàÔøΩÂÑâÂÑäÂÑåÂÑçÂÑéÂÑèÂÑêÂÑëÂÑìÂÑîÂÑïÂÑñÂÑóÂÑòÂÑôÂÑöÂÑõÂÑúÂÑùÂÑûÂÑüÂÑ†ÂÑ¢ÂÑ£ÂÑ§ÂÑ•ÂÑ¶ÂÑßÂÑ®ÂÑ©ÂÑ™ÂÑ´ÂÑ¨ÂÑ≠ÂÑÆÂÑØÂÑ∞ÂÑ±ÂÑ≤ÂÑ≥ÂÑ¥ÂÑµÂÑ∂ÂÑ∑ÂÑ∏ÂÑπÂÑ∫ÂÑªÂÑºÂÑΩÂÑæÂÖÇÂÖáÂÖäÂÖåÂÖéÂÖèÂÖêÂÖíÂÖìÂÖóÂÖòÂÖôÂÖõÂÖùÂÖûÂÖüÂÖ†ÂÖ°ÂÖ£ÂÖ§ÂÖ¶ÂÖßÂÖ©ÂÖ™ÂÖØÂÖ≤ÂÖ∫ÂÖæÂÖøÂÜÉÂÜÑÂÜÜÂÜáÂÜäÂÜãÂÜéÂÜèÂÜêÂÜëÂÜìÂÜîÂÜòÂÜöÂÜùÂÜûÂÜüÂÜ°ÂÜ£ÂÜ¶ÂÜßÂÜ®ÂÜ©ÂÜ™ÂÜ≠ÂÜÆÂÜ¥ÂÜ∏ÂÜπÂÜ∫ÂÜæÂÜøÂáÅÂáÇÂáÉÂáÖÂáàÂáäÂáçÂáéÂáêÂáíÂáìÂáîÂáïÂáñÂáóÔøΩ".split("");
    for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 65533) {
        e[D[131][j]] = 33536 + j;
        d[33536 + j] = D[131][j];
    };
    D[132] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂáòÂáôÂáöÂáúÂáûÂáüÂá¢Âá£Âá•Âá¶ÂáßÂá®Âá©Âá™Âá¨ÂáÆÂá±Âá≤Âá¥Âá∑ÂáæÂàÑÂàÖÂàâÂàãÂàåÂàèÂàêÂàìÂàîÂàïÂàúÂàûÂàüÂà°Âà¢Âà£Âà•Âà¶ÂàßÂà™Âà¨ÂàØÂà±Âà≤Âà¥ÂàµÂàºÂàæÂâÑÂâÖÂâÜÂâáÂâàÂââÂâãÂâéÂâèÂâíÂâìÂâïÂâóÂâòÔøΩÂâôÂâöÂâõÂâùÂâüÂâ†Ââ¢Ââ£Ââ§Ââ¶Ââ®Ââ´Ââ¨Ââ≠ÂâÆÂâ∞Ââ±Ââ≥Ââ¥ÂâµÂâ∂Ââ∑Ââ∏ÂâπÂâ∫ÂâªÂâºÂâæÂäÄÂäÉÂäÑÂäÖÂäÜÂäáÂäâÂääÂäãÂäåÂäçÂäéÂäèÂäëÂäíÂäîÂäïÂäñÂäóÂäòÂäôÂäöÂäúÂä§Âä•Âä¶ÂäßÂäÆÂäØÂä∞Âä¥ÂäµÂä∂Âä∑Âä∏ÂäπÂä∫ÂäªÂäºÂäΩÂãÄÂãÅÂãÇÂãÑÂãÖÂãÜÂãàÂãäÂãåÂãçÂãéÂãèÂãëÂãìÂãîÂãïÂãóÂãôÂãöÂãõÂãúÂãùÂãûÂã†Âã°Âã¢Âã£Âã•Âã¶ÂãßÂã®Âã©Âã™Âã´Âã¨Âã≠ÂãÆÂãØÂã±Âã≤Âã≥Âã¥ÂãµÂã∂Âã∑Âã∏ÂãªÂãºÂãΩÂåÅÂåÇÂåÉÂåÑÂåáÂåâÂåäÂåãÂååÂåéÔøΩ".split("");
    for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 65533) {
        e[D[132][j]] = 33792 + j;
        d[33792 + j] = D[132][j];
    };
    D[133] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂåëÂåíÂåìÂåîÂåòÂåõÂåúÂåûÂåüÂå¢Âå§Âå•ÂåßÂå®Âå©Âå´Âå¨Âå≠ÂåØÂå∞Âå±Âå≤Âå≥Âå¥ÂåµÂå∂Âå∑Âå∏ÂåºÂåΩÂçÄÂçÇÂçÑÂçÜÂçãÂçåÂççÂçêÂçîÂçòÂçôÂçõÂçùÂç•Âç®Âç™Âç¨Âç≠Âç≤Âç∂ÂçπÂçªÂçºÂçΩÂçæÂéÄÂéÅÂéÉÂéáÂéàÂéäÂééÂéèÔøΩÂéêÂéëÂéíÂéìÂéîÂéñÂéóÂéôÂéõÂéúÂéûÂé†Âé°Âé§ÂéßÂé™Âé´Âé¨Âé≠ÂéØÂé∞Âé±Âé≤Âé≥Âé¥ÂéµÂé∑Âé∏ÂéπÂé∫ÂéºÂéΩÂéæÂèÄÂèÉÂèÑÂèÖÂèÜÂèáÂèéÂèèÂèêÂèíÂèìÂèïÂèöÂèúÂèùÂèûÂè°Âè¢ÂèßÂè¥Âè∫ÂèæÂèøÂêÄÂêÇÂêÖÂêáÂêãÂêîÂêòÂêôÂêöÂêúÂê¢Âê§Âê•Âê™Âê∞Âê≥Âê∂Âê∑Âê∫ÂêΩÂêøÂëÅÂëÇÂëÑÂëÖÂëáÂëâÂëåÂëçÂëéÂëèÂëëÂëöÂëùÂëûÂëüÂë†Âë°Âë£Âë•ÂëßÂë©Âë™Âë´Âë¨Âë≠ÂëÆÂëØÂë∞Âë¥ÂëπÂë∫ÂëæÂëøÂíÅÂíÉÂíÖÂíáÂíàÂíâÂíäÂíçÂíëÂíìÂíóÂíòÂíúÂíûÂíüÂí†Âí°ÔøΩ".split("");
    for (j = 0; j != D[133].length; ++j) if (D[133][j].charCodeAt(0) !== 65533) {
        e[D[133][j]] = 34048 + j;
        d[34048 + j] = D[133][j];
    };
    D[134] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂí¢Âí•ÂíÆÂí∞Âí≤ÂíµÂí∂Âí∑ÂíπÂí∫ÂíºÂíæÂìÉÂìÖÂìäÂìãÂìñÂìòÂìõÂì†Âì°Âì¢Âì£Âì§Âì´Âì¨ÂìØÂì∞Âì±Âì¥ÂìµÂì∂Âì∑Âì∏ÂìπÂìªÂìæÂîÄÂîÇÂîÉÂîÑÂîÖÂîàÂîäÂîãÂîåÂîçÂîéÂîíÂîìÂîïÂîñÂîóÂîòÂîôÂîöÂîúÂîùÂîûÂîüÂî°Âî•Âî¶ÔøΩÂî®Âî©Âî´Âî≠Âî≤Âî¥ÂîµÂî∂Âî∏ÂîπÂî∫ÂîªÂîΩÂïÄÂïÇÂïÖÂïáÂïàÂïãÂïåÂïçÂïéÂïèÂïëÂïíÂïìÂïîÂïóÂïòÂïôÂïöÂïõÂïùÂïûÂïüÂï†Âï¢Âï£Âï®Âï©Âï´ÂïØÂï∞Âï±Âï≤Âï≥Âï¥ÂïπÂï∫ÂïΩÂïøÂñÖÂñÜÂñåÂñçÂñéÂñêÂñíÂñìÂñïÂññÂñóÂñöÂñõÂñûÂñ†Âñ°Âñ¢Âñ£Âñ§Âñ•Âñ¶Âñ®Âñ©Âñ™Âñ´Âñ¨Âñ≠ÂñÆÂñØÂñ∞Âñ≤Âñ¥Âñ∂Âñ∏Âñ∫ÂñºÂñøÂóÄÂóÅÂóÇÂóÉÂóÜÂóáÂóàÂóäÂóãÂóéÂóèÂóêÂóïÂóóÂóòÂóôÂóöÂóõÂóûÂó†Âó¢ÂóßÂó©Âó≠ÂóÆÂó∞Âó±Âó¥Âó∂Âó∏ÂóπÂó∫ÂóªÂóºÂóøÂòÇÂòÉÂòÑÂòÖÔøΩ".split("");
    for (j = 0; j != D[134].length; ++j) if (D[134][j].charCodeAt(0) !== 65533) {
        e[D[134][j]] = 34304 + j;
        d[34304 + j] = D[134][j];
    };
    D[135] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂòÜÂòáÂòäÂòãÂòçÂòêÂòëÂòíÂòìÂòîÂòïÂòñÂòóÂòôÂòöÂòúÂòùÂò†Âò°Âò¢Âò•Âò¶Âò®Âò©Âò™Âò´ÂòÆÂòØÂò∞Âò≥ÂòµÂò∑Âò∏Âò∫ÂòºÂòΩÂòæÂôÄÂôÅÂôÇÂôÉÂôÑÂôÖÂôÜÂôáÂôàÂôâÂôäÂôãÂôèÂôêÂôëÂôíÂôìÂôïÂôñÂôöÂôõÂôùÂôûÂôüÂô†Âô°ÔøΩÂô£Âô•Âô¶ÂôßÂô≠ÂôÆÂôØÂô∞Âô≤Âô≥Âô¥ÂôµÂô∑Âô∏ÂôπÂô∫ÂôΩÂôæÂôøÂöÄÂöÅÂöÇÂöÉÂöÑÂöáÂöàÂöâÂöäÂöãÂöåÂöçÂöêÂöëÂöíÂöîÂöïÂöñÂöóÂöòÂöôÂööÂöõÂöúÂöùÂöûÂöüÂö†Âö°Âö¢Âö§Âö•Âö¶ÂößÂö®Âö©Âö™Âö´Âö¨Âö≠ÂöÆÂö∞Âö±Âö≤Âö≥Âö¥ÂöµÂö∂Âö∏ÂöπÂö∫ÂöªÂöΩÂöæÂöøÂõÄÂõÅÂõÇÂõÉÂõÑÂõÖÂõÜÂõáÂõàÂõâÂõãÂõåÂõçÂõéÂõèÂõêÂõëÂõíÂõìÂõïÂõñÂõòÂõôÂõúÂõ£Âõ•Âõ¶ÂõßÂõ®Âõ©Âõ™Âõ¨ÂõÆÂõØÂõ≤Âõ≥Âõ∂Âõ∑Âõ∏ÂõªÂõºÂúÄÂúÅÂúÇÂúÖÂúáÂúãÂúåÂúçÂúéÂúèÂúêÂúëÔøΩ".split("");
    for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 65533) {
        e[D[135][j]] = 34560 + j;
        d[34560 + j] = D[135][j];
    };
    D[136] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂúíÂúìÂúîÂúïÂúñÂúóÂúòÂúôÂúöÂúõÂúùÂúûÂú†Âú°Âú¢Âú§Âú•Âú¶ÂúßÂú´Âú±Âú≤Âú¥ÂúµÂú∂Âú∑Âú∏ÂúºÂúΩÂúøÂùÅÂùÉÂùÑÂùÖÂùÜÂùàÂùâÂùãÂùíÂùìÂùîÂùïÂùñÂùòÂùôÂù¢Âù£Âù•ÂùßÂù¨ÂùÆÂù∞Âù±Âù≤Âù¥ÂùµÂù∏ÂùπÂù∫ÂùΩÂùæÂùøÂûÄÔøΩÂûÅÂûáÂûàÂûâÂûäÂûçÂûéÂûèÂûêÂûëÂûîÂûïÂûñÂûóÂûòÂûôÂûöÂûúÂûùÂûûÂûüÂû•Âû®Âû™Âû¨ÂûØÂû∞Âû±Âû≥ÂûµÂû∂Âû∑ÂûπÂû∫ÂûªÂûºÂûΩÂûæÂûøÂüÄÂüÅÂüÑÂüÖÂüÜÂüáÂüàÂüâÂüäÂüåÂüçÂüêÂüëÂüìÂüñÂüóÂüõÂüúÂüûÂü°Âü¢Âü£Âü•Âü¶ÂüßÂü®Âü©Âü™Âü´Âü¨ÂüÆÂü∞Âü±Âü≤Âü≥ÂüµÂü∂Âü∑ÂüªÂüºÂüæÂüøÂ†ÅÂ†ÉÂ†ÑÂ†ÖÂ†àÂ†âÂ†äÂ†åÂ†éÂ†èÂ†êÂ†íÂ†ìÂ†îÂ†ñÂ†óÂ†òÂ†öÂ†õÂ†úÂ†ùÂ†üÂ†¢Â†£Â†•Â†¶Â†ßÂ†®Â†©Â†´Â†¨Â†≠Â†ÆÂ†ØÂ†±Â†≤Â†≥Â†¥Â†∂Â†∑Â†∏Â†πÂ†∫Â†ªÂ†ºÂ†ΩÔøΩ".split("");
    for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 65533) {
        e[D[136][j]] = 34816 + j;
        d[34816 + j] = D[136][j];
    };
    D[137] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ†æÂ†øÂ°ÄÂ°ÅÂ°ÇÂ°ÉÂ°ÖÂ°ÜÂ°áÂ°àÂ°âÂ°äÂ°ãÂ°éÂ°èÂ°êÂ°íÂ°ìÂ°ïÂ°ñÂ°óÂ°ôÂ°öÂ°õÂ°úÂ°ùÂ°üÂ°†Â°°Â°¢Â°£Â°§Â°¶Â°ßÂ°®Â°©Â°™Â°≠Â°ÆÂ°ØÂ°∞Â°±Â°≤Â°≥Â°¥Â°µÂ°∂Â°∑Â°∏Â°πÂ°∫Â°ªÂ°ºÂ°ΩÂ°øÂ¢ÇÂ¢ÑÂ¢ÜÂ¢áÂ¢àÂ¢äÂ¢ãÂ¢åÔøΩÂ¢çÂ¢éÂ¢èÂ¢êÂ¢ëÂ¢îÂ¢ïÂ¢ñÂ¢óÂ¢òÂ¢õÂ¢úÂ¢ùÂ¢†Â¢°Â¢¢Â¢£Â¢§Â¢•Â¢¶Â¢ßÂ¢™Â¢´Â¢¨Â¢≠Â¢ÆÂ¢ØÂ¢∞Â¢±Â¢≤Â¢≥Â¢¥Â¢µÂ¢∂Â¢∑Â¢∏Â¢πÂ¢∫Â¢ªÂ¢ΩÂ¢æÂ¢øÂ£ÄÂ£ÇÂ£ÉÂ£ÑÂ£ÜÂ£áÂ£àÂ£âÂ£äÂ£ãÂ£åÂ£çÂ£éÂ£èÂ£êÂ£íÂ£ìÂ£îÂ£ñÂ£óÂ£òÂ£ôÂ£öÂ£õÂ£úÂ£ùÂ£ûÂ£üÂ£†Â£°Â£¢Â££Â£•Â£¶Â£ßÂ£®Â£©Â£™Â£≠Â£ØÂ£±Â£≤Â£¥Â£µÂ£∑Â£∏Â£∫Â£ªÂ£ºÂ£ΩÂ£æÂ£øÂ§ÄÂ§ÅÂ§ÉÂ§ÖÂ§ÜÂ§àÂ§âÂ§äÂ§ãÂ§åÂ§éÂ§êÂ§ëÂ§íÂ§ìÂ§óÂ§òÂ§õÂ§ùÂ§ûÂ§†Â§°Â§¢Â§£Â§¶Â§®Â§¨Â§∞Â§≤Â§≥Â§µÂ§∂Â§ªÔøΩ".split("");
    for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 65533) {
        e[D[137][j]] = 35072 + j;
        d[35072 + j] = D[137][j];
    };
    D[138] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ§ΩÂ§æÂ§øÂ•ÄÂ•ÉÂ•ÖÂ•ÜÂ•äÂ•åÂ•çÂ•êÂ•íÂ•ìÂ•ôÂ•õÂ•úÂ•ùÂ•ûÂ•üÂ•°Â•£Â•§Â•¶Â•ßÂ•®Â•©Â•™Â•´Â•¨Â•≠Â•ÆÂ•ØÂ•∞Â•±Â•≤Â•µÂ•∑Â•∫Â•ªÂ•ºÂ•æÂ•øÂ¶ÄÂ¶ÖÂ¶âÂ¶ãÂ¶åÂ¶éÂ¶èÂ¶êÂ¶ëÂ¶îÂ¶ïÂ¶òÂ¶öÂ¶õÂ¶úÂ¶ùÂ¶üÂ¶†Â¶°Â¶¢Â¶¶ÔøΩÂ¶ßÂ¶¨Â¶≠Â¶∞Â¶±Â¶≥Â¶¥Â¶µÂ¶∂Â¶∑Â¶∏Â¶∫Â¶ºÂ¶ΩÂ¶øÂßÄÂßÅÂßÇÂßÉÂßÑÂßÖÂßáÂßàÂßâÂßåÂßçÂßéÂßèÂßïÂßñÂßôÂßõÂßûÂßüÂß†Âß°Âß¢Âß§Âß¶ÂßßÂß©Âß™Âß´Âß≠ÂßÆÂßØÂß∞Âß±Âß≤Âß≥Âß¥ÂßµÂß∂Âß∑Âß∏Âß∫ÂßºÂßΩÂßæÂ®ÄÂ®ÇÂ®äÂ®ãÂ®çÂ®éÂ®èÂ®êÂ®íÂ®îÂ®ïÂ®ñÂ®óÂ®ôÂ®öÂ®õÂ®ùÂ®ûÂ®°Â®¢Â®§Â®¶Â®ßÂ®®Â®™Â®´Â®¨Â®≠Â®ÆÂ®ØÂ®∞Â®≥Â®µÂ®∑Â®∏Â®πÂ®∫Â®ªÂ®ΩÂ®æÂ®øÂ©ÅÂ©ÇÂ©ÉÂ©ÑÂ©ÖÂ©áÂ©àÂ©ãÂ©åÂ©çÂ©éÂ©èÂ©êÂ©ëÂ©íÂ©ìÂ©îÂ©ñÂ©óÂ©òÂ©ôÂ©õÂ©úÂ©ùÂ©ûÂ©üÂ©†ÔøΩ".split("");
    for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 65533) {
        e[D[138][j]] = 35328 + j;
        d[35328 + j] = D[138][j];
    };
    D[139] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ©°Â©£Â©§Â©•Â©¶Â©®Â©©Â©´Â©¨Â©≠Â©ÆÂ©ØÂ©∞Â©±Â©≤Â©≥Â©∏Â©πÂ©ªÂ©ºÂ©ΩÂ©æÂ™ÄÂ™ÅÂ™ÇÂ™ÉÂ™ÑÂ™ÖÂ™ÜÂ™áÂ™àÂ™âÂ™äÂ™ãÂ™åÂ™çÂ™éÂ™èÂ™êÂ™ëÂ™ìÂ™îÂ™ïÂ™ñÂ™óÂ™òÂ™ôÂ™úÂ™ùÂ™ûÂ™üÂ™†Â™°Â™¢Â™£Â™§Â™•Â™¶Â™ßÂ™®Â™©Â™´Â™¨ÔøΩÂ™≠Â™ÆÂ™ØÂ™∞Â™±Â™¥Â™∂Â™∑Â™πÂ™∫Â™ªÂ™ºÂ™ΩÂ™øÂ´ÄÂ´ÉÂ´ÑÂ´ÖÂ´ÜÂ´áÂ´àÂ´äÂ´ãÂ´çÂ´éÂ´èÂ´êÂ´ëÂ´ìÂ´ïÂ´óÂ´ôÂ´öÂ´õÂ´ùÂ´ûÂ´üÂ´¢Â´§Â´•Â´ßÂ´®Â´™Â´¨Â´≠Â´ÆÂ´ØÂ´∞Â´≤Â´≥Â´¥Â´µÂ´∂Â´∑Â´∏Â´πÂ´∫Â´ªÂ´ºÂ´ΩÂ´æÂ´øÂ¨ÄÂ¨ÅÂ¨ÇÂ¨ÉÂ¨ÑÂ¨ÖÂ¨ÜÂ¨áÂ¨àÂ¨äÂ¨ãÂ¨åÂ¨çÂ¨éÂ¨èÂ¨êÂ¨ëÂ¨íÂ¨ìÂ¨îÂ¨ïÂ¨òÂ¨ôÂ¨öÂ¨õÂ¨úÂ¨ùÂ¨ûÂ¨üÂ¨†Â¨°Â¨¢Â¨£Â¨§Â¨•Â¨¶Â¨ßÂ¨®Â¨©Â¨™Â¨´Â¨¨Â¨≠Â¨ÆÂ¨ØÂ¨∞Â¨±Â¨≥Â¨µÂ¨∂Â¨∏Â¨πÂ¨∫Â¨ªÂ¨ºÂ¨ΩÂ¨æÂ¨øÂ≠ÅÂ≠ÇÂ≠ÉÂ≠ÑÂ≠ÖÂ≠ÜÂ≠áÔøΩ".split("");
    for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 65533) {
        e[D[139][j]] = 35584 + j;
        d[35584 + j] = D[139][j];
    };
    D[140] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ≠àÂ≠âÂ≠äÂ≠ãÂ≠åÂ≠çÂ≠éÂ≠èÂ≠íÂ≠ñÂ≠ûÂ≠†Â≠°Â≠ßÂ≠®Â≠´Â≠≠Â≠ÆÂ≠ØÂ≠≤Â≠¥Â≠∂Â≠∑Â≠∏Â≠πÂ≠ªÂ≠ºÂ≠æÂ≠øÂÆÇÂÆÜÂÆäÂÆçÂÆéÂÆêÂÆëÂÆíÂÆîÂÆñÂÆüÂÆßÂÆ®ÂÆ©ÂÆ¨ÂÆ≠ÂÆÆÂÆØÂÆ±ÂÆ≤ÂÆ∑ÂÆ∫ÂÆªÂÆºÂØÄÂØÅÂØÉÂØàÂØâÂØäÂØãÂØçÂØéÂØèÔøΩÂØëÂØîÂØïÂØñÂØóÂØòÂØôÂØöÂØõÂØúÂØ†ÂØ¢ÂØ£ÂØ¶ÂØßÂØ©ÂØ™ÂØ´ÂØ¨ÂØ≠ÂØØÂØ±ÂØ≤ÂØ≥ÂØ¥ÂØµÂØ∂ÂØ∑ÂØΩÂØæÂ∞ÄÂ∞ÇÂ∞ÉÂ∞ÖÂ∞áÂ∞àÂ∞ãÂ∞åÂ∞çÂ∞éÂ∞êÂ∞íÂ∞ìÂ∞óÂ∞ôÂ∞õÂ∞ûÂ∞üÂ∞†Â∞°Â∞£Â∞¶Â∞®Â∞©Â∞™Â∞´Â∞≠Â∞ÆÂ∞ØÂ∞∞Â∞≤Â∞≥Â∞µÂ∞∂Â∞∑Â±ÉÂ±ÑÂ±ÜÂ±áÂ±åÂ±çÂ±íÂ±ìÂ±îÂ±ñÂ±óÂ±òÂ±öÂ±õÂ±úÂ±ùÂ±üÂ±¢Â±§Â±ßÂ±®Â±©Â±™Â±´Â±¨Â±≠Â±∞Â±≤Â±≥Â±¥Â±µÂ±∂Â±∑Â±∏Â±ªÂ±ºÂ±ΩÂ±æÂ≤ÄÂ≤ÉÂ≤ÑÂ≤ÖÂ≤ÜÂ≤áÂ≤âÂ≤äÂ≤ãÂ≤éÂ≤èÂ≤íÂ≤ìÂ≤ïÂ≤ùÂ≤ûÂ≤üÂ≤†Â≤°Â≤§Â≤•Â≤¶Â≤ßÂ≤®ÔøΩ".split("");
    for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 65533) {
        e[D[140][j]] = 35840 + j;
        d[35840 + j] = D[140][j];
    };
    D[141] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ≤™Â≤ÆÂ≤ØÂ≤∞Â≤≤Â≤¥Â≤∂Â≤πÂ≤∫Â≤ªÂ≤ºÂ≤æÂ≥ÄÂ≥ÇÂ≥ÉÂ≥ÖÂ≥ÜÂ≥áÂ≥àÂ≥âÂ≥äÂ≥åÂ≥çÂ≥éÂ≥èÂ≥êÂ≥ëÂ≥ìÂ≥îÂ≥ïÂ≥ñÂ≥óÂ≥òÂ≥öÂ≥õÂ≥úÂ≥ùÂ≥ûÂ≥üÂ≥†Â≥¢Â≥£Â≥ßÂ≥©Â≥´Â≥¨Â≥ÆÂ≥ØÂ≥±Â≥≤Â≥≥Â≥¥Â≥µÂ≥∂Â≥∑Â≥∏Â≥πÂ≥∫Â≥ºÂ≥ΩÂ≥æÂ≥øÂ¥ÄÔøΩÂ¥ÅÂ¥ÑÂ¥ÖÂ¥àÂ¥âÂ¥äÂ¥ãÂ¥åÂ¥çÂ¥èÂ¥êÂ¥ëÂ¥íÂ¥ìÂ¥ïÂ¥óÂ¥òÂ¥ôÂ¥öÂ¥úÂ¥ùÂ¥üÂ¥†Â¥°Â¥¢Â¥£Â¥•Â¥®Â¥™Â¥´Â¥¨Â¥ØÂ¥∞Â¥±Â¥≤Â¥≥Â¥µÂ¥∂Â¥∑Â¥∏Â¥πÂ¥∫Â¥ªÂ¥ºÂ¥øÂµÄÂµÅÂµÇÂµÉÂµÑÂµÖÂµÜÂµàÂµâÂµçÂµéÂµèÂµêÂµëÂµíÂµìÂµîÂµïÂµñÂµóÂµôÂµöÂµúÂµûÂµüÂµ†Âµ°Âµ¢Âµ£Âµ§Âµ•Âµ¶ÂµßÂµ®Âµ™Âµ≠ÂµÆÂµ∞Âµ±Âµ≤Âµ≥ÂµµÂµ∂Âµ∑Âµ∏ÂµπÂµ∫ÂµªÂµºÂµΩÂµæÂµøÂ∂ÄÂ∂ÅÂ∂ÉÂ∂ÑÂ∂ÖÂ∂ÜÂ∂áÂ∂àÂ∂âÂ∂äÂ∂ãÂ∂åÂ∂çÂ∂éÂ∂èÂ∂êÂ∂ëÂ∂íÂ∂ìÂ∂îÂ∂ïÂ∂ñÂ∂óÂ∂òÂ∂öÂ∂õÂ∂úÂ∂ûÂ∂üÂ∂†ÔøΩ".split("");
    for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 65533) {
        e[D[141][j]] = 36096 + j;
        d[36096 + j] = D[141][j];
    };
    D[142] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ∂°Â∂¢Â∂£Â∂§Â∂•Â∂¶Â∂ßÂ∂®Â∂©Â∂™Â∂´Â∂¨Â∂≠Â∂ÆÂ∂ØÂ∂∞Â∂±Â∂≤Â∂≥Â∂¥Â∂µÂ∂∂Â∂∏Â∂πÂ∂∫Â∂ªÂ∂ºÂ∂ΩÂ∂æÂ∂øÂ∑ÄÂ∑ÅÂ∑ÇÂ∑ÉÂ∑ÑÂ∑ÜÂ∑áÂ∑àÂ∑âÂ∑äÂ∑ãÂ∑åÂ∑éÂ∑èÂ∑êÂ∑ëÂ∑íÂ∑ìÂ∑îÂ∑ïÂ∑ñÂ∑óÂ∑òÂ∑ôÂ∑öÂ∑úÂ∑üÂ∑†Â∑£Â∑§Â∑™Â∑¨Â∑≠ÔøΩÂ∑∞Â∑µÂ∑∂Â∑∏Â∑πÂ∑∫Â∑ªÂ∑ºÂ∑øÂ∏ÄÂ∏ÑÂ∏áÂ∏âÂ∏äÂ∏ãÂ∏çÂ∏éÂ∏íÂ∏ìÂ∏óÂ∏ûÂ∏üÂ∏†Â∏°Â∏¢Â∏£Â∏§Â∏•Â∏®Â∏©Â∏™Â∏´Â∏¨Â∏ØÂ∏∞Â∏≤Â∏≥Â∏¥Â∏µÂ∏∂Â∏πÂ∏∫Â∏æÂ∏øÂπÄÂπÅÂπÉÂπÜÂπáÂπàÂπâÂπäÂπãÂπçÂπéÂπèÂπêÂπëÂπíÂπìÂπñÂπóÂπòÂπôÂπöÂπúÂπùÂπüÂπ†Âπ£Âπ§Âπ•Âπ¶ÂπßÂπ®Âπ©Âπ™Âπ´Âπ¨Âπ≠ÂπÆÂπØÂπ∞Âπ±ÂπµÂπ∑ÂππÂπæÂ∫ÅÂ∫ÇÂ∫ÉÂ∫ÖÂ∫àÂ∫âÂ∫åÂ∫çÂ∫éÂ∫íÂ∫òÂ∫õÂ∫ùÂ∫°Â∫¢Â∫£Â∫§Â∫®Â∫©Â∫™Â∫´Â∫¨Â∫ÆÂ∫ØÂ∫∞Â∫±Â∫≤Â∫¥Â∫∫Â∫ªÂ∫ºÂ∫ΩÂ∫øÂªÄÂªÅÂªÇÂªÉÂªÑÂªÖÔøΩ".split("");
    for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 65533) {
        e[D[142][j]] = 36352 + j;
        d[36352 + j] = D[142][j];
    };
    D[143] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂªÜÂªáÂªàÂªãÂªåÂªçÂªéÂªèÂªêÂªîÂªïÂªóÂªòÂªôÂªöÂªúÂªùÂªûÂªüÂª†Âª°Âª¢Âª£Âª§Âª•Âª¶ÂªßÂª©Âª´Âª¨Âª≠ÂªÆÂªØÂª∞Âª±Âª≤Âª≥ÂªµÂª∏ÂªπÂªªÂªºÂªΩÂºÖÂºÜÂºáÂºâÂºåÂºçÂºéÂºêÂºíÂºîÂºñÂºôÂºöÂºúÂºùÂºûÂº°Âº¢Âº£Âº§ÔøΩÂº®Âº´Âº¨ÂºÆÂº∞Âº≤Âº≥Âº¥ÂºµÂº∂Âº∑Âº∏ÂºªÂºΩÂºæÂºøÂΩÅÂΩÇÂΩÉÂΩÑÂΩÖÂΩÜÂΩáÂΩàÂΩâÂΩäÂΩãÂΩåÂΩçÂΩéÂΩèÂΩëÂΩîÂΩôÂΩöÂΩõÂΩúÂΩûÂΩüÂΩ†ÂΩ£ÂΩ•ÂΩßÂΩ®ÂΩ´ÂΩÆÂΩØÂΩ≤ÂΩ¥ÂΩµÂΩ∂ÂΩ∏ÂΩ∫ÂΩΩÂΩæÂΩøÂæÉÂæÜÂæçÂæéÂæèÂæëÂæìÂæîÂæñÂæöÂæõÂæùÂæûÂæüÂæ†Âæ¢Âæ£Âæ§Âæ•Âæ¶ÂæßÂæ©Âæ´Âæ¨ÂæØÂæ∞Âæ±Âæ≤Âæ≥Âæ¥Âæ∂Âæ∏ÂæπÂæ∫ÂæªÂææÂæøÂøÄÂøÅÂøÇÂøáÂøàÂøäÂøãÂøéÂøìÂøîÂøïÂøöÂøõÂøúÂøûÂøüÂø¢Âø£Âø•Âø¶Âø®Âø©Âø¨ÂøØÂø∞Âø≤Âø≥Âø¥Âø∂Âø∑ÂøπÂø∫ÂøºÊÄáÔøΩ".split("");
    for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 65533) {
        e[D[143][j]] = 36608 + j;
        d[36608 + j] = D[143][j];
    };
    D[144] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÄàÊÄâÊÄãÊÄåÊÄêÊÄëÊÄìÊÄóÊÄòÊÄöÊÄûÊÄüÊÄ¢ÊÄ£ÊÄ§ÊÄ¨ÊÄ≠ÊÄÆÊÄ∞ÊÄ±ÊÄ≤ÊÄ≥ÊÄ¥ÊÄ∂ÊÄ∑ÊÄ∏ÊÄπÊÄ∫ÊÄΩÊÄæÊÅÄÊÅÑÊÅÖÊÅÜÊÅáÊÅàÊÅâÊÅäÊÅåÊÅéÊÅèÊÅëÊÅìÊÅîÊÅñÊÅóÊÅòÊÅõÊÅúÊÅûÊÅüÊÅ†ÊÅ°ÊÅ•ÊÅ¶ÊÅÆÊÅ±ÊÅ≤ÊÅ¥ÊÅµÊÅ∑ÊÅæÊÇÄÔøΩÊÇÅÊÇÇÊÇÖÊÇÜÊÇáÊÇàÊÇäÊÇãÊÇéÊÇèÊÇêÊÇëÊÇìÊÇïÊÇóÊÇòÊÇôÊÇúÊÇûÊÇ°ÊÇ¢ÊÇ§ÊÇ•ÊÇßÊÇ©ÊÇ™ÊÇÆÊÇ∞ÊÇ≥ÊÇµÊÇ∂ÊÇ∑ÊÇπÊÇ∫ÊÇΩÊÇæÊÇøÊÉÄÊÉÅÊÉÇÊÉÉÊÉÑÊÉáÊÉàÊÉâÊÉåÊÉçÊÉéÊÉèÊÉêÊÉíÊÉìÊÉîÊÉñÊÉóÊÉôÊÉõÊÉûÊÉ°ÊÉ¢ÊÉ£ÊÉ§ÊÉ•ÊÉ™ÊÉ±ÊÉ≤ÊÉµÊÉ∑ÊÉ∏ÊÉªÊÉºÊÉΩÊÉæÊÉøÊÑÇÊÑÉÊÑÑÊÑÖÊÑáÊÑäÊÑãÊÑåÊÑêÊÑëÊÑíÊÑìÊÑîÊÑñÊÑóÊÑòÊÑôÊÑõÊÑúÊÑùÊÑûÊÑ°ÊÑ¢ÊÑ•ÊÑ®ÊÑ©ÊÑ™ÊÑ¨ÊÑ≠ÊÑÆÊÑØÊÑ∞ÊÑ±ÊÑ≤ÊÑ≥ÊÑ¥ÊÑµÊÑ∂ÊÑ∑ÊÑ∏ÊÑπÊÑ∫ÊÑªÊÑºÊÑΩÊÑæÊÖÄÊÖÅÊÖÇÊÖÉÊÖÑÊÖÖÊÖÜÔøΩ".split("");
    for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 65533) {
        e[D[144][j]] = 36864 + j;
        d[36864 + j] = D[144][j];
    };
    D[145] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÖáÊÖâÊÖãÊÖçÊÖèÊÖêÊÖíÊÖìÊÖîÊÖñÊÖóÊÖòÊÖôÊÖöÊÖõÊÖúÊÖûÊÖüÊÖ†ÊÖ°ÊÖ£ÊÖ§ÊÖ•ÊÖ¶ÊÖ©ÊÖ™ÊÖ´ÊÖ¨ÊÖ≠ÊÖÆÊÖØÊÖ±ÊÖ≤ÊÖ≥ÊÖ¥ÊÖ∂ÊÖ∏ÊÖπÊÖ∫ÊÖªÊÖºÊÖΩÊÖæÊÖøÊÜÄÊÜÅÊÜÇÊÜÉÊÜÑÊÜÖÊÜÜÊÜáÊÜàÊÜâÊÜäÊÜåÊÜçÊÜèÊÜêÊÜëÊÜíÊÜìÊÜïÔøΩÊÜñÊÜóÊÜòÊÜôÊÜöÊÜõÊÜúÊÜûÊÜüÊÜ†ÊÜ°ÊÜ¢ÊÜ£ÊÜ§ÊÜ•ÊÜ¶ÊÜ™ÊÜ´ÊÜ≠ÊÜÆÊÜØÊÜ∞ÊÜ±ÊÜ≤ÊÜ≥ÊÜ¥ÊÜµÊÜ∂ÊÜ∏ÊÜπÊÜ∫ÊÜªÊÜºÊÜΩÊÜøÊáÄÊáÅÊáÉÊáÑÊáÖÊáÜÊááÊáâÊáåÊáçÊáéÊáèÊáêÊáìÊáïÊáñÊáóÊáòÊáôÊáöÊáõÊáúÊáùÊáûÊáüÊá†Êá°Êá¢Êá£Êá§Êá•ÊáßÊá®Êá©Êá™Êá´Êá¨Êá≠ÊáÆÊáØÊá∞Êá±Êá≤Êá≥Êá¥Êá∂Êá∑Êá∏ÊáπÊá∫ÊáªÊáºÊáΩÊáæÊàÄÊàÅÊàÇÊàÉÊàÑÊàÖÊàáÊàâÊàìÊàîÊàôÊàúÊàùÊàûÊà†Êà£Êà¶ÊàßÊà®Êà©Êà´Êà≠ÊàØÊà∞Êà±Êà≤ÊàµÊà∂Êà∏ÊàπÊà∫ÊàªÊàºÊâÇÊâÑÊâÖÊâÜÊâäÔøΩ".split("");
    for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 65533) {
        e[D[145][j]] = 37120 + j;
        d[37120 + j] = D[145][j];
    };
    D[146] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊâèÊâêÊâïÊâñÊâóÊâôÊâöÊâúÊâùÊâûÊâüÊâ†Êâ°Êâ¢Êâ§Êâ•Êâ®Êâ±Êâ≤Êâ¥ÊâµÊâ∑Êâ∏Êâ∫ÊâªÊâΩÊäÅÊäÇÊäÉÊäÖÊäÜÊäáÊäàÊäãÊäåÊäçÊäéÊäèÊäêÊäîÊäôÊäúÊäùÊäûÊä£Êä¶ÊäßÊä©Êä™Êä≠ÊäÆÊäØÊä∞Êä≤Êä≥Êä¥Êä∂Êä∑Êä∏Êä∫ÊäæÊãÄÊãÅÔøΩÊãÉÊããÊãèÊãëÊãïÊãùÊãûÊã†Êã°Êã§Êã™Êã´Êã∞Êã≤ÊãµÊã∏ÊãπÊã∫ÊãªÊåÄÊåÉÊåÑÊåÖÊåÜÊåäÊåãÊååÊåçÊåèÊåêÊåíÊåìÊåîÊåïÊåóÊåòÊåôÊåúÊå¶ÊåßÊå©Êå¨Êå≠ÊåÆÊå∞Êå±Êå≥Êå¥ÊåµÊå∂Êå∑Êå∏ÊåªÊåºÊåæÊåøÊçÄÊçÅÊçÑÊçáÊçàÊçäÊçëÊçíÊçìÊçîÊçñÊçóÊçòÊçôÊçöÊçõÊçúÊçùÊç†Êç§Êç•Êç¶Êç®Êç™Êç´Êç¨ÊçØÊç∞Êç≤Êç≥Êç¥ÊçµÊç∏ÊçπÊçºÊçΩÊçæÊçøÊéÅÊéÉÊéÑÊéÖÊéÜÊéãÊéçÊéëÊéìÊéîÊéïÊéóÊéôÊéöÊéõÊéúÊéùÊéûÊéüÊé°Êé§Êé¶Êé´ÊéØÊé±Êé≤ÊéµÊé∂ÊéπÊéªÊéΩÊéøÊèÄÔøΩ".split("");
    for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 65533) {
        e[D[146][j]] = 37376 + j;
        d[37376 + j] = D[146][j];
    };
    D[147] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊèÅÊèÇÊèÉÊèÖÊèáÊèàÊèäÊèãÊèåÊèëÊèìÊèîÊèïÊèóÊèòÊèôÊèöÊèõÊèúÊèùÊèüÊè¢Êè§Êè•Êè¶ÊèßÊè®Êè´Êè¨ÊèÆÊèØÊè∞Êè±Êè≥ÊèµÊè∑ÊèπÊè∫ÊèªÊèºÊèæÊêÉÊêÑÊêÜÊêáÊêàÊêâÊêäÊêçÊêéÊêëÊêíÊêïÊêñÊêóÊêòÊêôÊêöÊêùÊêüÊê¢Êê£Êê§ÔøΩÊê•ÊêßÊê®Êê©Êê´ÊêÆÊêØÊê∞Êê±Êê≤Êê≥ÊêµÊê∂Êê∑Êê∏ÊêπÊêªÊêºÊêæÊëÄÊëÇÊëÉÊëâÊëãÊëåÊëçÊëéÊëèÊëêÊëëÊëìÊëïÊëñÊëóÊëôÊëöÊëõÊëúÊëùÊëüÊë†Êë°Êë¢Êë£Êë§Êë•Êë¶Êë®Êë™Êë´Êë¨ÊëÆÊëØÊë∞Êë±Êë≤Êë≥Êë¥ÊëµÊë∂Êë∑ÊëªÊëºÊëΩÊëæÊëøÊíÄÊíÅÊíÉÊíÜÊíàÊíâÊíäÊíãÊíåÊíçÊíéÊíèÊíêÊíìÊíîÊíóÊíòÊíöÊíõÊíúÊíùÊíüÊí†Êí°Êí¢Êí£Êí•Êí¶ÊíßÊí®Êí™Êí´ÊíØÊí±Êí≤Êí≥Êí¥Êí∂ÊíπÊíªÊíΩÊíæÊíøÊìÅÊìÉÊìÑÊìÜÊìáÊìàÊìâÊìäÊìãÊìåÊìèÊìëÊììÊìîÊìïÊìñÊìôÊìöÔøΩ".split("");
    for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 65533) {
        e[D[147][j]] = 37632 + j;
        d[37632 + j] = D[147][j];
    };
    D[148] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊìõÊìúÊìùÊìüÊì†Êì°Êì£Êì•ÊìßÊì®Êì©Êì™Êì´Êì¨Êì≠ÊìÆÊìØÊì∞Êì±Êì≤Êì≥Êì¥ÊìµÊì∂Êì∑Êì∏ÊìπÊì∫ÊìªÊìºÊìΩÊìæÊìøÊîÅÊîÇÊîÉÊîÑÊîÖÊîÜÊîáÊîàÊîäÊîãÊîåÊîçÊîéÊîèÊîêÊîëÊîìÊîîÊîïÊîñÊîóÊîôÊîöÊîõÊîúÊîùÊîûÊîüÊî†Êî°ÔøΩÊî¢Êî£Êî§Êî¶ÊîßÊî®Êî©Êî™Êî¨Êî≠Êî∞Êî±Êî≤Êî≥Êî∑Êî∫ÊîºÊîΩÊïÄÊïÅÊïÇÊïÉÊïÑÊïÜÊïáÊïäÊïãÊïçÊïéÊïêÊïíÊïìÊïîÊïóÊïòÊïöÊïúÊïüÊï†Êï°Êï§Êï•ÊïßÊï®Êï©Êï™Êï≠ÊïÆÊïØÊï±Êï≥ÊïµÊï∂Êï∏ÊïπÊï∫ÊïªÊïºÊïΩÊïæÊïøÊñÄÊñÅÊñÇÊñÉÊñÑÊñÖÊñÜÊñàÊñâÊñäÊñçÊñéÊñèÊñíÊñîÊñïÊññÊñòÊñöÊñùÊñûÊñ†Êñ¢Êñ£Êñ¶Êñ®Êñ™Êñ¨ÊñÆÊñ±Êñ≤Êñ≥Êñ¥ÊñµÊñ∂Êñ∑Êñ∏Êñ∫ÊñªÊñæÊñøÊóÄÊóÇÊóáÊóàÊóâÊóäÊóçÊóêÊóëÊóìÊóîÊóïÊóòÊóôÊóöÊóõÊóúÊóùÊóûÊóüÊó°Êó£Êó§Êó™Êó´ÔøΩ".split("");
    for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 65533) {
        e[D[148][j]] = 37888 + j;
        d[37888 + j] = D[148][j];
    };
    D[149] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊó≤Êó≥Êó¥ÊóµÊó∏ÊóπÊóªÊóºÊóΩÊóæÊóøÊòÅÊòÑÊòÖÊòáÊòàÊòâÊòãÊòçÊòêÊòëÊòíÊòñÊòóÊòòÊòöÊòõÊòúÊòûÊò°Êò¢Êò£Êò§Êò¶Êò©Êò™Êò´Êò¨ÊòÆÊò∞Êò≤Êò≥Êò∑Êò∏ÊòπÊò∫ÊòªÊòΩÊòøÊôÄÊôÇÊôÑÊôÖÊôÜÊôáÊôàÊôâÊôäÊôçÊôéÊôêÊôëÊôòÔøΩÊôôÊôõÊôúÊôùÊôûÊô†Êô¢Êô£Êô•ÊôßÊô©Êô™Êô´Êô¨Êô≠Êô±Êô≤Êô≥ÊôµÊô∏ÊôπÊôªÊôºÊôΩÊôøÊöÄÊöÅÊöÉÊöÖÊöÜÊöàÊöâÊöäÊöãÊöçÊöéÊöèÊöêÊöíÊöìÊöîÊöïÊöòÊöôÊööÊöõÊöúÊöûÊöüÊö†Êö°Êö¢Êö£Êö§Êö•Êö¶Êö©Êö™Êö´Êö¨Êö≠ÊöØÊö∞Êö±Êö≤Êö≥ÊöµÊö∂Êö∑Êö∏Êö∫ÊöªÊöºÊöΩÊöøÊõÄÊõÅÊõÇÊõÉÊõÑÊõÖÊõÜÊõáÊõàÊõâÊõäÊõãÊõåÊõçÊõéÊõèÊõêÊõëÊõíÊõìÊõîÊõïÊõñÊõóÊõòÊõöÊõûÊõüÊõ†Êõ°Êõ¢Êõ£Êõ§Êõ•ÊõßÊõ®Êõ™Êõ´Êõ¨Êõ≠ÊõÆÊõØÊõ±ÊõµÊõ∂Êõ∏Êõ∫ÊõªÊõΩÊúÅÊúÇÊúÉÔøΩ".split("");
    for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 65533) {
        e[D[149][j]] = 38144 + j;
        d[38144 + j] = D[149][j];
    };
    D[150] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊúÑÊúÖÊúÜÊúáÊúåÊúéÊúèÊúëÊúíÊúìÊúñÊúòÊúôÊúöÊúúÊúûÊú†Êú°Êú¢Êú£Êú§Êú•ÊúßÊú©ÊúÆÊú∞Êú≤Êú≥Êú∂Êú∑Êú∏ÊúπÊúªÊúºÊúæÊúøÊùÅÊùÑÊùÖÊùáÊùäÊùãÊùçÊùíÊùîÊùïÊùóÊùòÊùôÊùöÊùõÊùùÊù¢Êù£Êù§Êù¶ÊùßÊù´Êù¨ÊùÆÊù±Êù¥Êù∂ÔøΩÊù∏ÊùπÊù∫ÊùªÊùΩÊûÄÊûÇÊûÉÊûÖÊûÜÊûàÊûäÊûåÊûçÊûéÊûèÊûëÊûíÊûìÊûîÊûñÊûôÊûõÊûüÊû†Êû°Êû§Êû¶Êû©Êû¨ÊûÆÊû±Êû≤Êû¥ÊûπÊû∫ÊûªÊûºÊûΩÊûæÊûøÊüÄÊüÇÊüÖÊüÜÊüáÊüàÊüâÊüäÊüãÊüåÊüçÊüéÊüïÊüñÊüóÊüõÊüüÊü°Êü£Êü§Êü¶ÊüßÊü®Êü™Êü´Êü≠ÊüÆÊü≤ÊüµÊü∂Êü∑Êü∏ÊüπÊü∫ÊüªÊüºÊüæÊ†ÅÊ†ÇÊ†ÉÊ†ÑÊ†ÜÊ†çÊ†êÊ†íÊ†îÊ†ïÊ†òÊ†ôÊ†öÊ†õÊ†úÊ†ûÊ†üÊ††Ê†¢Ê†£Ê†§Ê†•Ê†¶Ê†ßÊ†®Ê†´Ê†¨Ê†≠Ê†ÆÊ†ØÊ†∞Ê†±Ê†¥Ê†µÊ†∂Ê†∫Ê†ªÊ†øÊ°áÊ°ãÊ°çÊ°èÊ°íÊ°ñÊ°óÊ°òÊ°ôÊ°öÊ°õÔøΩ".split("");
    for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 65533) {
        e[D[150][j]] = 38400 + j;
        d[38400 + j] = D[150][j];
    };
    D[151] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ°úÊ°ùÊ°ûÊ°üÊ°™Ê°¨Ê°≠Ê°ÆÊ°ØÊ°∞Ê°±Ê°≤Ê°≥Ê°µÊ°∏Ê°πÊ°∫Ê°ªÊ°ºÊ°ΩÊ°æÊ°øÊ¢ÄÊ¢ÇÊ¢ÑÊ¢áÊ¢àÊ¢âÊ¢äÊ¢ãÊ¢åÊ¢çÊ¢éÊ¢êÊ¢ëÊ¢íÊ¢îÊ¢ïÊ¢ñÊ¢òÊ¢ôÊ¢öÊ¢õÊ¢úÊ¢ùÊ¢ûÊ¢üÊ¢†Ê¢°Ê¢£Ê¢§Ê¢•Ê¢©Ê¢™Ê¢´Ê¢¨Ê¢ÆÊ¢±Ê¢≤Ê¢¥Ê¢∂Ê¢∑Ê¢∏ÔøΩÊ¢πÊ¢∫Ê¢ªÊ¢ºÊ¢ΩÊ¢æÊ¢øÊ£ÅÊ£ÉÊ£ÑÊ£ÖÊ£ÜÊ£áÊ£àÊ£äÊ£åÊ£éÊ£èÊ£êÊ£ëÊ£ìÊ£îÊ£ñÊ£óÊ£ôÊ£õÊ£úÊ£ùÊ£ûÊ£üÊ£°Ê£¢Ê£§Ê£•Ê£¶Ê£ßÊ£®Ê£©Ê£™Ê£´Ê£¨Ê£≠Ê£ØÊ£≤Ê£≥Ê£¥Ê£∂Ê£∑Ê£∏Ê£ªÊ£ΩÊ£æÊ£øÊ§ÄÊ§ÇÊ§ÉÊ§ÑÊ§ÜÊ§áÊ§àÊ§âÊ§äÊ§åÊ§èÊ§ëÊ§ìÊ§îÊ§ïÊ§ñÊ§óÊ§òÊ§ôÊ§öÊ§õÊ§úÊ§ùÊ§ûÊ§°Ê§¢Ê§£Ê§•Ê§¶Ê§ßÊ§®Ê§©Ê§™Ê§´Ê§¨Ê§ÆÊ§ØÊ§±Ê§≤Ê§≥Ê§µÊ§∂Ê§∑Ê§∏Ê§∫Ê§ªÊ§ºÊ§æÊ•ÄÊ•ÅÊ•ÉÊ•ÑÊ•ÖÊ•ÜÊ•áÊ•àÊ•âÊ•äÊ•ãÊ•åÊ•çÊ•éÊ•èÊ•êÊ•ëÊ•íÊ•ìÊ•ïÊ•ñÊ•òÊ•ôÊ•õÊ•úÊ•üÔøΩ".split("");
    for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 65533) {
        e[D[151][j]] = 38656 + j;
        d[38656 + j] = D[151][j];
    };
    D[152] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ•°Ê•¢Ê•§Ê••Ê•ßÊ•®Ê•©Ê•™Ê•¨Ê•≠Ê•ØÊ•∞Ê•≤Ê•≥Ê•¥Ê•µÊ•∂Ê•∫Ê•ªÊ•ΩÊ•æÊ•øÊ¶ÅÊ¶ÉÊ¶ÖÊ¶äÊ¶ãÊ¶åÊ¶éÊ¶èÊ¶êÊ¶ëÊ¶íÊ¶ìÊ¶ñÊ¶óÊ¶ôÊ¶öÊ¶ùÊ¶ûÊ¶üÊ¶†Ê¶°Ê¶¢Ê¶£Ê¶§Ê¶•Ê¶¶Ê¶©Ê¶™Ê¶¨Ê¶ÆÊ¶ØÊ¶∞Ê¶≤Ê¶≥Ê¶µÊ¶∂Ê¶∏Ê¶πÊ¶∫Ê¶ºÊ¶ΩÔøΩÊ¶æÊ¶øÊßÄÊßÇÊßÉÊßÑÊßÖÊßÜÊßáÊßàÊßâÊßãÊßçÊßèÊßëÊßíÊßìÊßïÊßñÊßóÊßòÊßôÊßöÊßúÊßùÊßûÊß°Êß¢Êß£Êß§Êß•Êß¶ÊßßÊß®Êß©Êß™Êß´Êß¨ÊßÆÊßØÊß∞Êß±Êß≥Êß¥ÊßµÊß∂Êß∑Êß∏ÊßπÊß∫ÊßªÊßºÊßæÊ®ÄÊ®ÅÊ®ÇÊ®ÉÊ®ÑÊ®ÖÊ®ÜÊ®áÊ®àÊ®âÊ®ãÊ®åÊ®çÊ®éÊ®èÊ®êÊ®ëÊ®íÊ®ìÊ®îÊ®ïÊ®ñÊ®ôÊ®öÊ®õÊ®úÊ®ùÊ®ûÊ®†Ê®¢Ê®£Ê®§Ê®•Ê®¶Ê®ßÊ®©Ê®´Ê®¨Ê®≠Ê®ÆÊ®∞Ê®≤Ê®≥Ê®¥Ê®∂Ê®∑Ê®∏Ê®πÊ®∫Ê®ªÊ®ºÊ®øÊ©ÄÊ©ÅÊ©ÇÊ©ÉÊ©ÖÊ©ÜÊ©àÊ©âÊ©äÊ©ãÊ©åÊ©çÊ©éÊ©èÊ©ëÊ©íÊ©ìÊ©îÊ©ïÊ©ñÊ©óÊ©öÔøΩ".split("");
    for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 65533) {
        e[D[152][j]] = 38912 + j;
        d[38912 + j] = D[152][j];
    };
    D[153] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ©úÊ©ùÊ©ûÊ©üÊ©†Ê©¢Ê©£Ê©§Ê©¶Ê©ßÊ©®Ê©©Ê©™Ê©´Ê©¨Ê©≠Ê©ÆÊ©ØÊ©∞Ê©≤Ê©≥Ê©¥Ê©µÊ©∂Ê©∑Ê©∏Ê©∫Ê©ªÊ©ΩÊ©æÊ©øÊ™ÅÊ™ÇÊ™ÉÊ™ÖÊ™ÜÊ™áÊ™àÊ™âÊ™äÊ™ãÊ™åÊ™çÊ™èÊ™íÊ™ìÊ™îÊ™ïÊ™ñÊ™òÊ™ôÊ™öÊ™õÊ™úÊ™ùÊ™ûÊ™üÊ™°Ê™¢Ê™£Ê™§Ê™•Ê™¶ÔøΩÊ™ßÊ™®Ê™™Ê™≠Ê™ÆÊ™ØÊ™∞Ê™±Ê™≤Ê™≥Ê™¥Ê™µÊ™∂Ê™∑Ê™∏Ê™πÊ™∫Ê™ªÊ™ºÊ™ΩÊ™æÊ™øÊ´ÄÊ´ÅÊ´ÇÊ´ÉÊ´ÑÊ´ÖÊ´ÜÊ´áÊ´àÊ´âÊ´äÊ´ãÊ´åÊ´çÊ´éÊ´èÊ´êÊ´ëÊ´íÊ´ìÊ´îÊ´ïÊ´ñÊ´óÊ´òÊ´ôÊ´öÊ´õÊ´úÊ´ùÊ´ûÊ´üÊ´†Ê´°Ê´¢Ê´£Ê´§Ê´•Ê´¶Ê´ßÊ´®Ê´©Ê´™Ê´´Ê´¨Ê´≠Ê´ÆÊ´ØÊ´∞Ê´±Ê´≤Ê´≥Ê´¥Ê´µÊ´∂Ê´∑Ê´∏Ê´πÊ´∫Ê´ªÊ´ºÊ´ΩÊ´æÊ´øÊ¨ÄÊ¨ÅÊ¨ÇÊ¨ÉÊ¨ÑÊ¨ÖÊ¨ÜÊ¨áÊ¨àÊ¨âÊ¨äÊ¨ãÊ¨åÊ¨çÊ¨éÊ¨èÊ¨êÊ¨ëÊ¨íÊ¨ìÊ¨îÊ¨ïÊ¨ñÊ¨óÊ¨òÊ¨ôÊ¨öÊ¨õÊ¨úÊ¨ùÊ¨ûÊ¨üÊ¨•Ê¨¶Ê¨®Ê¨©Ê¨™Ê¨´Ê¨¨Ê¨≠Ê¨ÆÔøΩ".split("");
    for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 65533) {
        e[D[153][j]] = 39168 + j;
        d[39168 + j] = D[153][j];
    };
    D[154] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ¨ØÊ¨∞Ê¨±Ê¨≥Ê¨¥Ê¨µÊ¨∂Ê¨∏Ê¨ªÊ¨ºÊ¨ΩÊ¨øÊ≠ÄÊ≠ÅÊ≠ÇÊ≠ÑÊ≠ÖÊ≠àÊ≠äÊ≠ãÊ≠çÊ≠éÊ≠èÊ≠êÊ≠ëÊ≠íÊ≠ìÊ≠îÊ≠ïÊ≠ñÊ≠óÊ≠òÊ≠öÊ≠õÊ≠úÊ≠ùÊ≠ûÊ≠üÊ≠†Ê≠°Ê≠®Ê≠©Ê≠´Ê≠¨Ê≠≠Ê≠ÆÊ≠ØÊ≠∞Ê≠±Ê≠≤Ê≠≥Ê≠¥Ê≠µÊ≠∂Ê≠∑Ê≠∏Ê≠∫Ê≠ΩÊ≠æÊ≠øÊÆÄÊÆÖÊÆàÔøΩÊÆåÊÆéÊÆèÊÆêÊÆëÊÆîÊÆïÊÆóÊÆòÊÆôÊÆúÊÆùÊÆûÊÆüÊÆ†ÊÆ¢ÊÆ£ÊÆ§ÊÆ•ÊÆ¶ÊÆßÊÆ®ÊÆ©ÊÆ´ÊÆ¨ÊÆ≠ÊÆÆÊÆØÊÆ∞ÊÆ±ÊÆ≤ÊÆ∂ÊÆ∏ÊÆπÊÆ∫ÊÆªÊÆºÊÆΩÊÆæÊØÄÊØÉÊØÑÊØÜÊØáÊØàÊØâÊØäÊØåÊØéÊØêÊØëÊØòÊØöÊØúÊØùÊØûÊØüÊØ†ÊØ¢ÊØ£ÊØ§ÊØ•ÊØ¶ÊØßÊØ®ÊØ©ÊØ¨ÊØ≠ÊØÆÊØ∞ÊØ±ÊØ≤ÊØ¥ÊØ∂ÊØ∑ÊØ∏ÊØ∫ÊØªÊØºÊØæÊØøÊ∞ÄÊ∞ÅÊ∞ÇÊ∞ÉÊ∞ÑÊ∞àÊ∞âÊ∞äÊ∞ãÊ∞åÊ∞éÊ∞íÊ∞óÊ∞úÊ∞ùÊ∞ûÊ∞†Ê∞£Ê∞•Ê∞´Ê∞¨Ê∞≠Ê∞±Ê∞≥Ê∞∂Ê∞∑Ê∞πÊ∞∫Ê∞ªÊ∞ºÊ∞æÊ∞øÊ±ÉÊ±ÑÊ±ÖÊ±àÊ±ãÊ±åÊ±çÊ±éÊ±èÊ±ëÊ±íÊ±ìÊ±ñÊ±òÔøΩ".split("");
    for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 65533) {
        e[D[154][j]] = 39424 + j;
        d[39424 + j] = D[154][j];
    };
    D[155] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ±ôÊ±öÊ±¢Ê±£Ê±•Ê±¶Ê±ßÊ±´Ê±¨Ê±≠Ê±ÆÊ±ØÊ±±Ê±≥Ê±µÊ±∑Ê±∏Ê±∫Ê±ªÊ±ºÊ±øÊ≤ÄÊ≤ÑÊ≤áÊ≤äÊ≤ãÊ≤çÊ≤éÊ≤ëÊ≤íÊ≤ïÊ≤ñÊ≤óÊ≤òÊ≤öÊ≤úÊ≤ùÊ≤ûÊ≤†Ê≤¢Ê≤®Ê≤¨Ê≤ØÊ≤∞Ê≤¥Ê≤µÊ≤∂Ê≤∑Ê≤∫Ê≥ÄÊ≥ÅÊ≥ÇÊ≥ÉÊ≥ÜÊ≥áÊ≥àÊ≥ãÊ≥çÊ≥éÊ≥èÊ≥ëÊ≥íÊ≥òÔøΩÊ≥ôÊ≥öÊ≥úÊ≥ùÊ≥üÊ≥§Ê≥¶Ê≥ßÊ≥©Ê≥¨Ê≥≠Ê≥≤Ê≥¥Ê≥πÊ≥øÊ¥ÄÊ¥ÇÊ¥ÉÊ¥ÖÊ¥ÜÊ¥àÊ¥âÊ¥äÊ¥çÊ¥èÊ¥êÊ¥ëÊ¥ìÊ¥îÊ¥ïÊ¥ñÊ¥òÊ¥úÊ¥ùÊ¥üÊ¥†Ê¥°Ê¥¢Ê¥£Ê¥§Ê¥¶Ê¥®Ê¥©Ê¥¨Ê¥≠Ê¥ØÊ¥∞Ê¥¥Ê¥∂Ê¥∑Ê¥∏Ê¥∫Ê¥øÊµÄÊµÇÊµÑÊµâÊµåÊµêÊµïÊµñÊµóÊµòÊµõÊµùÊµüÊµ°Êµ¢Êµ§Êµ•ÊµßÊµ®Êµ´Êµ¨Êµ≠Êµ∞Êµ±Êµ≤Êµ≥ÊµµÊµ∂ÊµπÊµ∫ÊµªÊµΩÊµæÊµøÊ∂ÄÊ∂ÅÊ∂ÉÊ∂ÑÊ∂ÜÊ∂áÊ∂äÊ∂ãÊ∂çÊ∂èÊ∂êÊ∂íÊ∂ñÊ∂óÊ∂òÊ∂ôÊ∂öÊ∂úÊ∂¢Ê∂•Ê∂¨Ê∂≠Ê∂∞Ê∂±Ê∂≥Ê∂¥Ê∂∂Ê∂∑Ê∂πÊ∂∫Ê∂ªÊ∂ºÊ∂ΩÊ∂æÊ∑ÅÊ∑ÇÊ∑ÉÊ∑àÊ∑âÊ∑äÔøΩ".split("");
    for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 65533) {
        e[D[155][j]] = 39680 + j;
        d[39680 + j] = D[155][j];
    };
    D[156] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ∑çÊ∑éÊ∑èÊ∑êÊ∑íÊ∑ìÊ∑îÊ∑ïÊ∑óÊ∑öÊ∑õÊ∑úÊ∑üÊ∑¢Ê∑£Ê∑•Ê∑ßÊ∑®Ê∑©Ê∑™Ê∑≠Ê∑ØÊ∑∞Ê∑≤Ê∑¥Ê∑µÊ∑∂Ê∑∏Ê∑∫Ê∑ΩÊ∑æÊ∑øÊ∏ÄÊ∏ÅÊ∏ÇÊ∏ÉÊ∏ÑÊ∏ÜÊ∏áÊ∏àÊ∏âÊ∏ãÊ∏èÊ∏íÊ∏ìÊ∏ïÊ∏òÊ∏ôÊ∏õÊ∏úÊ∏ûÊ∏üÊ∏¢Ê∏¶Ê∏ßÊ∏®Ê∏™Ê∏¨Ê∏ÆÊ∏∞Ê∏±Ê∏≥Ê∏µÔøΩÊ∏∂Ê∏∑Ê∏πÊ∏ªÊ∏ºÊ∏ΩÊ∏æÊ∏øÊπÄÊπÅÊπÇÊπÖÊπÜÊπáÊπàÊπâÊπäÊπãÊπåÊπèÊπêÊπëÊπíÊπïÊπóÊπôÊπöÊπúÊπùÊπûÊπ†Êπ°Êπ¢Êπ£Êπ§Êπ•Êπ¶ÊπßÊπ®Êπ©Êπ™Êπ¨Êπ≠ÊπØÊπ∞Êπ±Êπ≤Êπ≥Êπ¥ÊπµÊπ∂Êπ∑Êπ∏ÊππÊπ∫ÊπªÊπºÊπΩÊ∫ÄÊ∫ÅÊ∫ÇÊ∫ÑÊ∫áÊ∫àÊ∫äÊ∫ãÊ∫åÊ∫çÊ∫éÊ∫ëÊ∫íÊ∫ìÊ∫îÊ∫ïÊ∫ñÊ∫óÊ∫ôÊ∫öÊ∫õÊ∫ùÊ∫ûÊ∫†Ê∫°Ê∫£Ê∫§Ê∫¶Ê∫®Ê∫©Ê∫´Ê∫¨Ê∫≠Ê∫ÆÊ∫∞Ê∫≥Ê∫µÊ∫∏Ê∫πÊ∫ºÊ∫æÊ∫øÊªÄÊªÉÊªÑÊªÖÊªÜÊªàÊªâÊªäÊªåÊªçÊªéÊªêÊªíÊªñÊªòÊªôÊªõÊªúÊªùÊª£ÊªßÊª™Êª´Êª¨Êª≠ÊªÆÊªØÔøΩ".split("");
    for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 65533) {
        e[D[156][j]] = 39936 + j;
        d[39936 + j] = D[156][j];
    };
    D[157] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊª∞Êª±Êª≤Êª≥ÊªµÊª∂Êª∑Êª∏Êª∫ÊªªÊªºÊªΩÊªæÊªøÊºÄÊºÅÊºÉÊºÑÊºÖÊºáÊºàÊºäÊºãÊºåÊºçÊºéÊºêÊºëÊºíÊºñÊºóÊºòÊºôÊºöÊºõÊºúÊºùÊºûÊºüÊº°Êº¢Êº£Êº•Êº¶ÊºßÊº®Êº¨ÊºÆÊº∞Êº≤Êº¥ÊºµÊº∑Êº∏ÊºπÊº∫ÊºªÊººÊºΩÊºøÊΩÄÊΩÅÊΩÇÔøΩÊΩÉÊΩÑÊΩÖÊΩàÊΩâÊΩäÊΩåÊΩéÊΩèÊΩêÊΩëÊΩíÊΩìÊΩîÊΩïÊΩñÊΩóÊΩôÊΩöÊΩõÊΩùÊΩüÊΩ†ÊΩ°ÊΩ£ÊΩ§ÊΩ•ÊΩßÊΩ®ÊΩ©ÊΩ™ÊΩ´ÊΩ¨ÊΩØÊΩ∞ÊΩ±ÊΩ≥ÊΩµÊΩ∂ÊΩ∑ÊΩπÊΩªÊΩΩÊΩæÊΩøÊæÄÊæÅÊæÇÊæÉÊæÖÊæÜÊæáÊæäÊæãÊæèÊæêÊæëÊæíÊæìÊæîÊæïÊæñÊæóÊæòÊæôÊæöÊæõÊæùÊæûÊæüÊæ†Êæ¢Êæ£Êæ§Êæ•Êæ¶Êæ®Êæ©Êæ™Êæ´Êæ¨Êæ≠ÊæÆÊæØÊæ∞Êæ±Êæ≤Êæ¥ÊæµÊæ∑Êæ∏Êæ∫ÊæªÊæºÊæΩÊææÊæøÊøÅÊøÉÊøÑÊøÖÊøÜÊøáÊøàÊøäÊøãÊøåÊøçÊøéÊøèÊøêÊøìÊøîÊøïÊøñÊøóÊøòÊøôÊøöÊøõÊøúÊøùÊøüÊø¢Êø£Êø§Êø•ÔøΩ".split("");
    for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 65533) {
        e[D[157][j]] = 40192 + j;
        d[40192 + j] = D[157][j];
    };
    D[158] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊø¶ÊøßÊø®Êø©Êø™Êø´Êø¨Êø≠Êø∞Êø±Êø≤Êø≥Êø¥ÊøµÊø∂Êø∑Êø∏ÊøπÊø∫ÊøªÊøºÊøΩÊøæÊøøÁÄÄÁÄÅÁÄÇÁÄÉÁÄÑÁÄÖÁÄÜÁÄáÁÄàÁÄâÁÄäÁÄãÁÄåÁÄçÁÄéÁÄèÁÄêÁÄíÁÄìÁÄîÁÄïÁÄñÁÄóÁÄòÁÄôÁÄúÁÄùÁÄûÁÄüÁÄ†ÁÄ°ÁÄ¢ÁÄ§ÁÄ•ÁÄ¶ÁÄßÁÄ®ÁÄ©ÁÄ™ÔøΩÁÄ´ÁÄ¨ÁÄ≠ÁÄÆÁÄØÁÄ∞ÁÄ±ÁÄ≤ÁÄ≥ÁÄ¥ÁÄ∂ÁÄ∑ÁÄ∏ÁÄ∫ÁÄªÁÄºÁÄΩÁÄæÁÄøÁÅÄÁÅÅÁÅÇÁÅÉÁÅÑÁÅÖÁÅÜÁÅáÁÅàÁÅâÁÅäÁÅãÁÅçÁÅéÁÅêÁÅëÁÅíÁÅìÁÅîÁÅïÁÅñÁÅóÁÅòÁÅôÁÅöÁÅõÁÅúÁÅùÁÅüÁÅ†ÁÅ°ÁÅ¢ÁÅ£ÁÅ§ÁÅ•ÁÅ¶ÁÅßÁÅ®ÁÅ©ÁÅ™ÁÅÆÁÅ±ÁÅ≤ÁÅ≥ÁÅ¥ÁÅ∑ÁÅπÁÅ∫ÁÅªÁÅΩÁÇÅÁÇÇÁÇÉÁÇÑÁÇÜÁÇáÁÇàÁÇãÁÇåÁÇçÁÇèÁÇêÁÇëÁÇìÁÇóÁÇòÁÇöÁÇõÁÇûÁÇüÁÇ†ÁÇ°ÁÇ¢ÁÇ£ÁÇ§ÁÇ•ÁÇ¶ÁÇßÁÇ®ÁÇ©ÁÇ™ÁÇ∞ÁÇ≤ÁÇ¥ÁÇµÁÇ∂ÁÇ∫ÁÇæÁÇøÁÉÑÁÉÖÁÉÜÁÉáÁÉâÁÉãÁÉåÁÉçÁÉéÁÉèÁÉêÁÉëÁÉíÁÉìÁÉîÁÉïÁÉñÁÉóÁÉöÔøΩ".split("");
    for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 65533) {
        e[D[158][j]] = 40448 + j;
        d[40448 + j] = D[158][j];
    };
    D[159] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁÉúÁÉùÁÉûÁÉ†ÁÉ°ÁÉ¢ÁÉ£ÁÉ•ÁÉ™ÁÉÆÁÉ∞ÁÉ±ÁÉ≤ÁÉ≥ÁÉ¥ÁÉµÁÉ∂ÁÉ∏ÁÉ∫ÁÉªÁÉºÁÉæÁÉøÁÑÄÁÑÅÁÑÇÁÑÉÁÑÑÁÑÖÁÑÜÁÑáÁÑàÁÑãÁÑåÁÑçÁÑéÁÑèÁÑëÁÑíÁÑîÁÑóÁÑõÁÑúÁÑùÁÑûÁÑüÁÑ†ÁÑ°ÁÑ¢ÁÑ£ÁÑ§ÁÑ•ÁÑßÁÑ®ÁÑ©ÁÑ™ÁÑ´ÁÑ¨ÁÑ≠ÁÑÆÁÑ≤ÁÑ≥ÁÑ¥ÔøΩÁÑµÁÑ∑ÁÑ∏ÁÑπÁÑ∫ÁÑªÁÑºÁÑΩÁÑæÁÑøÁÖÄÁÖÅÁÖÇÁÖÉÁÖÑÁÖÜÁÖáÁÖàÁÖâÁÖãÁÖçÁÖèÁÖêÁÖëÁÖíÁÖìÁÖîÁÖïÁÖñÁÖóÁÖòÁÖôÁÖöÁÖõÁÖùÁÖüÁÖ†ÁÖ°ÁÖ¢ÁÖ£ÁÖ•ÁÖ©ÁÖ™ÁÖ´ÁÖ¨ÁÖ≠ÁÖØÁÖ∞ÁÖ±ÁÖ¥ÁÖµÁÖ∂ÁÖ∑ÁÖπÁÖªÁÖºÁÖæÁÖøÁÜÄÁÜÅÁÜÇÁÜÉÁÜÖÁÜÜÁÜáÁÜàÁÜâÁÜãÁÜåÁÜçÁÜéÁÜêÁÜëÁÜíÁÜìÁÜïÁÜñÁÜóÁÜöÁÜõÁÜúÁÜùÁÜûÁÜ°ÁÜ¢ÁÜ£ÁÜ§ÁÜ•ÁÜ¶ÁÜßÁÜ©ÁÜ™ÁÜ´ÁÜ≠ÁÜÆÁÜØÁÜ∞ÁÜ±ÁÜ≤ÁÜ¥ÁÜ∂ÁÜ∑ÁÜ∏ÁÜ∫ÁÜªÁÜºÁÜΩÁÜæÁÜøÁáÄÁáÅÁáÇÁáÑÁáÖÁáÜÁááÁáàÁáâÁáäÁáãÁáåÁáçÁáèÁáêÁáëÁáíÁáìÔøΩ".split("");
    for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 65533) {
        e[D[159][j]] = 40704 + j;
        d[40704 + j] = D[159][j];
    };
    D[160] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁáñÁáóÁáòÁáôÁáöÁáõÁáúÁáùÁáûÁáüÁá°Áá¢Áá£Áá§Áá¶Áá®Áá©Áá™Áá´Áá¨Áá≠ÁáØÁá∞Áá±Áá≤Áá≥Áá¥ÁáµÁá∂Áá∑Áá∏Áá∫ÁáªÁáºÁáΩÁáæÁáøÁàÄÁàÅÁàÇÁàÉÁàÑÁàÖÁàáÁààÁàâÁàäÁàãÁàåÁàçÁàéÁàèÁàêÁàëÁàíÁàìÁàîÁàïÁàñÁàóÁàòÁàôÁàöÔøΩÁàõÁàúÁàûÁàüÁà†Áà°Áà¢Áà£Áà§Áà•Áà¶ÁàßÁà©Áà´Áà≠ÁàÆÁàØÁà≤Áà≥Áà¥Áà∫ÁàºÁàæÁâÄÁâÅÁâÇÁâÉÁâÑÁâÖÁâÜÁââÁâäÁâãÁâéÁâèÁâêÁâëÁâìÁâîÁâïÁâóÁâòÁâöÁâúÁâûÁâ†Áâ£Áâ§Áâ•Áâ®Áâ™Áâ´Áâ¨Áâ≠Áâ∞Áâ±Áâ≥Áâ¥Áâ∂Áâ∑Áâ∏ÁâªÁâºÁâΩÁäÇÁäÉÁäÖÁäÜÁäáÁäàÁäâÁäåÁäéÁäêÁäëÁäìÁäîÁäïÁäñÁäóÁäòÁäôÁäöÁäõÁäúÁäùÁäûÁä†Áä°Áä¢Áä£Áä§Áä•Áä¶ÁäßÁä®Áä©Áä™Áä´ÁäÆÁä±Áä≤Áä≥ÁäµÁä∫ÁäªÁäºÁäΩÁäæÁäøÁãÄÁãÖÁãÜÁãáÁãâÁãäÁããÁãåÁãèÁãëÁãìÁãîÁãïÁãñÁãòÁãöÁãõÔøΩ".split("");
    for (j = 0; j != D[160].length; ++j) if (D[160][j].charCodeAt(0) !== 65533) {
        e[D[160][j]] = 40960 + j;
        d[40960 + j] = D[160][j];
    };
    D[161] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u3000„ÄÅ„ÄÇ¬∑ÀâÀá¬®„ÄÉ„ÄÖ\u2014ÔΩû\u2016\u2026\u2018\u2019\u201c\u201d„Äî„Äï„Äà„Äâ„Ää„Äã„Äå„Äç„Äé„Äè„Äñ„Äó„Äê„Äë¬±√ó√∑‚à∂‚àß‚à®‚àë‚àè‚à™‚à©‚àà‚à∑‚àö‚ä•‚à•‚à†‚åí‚äô‚à´‚àÆ‚â°‚âå‚âà‚àΩ‚àù‚â†‚âÆ‚âØ‚â§‚â•‚àû‚àµ‚à¥‚ôÇ‚ôÄ¬∞\u2032\u2033‚ÑÉÔºÑ¬§Ôø†Ôø°\u2030¬ß‚Ññ‚òÜ‚òÖ‚óã‚óè‚óé‚óá‚óÜ‚ñ°‚ñ†‚ñ≥‚ñ≤\u203b‚Üí‚Üê‚Üë‚Üì„ÄìÔøΩ".split("");
    for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) {
        e[D[161][j]] = 41216 + j;
        d[41216 + j] = D[161][j];
    };
    D[162] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚Ö∞‚Ö±‚Ö≤‚Ö≥‚Ö¥‚Öµ‚Ö∂‚Ö∑‚Ö∏‚ÖπÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚íà‚íâ‚íä‚íã‚íå‚íç‚íé‚íè‚íê‚íë‚íí‚íì‚íî‚íï‚íñ‚íó‚íò‚íô‚íö‚íõ‚ë¥‚ëµ‚ë∂‚ë∑‚ë∏‚ëπ‚ë∫‚ëª‚ëº‚ëΩ‚ëæ‚ëø‚íÄ‚íÅ‚íÇ‚íÉ‚íÑ‚íÖ‚íÜ‚íá‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®‚ë©ÔøΩÔøΩ„à†„à°„à¢„à£„à§„à•„à¶„àß„à®„à©ÔøΩÔøΩ‚Ö†‚Ö°‚Ö¢‚Ö£‚Ö§‚Ö•‚Ö¶‚Öß‚Ö®‚Ö©‚Ö™‚Ö´ÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) {
        e[D[162][j]] = 41472 + j;
        d[41472 + j] = D[162][j];
    };
    D[163] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔºÅÔºÇÔºÉÔø•ÔºÖÔºÜÔºáÔºàÔºâÔºäÔºãÔºåÔºçÔºéÔºèÔºêÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºôÔºöÔºõÔºúÔºùÔºûÔºüÔº†Ôº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫ÔºªÔººÔºΩÔºæÔºøÔΩÄÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔΩóÔΩòÔΩôÔΩöÔΩõÔΩúÔΩùÔø£ÔøΩ".split("");
    for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) {
        e[D[163][j]] = 41728 + j;
        d[41728 + j] = D[163][j];
    };
    D[164] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„ÅÅ„ÅÇ„ÅÉ„ÅÑ„ÅÖ„ÅÜ„Åá„Åà„Åâ„Åä„Åã„Åå„Åç„Åé„Åè„Åê„Åë„Åí„Åì„Åî„Åï„Åñ„Åó„Åò„Åô„Åö„Åõ„Åú„Åù„Åû„Åü„Å†„Å°„Å¢„Å£„Å§„Å•„Å¶„Åß„Å®„Å©„Å™„Å´„Å¨„Å≠„ÅÆ„ÅØ„Å∞„Å±„Å≤„Å≥„Å¥„Åµ„Å∂„Å∑„Å∏„Åπ„Å∫„Åª„Åº„ÅΩ„Åæ„Åø„ÇÄ„ÇÅ„ÇÇ„ÇÉ„ÇÑ„ÇÖ„ÇÜ„Çá„Çà„Çâ„Çä„Çã„Çå„Çç„Çé„Çè„Çê„Çë„Çí„ÇìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) {
        e[D[164][j]] = 41984 + j;
        d[41984 + j] = D[164][j];
    };
    D[165] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„Ç°„Ç¢„Ç£„Ç§„Ç•„Ç¶„Çß„Ç®„Ç©„Ç™„Ç´„Ç¨„Ç≠„ÇÆ„ÇØ„Ç∞„Ç±„Ç≤„Ç≥„Ç¥„Çµ„Ç∂„Ç∑„Ç∏„Çπ„Ç∫„Çª„Çº„ÇΩ„Çæ„Çø„ÉÄ„ÉÅ„ÉÇ„ÉÉ„ÉÑ„ÉÖ„ÉÜ„Éá„Éà„Éâ„Éä„Éã„Éå„Éç„Éé„Éè„Éê„Éë„Éí„Éì„Éî„Éï„Éñ„Éó„Éò„Éô„Éö„Éõ„Éú„Éù„Éû„Éü„É†„É°„É¢„É£„É§„É•„É¶„Éß„É®„É©„É™„É´„É¨„É≠„ÉÆ„ÉØ„É∞„É±„É≤„É≥„É¥„Éµ„É∂ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) {
        e[D[165][j]] = 42240 + j;
        d[42240 + j] = D[165][j];
    };
    D[166] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ∏µÔ∏∂Ô∏πÔ∏∫Ô∏øÔπÄÔ∏ΩÔ∏æÔπÅÔπÇÔπÉÔπÑÔøΩÔøΩÔ∏ªÔ∏ºÔ∏∑Ô∏∏Ô∏±ÔøΩÔ∏≥Ô∏¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) {
        e[D[166][j]] = 42496 + j;
        d[42496 + j] = D[166][j];
    };
    D[167] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–ØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) {
        e[D[167][j]] = 42752 + j;
        d[42752 + j] = D[167][j];
    };
    D[168] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÀäÀãÀô\u2013\u2015\u2025\u2035‚ÑÖ‚Ñâ‚Üñ‚Üó‚Üò‚Üô‚àï‚àü‚à£‚âí‚â¶‚âß‚äø‚ïê‚ïë‚ïí‚ïì‚ïî‚ïï‚ïñ‚ïó‚ïò‚ïô‚ïö‚ïõ‚ïú‚ïù‚ïû‚ïü‚ï†‚ï°‚ï¢‚ï£‚ï§‚ï•‚ï¶‚ïß‚ï®‚ï©‚ï™‚ï´‚ï¨‚ï≠‚ïÆ‚ïØ‚ï∞‚ï±‚ï≤‚ï≥‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñáÔøΩ‚ñà‚ñâ‚ñä‚ñã‚ñå‚ñç‚ñé‚ñè‚ñì‚ñî‚ñï‚ñº‚ñΩ‚ó¢‚ó£‚ó§‚ó•‚òâ‚äï„Äí„Äù„ÄûÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩƒÅ√°«é√†ƒì√©ƒõ√®ƒ´√≠«ê√¨≈ç√≥«í√≤≈´√∫«î√π«ñ«ò«ö«ú√º√™…ëÔøΩ≈Ñ≈àÔøΩ…°ÔøΩÔøΩÔøΩÔøΩ„ÑÖ„ÑÜ„Ñá„Ñà„Ñâ„Ñä„Ñã„Ñå„Ñç„Ñé„Ñè„Ñê„Ñë„Ñí„Ñì„Ñî„Ñï„Ññ„Ñó„Ñò„Ñô„Ñö„Ñõ„Ñú„Ñù„Ñû„Ñü„Ñ†„Ñ°„Ñ¢„Ñ£„Ñ§„Ñ•„Ñ¶„Ñß„Ñ®„Ñ©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) {
        e[D[168][j]] = 43008 + j;
        d[43008 + j] = D[168][j];
    };
    D[169] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„Ä°„Ä¢„Ä£„Ä§„Ä•„Ä¶„Äß„Ä®„Ä©„ä£„éé„éè„éú„éù„éû„é°„èÑ„èé„èë„èí„èïÔ∏∞Ôø¢Ôø§ÔøΩ‚Ñ°„à±ÔøΩ\u2010ÔøΩÔøΩÔøΩ„Éº„Çõ„Çú„ÉΩ„Éæ„ÄÜ„Çù„ÇûÔπâÔπäÔπãÔπåÔπçÔπéÔπèÔπêÔπëÔπíÔπîÔπïÔπñÔπóÔπôÔπöÔπõÔπúÔπùÔπûÔπüÔπ†Ôπ°ÔøΩÔπ¢Ôπ£Ôπ§Ôπ•Ôπ¶Ôπ®Ôπ©Ôπ™Ôπ´ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„ÄáÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚îÄ‚îÅ‚îÇ‚îÉ‚îÑ‚îÖ‚îÜ‚îá‚îà‚îâ‚îä‚îã‚îå‚îç‚îé‚îè‚îê‚îë‚îí‚îì‚îî‚îï‚îñ‚îó‚îò‚îô‚îö‚îõ‚îú‚îù‚îû‚îü‚î†‚î°‚î¢‚î£‚î§‚î•‚î¶‚îß‚î®‚î©‚î™‚î´‚î¨‚î≠‚îÆ‚îØ‚î∞‚î±‚î≤‚î≥‚î¥‚îµ‚î∂‚î∑‚î∏‚îπ‚î∫‚îª‚îº‚îΩ‚îæ‚îø‚ïÄ‚ïÅ‚ïÇ‚ïÉ‚ïÑ‚ïÖ‚ïÜ‚ïá‚ïà‚ïâ‚ïä‚ïãÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) {
        e[D[169][j]] = 43264 + j;
        d[43264 + j] = D[169][j];
    };
    D[170] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁãúÁãùÁãüÁã¢Áã£Áã§Áã•Áã¶ÁãßÁã™Áã´ÁãµÁã∂ÁãπÁãΩÁãæÁãøÁåÄÁåÇÁåÑÁåÖÁåÜÁåáÁåàÁåâÁåãÁååÁåçÁåèÁåêÁåëÁåíÁåîÁåòÁåôÁåöÁåüÁå†Áå£Áå§Áå¶ÁåßÁå®Áå≠ÁåØÁå∞Áå≤Áå≥ÁåµÁå∂Áå∫ÁåªÁåºÁåΩÁçÄÁçÅÁçÇÁçÉÁçÑÁçÖÁçÜÁçáÁçàÔøΩÁçâÁçäÁçãÁçåÁçéÁçèÁçëÁçìÁçîÁçïÁçñÁçòÁçôÁçöÁçõÁçúÁçùÁçûÁçüÁç°Áç¢Áç£Áç§Áç•Áç¶ÁçßÁç®Áç©Áç™Áç´ÁçÆÁç∞Áç±ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 65533) {
        e[D[170][j]] = 43520 + j;
        d[43520 + j] = D[170][j];
    };
    D[171] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁç≤Áç≥Áç¥ÁçµÁç∂Áç∑Áç∏ÁçπÁç∫ÁçªÁçºÁçΩÁçøÁéÄÁéÅÁéÇÁéÉÁéÖÁéÜÁéàÁéäÁéåÁéçÁéèÁéêÁéíÁéìÁéîÁéïÁéóÁéòÁéôÁéöÁéúÁéùÁéûÁé†Áé°Áé£Áé§Áé•Áé¶ÁéßÁé®Áé™Áé¨Áé≠Áé±Áé¥ÁéµÁé∂Áé∏ÁéπÁéºÁéΩÁéæÁéøÁèÅÁèÉÁèÑÁèÖÁèÜÁèáÔøΩÁèãÁèåÁèéÁèíÁèìÁèîÁèïÁèñÁèóÁèòÁèöÁèõÁèúÁèùÁèüÁè°Áè¢Áè£Áè§Áè¶Áè®Áè™Áè´Áè¨ÁèÆÁèØÁè∞Áè±Áè≥Áè¥ÁèµÁè∂Áè∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 65533) {
        e[D[171][j]] = 43776 + j;
        d[43776 + j] = D[171][j];
    };
    D[172] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁè∏ÁèπÁè∫ÁèªÁèºÁèΩÁèæÁèøÁêÄÁêÅÁêÇÁêÑÁêáÁêàÁêãÁêåÁêçÁêéÁêëÁêíÁêìÁêîÁêïÁêñÁêóÁêòÁêôÁêúÁêùÁêûÁêüÁê†Áê°Áê£Áê§ÁêßÁê©Áê´Áê≠ÁêØÁê±Áê≤Áê∑Áê∏ÁêπÁê∫ÁêªÁêΩÁêæÁêøÁëÄÁëÇÁëÉÁëÑÁëÖÁëÜÁëáÁëàÁëâÁëäÁëãÁëåÁëçÔøΩÁëéÁëèÁëêÁëëÁëíÁëìÁëîÁëñÁëòÁëùÁë†Áë°Áë¢Áë£Áë§Áë•Áë¶ÁëßÁë®Áë©Áë™Áë´Áë¨ÁëÆÁëØÁë±Áë≤Áë≥Áë¥ÁëµÁë∏ÁëπÁë∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 65533) {
        e[D[172][j]] = 44032 + j;
        d[44032 + j] = D[172][j];
    };
    D[173] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁëªÁëºÁëΩÁëøÁíÇÁíÑÁíÖÁíÜÁíàÁíâÁíäÁíåÁíçÁíèÁíëÁííÁíìÁíîÁíïÁíñÁíóÁíòÁíôÁíöÁíõÁíùÁíüÁí†Áí°Áí¢Áí£Áí§Áí•Áí¶Áí™Áí´Áí¨Áí≠ÁíÆÁíØÁí∞Áí±Áí≤Áí≥Áí¥ÁíµÁí∂Áí∑Áí∏ÁíπÁíªÁíºÁíΩÁíæÁíøÁìÄÁìÅÁìÇÁìÉÁìÑÁìÖÁìÜÁìáÔøΩÁìàÁìâÁìäÁìãÁìåÁìçÁìéÁìèÁìêÁìëÁììÁìîÁìïÁìñÁìóÁìòÁìôÁìöÁìõÁìùÁìüÁì°Áì•ÁìßÁì®Áì©Áì™Áì´Áì¨Áì≠Áì∞Áì±Áì≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 65533) {
        e[D[173][j]] = 44288 + j;
        d[44288 + j] = D[173][j];
    };
    D[174] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁì≥ÁìµÁì∏ÁìπÁì∫ÁìªÁìºÁìΩÁìæÁîÄÁîÅÁîÇÁîÉÁîÖÁîÜÁîáÁîàÁîâÁîäÁîãÁîåÁîéÁîêÁîíÁîîÁîïÁîñÁîóÁîõÁîùÁîûÁî†Áî°Áî¢Áî£Áî§Áî¶ÁîßÁî™ÁîÆÁî¥Áî∂ÁîπÁîºÁîΩÁîøÁïÅÁïÇÁïÉÁïÑÁïÜÁïáÁïâÁïäÁïçÁïêÁïëÁïíÁïìÁïïÁïñÁïóÁïòÔøΩÁïùÁïûÁïüÁï†Áï°Áï¢Áï£Áï§ÁïßÁï®Áï©Áï´Áï¨Áï≠ÁïÆÁïØÁï∞Áï±Áï≥ÁïµÁï∂Áï∑Áï∫ÁïªÁïºÁïΩÁïæÁñÄÁñÅÁñÇÁñÑÁñÖÁñáÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 65533) {
        e[D[174][j]] = 44544 + j;
        d[44544 + j] = D[174][j];
    };
    D[175] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁñàÁñâÁñäÁñåÁñçÁñéÁñêÁñìÁñïÁñòÁñõÁñúÁñûÁñ¢Áñ¶ÁñßÁñ®Áñ©Áñ™Áñ≠Áñ∂Áñ∑Áñ∫ÁñªÁñøÁóÄÁóÅÁóÜÁóãÁóåÁóéÁóèÁóêÁóëÁóìÁóóÁóôÁóöÁóúÁóùÁóüÁó†Áó°Áó•Áó©Áó¨Áó≠ÁóÆÁóØÁó≤Áó≥ÁóµÁó∂Áó∑Áó∏Áó∫ÁóªÁóΩÁóæÁòÇÁòÑÁòÜÁòáÔøΩÁòàÁòâÁòãÁòçÁòéÁòèÁòëÁòíÁòìÁòîÁòñÁòöÁòúÁòùÁòûÁò°Áò£ÁòßÁò®Áò¨ÁòÆÁòØÁò±Áò≤Áò∂Áò∑ÁòπÁò∫ÁòªÁòΩÁôÅÁôÇÁôÑÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 65533) {
        e[D[175][j]] = 44800 + j;
        d[44800 + j] = D[175][j];
    };
    D[176] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁôÖÁôÜÁôáÁôàÁôâÁôäÁôãÁôéÁôèÁôêÁôëÁôíÁôìÁôïÁôóÁôòÁôôÁôöÁôõÁôùÁôüÁô†Áô°Áô¢Áô§Áô•Áô¶ÁôßÁô®Áô©Áô™Áô¨Áô≠ÁôÆÁô∞Áô±Áô≤Áô≥Áô¥ÁôµÁô∂Áô∑ÁôπÁô∫ÁôºÁôøÁöÄÁöÅÁöÉÁöÖÁöâÁöäÁöåÁöçÁöèÁöêÁöíÁöîÁöïÁöóÁöòÁööÁöõÔøΩÁöúÁöùÁöûÁöüÁö†Áö°Áö¢Áö£Áö•Áö¶ÁößÁö®Áö©Áö™Áö´Áö¨Áö≠ÁöØÁö∞Áö≥ÁöµÁö∂Áö∑Áö∏ÁöπÁö∫ÁöªÁöºÁöΩÁöæÁõÄÁõÅÁõÉÂïäÈòøÂüÉÊå®ÂìéÂîâÂìÄÁöëÁôåËîºÁüÆËâæÁ¢çÁà±ÈöòÈûçÊ∞®ÂÆâ‰ø∫ÊåâÊöóÂ≤∏ËÉ∫Ê°àËÇÆÊòÇÁõéÂáπÊïñÁÜ¨Áø±Ë¢ÑÂÇ≤Â••ÊáäÊæ≥Ëä≠ÊçåÊâíÂè≠ÂêßÁ¨ÜÂÖ´Áñ§Â∑¥ÊãîË∑ãÈù∂ÊääËÄôÂùùÈú∏ÁΩ¢Áà∏ÁôΩÊüèÁôæÊëÜ‰Ω∞Ë¥•ÊãúÁ®óÊñëÁè≠Êê¨Êâ≥Ëà¨È¢ÅÊùøÁâàÊâÆÊãå‰º¥Áì£ÂçäÂäûÁªäÈÇ¶Â∏ÆÊ¢ÜÊ¶úËÜÄÁªëÊ£íÁ£ÖËöåÈïëÂÇçË∞§ËãûËÉûÂåÖË§íÂâ•ÔøΩ".split("");
    for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) {
        e[D[176][j]] = 45056 + j;
        d[45056 + j] = D[176][j];
    };
    D[177] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁõÑÁõáÁõâÁõãÁõåÁõìÁõïÁõôÁõöÁõúÁõùÁõûÁõ†Áõ°Áõ¢Áõ£Áõ§Áõ¶ÁõßÁõ®Áõ©Áõ™Áõ´Áõ¨Áõ≠Áõ∞Áõ≥ÁõµÁõ∂Áõ∑Áõ∫ÁõªÁõΩÁõøÁúÄÁúÇÁúÉÁúÖÁúÜÁúäÁúåÁúéÁúèÁúêÁúëÁúíÁúìÁúîÁúïÁúñÁúóÁúòÁúõÁúúÁúùÁúûÁú°Áú£Áú§Áú•ÁúßÁú™Áú´ÔøΩÁú¨ÁúÆÁú∞Áú±Áú≤Áú≥Áú¥ÁúπÁúªÁúΩÁúæÁúøÁùÇÁùÑÁùÖÁùÜÁùàÁùâÁùäÁùãÁùåÁùçÁùéÁùèÁùíÁùìÁùîÁùïÁùñÁùóÁùòÁùôÁùúËñÑÈõπ‰øùÂ†°È•±ÂÆùÊä±Êä•Êö¥Ë±πÈ≤çÁàÜÊùØÁ¢ëÊÇ≤ÂçëÂåóËæàËÉåË¥ùÈí°ÂÄçÁãàÂ§áÊÉ´ÁÑôË¢´Â•îËãØÊú¨Á¨®Â¥©Áª∑Áî≠Ê≥µËπ¶Ëø∏ÈÄºÈºªÊØîÈÑôÁ¨îÂΩºÁ¢ßËìñËîΩÊØïÊØôÊØñÂ∏ÅÂ∫áÁóπÈó≠ÊïùÂºäÂøÖËæüÂ£ÅËáÇÈÅøÈôõÈû≠ËæπÁºñË¥¨ÊâÅ‰æøÂèòÂçûËæ®Ëæ©Ëæ´ÈÅçÊ†áÂΩ™ËÜòË°®È≥ñÊÜãÂà´Áò™ÂΩ¨ÊñåÊøíÊª®ÂÆæÊëàÂÖµÂÜ∞ÊüÑ‰∏ôÁßâÈ•ºÁÇ≥ÔøΩ".split("");
    for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) {
        e[D[177][j]] = 45312 + j;
        d[45312 + j] = D[177][j];
    };
    D[178] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁùùÁùûÁùüÁù†Áù§ÁùßÁù©Áù™Áù≠ÁùÆÁùØÁù∞Áù±Áù≤Áù≥Áù¥ÁùµÁù∂Áù∑Áù∏Áù∫ÁùªÁùºÁûÅÁûÇÁûÉÁûÜÁûáÁûàÁûâÁûäÁûãÁûèÁûêÁûìÁûîÁûïÁûñÁûóÁûòÁûôÁûöÁûõÁûúÁûùÁûûÁû°Áû£Áû§Áû¶Áû®Áû´Áû≠ÁûÆÁûØÁû±Áû≤Áû¥Áû∂Áû∑Áû∏ÁûπÁû∫ÔøΩÁûºÁûæÁüÄÁüÅÁüÇÁüÉÁüÑÁüÖÁüÜÁüáÁüàÁüâÁüäÁüãÁüåÁüéÁüèÁüêÁüëÁüíÁüìÁüîÁüïÁüñÁüòÁüôÁüöÁüùÁüûÁüüÁü†Áü°Áü§ÁóÖÂπ∂ÁéªËè†Êí≠Êã®ÈíµÊ≥¢ÂçöÂãÉÊêèÈìÇÁÆî‰ºØÂ∏õËà∂ËÑñËÜäÊ∏§Ê≥äÈ©≥ÊçïÂçúÂì∫Ë°•Âü†‰∏çÂ∏ÉÊ≠•Á∞øÈÉ®ÊÄñÊì¶ÁåúË£ÅÊùêÊâçË¥¢Áù¨Ë∏©ÈááÂΩ©ËèúËî°È§êÂèÇËöïÊÆãÊÉ≠ÊÉ®ÁÅøËãçËà±‰ªìÊ≤ßËóèÊìçÁ≥ôÊßΩÊõπËçâÂéïÁ≠ñ‰æßÂÜåÊµãÂ±ÇËπ≠ÊèíÂèâËå¨Ëå∂Êü•Á¢¥ÊêΩÂØüÂ≤îÂ∑ÆËØßÊãÜÊü¥Ë±∫ÊêÄÊé∫ËùâÈ¶ãË∞óÁº†Èì≤‰∫ßÈòêÈ¢§ÊòåÁåñÔøΩ".split("");
    for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) {
        e[D[178][j]] = 45568 + j;
        d[45568 + j] = D[178][j];
    };
    D[179] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁü¶Áü®Áü™ÁüØÁü∞Áü±Áü≤Áü¥ÁüµÁü∑ÁüπÁü∫ÁüªÁüºÁ†ÉÁ†ÑÁ†ÖÁ†ÜÁ†áÁ†àÁ†äÁ†ãÁ†éÁ†èÁ†êÁ†ìÁ†ïÁ†ôÁ†õÁ†ûÁ††Á†°Á†¢Á†§Á†®Á†™Á†´Á†ÆÁ†ØÁ†±Á†≤Á†≥Á†µÁ†∂Á†ΩÁ†øÁ°ÅÁ°ÇÁ°ÉÁ°ÑÁ°ÜÁ°àÁ°âÁ°äÁ°ãÁ°çÁ°èÁ°ëÁ°ìÁ°îÁ°òÁ°ôÁ°öÔøΩÁ°õÁ°úÁ°ûÁ°üÁ°†Á°°Á°¢Á°£Á°§Á°•Á°¶Á°ßÁ°®Á°©Á°ØÁ°∞Á°±Á°≤Á°≥Á°¥Á°µÁ°∂Á°∏Á°πÁ°∫Á°ªÁ°ΩÁ°æÁ°øÁ¢ÄÁ¢ÅÁ¢ÇÁ¢ÉÂú∫Â∞ùÂ∏∏ÈïøÂÅøËÇ†ÂéÇÊïûÁïÖÂî±ÂÄ°Ë∂ÖÊäÑÈíûÊúùÂò≤ÊΩÆÂ∑¢ÂêµÁÇíËΩ¶ÊâØÊí§Êé£ÂΩªÊæàÈÉ¥Ëá£Ëæ∞Â∞òÊô®Âø±Ê≤âÈôàË∂ÅË°¨ÊíëÁß∞ÂüéÊ©ôÊàêÂëà‰πòÁ®ãÊÉ©ÊæÑËØöÊâøÈÄûÈ™ãÁß§ÂêÉÁó¥ÊåÅÂåôÊ±†ËøüÂºõÈ©∞ËÄªÈΩø‰æàÂ∞∫Ëµ§ÁøÖÊñ•ÁÇΩÂÖÖÂÜ≤Ëô´Â¥áÂÆ†ÊäΩÈÖ¨Áï¥Ë∏åÁ®†ÊÑÅÁ≠π‰ªáÁª∏ÁûÖ‰∏ëËá≠ÂàùÂá∫Ê©±Âé®Ë∫áÈîÑÈõèÊªÅÈô§Ê•öÔøΩ".split("");
    for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) {
        e[D[179][j]] = 45824 + j;
        d[45824 + j] = D[179][j];
    };
    D[180] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¢ÑÁ¢ÖÁ¢ÜÁ¢àÁ¢äÁ¢ãÁ¢èÁ¢êÁ¢íÁ¢îÁ¢ïÁ¢ñÁ¢ôÁ¢ùÁ¢ûÁ¢†Á¢¢Á¢§Á¢¶Á¢®Á¢©Á¢™Á¢´Á¢¨Á¢≠Á¢ÆÁ¢ØÁ¢µÁ¢∂Á¢∑Á¢∏Á¢∫Á¢ªÁ¢ºÁ¢ΩÁ¢øÁ£ÄÁ£ÇÁ£ÉÁ£ÑÁ£ÜÁ£áÁ£àÁ£åÁ£çÁ£éÁ£èÁ£ëÁ£íÁ£ìÁ£ñÁ£óÁ£òÁ£öÁ£õÁ£úÁ£ùÁ£ûÁ£üÁ£†Á£°Á£¢Á££ÔøΩÁ£§Á£•Á£¶Á£ßÁ£©Á£™Á£´Á£≠Á£ÆÁ£ØÁ£∞Á£±Á£≥Á£µÁ£∂Á£∏Á£πÁ£ªÁ£ºÁ£ΩÁ£æÁ£øÁ§ÄÁ§ÇÁ§ÉÁ§ÑÁ§ÜÁ§áÁ§àÁ§âÁ§äÁ§ãÁ§åÁ°ÄÂÇ®ÁüóÊêêËß¶Â§ÑÊè£Â∑ùÁ©øÊ§Ω‰º†ËàπÂñò‰∏≤ÁñÆÁ™óÂπ¢Â∫äÈóØÂàõÂêπÁÇäÊç∂Èî§ÂûÇÊò•Ê§øÈÜáÂîáÊ∑≥Á∫ØË†¢Êà≥Áª∞ÁñµËå®Á£ÅÈõåËæûÊÖàÁì∑ËØçÊ≠§Âà∫ËµêÊ¨°ËÅ™Ëë±Âõ±ÂåÜ‰ªé‰∏õÂáëÁ≤óÈÜãÁ∞á‰øÉËπøÁØ°Á™úÊëßÂ¥îÂÇ¨ËÑÜÁòÅÁ≤πÊ∑¨Áø†ÊùëÂ≠òÂØ∏Á£ãÊíÆÊêìÊé™Êå´ÈîôÊê≠ËææÁ≠îÁò©ÊâìÂ§ßÂëÜÊ≠πÂÇ£Êà¥Â∏¶ÊÆÜ‰ª£Ë¥∑Ë¢ãÂæÖÈÄÆÔøΩ".split("");
    for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) {
        e[D[180][j]] = 46080 + j;
        d[46080 + j] = D[180][j];
    };
    D[181] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ§çÁ§éÁ§èÁ§êÁ§ëÁ§íÁ§îÁ§ïÁ§ñÁ§óÁ§òÁ§ôÁ§öÁ§õÁ§úÁ§ùÁ§üÁ§†Á§°Á§¢Á§£Á§•Á§¶Á§ßÁ§®Á§©Á§™Á§´Á§¨Á§≠Á§ÆÁ§ØÁ§∞Á§±Á§≤Á§≥Á§µÁ§∂Á§∑Á§∏Á§πÁ§ΩÁ§øÁ•ÇÁ•ÉÁ•ÑÁ•ÖÁ•áÁ•äÁ•ãÁ•åÁ•çÁ•éÁ•èÁ•êÁ•ëÁ•íÁ•îÁ•ïÁ•òÁ•ôÁ•°Á•£ÔøΩÁ•§Á•¶Á•©Á•™Á•´Á•¨Á•ÆÁ•∞Á•±Á•≤Á•≥Á•¥Á•µÁ•∂Á•πÁ•ªÁ•ºÁ•ΩÁ•æÁ•øÁ¶ÇÁ¶ÉÁ¶ÜÁ¶áÁ¶àÁ¶âÁ¶ãÁ¶åÁ¶çÁ¶éÁ¶êÁ¶ëÁ¶íÊÄ†ËÄΩÊãÖ‰∏πÂçïÈÉ∏Êé∏ËÉÜÊó¶Ê∞Æ‰ΩÜÊÉÆÊ∑°ËØûÂºπËõãÂΩìÊå°ÂÖöËç°Ê°£ÂàÄÊç£ËπàÂÄíÂ≤õÁ•∑ÂØºÂà∞Á®ªÊÇºÈÅìÁõóÂæ∑ÂæóÁöÑËπ¨ÁÅØÁôªÁ≠âÁû™Âá≥ÈÇìÂ†§‰ΩéÊª¥Ëø™ÊïåÁ¨õÁãÑÊ∂§ÁøüÂ´°ÊäµÂ∫ïÂú∞ËíÇÁ¨¨Â∏ùÂºüÈÄíÁºîÈ¢†ÊéÇÊªáÁ¢òÁÇπÂÖ∏ÈùõÂû´Áîµ‰ΩÉÁî∏Â∫óÊÉ¶Â•†Ê∑ÄÊÆøÁ¢âÂèºÈõïÂáãÂàÅÊéâÂêäÈíìË∞ÉË∑åÁàπÁ¢üËù∂Ëø≠Ë∞çÂè†ÔøΩ".split("");
    for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) {
        e[D[181][j]] = 46336 + j;
        d[46336 + j] = D[181][j];
    };
    D[182] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¶ìÁ¶îÁ¶ïÁ¶ñÁ¶óÁ¶òÁ¶ôÁ¶õÁ¶úÁ¶ùÁ¶ûÁ¶üÁ¶†Á¶°Á¶¢Á¶£Á¶§Á¶•Á¶¶Á¶®Á¶©Á¶™Á¶´Á¶¨Á¶≠Á¶ÆÁ¶ØÁ¶∞Á¶±Á¶≤Á¶¥Á¶µÁ¶∂Á¶∑Á¶∏Á¶ºÁ¶øÁßÇÁßÑÁßÖÁßáÁßàÁßäÁßåÁßéÁßèÁßêÁßìÁßîÁßñÁßóÁßôÁßöÁßõÁßúÁßùÁßûÁß†Áß°Áß¢Áß•Áß®Áß™ÔøΩÁß¨ÁßÆÁß±Áß≤Áß≥Áß¥ÁßµÁß∂Áß∑ÁßπÁß∫ÁßºÁßæÁßøÁ®ÅÁ®ÑÁ®ÖÁ®áÁ®àÁ®âÁ®äÁ®åÁ®èÁ®êÁ®ëÁ®íÁ®ìÁ®ïÁ®ñÁ®òÁ®ôÁ®õÁ®ú‰∏ÅÁõØÂèÆÈíâÈ°∂ÈºéÈî≠ÂÆöËÆ¢‰∏¢‰∏úÂÜ¨Ëë£ÊáÇÂä®Ê†ã‰æóÊÅ´ÂÜªÊ¥ûÂÖúÊäñÊñóÈô°Ë±ÜÈÄóÁóòÈÉΩÁù£ÊØíÁääÁã¨ËØªÂ†µÁùπËµåÊùúÈïÄËÇöÂ∫¶Ê∏°Â¶íÁ´ØÁü≠ÈîªÊÆµÊñ≠ÁºéÂ†ÜÂÖëÈòüÂØπÂ¢©Âê®Ëπ≤Êï¶È°øÂõ§ÈíùÁõæÈÅÅÊéáÂìÜÂ§öÂ§∫ÂûõË∫≤ÊúµË∑∫ËàµÂâÅÊÉ∞Â†ïËõæÂ≥®ÈπÖ‰øÑÈ¢ùËÆπÂ®•ÊÅ∂ÂéÑÊâºÈÅèÈÑÇÈ•øÊÅ©ËÄåÂÑøËÄ≥Â∞îÈ•µÊ¥±‰∫åÔøΩ".split("");
    for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) {
        e[D[182][j]] = 46592 + j;
        d[46592 + j] = D[182][j];
    };
    D[183] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ®ùÁ®üÁ®°Á®¢Á®§Á®•Á®¶Á®ßÁ®®Á®©Á®™Á®´Á®¨Á®≠Á®ÆÁ®ØÁ®∞Á®±Á®≤Á®¥Á®µÁ®∂Á®∏Á®∫Á®æÁ©ÄÁ©ÅÁ©ÇÁ©ÉÁ©ÑÁ©ÖÁ©áÁ©àÁ©âÁ©äÁ©ãÁ©åÁ©çÁ©éÁ©èÁ©êÁ©íÁ©ìÁ©îÁ©ïÁ©ñÁ©òÁ©ôÁ©öÁ©õÁ©úÁ©ùÁ©ûÁ©üÁ©†Á©°Á©¢Á©£Á©§Á©•Á©¶Á©ßÁ©®ÔøΩÁ©©Á©™Á©´Á©¨Á©≠Á©ÆÁ©ØÁ©±Á©≤Á©≥Á©µÁ©ªÁ©ºÁ©ΩÁ©æÁ™ÇÁ™ÖÁ™áÁ™âÁ™äÁ™ãÁ™åÁ™éÁ™èÁ™êÁ™ìÁ™îÁ™ôÁ™öÁ™õÁ™ûÁ™°Á™¢Ë¥∞ÂèëÁΩöÁ≠è‰ºê‰πèÈòÄÊ≥ïÁèêËó©Â∏ÜÁï™ÁøªÊ®äÁüæÈííÁπÅÂá°ÁÉ¶ÂèçËøîËåÉË¥©ÁäØÈ•≠Ê≥õÂùäËä≥ÊñπËÇ™ÊàøÈò≤Â¶®‰ªøËÆøÁ∫∫ÊîæËè≤ÈùûÂï°È£ûËÇ•Âå™ËØΩÂê†ËÇ∫Â∫üÊ≤∏Ë¥πËä¨ÈÖöÂê©Ê∞õÂàÜÁ∫∑ÂùüÁÑöÊ±æÁ≤âÂ•ã‰ªΩÂøøÊÑ§Á≤™‰∏∞Â∞ÅÊû´ËúÇÂ≥∞ÈîãÈ£éÁñØÁÉΩÈÄ¢ÂÜØÁºùËÆΩÂ•âÂá§‰ΩõÂê¶Â§´Êï∑ËÇ§Â≠µÊâ∂ÊãÇËæêÂπÖÊ∞üÁ¨¶‰ºè‰øòÊúçÔøΩ".split("");
    for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) {
        e[D[183][j]] = 46848 + j;
        d[46848 + j] = D[183][j];
    };
    D[184] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ™£Á™§Á™ßÁ™©Á™™Á™´Á™ÆÁ™ØÁ™∞Á™±Á™≤Á™¥Á™µÁ™∂Á™∑Á™∏Á™πÁ™∫Á™ªÁ™ºÁ™ΩÁ™æÁ´ÄÁ´ÅÁ´ÇÁ´ÉÁ´ÑÁ´ÖÁ´ÜÁ´áÁ´àÁ´âÁ´äÁ´åÁ´çÁ´éÁ´èÁ´êÁ´ëÁ´íÁ´ìÁ´îÁ´ïÁ´óÁ´òÁ´öÁ´õÁ´úÁ´ùÁ´°Á´¢Á´§Á´ßÁ´®Á´©Á´™Á´´Á´¨Á´ÆÁ´∞Á´±Á´≤Á´≥ÔøΩÁ´¥Á´µÁ´∂Á´∑Á´∏Á´ªÁ´ºÁ´æÁ¨ÄÁ¨ÅÁ¨ÇÁ¨ÖÁ¨áÁ¨âÁ¨åÁ¨çÁ¨éÁ¨êÁ¨íÁ¨ìÁ¨ñÁ¨óÁ¨òÁ¨öÁ¨úÁ¨ùÁ¨üÁ¨°Á¨¢Á¨£Á¨ßÁ¨©Á¨≠ÊµÆÊ∂™Á¶èË¢±ÂºóÁî´ÊäöËæÖ‰øØÈáúÊñßËÑØËÖëÂ∫úËÖêËµ¥ÂâØË¶ÜËµãÂ§çÂÇÖ‰ªòÈòúÁà∂ËÖπË¥üÂØåËÆ£ÈôÑÂ¶áÁºöÂíêÂô∂ÂòéËØ•ÊîπÊ¶ÇÈíôÁõñÊ∫âÂπ≤ÁîòÊùÜÊüëÁ´øËÇùËµ∂ÊÑüÁßÜÊï¢Ëµ£ÂÜàÂàöÈí¢Áº∏ËÇõÁ∫≤Â≤óÊ∏ØÊù†ÁØôÁöãÈ´òËÜèÁæîÁ≥ïÊêûÈïêÁ®øÂëäÂì•Ê≠åÊêÅÊààÈ∏ΩËÉ≥ÁñôÂâ≤Èù©ËëõÊ†ºËõ§ÈòÅÈöîÈì¨‰∏™ÂêÑÁªôÊ†πË∑üËÄïÊõ¥Â∫öÁæπÔøΩ".split("");
    for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) {
        e[D[184][j]] = 47104 + j;
        d[47104 + j] = D[184][j];
    };
    D[185] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¨ØÁ¨∞Á¨≤Á¨¥Á¨µÁ¨∂Á¨∑Á¨πÁ¨ªÁ¨ΩÁ¨øÁ≠ÄÁ≠ÅÁ≠ÇÁ≠ÉÁ≠ÑÁ≠ÜÁ≠àÁ≠äÁ≠çÁ≠éÁ≠ìÁ≠ïÁ≠óÁ≠ôÁ≠úÁ≠ûÁ≠üÁ≠°Á≠£Á≠§Á≠•Á≠¶Á≠ßÁ≠®Á≠©Á≠™Á≠´Á≠¨Á≠≠Á≠ØÁ≠∞Á≠≥Á≠¥Á≠∂Á≠∏Á≠∫Á≠ºÁ≠ΩÁ≠øÁÆÅÁÆÇÁÆÉÁÆÑÁÆÜÁÆáÁÆàÁÆâÁÆäÁÆãÁÆåÁÆéÁÆèÔøΩÁÆëÁÆíÁÆìÁÆñÁÆòÁÆôÁÆöÁÆõÁÆûÁÆüÁÆ†ÁÆ£ÁÆ§ÁÆ•ÁÆÆÁÆØÁÆ∞ÁÆ≤ÁÆ≥ÁÆµÁÆ∂ÁÆ∑ÁÆπÁÆ∫ÁÆªÁÆºÁÆΩÁÆæÁÆøÁØÄÁØÇÁØÉÁØÑÂüÇËÄøÊ¢óÂ∑•ÊîªÂäüÊÅ≠Èæö‰æõË∫¨ÂÖ¨ÂÆ´ÂºìÂ∑©Ê±ûÊã±Ë¥°ÂÖ±Èí©ÂãæÊ≤üËãüÁãóÂû¢ÊûÑË¥≠Â§üËæúËèáÂíïÁÆç‰º∞Ê≤ΩÂ≠§ÂßëÈºìÂè§ËõäÈ™®Ë∞∑ËÇ°ÊïÖÈ°æÂõ∫ÈõáÂàÆÁìúÂâêÂØ°ÊåÇË§Ç‰πñÊãêÊÄ™Ê£∫ÂÖ≥ÂÆòÂÜ†ËßÇÁÆ°È¶ÜÁΩêÊÉØÁÅåË¥ØÂÖâÂπøÈÄõÁë∞ËßÑÂú≠Á°ÖÂΩíÈæüÈó∫ËΩ®È¨ºËØ°Áô∏Ê°ÇÊüúË∑™Ë¥µÂàΩËæäÊªöÊ£çÈîÖÈÉ≠ÂõΩÊûúË£πËøáÂìàÔøΩ".split("");
    for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) {
        e[D[185][j]] = 47360 + j;
        d[47360 + j] = D[185][j];
    };
    D[186] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁØÖÁØàÁØâÁØäÁØãÁØçÁØéÁØèÁØêÁØíÁØîÁØïÁØñÁØóÁØòÁØõÁØúÁØûÁØüÁØ†ÁØ¢ÁØ£ÁØ§ÁØßÁØ®ÁØ©ÁØ´ÁØ¨ÁØ≠ÁØØÁØ∞ÁØ≤ÁØ≥ÁØ¥ÁØµÁØ∂ÁØ∏ÁØπÁØ∫ÁØªÁØΩÁØøÁ∞ÄÁ∞ÅÁ∞ÇÁ∞ÉÁ∞ÑÁ∞ÖÁ∞ÜÁ∞àÁ∞âÁ∞äÁ∞çÁ∞éÁ∞êÁ∞ëÁ∞íÁ∞ìÁ∞îÁ∞ïÁ∞óÁ∞òÁ∞ôÔøΩÁ∞öÁ∞õÁ∞úÁ∞ùÁ∞ûÁ∞†Á∞°Á∞¢Á∞£Á∞§Á∞•Á∞®Á∞©Á∞´Á∞¨Á∞≠Á∞ÆÁ∞ØÁ∞∞Á∞±Á∞≤Á∞≥Á∞¥Á∞µÁ∞∂Á∞∑Á∞πÁ∞∫Á∞ªÁ∞ºÁ∞ΩÁ∞æÁ±ÇÈ™∏Â≠©Êµ∑Ê∞¶‰∫•ÂÆ≥È™áÈÖ£ÊÜ®ÈÇØÈü©Âê´Ê∂µÂØíÂáΩÂñäÁΩïÁø∞ÊíºÊççÊó±ÊÜæÊÇçÁÑäÊ±óÊ±âÂ§ØÊù≠Ëà™Â£ïÂöéË±™ÊØ´ÈÉùÂ•ΩËÄóÂè∑Êµ©ÂëµÂñùËç∑ËèèÊ†∏Á¶æÂíå‰ΩïÂêàÁõíË≤âÈòÇÊ≤≥Ê∂∏Ëµ´Ë§êÈπ§Ë¥∫ÂòøÈªëÁóïÂæàÁã†ÊÅ®Âìº‰∫®Ê®™Ë°°ÊÅíËΩ∞ÂìÑÁÉòËôπÈ∏øÊ¥™ÂÆèÂºòÁ∫¢Âñâ‰æØÁå¥ÂêºÂéöÂÄôÂêéÂëº‰πéÂøΩÁëöÂ£∂Ëë´ËÉ°Ëù¥ÁãêÁ≥äÊπñÔøΩ".split("");
    for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) {
        e[D[186][j]] = 47616 + j;
        d[47616 + j] = D[186][j];
    };
    D[187] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ±ÉÁ±ÑÁ±ÖÁ±ÜÁ±áÁ±àÁ±âÁ±äÁ±ãÁ±åÁ±éÁ±èÁ±êÁ±ëÁ±íÁ±ìÁ±îÁ±ïÁ±ñÁ±óÁ±òÁ±ôÁ±öÁ±õÁ±úÁ±ùÁ±ûÁ±üÁ±†Á±°Á±¢Á±£Á±§Á±•Á±¶Á±ßÁ±®Á±©Á±™Á±´Á±¨Á±≠Á±ÆÁ±ØÁ±∞Á±±Á±≤Á±µÁ±∂Á±∑Á±∏Á±πÁ±∫Á±æÁ±øÁ≤ÄÁ≤ÅÁ≤ÇÁ≤ÉÁ≤ÑÁ≤ÖÁ≤ÜÁ≤áÔøΩÁ≤àÁ≤äÁ≤ãÁ≤åÁ≤çÁ≤éÁ≤èÁ≤êÁ≤ìÁ≤îÁ≤ñÁ≤ôÁ≤öÁ≤õÁ≤†Á≤°Á≤£Á≤¶Á≤ßÁ≤®Á≤©Á≤´Á≤¨Á≤≠Á≤ØÁ≤∞Á≤¥Á≤µÁ≤∂Á≤∑Á≤∏Á≤∫Á≤ªÂºßËôéÂî¨Êä§‰∫íÊ≤™Êà∑Ëä±ÂìóÂçéÁåæÊªëÁîªÂàíÂåñËØùÊßêÂæäÊÄÄÊ∑ÆÂùèÊ¨¢ÁéØÊ°ìËøòÁºìÊç¢ÊÇ£Âî§Áó™Ë±¢ÁÑïÊ∂£ÂÆ¶ÂπªËçíÊÖåÈªÑÁ£∫ËùóÁ∞ßÁöáÂá∞ÊÉ∂ÁÖåÊôÉÂπåÊÅçË∞éÁÅ∞Êå•ËæâÂæΩÊÅ¢ËõîÂõûÊØÅÊÇîÊÖßÂçâÊÉ†Êô¶Ë¥øÁßΩ‰ºöÁÉ©Ê±áËÆ≥ËØ≤ÁªòËç§ÊòèÂ©öÈ≠ÇÊµëÊ∑∑Ë±ÅÊ¥ª‰ºôÁÅ´Ëé∑ÊàñÊÉëÈúçË¥ßÁ•∏ÂáªÂúæÂü∫Êú∫Áï∏Á®ΩÁßØÁÆïÔøΩ".split("");
    for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) {
        e[D[187][j]] = 47872 + j;
        d[47872 + j] = D[187][j];
    };
    D[188] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ≤øÁ≥ÄÁ≥ÇÁ≥ÉÁ≥ÑÁ≥ÜÁ≥âÁ≥ãÁ≥éÁ≥èÁ≥êÁ≥ëÁ≥íÁ≥ìÁ≥îÁ≥òÁ≥öÁ≥õÁ≥ùÁ≥ûÁ≥°Á≥¢Á≥£Á≥§Á≥•Á≥¶Á≥ßÁ≥©Á≥™Á≥´Á≥¨Á≥≠Á≥ÆÁ≥∞Á≥±Á≥≤Á≥≥Á≥¥Á≥µÁ≥∂Á≥∑Á≥πÁ≥∫Á≥ºÁ≥ΩÁ≥æÁ≥øÁ¥ÄÁ¥ÅÁ¥ÇÁ¥ÉÁ¥ÑÁ¥ÖÁ¥ÜÁ¥áÁ¥àÁ¥âÁ¥ãÁ¥åÁ¥çÁ¥éÁ¥èÁ¥êÔøΩÁ¥ëÁ¥íÁ¥ìÁ¥îÁ¥ïÁ¥ñÁ¥óÁ¥òÁ¥ôÁ¥öÁ¥õÁ¥úÁ¥ùÁ¥ûÁ¥üÁ¥°Á¥£Á¥§Á¥•Á¥¶Á¥®Á¥©Á¥™Á¥¨Á¥≠Á¥ÆÁ¥∞Á¥±Á¥≤Á¥≥Á¥¥Á¥µÁ¥∂ËÇåÈ••ËøπÊøÄËÆ•È∏°Âß¨Áª©ÁºâÂêâÊûÅÊ£òËæëÁ±çÈõÜÂèäÊÄ•ÁñæÊ±≤Âç≥Â´âÁ∫ßÊå§Âá†ËÑäÂ∑±ËìüÊäÄÂÜÄÂ≠£‰ºéÁ•≠ÂâÇÊÇ∏ÊµéÂØÑÂØÇËÆ°ËÆ∞Êó¢ÂøåÈôÖÂ¶ìÁªßÁ∫™ÂòâÊû∑Â§π‰Ω≥ÂÆ∂Âä†ËçöÈ¢äË¥æÁî≤ÈíæÂÅáÁ®º‰ª∑Êû∂È©æÂ´ÅÊ≠ºÁõëÂùöÂ∞ñÁ¨∫Èó¥ÁÖéÂÖºËÇ©Ëâ∞Â•∏ÁºÑËåßÊ£ÄÊü¨Á¢±Á°∑Êã£Êç°ÁÆÄ‰ø≠Ââ™ÂáèËçêÊßõÈâ¥Ë∑µË¥±ËßÅÈîÆÁÆ≠‰ª∂ÔøΩ".split("");
    for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) {
        e[D[188][j]] = 48128 + j;
        d[48128 + j] = D[188][j];
    };
    D[189] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¥∑Á¥∏Á¥πÁ¥∫Á¥ªÁ¥ºÁ¥ΩÁ¥æÁ¥øÁµÄÁµÅÁµÇÁµÉÁµÑÁµÖÁµÜÁµáÁµàÁµâÁµäÁµãÁµåÁµçÁµéÁµèÁµêÁµëÁµíÁµìÁµîÁµïÁµñÁµóÁµòÁµôÁµöÁµõÁµúÁµùÁµûÁµüÁµ†Áµ°Áµ¢Áµ£Áµ§Áµ•Áµ¶ÁµßÁµ®Áµ©Áµ™Áµ´Áµ¨Áµ≠ÁµØÁµ∞Áµ±Áµ≤Áµ≥Áµ¥ÁµµÁµ∂ÔøΩÁµ∏ÁµπÁµ∫ÁµªÁµºÁµΩÁµæÁµøÁ∂ÄÁ∂ÅÁ∂ÇÁ∂ÉÁ∂ÑÁ∂ÖÁ∂ÜÁ∂áÁ∂àÁ∂âÁ∂äÁ∂ãÁ∂åÁ∂çÁ∂éÁ∂èÁ∂êÁ∂ëÁ∂íÁ∂ìÁ∂îÁ∂ïÁ∂ñÁ∂óÁ∂òÂÅ•Ëà∞ÂâëÈ•ØÊ∏êÊ∫ÖÊ∂ßÂª∫ÂÉµÂßúÂ∞ÜÊµÜÊ±üÁñÜËíãÊ°®Â•ñËÆ≤Âå†ÈÖ±ÈôçËïâÊ§íÁ§ÅÁÑ¶ËÉ∂‰∫§ÈÉäÊµáÈ™ÑÂ®áÂöºÊêÖÈì∞Áü´‰æ•ËÑöÁã°ËßíÈ•∫Áº¥ÁªûÂâøÊïôÈÖµËΩøËæÉÂè´Á™ñÊè≠Êé•ÁöÜÁß∏Ë°óÈò∂Êà™Âä´ËäÇÊ°îÊù∞Êç∑Áù´Á´≠Ê¥ÅÁªìËß£ÂßêÊàíËóâËä•ÁïåÂÄü‰ªãÁñ•ËØ´Â±äÂ∑æÁ≠ãÊñ§Èáë‰ªäÊ¥•Ë•üÁ¥ßÈî¶‰ªÖË∞®ËøõÈù≥ÊôãÁ¶ÅËøëÁÉ¨Êµ∏ÔøΩ".split("");
    for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) {
        e[D[189][j]] = 48384 + j;
        d[48384 + j] = D[189][j];
    };
    D[190] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ∂ôÁ∂öÁ∂õÁ∂úÁ∂ùÁ∂ûÁ∂üÁ∂†Á∂°Á∂¢Á∂£Á∂§Á∂•Á∂ßÁ∂®Á∂©Á∂™Á∂´Á∂¨Á∂≠Á∂ØÁ∂∞Á∂±Á∂≤Á∂≥Á∂¥Á∂µÁ∂∂Á∂∑Á∂∏Á∂πÁ∂∫Á∂ªÁ∂ºÁ∂ΩÁ∂æÁ∂øÁ∑ÄÁ∑ÅÁ∑ÇÁ∑ÉÁ∑ÑÁ∑ÖÁ∑ÜÁ∑áÁ∑àÁ∑âÁ∑äÁ∑ãÁ∑åÁ∑çÁ∑éÁ∑èÁ∑êÁ∑ëÁ∑íÁ∑ìÁ∑îÁ∑ïÁ∑ñÁ∑óÁ∑òÁ∑ôÔøΩÁ∑öÁ∑õÁ∑úÁ∑ùÁ∑ûÁ∑üÁ∑†Á∑°Á∑¢Á∑£Á∑§Á∑•Á∑¶Á∑ßÁ∑®Á∑©Á∑™Á∑´Á∑¨Á∑≠Á∑ÆÁ∑ØÁ∑∞Á∑±Á∑≤Á∑≥Á∑¥Á∑µÁ∑∂Á∑∑Á∑∏Á∑πÁ∑∫Â∞ΩÂä≤ËçÜÂÖ¢ËåéÁùõÊô∂È≤∏‰∫¨ÊÉäÁ≤æÁ≤≥Áªè‰∫ïË≠¶ÊôØÈ¢àÈùôÂ¢ÉÊï¨ÈïúÂæÑÁóâÈùñÁ´üÁ´ûÂáÄÁÇØÁ™òÊè™Á©∂Á∫†ÁéñÈü≠‰πÖÁÅ∏‰πùÈÖíÂé©ÊïëÊóßËáºËàÖÂíéÂ∞±ÁñöÈû†ÊãòÁãôÁñΩÂ±ÖÈ©πËèäÂ±ÄÂíÄÁü©‰∏æÊ≤ÆËÅöÊãíÊçÆÂ∑®ÂÖ∑Ë∑ùË∏ûÈîØ‰ø±Âè•ÊÉßÁÇ¨ÂâßÊçêÈπÉÂ®üÂÄ¶Áú∑Âç∑Áª¢ÊíÖÊî´ÊäâÊéòÂÄîÁàµËßâÂÜ≥ËØÄÁªùÂùáËèåÈíßÂÜõÂêõÂ≥ªÔøΩ".split("");
    for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) {
        e[D[190][j]] = 48640 + j;
        d[48640 + j] = D[190][j];
    };
    D[191] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ∑ªÁ∑ºÁ∑ΩÁ∑æÁ∑øÁ∏ÄÁ∏ÅÁ∏ÇÁ∏ÉÁ∏ÑÁ∏ÖÁ∏ÜÁ∏áÁ∏àÁ∏âÁ∏äÁ∏ãÁ∏åÁ∏çÁ∏éÁ∏èÁ∏êÁ∏ëÁ∏íÁ∏ìÁ∏îÁ∏ïÁ∏ñÁ∏óÁ∏òÁ∏ôÁ∏öÁ∏õÁ∏úÁ∏ùÁ∏ûÁ∏üÁ∏†Á∏°Á∏¢Á∏£Á∏§Á∏•Á∏¶Á∏ßÁ∏®Á∏©Á∏™Á∏´Á∏¨Á∏≠Á∏ÆÁ∏ØÁ∏∞Á∏±Á∏≤Á∏≥Á∏¥Á∏µÁ∏∂Á∏∑Á∏∏Á∏πÔøΩÁ∏∫Á∏ºÁ∏ΩÁ∏æÁ∏øÁπÄÁπÇÁπÉÁπÑÁπÖÁπÜÁπàÁπâÁπäÁπãÁπåÁπçÁπéÁπèÁπêÁπëÁπíÁπìÁπîÁπïÁπñÁπóÁπòÁπôÁπöÁπõÁπúÁπù‰øäÁ´£ÊµöÈÉ°È™èÂñÄÂíñÂç°ÂíØÂºÄÊè©Ê•∑ÂáØÊÖ®ÂàäÂ†™ÂãòÂùéÁ†çÁúãÂ∫∑ÊÖ∑Á≥†ÊâõÊäó‰∫¢ÁÇïËÄÉÊã∑ÁÉ§Èù†Âù∑ËãõÊüØÊ£µÁ£ïÈ¢óÁßëÂ£≥Âí≥ÂèØÊ∏¥ÂÖãÂàªÂÆ¢ËØæËÇØÂïÉÂû¶ÊÅ≥ÂùëÂê≠Á©∫ÊÅêÂ≠îÊéßÊä†Âè£Êâ£ÂØáÊûØÂì≠Á™üËã¶ÈÖ∑Â∫ìË£§Â§∏ÂûÆÊåéË∑®ËÉØÂùóÁ≠∑‰æ©Âø´ÂÆΩÊ¨æÂå°Á≠êÁãÇÊ°ÜÁüøÁú∂Êó∑ÂÜµ‰∫èÁõîÂ≤øÁ™•ËëµÂ•éÈ≠ÅÂÇÄÔøΩ".split("");
    for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) {
        e[D[191][j]] = 48896 + j;
        d[48896 + j] = D[191][j];
    };
    D[192] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁπûÁπüÁπ†Áπ°Áπ¢Áπ£Áπ§Áπ•Áπ¶ÁπßÁπ®Áπ©Áπ™Áπ´Áπ¨Áπ≠ÁπÆÁπØÁπ∞Áπ±Áπ≤Áπ≥Áπ¥ÁπµÁπ∂Áπ∑Áπ∏ÁππÁπ∫ÁπªÁπºÁπΩÁπæÁπøÁ∫ÄÁ∫ÅÁ∫ÉÁ∫ÑÁ∫ÖÁ∫ÜÁ∫áÁ∫àÁ∫âÁ∫äÁ∫ãÁ∫åÁ∫çÁ∫éÁ∫èÁ∫êÁ∫ëÁ∫íÁ∫ìÁ∫îÁ∫ïÁ∫ñÁ∫óÁ∫òÁ∫ôÁ∫öÁ∫úÁ∫ùÁ∫ûÔøΩÁ∫ÆÁ∫¥Á∫ªÁ∫ºÁªñÁª§Áª¨ÁªπÁºäÁºêÁºûÁº∑ÁºπÁºªÁººÁºΩÁºæÁºøÁΩÄÁΩÅÁΩÉÁΩÜÁΩáÁΩàÁΩâÁΩäÁΩãÁΩåÁΩçÁΩéÁΩèÁΩíÁΩìÈ¶àÊÑßÊ∫ÉÂù§ÊòÜÊçÜÂõ∞Êã¨Êâ©ÂªìÈòîÂûÉÊãâÂñáËú°ËÖäËæ£Âï¶Ëé±Êù•ËµñËìùÂ©™Ê†èÊã¶ÁØÆÈòëÂÖ∞ÊæúË∞∞ÊèΩËßàÊáíÁºÜÁÉÇÊª•ÁêÖÊ¶îÁãºÂªäÈÉéÊúóÊµ™ÊçûÂä≥Áâ¢ËÄÅ‰Ω¨Âß•ÈÖ™ÁÉôÊ∂ùÂãí‰πêÈõ∑Èï≠ËïæÁ£äÁ¥ØÂÑ°ÂûíÊìÇËÇãÁ±ªÊ≥™Ê£±Ê•ûÂÜ∑ÂéòÊ¢®ÁäÅÈªéÁØ±Áã∏Á¶ªÊºìÁêÜÊùéÈáåÈ≤§Á§ºËéâËçîÂêèÊ†ó‰∏ΩÂéâÂä±Á†æÂéÜÂà©ÂÇà‰æã‰øêÔøΩ".split("");
    for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) {
        e[D[192][j]] = 49152 + j;
        d[49152 + j] = D[192][j];
    };
    D[193] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁΩñÁΩôÁΩõÁΩúÁΩùÁΩûÁΩ†ÁΩ£ÁΩ§ÁΩ•ÁΩ¶ÁΩßÁΩ´ÁΩ¨ÁΩ≠ÁΩØÁΩ∞ÁΩ≥ÁΩµÁΩ∂ÁΩ∑ÁΩ∏ÁΩ∫ÁΩªÁΩºÁΩΩÁΩøÁæÄÁæÇÁæÉÁæÑÁæÖÁæÜÁæáÁæàÁæâÁæãÁæçÁæèÁæêÁæëÁæíÁæìÁæïÁæñÁæóÁæòÁæôÁæõÁæúÁæ†Áæ¢Áæ£Áæ•Áæ¶Áæ®Áæ©Áæ™Áæ´Áæ¨Áæ≠ÁæÆÁæ±ÔøΩÁæ≥Áæ¥ÁæµÁæ∂Áæ∑Áæ∫ÁæªÁææÁøÄÁøÇÁøÉÁøÑÁøÜÁøáÁøàÁøâÁøãÁøçÁøèÁøêÁøëÁøíÁøìÁøñÁøóÁøôÁøöÁøõÁøúÁøùÁøûÁø¢Áø£Áó¢Á´ãÁ≤íÊ≤•Èö∂ÂäõÁíÉÂì©‰ø©ËÅîËé≤ËøûÈï∞ÂªâÊÄúÊ∂üÂ∏òÊïõËÑ∏ÈìæÊÅãÁÇºÁªÉÁ≤ÆÂáâÊ¢ÅÁ≤±ËâØ‰∏§ËæÜÈáèÊôæ‰∫ÆË∞ÖÊí©ËÅäÂÉöÁñóÁáéÂØ•ËæΩÊΩ¶‰∫ÜÊíÇÈï£ÂªñÊñôÂàóË£ÇÁÉàÂä£ÁåéÁê≥ÊûóÁ£∑Èúñ‰∏¥ÈÇªÈ≥ûÊ∑ãÂáõËµÅÂêùÊãéÁé≤Ëè±Èõ∂ÈæÑÈìÉ‰º∂ÁæöÂáåÁÅµÈôµÂ≤≠È¢ÜÂè¶‰ª§Ê∫úÁêâÊ¶¥Á°´È¶èÁïôÂàòÁò§ÊµÅÊü≥ÂÖ≠ÈæôËÅãÂíôÁ¨ºÁ™øÔøΩ".split("");
    for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) {
        e[D[193][j]] = 49408 + j;
        d[49408 + j] = D[193][j];
    };
    D[194] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁø§ÁøßÁø®Áø™Áø´Áø¨Áø≠ÁøØÁø≤Áø¥ÁøµÁø∂Áø∑Áø∏ÁøπÁø∫ÁøΩÁøæÁøøËÄÇËÄáËÄàËÄâËÄäËÄéËÄèËÄëËÄìËÄöËÄõËÄùËÄûËÄüËÄ°ËÄ£ËÄ§ËÄ´ËÄ¨ËÄ≠ËÄÆËÄØËÄ∞ËÄ≤ËÄ¥ËÄπËÄ∫ËÄºËÄæËÅÄËÅÅËÅÑËÅÖËÅáËÅàËÅâËÅéËÅèËÅêËÅëËÅìËÅïËÅñËÅóÔøΩËÅôËÅõËÅúËÅùËÅûËÅüËÅ†ËÅ°ËÅ¢ËÅ£ËÅ§ËÅ•ËÅ¶ËÅßËÅ®ËÅ´ËÅ¨ËÅ≠ËÅÆËÅØËÅ∞ËÅ≤ËÅ≥ËÅ¥ËÅµËÅ∂ËÅ∑ËÅ∏ËÅπËÅ∫ËÅªËÅºËÅΩÈöÜÂûÑÊã¢ÈôáÊ•ºÂ®ÑÊêÇÁØìÊºèÈôãËä¶Âç¢È¢ÖÂ∫êÁÇâÊé≥Âç§ËôèÈ≤ÅÈ∫ìÁ¢åÈú≤Ë∑ØËµÇÈπøÊΩûÁ¶ÑÂΩïÈôÜÊàÆÈ©¥ÂêïÈìù‰æ£ÊóÖÂ±•Â±°ÁºïËôëÊ∞ØÂæãÁéáÊª§ÁªøÂ≥¶ÊåõÂ≠™Êª¶Âçµ‰π±Êé†Áï•Êä°ËΩÆ‰º¶‰ªëÊ≤¶Á∫∂ËÆ∫ËêùËû∫ÁΩóÈÄªÈî£ÁÆ©È™°Ë£∏ËêΩÊ¥õÈ™ÜÁªúÂ¶àÈ∫ªÁéõÁ†ÅËöÇÈ©¨È™ÇÂòõÂêóÂüã‰π∞È∫¶ÂçñËøàËÑâÁûíÈ¶íËõÆÊª°ËîìÊõºÊÖ¢Êº´ÔøΩ".split("");
    for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) {
        e[D[194][j]] = 49664 + j;
        d[49664 + j] = D[194][j];
    };
    D[195] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÅæËÇÅËÇÇËÇÖËÇàËÇäËÇçËÇéËÇèËÇêËÇëËÇíËÇîËÇïËÇóËÇôËÇûËÇ£ËÇ¶ËÇßËÇ®ËÇ¨ËÇ∞ËÇ≥ËÇµËÇ∂ËÇ∏ËÇπËÇªËÉÖËÉáËÉàËÉâËÉäËÉãËÉèËÉêËÉëËÉíËÉìËÉîËÉïËÉòËÉüËÉ†ËÉ¢ËÉ£ËÉ¶ËÉÆËÉµËÉ∑ËÉπËÉªËÉæËÉøËÑÄËÑÅËÑÉËÑÑËÑÖËÑáËÑàËÑãÔøΩËÑåËÑïËÑóËÑôËÑõËÑúËÑùËÑüËÑ†ËÑ°ËÑ¢ËÑ£ËÑ§ËÑ•ËÑ¶ËÑßËÑ®ËÑ©ËÑ™ËÑ´ËÑ≠ËÑÆËÑ∞ËÑ≥ËÑ¥ËÑµËÑ∑ËÑπËÑ∫ËÑªËÑºËÑΩËÑøË∞©ËäíËå´Áõ≤Ê∞ìÂøôËéΩÁå´ËåÖÈîöÊØõÁüõÈìÜÂçØËåÇÂÜíÂ∏ΩË≤åË¥∏‰πàÁé´ÊûöÊ¢ÖÈÖ∂ÈúâÁÖ§Ê≤°ÁúâÂ™íÈïÅÊØèÁæéÊòßÂØêÂ¶πÂ™öÈó®Èó∑‰ª¨ËêåËíôÊ™¨ÁõüÈî∞ÁåõÊ¢¶Â≠üÁúØÈÜöÈù°Á≥úËø∑Ë∞úÂº•Á±≥ÁßòËßÖÊ≥åËúúÂØÜÂπÇÊ£âÁú†ÁªµÂÜïÂÖçÂãâÂ®©ÁºÖÈù¢ËãóÊèèÁûÑËóêÁßíÊ∏∫Â∫ôÂ¶ôËîëÁÅ≠Ê∞ëÊäøÁöøÊïèÊÇØÈóΩÊòéËûüÈ∏£Èì≠ÂêçÂëΩË∞¨Êë∏ÔøΩ".split("");
    for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) {
        e[D[195][j]] = 49920 + j;
        d[49920 + j] = D[195][j];
    };
    D[196] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÖÄËÖÅËÖÇËÖÉËÖÑËÖÖËÖáËÖâËÖçËÖéËÖèËÖíËÖñËÖóËÖòËÖõËÖúËÖùËÖûËÖüËÖ°ËÖ¢ËÖ£ËÖ§ËÖ¶ËÖ®ËÖ™ËÖ´ËÖ¨ËÖØËÖ≤ËÖ≥ËÖµËÖ∂ËÖ∑ËÖ∏ËÜÅËÜÉËÜÑËÜÖËÜÜËÜáËÜâËÜãËÜåËÜçËÜéËÜêËÜíËÜìËÜîËÜïËÜñËÜóËÜôËÜöËÜûËÜüËÜ†ËÜ°ËÜ¢ËÜ§ËÜ•ÔøΩËÜßËÜ©ËÜ´ËÜ¨ËÜ≠ËÜÆËÜØËÜ∞ËÜ±ËÜ≤ËÜ¥ËÜµËÜ∂ËÜ∑ËÜ∏ËÜπËÜºËÜΩËÜæËÜøËáÑËáÖËááËáàËáâËáãËáçËáéËáèËáêËáëËáíËáìÊëπËòëÊ®°ËÜúÁ£®Êë©È≠îÊäπÊú´Ëé´Â¢®ÈªòÊ≤´Êº†ÂØûÈôåË∞ãÁâüÊüêÊãáÁâ°‰∫©ÂßÜÊØçÂ¢ìÊöÆÂπïÂãüÊÖïÊú®ÁõÆÁù¶ÁâßÁ©ÜÊãøÂì™ÂëêÈí†ÈÇ£Â®úÁ∫≥Ê∞ñ‰πÉÂ•∂ËÄêÂ•àÂçóÁî∑ÈöæÂõäÊå†ËÑëÊÅºÈóπÊ∑ñÂë¢È¶ÅÂÜÖÂ´©ËÉΩÂ¶ÆÈúìÂÄ™Ê≥•Â∞ºÊãü‰Ω†ÂåøËÖªÈÄÜÊ∫∫Ëî´ÊãàÂπ¥Á¢æÊíµÊçªÂøµÂ®òÈÖøÈ∏üÂ∞øÊçèËÅÇÂ≠ΩÂïÆÈïäÈïçÊ∂ÖÊÇ®Êü†ÁãûÂáùÂÆÅÔøΩ".split("");
    for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) {
        e[D[196][j]] = 50176 + j;
        d[50176 + j] = D[196][j];
    };
    D[197] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËáîËáïËáñËáóËáòËáôËáöËáõËáúËáùËáûËáüËá†Ëá°Ëá¢Ëá§Ëá•Ëá¶Ëá®Ëá©Ëá´ËáÆËáØËá∞Ëá±Ëá≤ËáµËá∂Ëá∑Ëá∏ËáπËá∫ËáΩËáøËàÉËàáËààËàâËàäËàãËàéËàèËàëËàìËàïËàñËàóËàòËàôËàöËàùËà†Ëà§Ëà•Ëà¶ËàßËà©ËàÆËà≤Ëà∫ËàºËàΩËàøÔøΩËâÄËâÅËâÇËâÉËâÖËâÜËâàËâäËâåËâçËâéËâêËâëËâíËâìËâîËâïËâñËâóËâôËâõËâúËâùËâûËâ†Ëâ°Ëâ¢Ëâ£Ëâ§Ëâ•Ëâ¶ËâßËâ©ÊãßÊ≥ûÁâõÊâ≠ÈíÆÁ∫ΩËÑìÊµìÂÜúÂºÑÂ•¥Âä™ÊÄíÂ•≥ÊöñËôêÁñüÊå™Êá¶Á≥ØËØ∫Âì¶Ê¨ßÈ∏•ÊÆ¥ËóïÂëïÂÅ∂Ê≤§Âï™Ë∂¥Áà¨Â∏ïÊÄïÁê∂ÊãçÊéíÁâåÂæòÊπÉÊ¥æÊîÄÊΩòÁõòÁ£êÁõºÁïîÂà§Âèõ‰πìÂ∫ûÊóÅËÄ™ËÉñÊäõÂíÜÂà®ÁÇÆË¢çË∑ëÊ≥°Âë∏ËÉöÂüπË£¥ËµîÈô™ÈÖç‰Ω©Ê≤õÂñ∑ÁõÜÁ†∞Êä®ÁÉπÊæéÂΩ≠Ëì¨Ê£öÁ°ºÁØ∑ËÜ®ÊúãÈπèÊçßÁ¢∞ÂùØÁ†íÈúπÊâπÊä´ÂäàÁêµÊØóÔøΩ".split("");
    for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) {
        e[D[197][j]] = 50432 + j;
        d[50432 + j] = D[197][j];
    };
    D[198] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËâ™Ëâ´Ëâ¨Ëâ≠Ëâ±ËâµËâ∂Ëâ∑Ëâ∏ËâªËâºËäÄËäÅËäÉËäÖËäÜËäáËäâËäåËäêËäìËäîËäïËäñËäöËäõËäûËä†Ëä¢Ëä£ËäßËä≤ËäµËä∂Ëä∫ËäªËäºËäøËãÄËãÇËãÉËãÖËãÜËãâËãêËãñËãôËãöËãùËã¢ËãßËã®Ëã©Ëã™Ëã¨Ëã≠ËãÆËã∞Ëã≤Ëã≥ËãµËã∂Ëã∏ÔøΩËã∫ËãºËãΩËãæËãøËåÄËåäËåãËåçËåêËåíËåìËåñËåòËåôËåùËåûËåüËå†Ëå°Ëå¢Ëå£Ëå§Ëå•Ëå¶Ëå©Ëå™ËåÆËå∞Ëå≤Ëå∑ËåªËåΩÂï§ËÑæÁñ≤ÁöÆÂåπÁóûÂÉªÂ±ÅË≠¨ÁØáÂÅèÁâáÈ™óÈ£òÊºÇÁì¢Á•®ÊíáÁû•ÊãºÈ¢ëË¥´ÂìÅËÅò‰πíÂù™ËãπËêçÂπ≥Âá≠Áì∂ËØÑÂ±èÂù°Ê≥ºÈ¢áÂ©ÜÁ†¥È≠ÑËø´Á≤ïÂâñÊâëÈì∫‰ªÜËéÜËë°Ëè©Ëí≤ÂüîÊú¥ÂúÉÊôÆÊµ¶Ë∞±ÊõùÁÄëÊúüÊ¨∫Ê†ñÊàöÂ¶ª‰∏ÉÂáÑÊºÜÊüíÊ≤èÂÖ∂Ê£ãÂ•áÊ≠ßÁï¶Â¥éËÑêÈΩêÊóóÁ•àÁ•ÅÈ™ëËµ∑Â≤Ç‰πû‰ºÅÂêØÂ•ëÁ†åÂô®Ê∞îËøÑÂºÉÊ±ΩÊ≥£ËÆ´ÊéêÔøΩ".split("");
    for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) {
        e[D[198][j]] = 50688 + j;
        d[50688 + j] = D[198][j];
    };
    D[199] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËåæËåøËçÅËçÇËçÑËçÖËçàËçäËçãËçåËççËçéËçìËçïËçñËçóËçòËçôËçùËç¢Ëç∞Ëç±Ëç≤Ëç≥Ëç¥ËçµËç∂ËçπËç∫ËçæËçøËéÄËéÅËéÇËéÉËéÑËéáËéàËéäËéãËéåËéçËéèËéêËéëËéîËéïËéñËéóËéôËéöËéùËéüËé°Ëé¢Ëé£Ëé§Ëé•Ëé¶ËéßËé¨Ëé≠ËéÆÔøΩËéØËéµËéªËéæËéøËèÇËèÉËèÑËèÜËèàËèâËèãËèçËèéËèêËèëËèíËèìËèïËèóËèôËèöËèõËèûËè¢Ëè£Ëè§Ëè¶ËèßËè®Ëè´Ëè¨Ëè≠ÊÅ∞Ê¥ΩÁâµÊâ¶ÈíéÈìÖÂçÉËøÅÁ≠æ‰ªüË∞¶‰πæÈªîÈí±Èí≥ÂâçÊΩúÈÅ£ÊµÖË∞¥Â†ëÂµåÊ¨†Ê≠âÊû™ÂëõËÖîÁæåÂ¢ôËî∑Âº∫Êä¢Ê©áÈîπÊï≤ÊÇÑÊ°•Áûß‰πî‰æ®Â∑ßÈûòÊí¨ÁøòÂ≥≠‰øèÁ™çÂàáËåÑ‰∏îÊÄØÁ™ÉÈí¶‰æµ‰∫≤Áß¶Áê¥Âã§ËäπÊìíÁ¶ΩÂØùÊ≤ÅÈùíËΩªÊ∞¢ÂÄæÂçøÊ∏ÖÊìéÊô¥Ê∞∞ÊÉÖÈ°∑ËØ∑Â∫ÜÁêºÁ©∑Áßã‰∏òÈÇ±ÁêÉÊ±ÇÂõöÈÖãÊ≥ÖË∂ãÂå∫ËõÜÊõ≤Ë∫ØÂ±àÈ©±Ê∏†ÔøΩ".split("");
    for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 65533) {
        e[D[199][j]] = 50944 + j;
        d[50944 + j] = D[199][j];
    };
    D[200] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËèÆËèØËè≥Ëè¥ËèµËè∂Ëè∑Ëè∫ËèªËèºËèæËèøËêÄËêÇËêÖËêáËêàËêâËêäËêêËêíËêìËêîËêïËêñËêóËêôËêöËêõËêûËêüËê†Ëê°Ëê¢Ëê£Ëê©Ëê™Ëê´Ëê¨Ëê≠ËêÆËêØËê∞Ëê≤Ëê≥Ëê¥ËêµËê∂Ëê∑ËêπËê∫ËêªËêæËêøËëÄËëÅËëÇËëÉËëÑËëÖËëáËëàËëâÔøΩËëäËëãËëåËëçËëéËëèËëêËëíËëìËëîËëïËëñËëòËëùËëûËëüËë†Ëë¢Ëë§Ëë•Ëë¶ËëßËë®Ëë™ËëÆËëØËë∞Ëë≤Ëë¥Ëë∑ËëπËëªËëºÂèñÂ®∂ÈæãË∂£ÂéªÂúàÈ¢ßÊùÉÈÜõÊ≥âÂÖ®ÁóäÊã≥Áä¨Âà∏ÂäùÁº∫ÁÇîÁò∏Âç¥ÈπäÊ¶∑Á°ÆÈõÄË£ôÁæ§ÁÑ∂ÁáÉÂÜâÊüìÁì§Â£§ÊîòÂö∑ËÆ©È•∂Êâ∞ÁªïÊÉπÁÉ≠Â£¨‰ªÅ‰∫∫ÂøçÈüß‰ªªËÆ§ÂàÉÂ¶äÁ∫´Êâî‰ªçÊó•ÊàéËå∏ËìâËç£ËûçÁÜîÊ∫∂ÂÆπÁªíÂÜóÊèâÊüîËÇâËåπË†ïÂÑíÂ≠∫Â¶ÇËæ±‰π≥Ê±ùÂÖ•Ë§•ËΩØÈòÆËïäÁëûÈîêÈó∞Ê∂¶Ëã•Âº±ÊííÊ¥íËê®ËÖÆÈ≥ÉÂ°ûËµõ‰∏âÂèÅÔøΩ".split("");
    for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 65533) {
        e[D[200][j]] = 51200 + j;
        d[51200 + j] = D[200][j];
    };
    D[201] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËëΩËëæËëøËíÄËíÅËíÉËíÑËíÖËíÜËíäËíçËíèËíêËíëËííËíìËíîËíïËíñËíòËíöËíõËíùËíûËíüËí†Ëí¢Ëí£Ëí§Ëí•Ëí¶ËíßËí®Ëí©Ëí™Ëí´Ëí¨Ëí≠ËíÆËí∞Ëí±Ëí≥ËíµËí∂Ëí∑ËíªËíºËíæËìÄËìÇËìÉËìÖËìÜËìáËìàËìãËìåËìéËìèËìíËìîËìïËìóÔøΩËìòËìôËìöËìõËìúËìûËì°Ëì¢Ëì§ËìßËì®Ëì©Ëì™Ëì´Ëì≠ËìÆËìØËì±Ëì≤Ëì≥Ëì¥ËìµËì∂Ëì∑Ëì∏ËìπËì∫ËìªËìΩËìæËîÄËîÅËîÇ‰ºûÊï£Ê°ëÂóì‰∏ßÊêîÈ™öÊâ´Â´ÇÁëüËâ≤Ê∂©Ê£ÆÂÉßËééÁ†ÇÊùÄÂàπÊ≤ôÁ∫±ÂÇªÂï•ÁÖûÁ≠õÊôíÁèäËã´ÊùâÂ±±Âà†ÁÖΩË°´Èó™ÈôïÊìÖËµ°ËÜ≥ÂñÑÊ±ïÊâáÁºÆÂ¢í‰º§ÂïÜËµèÊôå‰∏äÂ∞öË£≥Ê¢¢ÊçéÁ®çÁÉßËäçÂã∫Èü∂Â∞ëÂì®ÈÇµÁªçÂ•¢ËµäËõáËàåËàçËµ¶ÊëÑÂ∞ÑÊÖëÊ∂âÁ§æËÆæÁ†∑Áî≥Âëª‰º∏Ë∫´Ê∑±Â®†ÁªÖÁ•ûÊ≤àÂÆ°Â©∂ÁîöËÇæÊÖéÊ∏óÂ£∞ÁîüÁî•Áâ≤ÂçáÁª≥ÔøΩ".split("");
    for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 65533) {
        e[D[201][j]] = 51456 + j;
        d[51456 + j] = D[201][j];
    };
    D[202] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËîÉËîÑËîÖËîÜËîáËîàËîâËîäËîãËîçËîéËîèËîêËîíËîîËîïËîñËîòËîôËîõËîúËîùËîûËî†Ëî¢Ëî£Ëî§Ëî•Ëî¶ËîßËî®Ëî©Ëî™Ëî≠ËîÆËîØËî∞Ëî±Ëî≤Ëî≥Ëî¥ËîµËî∂ËîæËîøËïÄËïÅËïÇËïÑËïÖËïÜËïáËïãËïåËïçËïéËïèËïêËïëËïíËïìËïîËïïÔøΩËïóËïòËïöËïõËïúËïùËïüËï†Ëï°Ëï¢Ëï£Ëï•Ëï¶ËïßËï©Ëï™Ëï´Ëï¨Ëï≠ËïÆËïØËï∞Ëï±Ëï≥ËïµËï∂Ëï∑Ëï∏ËïºËïΩËïøËñÄËñÅÁúÅÁõõÂâ©ËÉúÂú£Â∏àÂ§±ÁãÆÊñΩÊπøËØóÂ∞∏Ëô±ÂçÅÁü≥ÊãæÊó∂‰ªÄÈ£üËöÄÂÆûËØÜÂè≤Áü¢‰ΩøÂ±éÈ©∂ÂßãÂºèÁ§∫Â£´‰∏ñÊüø‰∫ãÊã≠Ë™ìÈÄùÂäøÊòØÂóúÂô¨ÈÄÇ‰ªï‰æçÈáäÈ•∞Ê∞èÂ∏ÇÊÅÉÂÆ§ËßÜËØïÊî∂ÊâãÈ¶ñÂÆàÂØøÊéàÂîÆÂèóÁò¶ÂÖΩËî¨Êû¢Ê¢≥ÊÆäÊäíËæìÂèîËàíÊ∑ëÁñè‰π¶ËµéÂ≠∞ÁÜüËñØÊöëÊõôÁΩ≤ËúÄÈªçÈº†Â±ûÊúØËø∞Ê†ëÊùüÊàçÁ´ñÂ¢ÖÂ∫∂Êï∞Êº±ÔøΩ".split("");
    for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) {
        e[D[202][j]] = 51712 + j;
        d[51712 + j] = D[202][j];
    };
    D[203] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËñÇËñÉËñÜËñàËñâËñäËñãËñåËñçËñéËñêËñëËñíËñìËñîËñïËññËñóËñòËñôËñöËñùËñûËñüËñ†Ëñ°Ëñ¢Ëñ£Ëñ•Ëñ¶ËñßËñ©Ëñ´Ëñ¨Ëñ≠Ëñ±Ëñ≤Ëñ≥Ëñ¥ËñµËñ∂Ëñ∏Ëñ∫ËñªËñºËñΩËñæËñøËóÄËóÇËóÉËóÑËóÖËóÜËóáËóàËóäËóãËóåËóçËóéËóëËóíÔøΩËóîËóñËóóËóòËóôËóöËóõËóùËóûËóüËó†Ëó°Ëó¢Ëó£Ëó•Ëó¶ËóßËó®Ëó™Ëó´Ëó¨Ëó≠ËóÆËóØËó∞Ëó±Ëó≤Ëó≥Ëó¥ËóµËó∂Ëó∑Ëó∏ÊÅïÂà∑ËÄçÊëîË°∞Áî©Â∏ÖÊ†ìÊã¥ÈúúÂèåÁàΩË∞ÅÊ∞¥Áù°Á®éÂêÆÁû¨È°∫ËàúËØ¥Á°ïÊúîÁÉÅÊñØÊíïÂò∂ÊÄùÁßÅÂè∏‰∏ùÊ≠ªËÇÜÂØ∫Âó£Âõõ‰º∫‰ººÈ•≤Â∑≥ÊùæËÄ∏ÊÄÇÈ¢ÇÈÄÅÂÆãËÆºËØµÊêúËâòÊìûÂóΩËãèÈÖ•‰øóÁ¥†ÈÄüÁ≤üÂÉ≥Â°ëÊ∫ØÂÆøËØâËÇÉÈÖ∏ËíúÁÆóËôΩÈöãÈöèÁª•È´ìÁ¢éÂ≤ÅÁ©óÈÅÇÈößÁ•üÂ≠ôÊçüÁ¨ãËìëÊ¢≠ÂîÜÁº©ÁêêÁ¥¢ÈîÅÊâÄÂ°å‰ªñÂÆÉÂ•πÂ°îÔøΩ".split("");
    for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) {
        e[D[203][j]] = 51968 + j;
        d[51968 + j] = D[203][j];
    };
    D[204] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËóπËó∫ËóºËóΩËóæËòÄËòÅËòÇËòÉËòÑËòÜËòáËòàËòâËòäËòãËòåËòçËòéËòèËòêËòíËòìËòîËòïËòóËòòËòôËòöËòõËòúËòùËòûËòüËò†Ëò°Ëò¢Ëò£Ëò§Ëò•Ëò¶Ëò®Ëò™Ëò´Ëò¨Ëò≠ËòÆËòØËò∞Ëò±Ëò≤Ëò≥Ëò¥ËòµËò∂Ëò∑ËòπËò∫ËòªËòΩËòæËòøËôÄÔøΩËôÅËôÇËôÉËôÑËôÖËôÜËôáËôàËôâËôäËôãËôåËôíËôìËôïËôñËôóËôòËôôËôõËôúËôùËôüËô†Ëô°Ëô£Ëô§Ëô•Ëô¶ËôßËô®Ëô©Ëô™Áç≠ÊåûËπãË∏èËÉéËãîÊä¨Âè∞Ê≥∞ÈÖûÂ§™ÊÄÅÊ±∞ÂùçÊëäË¥™Áò´Êª©ÂùõÊ™ÄÁó∞ÊΩ≠Ë∞≠Ë∞àÂù¶ÊØØË¢íÁ¢≥Êé¢ÂèπÁÇ≠Ê±§Â°òÊê™Â†ÇÊ£†ËÜõÂîêÁ≥ñÂÄòË∫∫Ê∑åË∂üÁÉ´ÊéèÊ∂õÊªîÁª¶ËêÑÊ°ÉÈÄÉÊ∑òÈô∂ËÆ®Â•óÁâπËó§ËÖæÁñºË™äÊ¢ØÂâîË∏¢ÈîëÊèêÈ¢òËπÑÂïº‰ΩìÊõøÂöèÊÉïÊ∂ïÂâÉÂ±âÂ§©Ê∑ªÂ°´Áî∞ÁîúÊÅ¨ËàîËÖÜÊåëÊù°Ëø¢Áú∫Ë∑≥Ë¥¥ÈìÅÂ∏ñÂéÖÂê¨ÁÉÉÔøΩ".split("");
    for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) {
        e[D[204][j]] = 52224 + j;
        d[52224 + j] = D[204][j];
    };
    D[205] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËô≠ËôØËô∞Ëô≤Ëô≥Ëô¥ËôµËô∂Ëô∑Ëô∏ËöÉËöÑËöÖËöÜËöáËöàËöâËöéËöèËöêËöëËöíËöîËöñËöóËöòËöôËööËöõËöûËöüËö†Ëö°Ëö¢Ëö•Ëö¶Ëö´Ëö≠ËöÆËö≤Ëö≥Ëö∑Ëö∏ËöπËöªËöºËöΩËöæËöøËõÅËõÇËõÉËõÖËõàËõåËõçËõíËõìËõïËõñËõóËõöËõúÔøΩËõùËõ†Ëõ°Ëõ¢Ëõ£Ëõ•Ëõ¶ËõßËõ®Ëõ™Ëõ´Ëõ¨ËõØËõµËõ∂Ëõ∑Ëõ∫ËõªËõºËõΩËõøËúÅËúÑËúÖËúÜËúãËúåËúéËúèËúêËúëËúîËúñÊ±ÄÂª∑ÂÅú‰∫≠Â∫≠Êå∫ËâáÈÄöÊ°êÈÖÆÁû≥ÂêåÈìúÂΩ§Á´•Ê°∂ÊçÖÁ≠íÁªüÁóõÂÅ∑ÊäïÂ§¥ÈÄèÂá∏ÁßÉÁ™ÅÂõæÂæíÈÄîÊ∂ÇÂ±†ÂúüÂêêÂÖîÊπçÂõ¢Êé®È¢ìËÖøËúïË§™ÈÄÄÂêûÂ±ØËáÄÊãñÊâòËÑ±È∏µÈôÄÈ©ÆÈ©ºÊ§≠Â¶•ÊãìÂîæÊåñÂìáËõôÊ¥ºÂ®ÉÁì¶Ë¢úÊ≠™Â§ñË±åÂºØÊπæÁé©È°Ω‰∏∏ÁÉ∑ÂÆåÁ¢óÊåΩÊôöÁöñÊÉãÂÆõÂ©â‰∏áËÖïÊ±™Áéã‰∫°ÊûâÁΩëÂæÄÊó∫ÊúõÂøòÂ¶ÑÂ®ÅÔøΩ".split("");
    for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) {
        e[D[205][j]] = 52480 + j;
        d[52480 + j] = D[205][j];
    };
    D[206] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËúôËúõËúùËúüËú†Ëú§Ëú¶ËúßËú®Ëú™Ëú´Ëú¨Ëú≠ËúØËú∞Ëú≤Ëú≥ËúµËú∂Ëú∏ËúπËú∫ËúºËúΩËùÄËùÅËùÇËùÉËùÑËùÖËùÜËùäËùãËùçËùèËùêËùëËùíËùîËùïËùñËùòËùöËùõËùúËùùËùûËùüËù°Ëù¢Ëù¶ËùßËù®Ëù©Ëù™Ëù´Ëù¨Ëù≠ËùØËù±Ëù≤Ëù≥ËùµÔøΩËù∑Ëù∏ËùπËù∫ËùøËûÄËûÅËûÑËûÜËûáËûâËûäËûåËûéËûèËûêËûëËûíËûîËûïËûñËûòËûôËûöËûõËûúËûùËûûËû†Ëû°Ëû¢Ëû£Ëû§Â∑çÂæÆÂç±Èü¶ËøùÊ°ÖÂõ¥ÂîØÊÉü‰∏∫ÊΩçÁª¥ËãáËêéÂßî‰ºü‰º™Â∞æÁ∫¨Êú™ËîöÂë≥ÁïèËÉÉÂñÇÈ≠è‰ΩçÊ∏≠Ë∞ìÂ∞âÊÖ∞Âç´ÁòüÊ∏©ËöäÊñáÈóªÁ∫πÂêªÁ®≥Á¥äÈóÆÂó°ÁøÅÁìÆÊåùËúóÊ∂°Á™ùÊàëÊñ°ÂçßÊè°Ê≤ÉÂ∑´ÂëúÈí®‰πåÊ±°ËØ¨Â±ãÊó†ËäúÊ¢ßÂêæÂê¥ÊØãÊ≠¶‰∫îÊçÇÂçàËàû‰ºç‰æÆÂùûÊàäÈõæÊô§Áâ©ÂãøÂä°ÊÇüËØØÊòîÁÜôÊûêË•øÁ°íÁüΩÊô∞ÂòªÂê∏Èî°Áâ∫ÔøΩ".split("");
    for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) {
        e[D[206][j]] = 52736 + j;
        d[52736 + j] = D[206][j];
    };
    D[207] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËû•Ëû¶ËûßËû©Ëû™ËûÆËû∞Ëû±Ëû≤Ëû¥Ëû∂Ëû∑Ëû∏ËûπËûªËûºËûæËûøËüÅËüÇËüÉËüÑËüÖËüáËüàËüâËüåËüçËüéËüèËüêËüîËüïËüñËüóËüòËüôËüöËüúËüùËüûËüüËü°Ëü¢Ëü£Ëü§Ëü¶ËüßËü®Ëü©Ëü´Ëü¨Ëü≠ËüØËü∞Ëü±Ëü≤Ëü≥Ëü¥ËüµËü∂Ëü∑Ëü∏ÔøΩËü∫ËüªËüºËüΩËüøË†ÄË†ÅË†ÇË†ÑË†ÖË†ÜË†áË†àË†âË†ãË†åË†çË†éË†èË†êË†ëË†íË†îË†óË†òË†ôË†öË†úË†ùË†ûË†üË††Ë†£Á®ÄÊÅØÂ∏åÊÇâËÜùÂ§ïÊÉúÁÜÑÁÉØÊ∫™Ê±êÁäÄÊ™ÑË¢≠Â∏≠‰π†Â™≥ÂñúÈì£Ê¥óÁ≥ªÈöôÊàèÁªÜÁûéËôæÂå£ÈúûËæñÊöáÂ≥°‰æ†Áã≠‰∏ãÂé¶Â§èÂêìÊéÄÈî®ÂÖà‰ªôÈ≤úÁ∫§Âí∏Ë¥§Ë°îËà∑Èó≤Ê∂éÂº¶Â´åÊòæÈô©Áé∞ÁåÆÂéøËÖ∫È¶ÖÁæ°ÂÆ™Èô∑ÈôêÁ∫øÁõ∏Âé¢Èï∂È¶ôÁÆ±Ë•ÑÊπò‰π°ÁøîÁ••ËØ¶ÊÉ≥Âìç‰∫´È°πÂ∑∑Ê©°ÂÉèÂêëË±°ËêßÁ°ùÈúÑÂâäÂìÆÂö£ÈîÄÊ∂àÂÆµÊ∑ÜÊôìÔøΩ".split("");
    for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) {
        e[D[207][j]] = 52992 + j;
        d[52992 + j] = D[207][j];
    };
    D[208] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË†§Ë†•Ë†¶Ë†ßË†®Ë†©Ë†™Ë†´Ë†¨Ë†≠Ë†ÆË†ØË†∞Ë†±Ë†≥Ë†¥Ë†µË†∂Ë†∑Ë†∏Ë†∫Ë†ªË†ΩË†æË†øË°ÅË°ÇË°ÉË°ÜË°áË°àË°âË°äË°ãË°éË°èË°êË°ëË°íË°ìË°ïË°ñË°òË°öË°õË°úË°ùË°ûË°üË°†Ë°¶Ë°ßË°™Ë°≠Ë°ØË°±Ë°≥Ë°¥Ë°µË°∂Ë°∏Ë°πË°∫ÔøΩË°ªË°ºË¢ÄË¢ÉË¢ÜË¢áË¢âË¢äË¢åË¢éË¢èË¢êË¢ëË¢ìË¢îË¢ïË¢óË¢òË¢ôË¢öË¢õË¢ùË¢ûË¢üË¢†Ë¢°Ë¢£Ë¢•Ë¢¶Ë¢ßË¢®Ë¢©Ë¢™Â∞èÂ≠ùÊ†°ËÇñÂï∏Á¨ëÊïàÊ•î‰∫õÊ≠áËùéÈûãÂçèÊåüÊê∫ÈÇ™ÊñúËÉÅË∞êÂÜôÊ¢∞Âç∏ËüπÊáàÊ≥ÑÊ≥ªË∞¢Â±ëËñ™ËäØÈîåÊ¨£ËæõÊñ∞ÂøªÂøÉ‰ø°Ë°ÖÊòüËÖ•Áå©ÊÉ∫ÂÖ¥ÂàëÂûãÂΩ¢ÈÇ¢Ë°åÈÜíÂπ∏ÊùèÊÄßÂßìÂÖÑÂá∂ËÉ∏ÂåàÊ±πÈõÑÁÜä‰ºë‰øÆÁæûÊúΩÂóÖÈîàÁßÄË¢ñÁª£Â¢üÊàåÈúÄËôöÂòòÈ°ªÂæêËÆ∏ËìÑÈÖóÂèôÊó≠Â∫èÁïúÊÅ§ÁµÆÂ©øÁª™Áª≠ËΩ©ÂñßÂÆ£ÊÇ¨ÊóãÁéÑÔøΩ".split("");
    for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) {
        e[D[208][j]] = 53248 + j;
        d[53248 + j] = D[208][j];
    };
    D[209] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË¢¨Ë¢ÆË¢ØË¢∞Ë¢≤Ë¢≥Ë¢¥Ë¢µË¢∂Ë¢∏Ë¢πË¢∫Ë¢ªË¢ΩË¢æË¢øË£ÄË£ÉË£ÑË£áË£àË£äË£ãË£åË£çË£èË£êË£ëË£ìË£ñË£óË£öË£õË£úË£ùË£ûË£†Ë£°Ë£¶Ë£ßË£©Ë£™Ë£´Ë£¨Ë£≠Ë£ÆË£ØË£≤Ë£µË£∂Ë£∑Ë£∫Ë£ªË£ΩË£øË§ÄË§ÅË§ÉË§ÑË§ÖË§ÜË§áË§àÔøΩË§âË§ãË§åË§çË§éË§èË§ëË§îË§ïË§ñË§óË§òË§úË§ùË§ûË§üË§†Ë§¢Ë§£Ë§§Ë§¶Ë§ßË§®Ë§©Ë§¨Ë§≠Ë§ÆË§ØË§±Ë§≤Ë§≥Ë§µË§∑ÈÄâÁô£Áú©ÁªöÈù¥ËñõÂ≠¶Á©¥Èõ™Ë°ÄÂããÁÜèÂæ™Êó¨ËØ¢ÂØªÈ©ØÂ∑°ÊÆâÊ±õËÆ≠ËÆØÈÄäËøÖÂéãÊäºÈ∏¶È∏≠ÂëÄ‰∏´ËäΩÁâôËöúÂ¥ñË°ôÊ∂ØÈõÖÂìë‰∫öËÆ∂ÁÑâÂíΩÈòâÁÉüÊ∑πÁõê‰∏•Á†îËúíÂ≤©Âª∂Ë®ÄÈ¢úÈòéÁÇéÊ≤øÂ•ÑÊé©ÁúºË°çÊºîËâ≥Â†∞ÁáïÂéåÁ†öÈõÅÂîÅÂΩ¶ÁÑ∞ÂÆ¥Ë∞öÈ™åÊÆÉÂ§ÆÈ∏ØÁßßÊù®Êâ¨‰ΩØÁñ°ÁæäÊ¥ãÈò≥Ê∞ß‰ª∞ÁóíÂÖªÊ†∑ÊºæÈÇÄËÖ∞Â¶ñÁë∂ÔøΩ".split("");
    for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) {
        e[D[209][j]] = 53504 + j;
        d[53504 + j] = D[209][j];
    };
    D[210] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË§∏Ë§πË§∫Ë§ªË§ºË§ΩË§æË§øË•ÄË•ÇË•ÉË•ÖË•ÜË•áË•àË•âË•äË•ãË•åË•çË•éË•èË•êË•ëË•íË•ìË•îË•ïË•ñË•óË•òË•ôË•öË•õË•úË•ùË•†Ë•°Ë•¢Ë•£Ë•§Ë••Ë•ßË•®Ë•©Ë•™Ë•´Ë•¨Ë•≠Ë•ÆË•ØË•∞Ë•±Ë•≤Ë•≥Ë•¥Ë•µË•∂Ë•∑Ë•∏Ë•πË•∫Ë•ºÔøΩË•ΩË•æË¶ÄË¶ÇË¶ÑË¶ÖË¶áË¶àË¶âË¶äË¶ãË¶åË¶çË¶éË¶èË¶êË¶ëË¶íË¶ìË¶îË¶ïË¶ñË¶óË¶òË¶ôË¶öË¶õË¶úË¶ùË¶ûË¶üË¶†Ë¶°ÊëáÂ∞ßÈÅ•Á™ëË∞£ÂßöÂí¨ËàÄËçØË¶ÅËÄÄÊ§∞ÂôéËÄ∂Áà∑ÈáéÂÜ∂‰πüÈ°µÊéñ‰∏öÂè∂Êõ≥ËÖãÂ§úÊ∂≤‰∏ÄÂ£πÂåªÊèñÈì±‰æù‰ºäË°£È¢êÂ§∑ÈÅóÁßª‰ª™ËÉ∞ÁñëÊ≤ÇÂÆúÂß®ÂΩùÊ§ÖËöÅÂÄöÂ∑≤‰πôÁü£‰ª•Ëâ∫ÊäëÊòìÈÇëÂ±π‰∫øÂΩπËáÜÈÄ∏ËÇÑÁñ´‰∫¶Ë£îÊÑèÊØÖÂøÜ‰πâÁõäÊ∫¢ËØ£ËÆÆË∞äËØëÂºÇÁøºÁøåÁªéËåµËç´Âõ†ÊÆ∑Èü≥Èò¥ÂßªÂêüÈì∂Ê∑´ÂØÖÈ•ÆÂ∞πÂºïÈöêÔøΩ".split("");
    for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) {
        e[D[210][j]] = 53760 + j;
        d[53760 + j] = D[210][j];
    };
    D[211] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË¶¢Ë¶£Ë¶§Ë¶•Ë¶¶Ë¶ßË¶®Ë¶©Ë¶™Ë¶´Ë¶¨Ë¶≠Ë¶ÆË¶ØË¶∞Ë¶±Ë¶≤Ë¶≥Ë¶¥Ë¶µË¶∂Ë¶∑Ë¶∏Ë¶πË¶∫Ë¶ªË¶ºË¶ΩË¶æË¶øËßÄËßÉËßçËßìËßîËßïËßóËßòËßôËßõËßùËßüËß†Ëß°Ëß¢Ëß§ËßßËß®Ëß©Ëß™Ëß¨Ëß≠ËßÆËß∞Ëß±Ëß≤Ëß¥ËßµËß∂Ëß∑Ëß∏ËßπËß∫ÔøΩËßªËßºËßΩËßæËßøË®ÅË®ÇË®ÉË®ÑË®ÖË®ÜË®àË®âË®äË®ãË®åË®çË®éË®èË®êË®ëË®íË®ìË®îË®ïË®ñË®óË®òË®ôË®öË®õË®úË®ùÂç∞Ëã±Ê®±Â©¥Èπ∞Â∫îÁº®ËéπËê§Ëê•ËçßËùáËøéËµ¢ÁõàÂΩ±È¢ñÁ°¨Êò†ÂìüÊã•‰Ω£ËáÉÁóàÂ∫∏ÈõçË∏äËõπÂíèÊ≥≥Ê∂åÊ∞∏ÊÅøÂãáÁî®ÂπΩ‰ºòÊÇ†ÂøßÂ∞§Áî±ÈÇÆÈìÄÁäπÊ≤πÊ∏∏ÈÖâÊúâÂèãÂè≥‰ΩëÈáâËØ±ÂèàÂπºËøÇÊ∑§‰∫éÁõÇÊ¶ÜËôûÊÑöËàÜ‰Ωô‰øûÈÄæÈ±ºÊÑâÊ∏ùÊ∏îÈöÖ‰∫àÂ®±Èõ®‰∏éÂ±øÁ¶πÂÆáËØ≠ÁæΩÁéâÂüüËäãÈÉÅÂêÅÈÅáÂñªÂ≥™Âæ°ÊÑàÊ¨≤Áã±ËÇ≤Ë™âÔøΩ".split("");
    for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) {
        e[D[211][j]] = 54016 + j;
        d[54016 + j] = D[211][j];
    };
    D[212] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË®ûË®üË®†Ë®°Ë®¢Ë®£Ë®§Ë®•Ë®¶Ë®ßË®®Ë®©Ë®™Ë®´Ë®¨Ë®≠Ë®ÆË®ØË®∞Ë®±Ë®≤Ë®≥Ë®¥Ë®µË®∂Ë®∑Ë®∏Ë®πË®∫Ë®ªË®ºË®ΩË®øË©ÄË©ÅË©ÇË©ÉË©ÑË©ÖË©ÜË©áË©âË©äË©ãË©åË©çË©éË©èË©êË©ëË©íË©ìË©îË©ïË©ñË©óË©òË©ôË©öË©õË©úË©ùË©ûÔøΩË©üË©†Ë©°Ë©¢Ë©£Ë©§Ë©•Ë©¶Ë©ßË©®Ë©©Ë©™Ë©´Ë©¨Ë©≠Ë©ÆË©ØË©∞Ë©±Ë©≤Ë©≥Ë©¥Ë©µË©∂Ë©∑Ë©∏Ë©∫Ë©ªË©ºË©ΩË©æË©øË™ÄÊµ¥ÂØìË£ïÈ¢ÑË±´È©≠È∏≥Ê∏äÂÜ§ÂÖÉÂû£Ë¢ÅÂéüÊè¥ËæïÂõ≠ÂëòÂúÜÁåøÊ∫êÁºòËøúËãëÊÑøÊÄ®Èô¢Êõ∞Á∫¶Ë∂äË∑ÉÈí•Â≤≥Á≤§ÊúàÊÇ¶ÈòÖËÄò‰∫ëÈÉßÂåÄÈô®ÂÖÅËøêËï¥ÈÖùÊôïÈüµÂ≠ïÂåùÁ†∏ÊùÇÊ†ΩÂìâÁÅæÂÆ∞ËΩΩÂÜçÂú®Âí±ÊîíÊöÇËµûËµÉËÑèËë¨ÈÅ≠Á≥üÂáøËóªÊû£Êó©Êæ°Ëö§Ë∫ÅÂô™ÈÄ†ÁöÇÁÅ∂Áá•Ë¥£Êã©ÂàôÊ≥ΩË¥ºÊÄéÂ¢ûÊÜéÊõæËµ†ÊâéÂñ≥Ê∏£Êú≠ËΩßÔøΩ".split("");
    for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) {
        e[D[212][j]] = 54272 + j;
        d[54272 + j] = D[212][j];
    };
    D[213] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË™ÅË™ÇË™ÉË™ÑË™ÖË™ÜË™áË™àË™ãË™åË™çË™éË™èË™êË™ëË™íË™îË™ïË™ñË™óË™òË™ôË™öË™õË™úË™ùË™ûË™üË™†Ë™°Ë™¢Ë™£Ë™§Ë™•Ë™¶Ë™ßË™®Ë™©Ë™™Ë™´Ë™¨Ë™≠Ë™ÆË™ØË™∞Ë™±Ë™≤Ë™≥Ë™¥Ë™µË™∂Ë™∑Ë™∏Ë™πË™∫Ë™ªË™ºË™ΩË™æË™øË´ÄË´ÅË´ÇÔøΩË´ÉË´ÑË´ÖË´ÜË´áË´àË´âË´äË´ãË´åË´çË´éË´èË´êË´ëË´íË´ìË´îË´ïË´ñË´óË´òË´ôË´öË´õË´úË´ùË´ûË´üË´†Ë´°Ë´¢Ë´£Èì°Èó∏Áú®Ê†ÖÊ¶®Âíã‰πçÁÇ∏ËØàÊëòÊñãÂÆÖÁ™ÑÂÄ∫ÂØ®ÁûªÊØ°Ë©πÁ≤òÊ≤æÁõèÊñ©ËæóÂ¥≠Â±ïËò∏Ê†àÂç†ÊàòÁ´ôÊπõÁªΩÊ®üÁ´†ÂΩ∞Êº≥Âº†ÊéåÊ∂®Êùñ‰∏àÂ∏êË¥¶‰ªóËÉÄÁò¥ÈöúÊãõÊò≠ÊâæÊ≤ºËµµÁÖßÁΩ©ÂÖÜËÇáÂè¨ÈÅÆÊäòÂì≤Ëõ∞ËæôËÄÖÈîóËîóËøôÊµôÁèçÊñüÁúüÁîÑÁ†ßËáªË¥ûÈíà‰æ¶ÊûïÁñπËØäÈúáÊåØÈïáÈòµËí∏Êå£ÁùÅÂæÅÁã∞‰∫âÊÄîÊï¥ÊãØÊ≠£ÊîøÔøΩ".split("");
    for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) {
        e[D[213][j]] = 54528 + j;
        d[54528 + j] = D[213][j];
    };
    D[214] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË´§Ë´•Ë´¶Ë´ßË´®Ë´©Ë´™Ë´´Ë´¨Ë´≠Ë´ÆË´ØË´∞Ë´±Ë´≤Ë´≥Ë´¥Ë´µË´∂Ë´∑Ë´∏Ë´πË´∫Ë´ªË´ºË´ΩË´æË´øË¨ÄË¨ÅË¨ÇË¨ÉË¨ÑË¨ÖË¨ÜË¨àË¨âË¨äË¨ãË¨åË¨çË¨éË¨èË¨êË¨ëË¨íË¨ìË¨îË¨ïË¨ñË¨óË¨òË¨ôË¨öË¨õË¨úË¨ùË¨ûË¨üË¨†Ë¨°Ë¨¢Ë¨£ÔøΩË¨§Ë¨•Ë¨ßË¨®Ë¨©Ë¨™Ë¨´Ë¨¨Ë¨≠Ë¨ÆË¨ØË¨∞Ë¨±Ë¨≤Ë¨≥Ë¨¥Ë¨µË¨∂Ë¨∑Ë¨∏Ë¨πË¨∫Ë¨ªË¨ºË¨ΩË¨æË¨øË≠ÄË≠ÅË≠ÇË≠ÉË≠ÑË≠ÖÂ∏ßÁóáÈÉëËØÅËäùÊûùÊîØÂê±ËúòÁü•ËÇ¢ËÑÇÊ±Å‰πãÁªáËÅåÁõ¥Ê§çÊÆñÊâßÂÄº‰æÑÂùÄÊåáÊ≠¢Ë∂æÂè™Êó®Á∫∏ÂøóÊåöÊé∑Ëá≥Ëá¥ÁΩÆÂ∏úÂ≥ôÂà∂Êô∫Áß©Á®öË¥®ÁÇôÁóîÊªûÊ≤ªÁ™í‰∏≠ÁõÖÂø†ÈíüË°∑ÁªàÁßçËÇøÈáç‰ª≤‰ºóËàüÂë®Â∑ûÊ¥≤ËØåÁ≤•ËΩ¥ËÇòÂ∏öÂííÁö±ÂÆôÊòºÈ™§Áè†Ê†™ËõõÊú±Áå™ËØ∏ËØõÈÄêÁ´πÁÉõÁÖÆÊãÑÁû©Âò±‰∏ªËëóÊü±Âä©ËõÄË¥ÆÈì∏Á≠ëÔøΩ".split("");
    for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) {
        e[D[214][j]] = 54784 + j;
        d[54784 + j] = D[214][j];
    };
    D[215] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË≠ÜË≠áË≠àË≠âË≠äË≠ãË≠åË≠çË≠éË≠èË≠êË≠ëË≠íË≠ìË≠îË≠ïË≠ñË≠óË≠òË≠ôË≠öË≠õË≠úË≠ùË≠ûË≠üË≠†Ë≠°Ë≠¢Ë≠£Ë≠§Ë≠•Ë≠ßË≠®Ë≠©Ë≠™Ë≠´Ë≠≠Ë≠ÆË≠ØË≠∞Ë≠±Ë≠≤Ë≠≥Ë≠¥Ë≠µË≠∂Ë≠∑Ë≠∏Ë≠πË≠∫Ë≠ªË≠ºË≠ΩË≠æË≠øËÆÄËÆÅËÆÇËÆÉËÆÑËÆÖËÆÜÔøΩËÆáËÆàËÆâËÆäËÆãËÆåËÆçËÆéËÆèËÆêËÆëËÆíËÆìËÆîËÆïËÆñËÆóËÆòËÆôËÆöËÆõËÆúËÆùËÆûËÆüËÆ¨ËÆ±ËÆªËØáËØêËØ™Ë∞âË∞û‰ΩèÊ≥®Á•ùÈ©ªÊäìÁà™ÊãΩ‰∏ìÁ†ñËΩ¨Êí∞ËµöÁØÜÊ°©Â∫ÑË£ÖÂ¶ÜÊíûÂ£ÆÁä∂Ê§éÈî•ËøΩËµòÂù†ÁºÄË∞ÜÂáÜÊçâÊãôÂçìÊ°åÁê¢ËåÅÈÖåÂïÑÁùÄÁÅºÊµäÂÖπÂí®ËµÑÂßøÊªãÊ∑ÑÂ≠úÁ¥´‰ªîÁ±ΩÊªìÂ≠êËá™Ê∏çÂ≠óÈ¨ÉÊ£ïË∏™ÂÆóÁªºÊÄªÁ∫µÈÇπËµ∞Â•èÊèçÁßüË∂≥ÂçíÊóèÁ•ñËØÖÈòªÁªÑÈíªÁ∫ÇÂò¥ÈÜâÊúÄÁΩ™Â∞äÈÅµÊò®Â∑¶‰ΩêÊüûÂÅö‰ΩúÂùêÂ∫ßÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) {
        e[D[215][j]] = 55040 + j;
        d[55040 + j] = D[215][j];
    };
    D[216] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË∞∏Ë∞πË∞∫Ë∞ªË∞ºË∞ΩË∞æË∞øË±ÄË±ÇË±ÉË±ÑË±ÖË±àË±äË±ãË±çË±éË±èË±êË±ëË±íË±ìË±îË±ñË±óË±òË±ôË±õË±úË±ùË±ûË±üË±†Ë±£Ë±§Ë±•Ë±¶Ë±ßË±®Ë±©Ë±¨Ë±≠Ë±ÆË±ØË±∞Ë±±Ë±≤Ë±¥Ë±µË±∂Ë±∑Ë±ªË±ºË±ΩË±æË±øË≤ÄË≤ÅË≤ÉË≤ÑË≤ÜË≤áÔøΩË≤àË≤ãË≤çË≤éË≤èË≤êË≤ëË≤íË≤ìË≤ïË≤ñË≤óË≤ôË≤öË≤õË≤úË≤ùË≤ûË≤üË≤†Ë≤°Ë≤¢Ë≤£Ë≤§Ë≤•Ë≤¶Ë≤ßË≤®Ë≤©Ë≤™Ë≤´Ë≤¨Ë≤≠‰∫ç‰∏åÂÖÄ‰∏êÂªøÂçÖ‰∏ï‰∫ò‰∏ûÈ¨≤Â≠¨Âô©‰∏®Á¶∫‰∏øÂåï‰πáÂ§≠ÁàªÂçÆÊ∞êÂõüËÉ§È¶óÊØìÁùæÈºó‰∏∂‰∫üÈºê‰πú‰π©‰∫ìËäàÂ≠õÂï¨Âòè‰ªÑÂéçÂéùÂé£Âé•ÂéÆÈù•ËµùÂåöÂèµÂå¶ÂåÆÂåæËµúÂç¶Âç£ÂàÇÂààÂàéÂà≠Âà≥ÂàøÂâÄÂâåÂâûÂâ°ÂâúËíØÂâΩÂäÇÂäÅÂäêÂäìÂÜÇÁΩî‰∫ª‰ªÉ‰ªâ‰ªÇ‰ª®‰ª°‰ª´‰ªû‰ºõ‰ª≥‰º¢‰Ω§‰ªµ‰º•‰ºß‰ºâ‰º´‰Ωû‰ΩßÊî∏‰Ωö‰ΩùÔøΩ".split("");
    for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) {
        e[D[216][j]] = 55296 + j;
        d[55296 + j] = D[216][j];
    };
    D[217] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË≤ÆË≤ØË≤∞Ë≤±Ë≤≤Ë≤≥Ë≤¥Ë≤µË≤∂Ë≤∑Ë≤∏Ë≤πË≤∫Ë≤ªË≤ºË≤ΩË≤æË≤øË≥ÄË≥ÅË≥ÇË≥ÉË≥ÑË≥ÖË≥ÜË≥áË≥àË≥âË≥äË≥ãË≥åË≥çË≥éË≥èË≥êË≥ëË≥íË≥ìË≥îË≥ïË≥ñË≥óË≥òË≥ôË≥öË≥õË≥úË≥ùË≥ûË≥üË≥†Ë≥°Ë≥¢Ë≥£Ë≥§Ë≥•Ë≥¶Ë≥ßË≥®Ë≥©Ë≥™Ë≥´Ë≥¨ÔøΩË≥≠Ë≥ÆË≥ØË≥∞Ë≥±Ë≥≤Ë≥≥Ë≥¥Ë≥µË≥∂Ë≥∑Ë≥∏Ë≥πË≥∫Ë≥ªË≥ºË≥ΩË≥æË≥øË¥ÄË¥ÅË¥ÇË¥ÉË¥ÑË¥ÖË¥ÜË¥áË¥àË¥âË¥äË¥ãË¥åË¥ç‰Ωü‰Ωó‰º≤‰ºΩ‰Ω∂‰Ω¥‰æë‰æâ‰æÉ‰æè‰Ωæ‰Ωª‰æ™‰Ωº‰æ¨‰æî‰ø¶‰ø®‰ø™‰øÖ‰øö‰ø£‰øú‰øë‰øü‰ø∏ÂÄ©ÂÅå‰ø≥ÂÄ¨ÂÄèÂÄÆÂÄ≠‰øæÂÄúÂÄåÂÄ•ÂÄ®ÂÅæÂÅÉÂÅïÂÅàÂÅéÂÅ¨ÂÅªÂÇ•ÂÇßÂÇ©ÂÇ∫ÂÉñÂÑÜÂÉ≠ÂÉ¨ÂÉ¶ÂÉÆÂÑáÂÑã‰ªùÊ∞Ω‰Ωò‰Ω•‰øéÈæ†Ê±ÜÁ±¥ÂÖÆÂ∑ΩÈªâÈ¶òÂÜÅÂ§îÂãπÂåçË®áÂåêÂá´Â§ôÂÖï‰∫†ÂÖñ‰∫≥Ë°ÆË¢§‰∫µËÑîË£íÁ¶ÄÂ¨¥Ë†ÉÁæ∏ÂÜ´ÂÜ±ÂÜΩÂÜºÔøΩ".split("");
    for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) {
        e[D[217][j]] = 55552 + j;
        d[55552 + j] = D[217][j];
    };
    D[218] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË¥éË¥èË¥êË¥ëË¥íË¥ìË¥îË¥ïË¥ñË¥óË¥òË¥ôË¥öË¥õË¥úË¥†ËµëËµíËµóËµüËµ•Ëµ®Ëµ©Ëµ™Ëµ¨ËµÆËµØËµ±Ëµ≤Ëµ∏ËµπËµ∫ËµªËµºËµΩËµæËµøË∂ÄË∂ÇË∂ÉË∂ÜË∂áË∂àË∂âË∂åË∂çË∂éË∂èË∂êË∂íË∂ìË∂ïË∂ñË∂óË∂òË∂ôË∂öË∂õË∂úË∂ùË∂ûË∂†Ë∂°ÔøΩË∂¢Ë∂§Ë∂•Ë∂¶Ë∂ßË∂®Ë∂©Ë∂™Ë∂´Ë∂¨Ë∂≠Ë∂ÆË∂ØË∂∞Ë∂≤Ë∂∂Ë∂∑Ë∂πË∂ªË∂ΩË∑ÄË∑ÅË∑ÇË∑ÖË∑áË∑àË∑âË∑äË∑çË∑êË∑íË∑ìË∑îÂááÂÜñÂÜ¢ÂÜ•ËÆ†ËÆ¶ËÆßËÆ™ËÆ¥ËÆµËÆ∑ËØÇËØÉËØãËØèËØéËØíËØìËØîËØñËØòËØôËØúËØüËØ†ËØ§ËØ®ËØ©ËØÆËØ∞ËØ≥ËØ∂ËØπËØºËØøË∞ÄË∞ÇË∞ÑË∞áË∞åË∞èË∞ëË∞íË∞îË∞ïË∞ñË∞ôË∞õË∞òË∞ùË∞üË∞†Ë∞°Ë∞•Ë∞ßË∞™Ë∞´Ë∞ÆË∞ØË∞≤Ë∞≥Ë∞µË∞∂Âç©Âç∫ÈòùÈò¢Èò°Èò±Èò™ÈòΩÈòºÈôÇÈôâÈôîÈôüÈôßÈô¨Èô≤Èô¥ÈöàÈöçÈöóÈö∞ÈÇóÈÇõÈÇùÈÇôÈÇ¨ÈÇ°ÈÇ¥ÈÇ≥ÈÇ∂ÈÇ∫ÔøΩ".split("");
    for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) {
        e[D[218][j]] = 55808 + j;
        d[55808 + j] = D[218][j];
    };
    D[219] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË∑ïË∑òË∑ôË∑úË∑†Ë∑°Ë∑¢Ë∑•Ë∑¶Ë∑ßË∑©Ë∑≠Ë∑ÆË∑∞Ë∑±Ë∑≤Ë∑¥Ë∑∂Ë∑ºË∑æË∑øË∏ÄË∏ÅË∏ÇË∏ÉË∏ÑË∏ÜË∏áË∏àË∏ãË∏çË∏éË∏êË∏ëË∏íË∏ìË∏ïË∏ñË∏óË∏òË∏ôË∏öË∏õË∏úË∏†Ë∏°Ë∏§Ë∏•Ë∏¶Ë∏ßË∏®Ë∏´Ë∏≠Ë∏∞Ë∏≤Ë∏≥Ë∏¥Ë∏∂Ë∏∑Ë∏∏Ë∏ªË∏ºË∏æÔøΩË∏øËπÉËπÖËπÜËπåËπçËπéËπèËπêËπìËπîËπïËπñËπóËπòËπöËπõËπúËπùËπûËπüËπ†Ëπ°Ëπ¢Ëπ£Ëπ§Ëπ•ËπßËπ®Ëπ™Ëπ´ËπÆËπ±ÈÇ∏ÈÇ∞ÈÉèÈÉÖÈÇæÈÉêÈÉÑÈÉáÈÉìÈÉ¶ÈÉ¢ÈÉúÈÉóÈÉõÈÉ´ÈÉØÈÉæÈÑÑÈÑ¢ÈÑûÈÑ£ÈÑ±ÈÑØÈÑπÈÖÉÈÖÜÂàçÂ•ÇÂä¢Âä¨Âä≠ÂäæÂìøÂãêÂãñÂã∞ÂèüÁáÆÁüçÂª¥ÂáµÂáºÈ¨ØÂé∂ÂºÅÁïöÂ∑ØÂùåÂû©Âû°Â°æÂ¢ºÂ£ÖÂ£ëÂú©Âú¨Âú™Âú≥ÂúπÂúÆÂúØÂùúÂúªÂùÇÂù©ÂûÖÂù´ÂûÜÂùºÂùªÂù®Âù≠Âù∂Âù≥Âû≠Âû§ÂûåÂû≤ÂüèÂûßÂû¥ÂûìÂû†ÂüïÂüòÂüöÂüôÂüíÂû∏Âü¥ÂüØÂü∏Âü§ÂüùÔøΩ".split("");
    for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) {
        e[D[219][j]] = 56064 + j;
        d[56064 + j] = D[219][j];
    };
    D[220] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËπ≥ËπµËπ∑Ëπ∏ËππËπ∫ËπªËπΩËπæË∫ÄË∫ÇË∫ÉË∫ÑË∫ÜË∫àË∫âË∫äË∫ãË∫åË∫çË∫éË∫ëË∫íË∫ìË∫ïË∫ñË∫óË∫òË∫ôË∫öË∫õË∫ùË∫üË∫†Ë∫°Ë∫¢Ë∫£Ë∫§Ë∫•Ë∫¶Ë∫ßË∫®Ë∫©Ë∫™Ë∫≠Ë∫ÆË∫∞Ë∫±Ë∫≥Ë∫¥Ë∫µË∫∂Ë∫∑Ë∫∏Ë∫πË∫ªË∫ºË∫ΩË∫æË∫øËªÄËªÅËªÇÔøΩËªÉËªÑËªÖËªÜËªáËªàËªâËªäËªãËªåËªçËªèËªêËªëËªíËªìËªîËªïËªñËªóËªòËªôËªöËªõËªúËªùËªûËªüËª†Ëª°Ëª¢Ëª£Ëª§Â†ãÂ†çÂüΩÂü≠Â†ÄÂ†ûÂ†ôÂ°ÑÂ††Â°•Â°¨Â¢ÅÂ¢âÂ¢öÂ¢ÄÈ¶®ÈºôÊáøËâπËâΩËâøËäèËääËä®ËäÑËäéËäëËäóËäôËä´Ëä∏ËäæËä∞ËãàËãäËã£ËäòËä∑ËäÆËããËãåËãÅËä©Ëä¥Ëä°Ëä™ËäüËãÑËãéËä§Ëã°ËåâËã∑Ëã§ËåèËåáËãúËã¥ËãíËãòËååËãªËãìËåëËåöËåÜËåîËåïËã†ËãïËåúËçëËçõËçúËåàËéíËåºËå¥Ëå±ËéõËçûËåØËçèËçáËçÉËçüËçÄËåóËç†Ëå≠Ëå∫Ëå≥Ëç¶Ëç•ÔøΩ".split("");
    for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) {
        e[D[220][j]] = 56320 + j;
        d[56320 + j] = D[220][j];
    };
    D[221] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËª•Ëª¶ËªßËª®Ëª©Ëª™Ëª´Ëª¨Ëª≠ËªÆËªØËª∞Ëª±Ëª≤Ëª≥Ëª¥ËªµËª∂Ëª∑Ëª∏ËªπËª∫ËªªËªºËªΩËªæËªøËºÄËºÅËºÇËºÉËºÑËºÖËºÜËºáËºàËºâËºäËºãËºåËºçËºéËºèËºêËºëËºíËºìËºîËºïËºñËºóËºòËºôËºöËºõËºúËºùËºûËºüËº†Ëº°Ëº¢Ëº£ÔøΩËº§Ëº•Ëº¶ËºßËº®Ëº©Ëº™Ëº´Ëº¨Ëº≠ËºÆËºØËº∞Ëº±Ëº≤Ëº≥Ëº¥ËºµËº∂Ëº∑Ëº∏ËºπËº∫ËºªËººËºΩËºæËºøËΩÄËΩÅËΩÇËΩÉËΩÑËç®ËåõËç©Ëç¨Ëç™Ëç≠ËçÆËé∞Ëç∏Ëé≥Ëé¥Ëé†Ëé™ËéìËéúËéÖËçºËé∂Ëé©ËçΩËé∏ËçªËéòËéûËé®Ëé∫ËéºËèÅËêÅËè•ËèòÂ†áËêòËêãËèùËèΩËèñËêúËê∏ËêëËêÜËèîËèüËêèËêÉËè∏ËèπËè™ËèÖËèÄËê¶Ëè∞Ëè°ËëúËëëËëöËëôËë≥ËíáËíàËë∫ËíâËë∏ËêºËëÜËë©Ëë∂ËíåËíéËê±Ëë≠ËìÅËìçËìêËì¶ËíΩËììËìäËíøËí∫Ëì†Ëí°ËíπËí¥ËíóËì•Ëì£ËîåÁîçËî∏Ëì∞ËîπËîüËî∫ÔøΩ".split("");
    for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) {
        e[D[221][j]] = 56576 + j;
        d[56576 + j] = D[221][j];
    };
    D[222] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËΩÖËΩÜËΩáËΩàËΩâËΩäËΩãËΩåËΩçËΩéËΩèËΩêËΩëËΩíËΩìËΩîËΩïËΩñËΩóËΩòËΩôËΩöËΩõËΩúËΩùËΩûËΩüËΩ†ËΩ°ËΩ¢ËΩ£ËΩ§ËΩ•ËΩ™ËæÄËæåËæíËæùËæ†Ëæ°Ëæ¢Ëæ§Ëæ•Ëæ¶ËæßËæ™Ëæ¨Ëæ≠ËæÆËæØËæ≤Ëæ≥Ëæ¥ËæµËæ∑Ëæ∏Ëæ∫ËæªËæºËæøËøÄËøÉËøÜÔøΩËøâËøäËøãËøåËøçËøèËøíËøñËøóËøöËø†Ëø°Ëø£ËøßËø¨ËøØËø±Ëø≤Ëø¥ËøµËø∂Ëø∫ËøªËøºËøæËøøÈÄáÈÄàÈÄåÈÄéÈÄìÈÄïÈÄòËïñËîªËìøËìºËïôËïàËï®Ëï§ËïûËï∫Áû¢ËïÉËï≤ËïªËñ§Ëñ®ËñáËñèËïπËñÆËñúËñÖËñπËñ∑Ëñ∞ËóìËóÅËóúËóøËòßËòÖËò©ËòñËòºÂªæÂºàÂ§ºÂ•ÅËÄ∑Â•ïÂ•öÂ•òÂåèÂ∞¢Â∞•Â∞¨Â∞¥ÊâåÊâ™ÊäüÊäªÊãäÊãöÊãóÊãÆÊå¢Êã∂ÊåπÊçãÊçÉÊé≠Êè∂Êç±Êç∫ÊééÊé¥Êç≠Êé¨ÊéäÊç©ÊéÆÊéºÊè≤Êè∏Êè†ÊèøÊèÑÊèûÊèéÊëíÊèÜÊéæÊëÖÊëÅÊêãÊêõÊê†ÊêåÊê¶Êê°ÊëûÊíÑÊë≠ÊíñÔøΩ".split("");
    for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) {
        e[D[222][j]] = 56832 + j;
        d[56832 + j] = D[222][j];
    };
    D[223] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÄôÈÄúÈÄ£ÈÄ§ÈÄ•ÈÄßÈÄ®ÈÄ©ÈÄ™ÈÄ´ÈÄ¨ÈÄ∞ÈÄ±ÈÄ≤ÈÄ≥ÈÄ¥ÈÄ∑ÈÄπÈÄ∫ÈÄΩÈÄøÈÅÄÈÅÉÈÅÖÈÅÜÈÅàÈÅâÈÅäÈÅãÈÅåÈÅéÈÅîÈÅïÈÅñÈÅôÈÅöÈÅúÈÅùÈÅûÈÅüÈÅ†ÈÅ°ÈÅ§ÈÅ¶ÈÅßÈÅ©ÈÅ™ÈÅ´ÈÅ¨ÈÅØÈÅ∞ÈÅ±ÈÅ≤ÈÅ≥ÈÅ∂ÈÅ∑ÈÅ∏ÈÅπÈÅ∫ÈÅªÈÅºÈÅæÈÇÅÔøΩÈÇÑÈÇÖÈÇÜÈÇáÈÇâÈÇäÈÇåÈÇçÈÇéÈÇèÈÇêÈÇíÈÇîÈÇñÈÇòÈÇöÈÇúÈÇûÈÇüÈÇ†ÈÇ§ÈÇ•ÈÇßÈÇ®ÈÇ©ÈÇ´ÈÇ≠ÈÇ≤ÈÇ∑ÈÇºÈÇΩÈÇøÈÉÄÊë∫Êí∑Êí∏ÊíôÊí∫ÊìÄÊìêÊìóÊì§Êì¢ÊîâÊî•ÊîÆÂºãÂøíÁîôÂºëÂçüÂè±ÂèΩÂè©Âè®ÂèªÂêíÂêñÂêÜÂëãÂëíÂëìÂëîÂëñÂëÉÂê°ÂëóÂëôÂê£Âê≤ÂíÇÂíîÂë∑Âë±Âë§ÂíöÂíõÂíÑÂë∂Âë¶ÂíùÂìêÂí≠ÂìÇÂí¥ÂìíÂíßÂí¶ÂììÂìîÂë≤Âí£ÂìïÂíªÂíøÂìåÂìôÂìöÂìúÂí©Âí™Âí§ÂìùÂìèÂìûÂîõÂìßÂî†ÂìΩÂîîÂì≥Âî¢Âî£ÂîèÂîëÂîßÂî™ÂïßÂñèÂñµÂïâÂï≠ÂïÅÂïïÂîøÂïêÂîºÔøΩ".split("");
    for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) {
        e[D[223][j]] = 57088 + j;
        d[57088 + j] = D[223][j];
    };
    D[224] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÉÇÈÉÉÈÉÜÈÉàÈÉâÈÉãÈÉåÈÉçÈÉíÈÉîÈÉïÈÉñÈÉòÈÉôÈÉöÈÉûÈÉüÈÉ†ÈÉ£ÈÉ§ÈÉ•ÈÉ©ÈÉ™ÈÉ¨ÈÉÆÈÉ∞ÈÉ±ÈÉ≤ÈÉ≥ÈÉµÈÉ∂ÈÉ∑ÈÉπÈÉ∫ÈÉªÈÉºÈÉøÈÑÄÈÑÅÈÑÉÈÑÖÈÑÜÈÑáÈÑàÈÑâÈÑäÈÑãÈÑåÈÑçÈÑéÈÑèÈÑêÈÑëÈÑíÈÑìÈÑîÈÑïÈÑñÈÑóÈÑòÈÑöÈÑõÈÑúÔøΩÈÑùÈÑüÈÑ†ÈÑ°ÈÑ§ÈÑ•ÈÑ¶ÈÑßÈÑ®ÈÑ©ÈÑ™ÈÑ´ÈÑ¨ÈÑ≠ÈÑÆÈÑ∞ÈÑ≤ÈÑ≥ÈÑ¥ÈÑµÈÑ∂ÈÑ∑ÈÑ∏ÈÑ∫ÈÑªÈÑºÈÑΩÈÑæÈÑøÈÖÄÈÖÅÈÖÇÈÖÑÂî∑ÂïñÂïµÂï∂Âï∑Âî≥Âî∞ÂïúÂñãÂóíÂñÉÂñ±ÂñπÂñàÂñÅÂñüÂïæÂóñÂñëÂïªÂóüÂñΩÂñæÂñîÂñôÂó™Âó∑ÂóâÂòüÂóëÂó´Âó¨ÂóîÂó¶ÂóùÂóÑÂóØÂó•Âó≤Âó≥ÂóåÂóçÂó®ÂóµÂó§ËæîÂòûÂòàÂòåÂòÅÂò§Âò£ÂóæÂòÄÂòßÂò≠ÂôòÂòπÂôóÂò¨ÂôçÂô¢ÂôôÂôúÂôåÂôîÂöÜÂô§Âô±Âô´ÂôªÂôºÂöÖÂöìÂöØÂõîÂõóÂõùÂõ°ÂõµÂõ´ÂõπÂõøÂúÑÂúäÂúâÂúúÂ∏èÂ∏ôÂ∏îÂ∏ëÂ∏±Â∏ªÂ∏ºÔøΩ".split("");
    for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) {
        e[D[224][j]] = 57344 + j;
        d[57344 + j] = D[224][j];
    };
    D[225] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÖÖÈÖáÈÖàÈÖëÈÖìÈÖîÈÖïÈÖñÈÖòÈÖôÈÖõÈÖúÈÖüÈÖ†ÈÖ¶ÈÖßÈÖ®ÈÖ´ÈÖ≠ÈÖ≥ÈÖ∫ÈÖªÈÖºÈÜÄÈÜÅÈÜÇÈÜÉÈÜÑÈÜÜÈÜàÈÜäÈÜéÈÜèÈÜìÈÜîÈÜïÈÜñÈÜóÈÜòÈÜôÈÜúÈÜùÈÜûÈÜüÈÜ†ÈÜ°ÈÜ§ÈÜ•ÈÜ¶ÈÜßÈÜ®ÈÜ©ÈÜ´ÈÜ¨ÈÜ∞ÈÜ±ÈÜ≤ÈÜ≥ÈÜ∂ÈÜ∑ÈÜ∏ÈÜπÈÜªÔøΩÈÜºÈÜΩÈÜæÈÜøÈáÄÈáÅÈáÇÈáÉÈáÑÈáÖÈáÜÈáàÈáãÈáêÈáíÈáìÈáîÈáïÈáñÈáóÈáòÈáôÈáöÈáõÈáùÈáûÈáüÈá†Èá°Èá¢Èá£Èá§Èá•Â∏∑ÂπÑÂπîÂπõÂπûÂπ°Â≤åÂ±∫Â≤çÂ≤êÂ≤ñÂ≤àÂ≤òÂ≤ôÂ≤ëÂ≤öÂ≤úÂ≤µÂ≤¢Â≤ΩÂ≤¨Â≤´Â≤±Â≤£Â≥ÅÂ≤∑Â≥ÑÂ≥íÂ≥§Â≥ãÂ≥•Â¥ÇÂ¥ÉÂ¥ßÂ¥¶Â¥ÆÂ¥§Â¥ûÂ¥ÜÂ¥õÂµòÂ¥æÂ¥¥Â¥ΩÂµ¨ÂµõÂµØÂµùÂµ´ÂµãÂµäÂµ©Âµ¥Â∂ÇÂ∂ôÂ∂ùË±≥Â∂∑Â∑ÖÂΩ≥ÂΩ∑ÂæÇÂæáÂæâÂæåÂæïÂæôÂæúÂæ®Âæ≠ÂæµÂæºË°¢ÂΩ°Áä≠Áä∞Áä¥Áä∑Áä∏ÁãÉÁãÅÁãéÁãçÁãíÁã®ÁãØÁã©Áã≤Áã¥Áã∑ÁåÅÁã≥ÁåÉÁã∫ÔøΩ".split("");
    for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) {
        e[D[225][j]] = 57600 + j;
        d[57600 + j] = D[225][j];
    };
    D[226] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈá¶ÈáßÈá®Èá©Èá™Èá´Èá¨Èá≠ÈáÆÈáØÈá∞Èá±Èá≤Èá≥Èá¥ÈáµÈá∂Èá∑Èá∏ÈáπÈá∫ÈáªÈáºÈáΩÈáæÈáøÈàÄÈàÅÈàÇÈàÉÈàÑÈàÖÈàÜÈàáÈààÈàâÈàäÈàãÈàåÈàçÈàéÈàèÈàêÈàëÈàíÈàìÈàîÈàïÈàñÈàóÈàòÈàôÈàöÈàõÈàúÈàùÈàûÈàüÈà†Èà°Èà¢Èà£Èà§ÔøΩÈà•Èà¶ÈàßÈà®Èà©Èà™Èà´Èà¨Èà≠ÈàÆÈàØÈà∞Èà±Èà≤Èà≥Èà¥ÈàµÈà∂Èà∑Èà∏ÈàπÈà∫ÈàªÈàºÈàΩÈàæÈàøÈâÄÈâÅÈâÇÈâÉÈâÑÈâÖÁãªÁåóÁåìÁå°ÁåäÁåûÁåùÁåïÁå¢ÁåπÁå•Áå¨Áå∏Áå±ÁçêÁççÁçóÁç†Áç¨ÁçØÁçæËàõÂ§•È£ßÂ§§Â§ÇÈ•£È•ßÈ•®È•©È•™È•´È•¨È•¥È•∑È•ΩÈ¶ÄÈ¶ÑÈ¶áÈ¶äÈ¶çÈ¶êÈ¶ëÈ¶ìÈ¶îÈ¶ïÂ∫ÄÂ∫ëÂ∫ãÂ∫ñÂ∫•Â∫†Â∫πÂ∫µÂ∫æÂ∫≥ËµìÂªíÂªëÂªõÂª®Âª™ËÜ∫ÂøÑÂøâÂøñÂøèÊÄÉÂøÆÊÄÑÂø°Âø§ÂøæÊÄÖÊÄÜÂø™Âø≠Âø∏ÊÄôÊÄµÊÄ¶ÊÄõÊÄèÊÄçÊÄ©ÊÄ´ÊÄäÊÄøÊÄ°ÊÅ∏ÊÅπÊÅªÊÅ∫ÊÅÇÔøΩ".split("");
    for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) {
        e[D[226][j]] = 57856 + j;
        d[57856 + j] = D[226][j];
    };
    D[227] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈâÜÈâáÈâàÈââÈâäÈâãÈâåÈâçÈâéÈâèÈâêÈâëÈâíÈâìÈâîÈâïÈâñÈâóÈâòÈâôÈâöÈâõÈâúÈâùÈâûÈâüÈâ†Èâ°Èâ¢Èâ£Èâ§Èâ•Èâ¶ÈâßÈâ®Èâ©Èâ™Èâ´Èâ¨Èâ≠ÈâÆÈâØÈâ∞Èâ±Èâ≤Èâ≥ÈâµÈâ∂Èâ∑Èâ∏ÈâπÈâ∫ÈâªÈâºÈâΩÈâæÈâøÈäÄÈäÅÈäÇÈäÉÈäÑÈäÖÔøΩÈäÜÈäáÈäàÈäâÈääÈäãÈäåÈäçÈäèÈäêÈäëÈäíÈäìÈäîÈäïÈäñÈäóÈäòÈäôÈäöÈäõÈäúÈäùÈäûÈäüÈä†Èä°Èä¢Èä£Èä§Èä•Èä¶ÈäßÊÅ™ÊÅΩÊÇñÊÇöÊÇ≠ÊÇùÊÇÉÊÇíÊÇåÊÇõÊÉ¨ÊÇªÊÇ±ÊÉùÊÉòÊÉÜÊÉöÊÇ¥ÊÑ†ÊÑ¶ÊÑïÊÑ£ÊÉ¥ÊÑÄÊÑéÊÑ´ÊÖäÊÖµÊÜ¨ÊÜîÊÜßÊÜ∑ÊáîÊáµÂøùÈö≥Èó©Èó´Èó±Èó≥ÈóµÈó∂ÈóºÈóæÈòÉÈòÑÈòÜÈòàÈòäÈòãÈòåÈòçÈòèÈòíÈòïÈòñÈòóÈòôÈòö‰∏¨ÁàøÊàïÊ∞µÊ±îÊ±úÊ±äÊ≤£Ê≤ÖÊ≤êÊ≤îÊ≤åÊ±®Ê±©Ê±¥Ê±∂Ê≤ÜÊ≤©Ê≥êÊ≥îÊ≤≠Ê≥∑Ê≥∏Ê≥±Ê≥óÊ≤≤Ê≥†Ê≥ñÊ≥∫Ê≥´Ê≥ÆÊ≤±Ê≥ìÊ≥ØÊ≥æÔøΩ".split("");
    for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) {
        e[D[227][j]] = 58112 + j;
        d[58112 + j] = D[227][j];
    };
    D[228] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈä®Èä©Èä™Èä´Èä¨Èä≠ÈäØÈä∞Èä±Èä≤Èä≥Èä¥ÈäµÈä∂Èä∑Èä∏ÈäπÈä∫ÈäªÈäºÈäΩÈäæÈäøÈãÄÈãÅÈãÇÈãÉÈãÑÈãÖÈãÜÈãáÈãâÈãäÈããÈãåÈãçÈãéÈãèÈãêÈãëÈãíÈãìÈãîÈãïÈãñÈãóÈãòÈãôÈãöÈãõÈãúÈãùÈãûÈãüÈã†Èã°Èã¢Èã£Èã§Èã•Èã¶ÈãßÈã®ÔøΩÈã©Èã™Èã´Èã¨Èã≠ÈãÆÈãØÈã∞Èã±Èã≤Èã≥Èã¥ÈãµÈã∂Èã∑Èã∏ÈãπÈã∫ÈãªÈãºÈãΩÈãæÈãøÈåÄÈåÅÈåÇÈåÉÈåÑÈåÖÈåÜÈåáÈåàÈåâÊ¥πÊ¥ßÊ¥åÊµÉÊµàÊ¥áÊ¥ÑÊ¥ôÊ¥éÊ¥´ÊµçÊ¥ÆÊ¥µÊ¥öÊµèÊµíÊµîÊ¥≥Ê∂ëÊµØÊ∂ûÊ∂†ÊµûÊ∂ìÊ∂îÊµúÊµ†ÊµºÊµ£Ê∏öÊ∑áÊ∑ÖÊ∑ûÊ∏éÊ∂øÊ∑†Ê∏ëÊ∑¶Ê∑ùÊ∑ôÊ∏ñÊ∂´Ê∏åÊ∂ÆÊ∏´ÊπÆÊπéÊπ´Ê∫≤ÊπüÊ∫ÜÊπìÊπîÊ∏≤Ê∏•ÊπÑÊªüÊ∫±Ê∫òÊª†Êº≠Êª¢Ê∫•Ê∫ßÊ∫ΩÊ∫ªÊ∫∑ÊªóÊ∫¥ÊªèÊ∫èÊªÇÊ∫üÊΩ¢ÊΩÜÊΩáÊº§ÊºïÊªπÊºØÊº∂ÊΩãÊΩ¥Êº™ÊºâÊº©ÊæâÊæçÊæåÊΩ∏ÊΩ≤ÊΩºÊΩ∫ÊøëÔøΩ".split("");
    for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) {
        e[D[228][j]] = 58368 + j;
        d[58368 + j] = D[228][j];
    };
    D[229] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈåäÈåãÈååÈåçÈåéÈåèÈåêÈåëÈåíÈåìÈåîÈåïÈåñÈåóÈåòÈåôÈåöÈåõÈåúÈåùÈåûÈåüÈå†Èå°Èå¢Èå£Èå§Èå•Èå¶ÈåßÈå®Èå©Èå™Èå´Èå¨Èå≠ÈåÆÈåØÈå∞Èå±Èå≤Èå≥Èå¥ÈåµÈå∂Èå∑Èå∏ÈåπÈå∫ÈåªÈåºÈåΩÈåøÈçÄÈçÅÈçÇÈçÉÈçÑÈçÖÈçÜÈçáÈçàÈçâÔøΩÈçäÈçãÈçåÈççÈçéÈçèÈçêÈçëÈçíÈçìÈçîÈçïÈçñÈçóÈçòÈçôÈçöÈçõÈçúÈçùÈçûÈçüÈç†Èç°Èç¢Èç£Èç§Èç•Èç¶ÈçßÈç®Èç©Èç´ÊøâÊæßÊæπÊæ∂ÊøÇÊø°ÊøÆÊøûÊø†ÊøØÁÄöÁÄ£ÁÄõÁÄπÁÄµÁÅèÁÅûÂÆÄÂÆÑÂÆïÂÆìÂÆ•ÂÆ∏ÁîØÈ™ûÊê¥ÂØ§ÂØÆË§∞ÂØ∞ËπáË¨áËæ∂ËøìËøïËø•ËøÆËø§Ëø©Ëø¶Ëø≥Ëø®ÈÄÖÈÄÑÈÄãÈÄ¶ÈÄëÈÄçÈÄñÈÄ°ÈÄµÈÄ∂ÈÄ≠ÈÄØÈÅÑÈÅëÈÅíÈÅêÈÅ®ÈÅòÈÅ¢ÈÅõÊöπÈÅ¥ÈÅΩÈÇÇÈÇàÈÇÉÈÇãÂΩêÂΩóÂΩñÂΩòÂ∞ªÂí´Â±êÂ±ôÂ≠±Â±£Â±¶ÁæºÂº™Âº©Âº≠Ëâ¥ÂººÈ¨ªÂ±ÆÂ¶ÅÂ¶ÉÂ¶çÂ¶©Â¶™Â¶£ÔøΩ".split("");
    for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) {
        e[D[229][j]] = 58624 + j;
        d[58624 + j] = D[229][j];
    };
    D[230] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈç¨Èç≠ÈçÆÈçØÈç∞Èç±Èç≤Èç≥Èç¥ÈçµÈç∂Èç∑Èç∏ÈçπÈç∫ÈçªÈçºÈçΩÈçæÈçøÈéÄÈéÅÈéÇÈéÉÈéÑÈéÖÈéÜÈéáÈéàÈéâÈéäÈéãÈéåÈéçÈééÈéêÈéëÈéíÈéìÈéîÈéïÈéñÈéóÈéòÈéôÈéöÈéõÈéúÈéùÈéûÈéüÈé†Èé°Èé¢Èé£Èé§Èé•Èé¶ÈéßÈé®Èé©Èé™Èé´ÔøΩÈé¨Èé≠ÈéÆÈéØÈé∞Èé±Èé≤Èé≥Èé¥ÈéµÈé∂Èé∑Èé∏ÈéπÈé∫ÈéªÈéºÈéΩÈéæÈéøÈèÄÈèÅÈèÇÈèÉÈèÑÈèÖÈèÜÈèáÈèàÈèâÈèãÈèåÈèçÂ¶óÂßäÂ¶´Â¶ûÂ¶§ÂßíÂ¶≤Â¶ØÂßóÂ¶æÂ®ÖÂ®ÜÂßùÂ®àÂß£ÂßòÂßπÂ®åÂ®âÂ®≤Â®¥Â®ëÂ®£Â®ìÂ©ÄÂ©ßÂ©äÂ©ïÂ®ºÂ©¢Â©µËÉ¨Â™™Â™õÂ©∑Â©∫Â™æÂ´´Â™≤Â´íÂ´îÂ™∏Â´†Â´£Â´±Â´ñÂ´¶Â´òÂ´úÂ¨âÂ¨óÂ¨ñÂ¨≤Â¨∑Â≠ÄÂ∞ïÂ∞úÂ≠öÂ≠•Â≠≥Â≠ëÂ≠ìÂ≠¢È©µÈ©∑È©∏È©∫È©øÈ©ΩÈ™ÄÈ™ÅÈ™ÖÈ™àÈ™äÈ™êÈ™íÈ™ìÈ™ñÈ™òÈ™õÈ™úÈ™ùÈ™üÈ™†È™¢È™£È™•È™ßÁ∫üÁ∫°Á∫£Á∫•Á∫®Á∫©ÔøΩ".split("");
    for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) {
        e[D[230][j]] = 58880 + j;
        d[58880 + j] = D[230][j];
    };
    D[231] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈèéÈèèÈèêÈèëÈèíÈèìÈèîÈèïÈèóÈèòÈèôÈèöÈèõÈèúÈèùÈèûÈèüÈè†Èè°Èè¢Èè£Èè§Èè•Èè¶ÈèßÈè®Èè©Èè™Èè´Èè¨Èè≠ÈèÆÈèØÈè∞Èè±Èè≤Èè≥Èè¥ÈèµÈè∂Èè∑Èè∏ÈèπÈè∫ÈèªÈèºÈèΩÈèæÈèøÈêÄÈêÅÈêÇÈêÉÈêÑÈêÖÈêÜÈêáÈêàÈêâÈêäÈêãÈêåÈêçÔøΩÈêéÈêèÈêêÈêëÈêíÈêìÈêîÈêïÈêñÈêóÈêòÈêôÈêöÈêõÈêúÈêùÈêûÈêüÈê†Èê°Èê¢Èê£Èê§Èê•Èê¶ÈêßÈê®Èê©Èê™Èê´Èê¨Èê≠ÈêÆÁ∫≠Á∫∞Á∫æÁªÄÁªÅÁªÇÁªâÁªãÁªåÁªêÁªîÁªóÁªõÁª†Áª°Áª®Áª´ÁªÆÁªØÁª±Áª≤ÁºçÁª∂Áª∫ÁªªÁªæÁºÅÁºÇÁºÉÁºáÁºàÁºãÁºåÁºèÁºëÁºíÁºóÁºôÁºúÁºõÁºüÁº°Áº¢Áº£Áº§Áº•Áº¶ÁºßÁº™Áº´Áº¨Áº≠ÁºØÁº∞Áº±Áº≤Áº≥ÁºµÂπ∫ÁïøÂ∑õÁîæÈÇïÁééÁéëÁéÆÁé¢ÁéüÁèèÁèÇÁèëÁé∑Áé≥ÁèÄÁèâÁèàÁè•ÁèôÈ°ºÁêäÁè©ÁèßÁèûÁé∫Áè≤ÁêèÁê™ÁëõÁê¶Áê•Áê®Áê∞ÁêÆÁê¨ÔøΩ".split("");
    for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) {
        e[D[231][j]] = 59136 + j;
        d[59136 + j] = D[231][j];
    };
    D[232] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈêØÈê∞Èê±Èê≤Èê≥Èê¥ÈêµÈê∂Èê∑Èê∏ÈêπÈê∫ÈêªÈêºÈêΩÈêøÈëÄÈëÅÈëÇÈëÉÈëÑÈëÖÈëÜÈëáÈëàÈëâÈëäÈëãÈëåÈëçÈëéÈëèÈëêÈëëÈëíÈëìÈëîÈëïÈëñÈëóÈëòÈëôÈëöÈëõÈëúÈëùÈëûÈëüÈë†Èë°Èë¢Èë£Èë§Èë•Èë¶ÈëßÈë®Èë©Èë™Èë¨Èë≠ÈëÆÈëØÔøΩÈë∞Èë±Èë≤Èë≥Èë¥ÈëµÈë∂Èë∑Èë∏ÈëπÈë∫ÈëªÈëºÈëΩÈëæÈëøÈíÄÈíÅÈíÇÈíÉÈíÑÈíëÈíñÈíòÈìáÈìèÈììÈìîÈìöÈì¶ÈìªÈîúÈî†ÁêõÁêöÁëÅÁëúÁëóÁëïÁëôÁë∑Áë≠ÁëæÁíúÁíéÁíÄÁíÅÁíáÁíãÁíûÁí®Áí©ÁíêÁíßÁìíÁí∫Èü™Èü´Èü¨ÊùåÊùìÊùûÊùàÊù©Êû•ÊûáÊù™Êù≥ÊûòÊûßÊùµÊû®ÊûûÊû≠ÊûãÊù∑ÊùºÊü∞Ê†âÊüòÊ†äÊü©Êû∞Ê†åÊüôÊûµÊüöÊû≥ÊüùÊ†ÄÊüÉÊû∏Êü¢Ê†éÊüÅÊüΩÊ†≤Ê†≥Ê°†Ê°°Ê°éÊ°¢Ê°ÑÊ°§Ê¢ÉÊ†ùÊ°ïÊ°¶Ê°ÅÊ°ßÊ°ÄÊ†æÊ°äÊ°âÊ†©Ê¢µÊ¢èÊ°¥Ê°∑Ê¢ìÊ°´Ê£ÇÊ•ÆÊ£ºÊ§üÊ§†Ê£πÔøΩ".split("");
    for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) {
        e[D[232][j]] = 59392 + j;
        d[59392 + j] = D[232][j];
    };
    D[233] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈîßÈî≥ÈîΩÈïÉÈïàÈïãÈïïÈïöÈï†ÈïÆÈï¥ÈïµÈï∑Èï∏ÈïπÈï∫ÈïªÈïºÈïΩÈïæÈñÄÈñÅÈñÇÈñÉÈñÑÈñÖÈñÜÈñáÈñàÈñâÈñäÈñãÈñåÈñçÈñéÈñèÈñêÈñëÈñíÈñìÈñîÈñïÈññÈñóÈñòÈñôÈñöÈñõÈñúÈñùÈñûÈñüÈñ†Èñ°Èñ¢Èñ£Èñ§Èñ•Èñ¶ÈñßÈñ®Èñ©Èñ™ÔøΩÈñ´Èñ¨Èñ≠ÈñÆÈñØÈñ∞Èñ±Èñ≤Èñ≥Èñ¥ÈñµÈñ∂Èñ∑Èñ∏ÈñπÈñ∫ÈñªÈñºÈñΩÈñæÈñøÈóÄÈóÅÈóÇÈóÉÈóÑÈóÖÈóÜÈóáÈóàÈóâÈóäÈóãÊ§§Ê£∞Ê§ãÊ§ÅÊ•óÊ££Ê§êÊ•±Ê§πÊ•†Ê•ÇÊ•ùÊ¶ÑÊ•´Ê¶ÄÊ¶òÊ•∏Ê§¥ÊßåÊ¶áÊ¶àÊßéÊ¶âÊ•¶Ê•£Ê•πÊ¶õÊ¶ßÊ¶ªÊ¶´Ê¶≠ÊßîÊ¶±ÊßÅÊßäÊßüÊ¶ïÊß†Ê¶çÊßøÊ®ØÊß≠Ê®óÊ®òÊ©•Êß≤Ê©ÑÊ®æÊ™†Ê©êÊ©õÊ®µÊ™éÊ©πÊ®ΩÊ®®Ê©òÊ©ºÊ™ëÊ™êÊ™©Ê™óÊ™´Áå∑ÁçíÊÆÅÊÆÇÊÆáÊÆÑÊÆíÊÆìÊÆçÊÆöÊÆõÊÆ°ÊÆ™ËΩ´ËΩ≠ËΩ±ËΩ≤ËΩ≥ËΩµËΩ∂ËΩ∏ËΩ∑ËΩπËΩ∫ËΩºËΩæËæÅËæÇËæÑËæáËæãÔøΩ".split("");
    for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) {
        e[D[233][j]] = 59648 + j;
        d[59648 + j] = D[233][j];
    };
    D[234] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈóåÈóçÈóéÈóèÈóêÈóëÈóíÈóìÈóîÈóïÈóñÈóóÈóòÈóôÈóöÈóõÈóúÈóùÈóûÈóüÈó†Èó°Èó¢Èó£Èó§Èó•Èó¶ÈóßÈó¨ÈóøÈòáÈòìÈòòÈòõÈòûÈò†Èò£Èò§Èò•Èò¶ÈòßÈò®Èò©Èò´Èò¨Èò≠ÈòØÈò∞Èò∑Èò∏ÈòπÈò∫ÈòæÈôÅÈôÉÈôäÈôéÈôèÈôëÈôíÈôìÈôñÈôóÔøΩÈôòÈôôÈôöÈôúÈôùÈôûÈô†Èô£Èô•Èô¶Èô´Èô≠ÈôÆÈôØÈô∞Èô±Èô≥Èô∏ÈôπÈô∫ÈôªÈôºÈôΩÈôæÈôøÈöÄÈöÅÈöÇÈöÉÈöÑÈöáÈöâÈöäËæçËæéËæèËæòËæöËªéÊàãÊàóÊàõÊàüÊà¢Êà°Êà•Êà§Êà¨ËáßÁìØÁì¥ÁìøÁîèÁîëÁîìÊî¥ÊóÆÊóØÊó∞ÊòäÊòôÊù≤ÊòÉÊòïÊòÄÁÇÖÊõ∑ÊòùÊò¥Êò±Êò∂ÊòµËÄÜÊôüÊôîÊôÅÊôèÊôñÊô°ÊôóÊô∑ÊöÑÊöåÊößÊöùÊöæÊõõÊõúÊõ¶Êõ©Ë¥≤Ë¥≥Ë¥∂Ë¥ªË¥ΩËµÄËµÖËµÜËµàËµâËµáËµçËµïËµôËßáËßäËßãËßåËßéËßèËßêËßëÁâÆÁäüÁâùÁâ¶ÁâØÁâæÁâøÁäÑÁäãÁäçÁäèÁäíÊåàÊå≤Êé∞ÔøΩ".split("");
    for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) {
        e[D[234][j]] = 59904 + j;
        d[59904 + j] = D[234][j];
    };
    D[235] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈöåÈöéÈöëÈöíÈöìÈöïÈöñÈööÈöõÈöùÈöûÈöüÈö†Èö°Èö¢Èö£Èö§Èö•Èö¶Èö®Èö©Èö™Èö´Èö¨Èö≠ÈöÆÈöØÈö±Èö≤Èö¥ÈöµÈö∑Èö∏Èö∫ÈöªÈöøÈõÇÈõÉÈõàÈõäÈõãÈõêÈõëÈõìÈõîÈõñÈõóÈõòÈõôÈõöÈõõÈõúÈõùÈõûÈõüÈõ°Èõ¢Èõ£Èõ§Èõ•Èõ¶ÈõßÈõ´ÔøΩÈõ¨Èõ≠ÈõÆÈõ∞Èõ±Èõ≤Èõ¥ÈõµÈõ∏Èõ∫ÈõªÈõºÈõΩÈõøÈúÇÈúÉÈúÖÈúäÈúãÈúåÈúêÈúëÈúíÈúîÈúïÈúóÈúòÈúôÈúöÈúõÈúùÈúüÈú†ÊêøÊìòËÄÑÊØ™ÊØ≥ÊØΩÊØµÊØπÊ∞ÖÊ∞áÊ∞ÜÊ∞çÊ∞ïÊ∞òÊ∞ôÊ∞öÊ∞°Ê∞©Ê∞§Ê∞™Ê∞≤ÊîµÊïïÊï´ÁâçÁâíÁâñÁà∞Ëô¢ÂàñËÇüËÇúËÇìËÇºÊúäËÇΩËÇ±ËÇ´ËÇ≠ËÇ¥ËÇ∑ËÉßËÉ®ËÉ©ËÉ™ËÉõËÉÇËÉÑËÉôËÉçËÉóÊúêËÉùËÉ´ËÉ±ËÉ¥ËÉ≠ËÑçËÑéËÉ≤ËÉºÊúïËÑíË±öËÑ∂ËÑûËÑ¨ËÑòËÑ≤ËÖàËÖåËÖìËÖ¥ËÖôËÖöËÖ±ËÖ†ËÖ©ËÖºËÖΩËÖ≠ËÖßÂ°çÂ™µËÜàËÜÇËÜëÊªïËÜ£ËÜ™ËáåÊú¶ËáäËÜªÔøΩ".split("");
    for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) {
        e[D[235][j]] = 60160 + j;
        d[60160 + j] = D[235][j];
    };
    D[236] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈú°Èú¢Èú£Èú§Èú•Èú¶ÈúßÈú®Èú©Èú´Èú¨ÈúÆÈúØÈú±Èú≥Èú¥ÈúµÈú∂Èú∑Èú∫ÈúªÈúºÈúΩÈúøÈùÄÈùÅÈùÇÈùÉÈùÑÈùÖÈùÜÈùáÈùàÈùâÈùäÈùãÈùåÈùçÈùéÈùèÈùêÈùëÈùîÈùïÈùóÈùòÈùöÈùúÈùùÈùüÈù£Èù§Èù¶ÈùßÈù®Èù™Èù´Èù¨Èù≠ÈùÆÈùØÈù∞Èù±ÔøΩÈù≤ÈùµÈù∑Èù∏ÈùπÈù∫ÈùªÈùΩÈùæÈùøÈûÄÈûÅÈûÇÈûÉÈûÑÈûÜÈûáÈûàÈûâÈûäÈûåÈûéÈûèÈûêÈûìÈûïÈûñÈûóÈûôÈûöÈûõÈûúÈûùËáÅËÜ¶Ê¨§Ê¨∑Ê¨πÊ≠ÉÊ≠ÜÊ≠ôÈ£ëÈ£íÈ£ìÈ£ïÈ£ôÈ£öÊÆ≥ÂΩÄÊØÇËß≥ÊñêÈΩëÊñìÊñºÊóÜÊóÑÊóÉÊóåÊóéÊóíÊóñÁÇÄÁÇúÁÇñÁÇùÁÇªÁÉÄÁÇ∑ÁÇ´ÁÇ±ÁÉ®ÁÉäÁÑêÁÑìÁÑñÁÑØÁÑ±ÁÖ≥ÁÖúÁÖ®ÁÖÖÁÖ≤ÁÖäÁÖ∏ÁÖ∫ÁÜòÁÜ≥ÁÜµÁÜ®ÁÜ†Áá†ÁáîÁáßÁáπÁàùÁà®ÁÅ¨ÁÑòÁÖ¶ÁÜπÊàæÊàΩÊâÉÊâàÊââÁ§ªÁ•ÄÁ•ÜÁ•âÁ•õÁ•úÁ•ìÁ•öÁ•¢Á•óÁ•†Á•ØÁ•ßÁ•∫Á¶ÖÁ¶äÁ¶öÁ¶ßÁ¶≥ÂøëÂøêÔøΩ".split("");
    for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) {
        e[D[236][j]] = 60416 + j;
        d[60416 + j] = D[236][j];
    };
    D[237] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈûûÈûüÈû°Èû¢Èû§Èû•Èû¶ÈûßÈû®Èû©Èû™Èû¨ÈûÆÈû∞Èû±Èû≥ÈûµÈû∂Èû∑Èû∏ÈûπÈû∫ÈûªÈûºÈûΩÈûæÈûøÈüÄÈüÅÈüÇÈüÉÈüÑÈüÖÈüÜÈüáÈüàÈüâÈüäÈüãÈüåÈüçÈüéÈüèÈüêÈüëÈüíÈüìÈüîÈüïÈüñÈüóÈüòÈüôÈüöÈüõÈüúÈüùÈüûÈüüÈü†Èü°Èü¢Èü£ÔøΩÈü§Èü•Èü®ÈüÆÈüØÈü∞Èü±Èü≤Èü¥Èü∑Èü∏ÈüπÈü∫ÈüªÈüºÈüΩÈüæÈüøÈ†ÄÈ†ÅÈ†ÇÈ†ÉÈ†ÑÈ†ÖÈ†ÜÈ†áÈ†àÈ†âÈ†äÈ†ãÈ†åÈ†çÈ†éÊÄºÊÅùÊÅöÊÅßÊÅÅÊÅôÊÅ£ÊÇ´ÊÑÜÊÑçÊÖùÊÜ©ÊÜùÊáãÊáëÊàÜËÇÄËÅøÊ≤ìÊ≥∂Ê∑ºÁü∂Áü∏Á†ÄÁ†âÁ†óÁ†òÁ†ëÊñ´Á†≠Á†úÁ†ùÁ†πÁ†∫Á†ªÁ†üÁ†ºÁ†•Á†¨Á†£Á†©Á°éÁ°≠Á°ñÁ°óÁ†¶Á°êÁ°áÁ°åÁ°™Á¢õÁ¢ìÁ¢öÁ¢áÁ¢úÁ¢°Á¢£Á¢≤Á¢πÁ¢•Á£îÁ£ôÁ£âÁ£¨Á£≤Á§ÖÁ£¥Á§ìÁ§§Á§ûÁ§¥ÈæõÈªπÈªªÈªºÁõ±ÁúÑÁúçÁõπÁúáÁúàÁúöÁú¢ÁúôÁú≠Áú¶ÁúµÁú∏ÁùêÁùëÁùáÁùÉÁùöÁù®ÔøΩ".split("");
    for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) {
        e[D[237][j]] = 60672 + j;
        d[60672 + j] = D[237][j];
    };
    D[238] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ†èÈ†êÈ†ëÈ†íÈ†ìÈ†îÈ†ïÈ†ñÈ†óÈ†òÈ†ôÈ†öÈ†õÈ†úÈ†ùÈ†ûÈ†üÈ††È†°È†¢È†£È†§È†•È†¶È†ßÈ†®È†©È†™È†´È†¨È†≠È†ÆÈ†ØÈ†∞È†±È†≤È†≥È†¥È†µÈ†∂È†∑È†∏È†πÈ†∫È†ªÈ†ºÈ†ΩÈ†æÈ†øÈ°ÄÈ°ÅÈ°ÇÈ°ÉÈ°ÑÈ°ÖÈ°ÜÈ°áÈ°àÈ°âÈ°äÈ°ãÈ°åÈ°çÔøΩÈ°éÈ°èÈ°êÈ°ëÈ°íÈ°ìÈ°îÈ°ïÈ°ñÈ°óÈ°òÈ°ôÈ°öÈ°õÈ°úÈ°ùÈ°ûÈ°üÈ°†È°°È°¢È°£È°§È°•È°¶È°ßÈ°®È°©È°™È°´È°¨È°≠È°ÆÁù¢Áù•ÁùøÁûçÁùΩÁûÄÁûåÁûëÁûüÁû†Áû∞ÁûµÁûΩÁî∫ÁïÄÁïéÁïãÁïàÁïõÁï≤ÁïπÁñÉÁΩòÁΩ°ÁΩüË©àÁΩ®ÁΩ¥ÁΩ±ÁΩπÁæÅÁΩæÁõçÁõ•Ë†≤ÈíÖÈíÜÈíáÈíãÈíäÈíåÈíçÈíèÈíêÈíîÈíóÈíïÈíöÈíõÈíúÈí£Èí§Èí´Èí™Èí≠Èí¨ÈíØÈí∞Èí≤Èí¥Èí∂Èí∑Èí∏ÈíπÈí∫ÈíºÈíΩÈíøÈìÑÈìàÈìâÈìäÈìãÈìåÈìçÈìéÈìêÈìëÈìíÈìïÈìñÈìóÈìôÈìòÈìõÈìûÈìüÈì†Èì¢Èì§Èì•ÈìßÈì®Èì™ÔøΩ".split("");
    for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) {
        e[D[238][j]] = 60928 + j;
        d[60928 + j] = D[238][j];
    };
    D[239] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ°ØÈ°∞È°±È°≤È°≥È°¥È¢ãÈ¢éÈ¢íÈ¢ïÈ¢ôÈ¢£È¢®È¢©È¢™È¢´È¢¨È¢≠È¢ÆÈ¢ØÈ¢∞È¢±È¢≤È¢≥È¢¥È¢µÈ¢∂È¢∑È¢∏È¢πÈ¢∫È¢ªÈ¢ºÈ¢ΩÈ¢æÈ¢øÈ£ÄÈ£ÅÈ£ÇÈ£ÉÈ£ÑÈ£ÖÈ£ÜÈ£áÈ£àÈ£âÈ£äÈ£ãÈ£åÈ£çÈ£èÈ£êÈ£îÈ£ñÈ£óÈ£õÈ£úÈ£ùÈ£†È£°È£¢È££È£§ÔøΩÈ£•È£¶È£©È£™È£´È£¨È£≠È£ÆÈ£ØÈ£∞È£±È£≤È£≥È£¥È£µÈ£∂È£∑È£∏È£πÈ£∫È£ªÈ£ºÈ£ΩÈ£æÈ£øÈ§ÄÈ§ÅÈ§ÇÈ§ÉÈ§ÑÈ§ÖÈ§ÜÈ§áÈì©Èì´ÈìÆÈìØÈì≥Èì¥ÈìµÈì∑ÈìπÈìºÈìΩÈìøÈîÉÈîÇÈîÜÈîáÈîâÈîäÈîçÈîéÈîèÈîíÈîìÈîîÈîïÈîñÈîòÈîõÈîùÈîûÈîüÈî¢Èî™Èî´Èî©Èî¨Èî±Èî≤Èî¥Èî∂Èî∑Èî∏ÈîºÈîæÈîøÈïÇÈîµÈïÑÈïÖÈïÜÈïâÈïåÈïéÈïèÈïíÈïìÈïîÈïñÈïóÈïòÈïôÈïõÈïûÈïüÈïùÈï°Èï¢Èï§Èï•Èï¶ÈïßÈï®Èï©Èï™Èï´Èï¨ÈïØÈï±Èï≤Èï≥Èî∫ÁüßÁü¨ÈõâÁßïÁß≠Áß£Áß´Á®ÜÂµáÁ®ÉÁ®ÇÁ®ûÁ®îÔøΩ".split("");
    for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) {
        e[D[239][j]] = 61184 + j;
        d[61184 + j] = D[239][j];
    };
    D[240] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ§àÈ§âÈ§äÈ§ãÈ§åÈ§éÈ§èÈ§ëÈ§íÈ§ìÈ§îÈ§ïÈ§ñÈ§óÈ§òÈ§ôÈ§öÈ§õÈ§úÈ§ùÈ§ûÈ§üÈ§†È§°È§¢È§£È§§È§•È§¶È§ßÈ§®È§©È§™È§´È§¨È§≠È§ØÈ§∞È§±È§≤È§≥È§¥È§µÈ§∂È§∑È§∏È§πÈ§∫È§ªÈ§ºÈ§ΩÈ§æÈ§øÈ•ÄÈ•ÅÈ•ÇÈ•ÉÈ•ÑÈ•ÖÈ•ÜÈ•áÈ•àÈ•âÔøΩÈ•äÈ•ãÈ•åÈ•çÈ•éÈ•èÈ•êÈ•ëÈ•íÈ•ìÈ•ñÈ•óÈ•òÈ•ôÈ•öÈ•õÈ•úÈ•ùÈ•ûÈ•üÈ•†È•°È•¢È•§È•¶È•≥È•∏È•πÈ•ªÈ•æÈ¶ÇÈ¶ÉÈ¶âÁ®πÁ®∑Á©ëÈªèÈ¶•Á©∞ÁöàÁöéÁöìÁöôÁö§ÁìûÁì†Áî¨È∏†È∏¢È∏®È∏©È∏™È∏´È∏¨È∏≤È∏±È∏∂È∏∏È∏∑È∏πÈ∏∫È∏æÈπÅÈπÇÈπÑÈπÜÈπáÈπàÈπâÈπãÈπåÈπéÈπëÈπïÈπóÈπöÈπõÈπúÈπûÈπ£Èπ¶ÈπßÈπ®Èπ©Èπ™Èπ´Èπ¨Èπ±Èπ≠Èπ≥ÁñíÁñîÁññÁñ†ÁñùÁñ¨Áñ£Áñ≥Áñ¥Áñ∏ÁóÑÁñ±Áñ∞ÁóÉÁóÇÁóñÁóçÁó£Áó®Áó¶Áó§Áó´ÁóßÁòÉÁó±ÁóºÁóøÁòêÁòÄÁòÖÁòåÁòóÁòäÁò•ÁòòÁòïÁòôÔøΩ".split("");
    for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) {
        e[D[240][j]] = 61440 + j;
        d[61440 + j] = D[240][j];
    };
    D[241] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ¶åÈ¶éÈ¶öÈ¶õÈ¶úÈ¶ùÈ¶ûÈ¶üÈ¶†È¶°È¶¢È¶£È¶§È¶¶È¶ßÈ¶©È¶™È¶´È¶¨È¶≠È¶ÆÈ¶ØÈ¶∞È¶±È¶≤È¶≥È¶¥È¶µÈ¶∂È¶∑È¶∏È¶πÈ¶∫È¶ªÈ¶ºÈ¶ΩÈ¶æÈ¶øÈßÄÈßÅÈßÇÈßÉÈßÑÈßÖÈßÜÈßáÈßàÈßâÈßäÈßãÈßåÈßçÈßéÈßèÈßêÈßëÈßíÈßìÈßîÈßïÈßñÈßóÈßòÔøΩÈßôÈßöÈßõÈßúÈßùÈßûÈßüÈß†Èß°Èß¢Èß£Èß§Èß•Èß¶ÈßßÈß®Èß©Èß™Èß´Èß¨Èß≠ÈßÆÈßØÈß∞Èß±Èß≤Èß≥Èß¥ÈßµÈß∂Èß∑Èß∏ÈßπÁòõÁòºÁò¢Áò†ÁôÄÁò≠Áò∞ÁòøÁòµÁôÉÁòæÁò≥ÁôçÁôûÁôîÁôúÁôñÁô´ÁôØÁøäÁ´¶Á©∏Á©πÁ™ÄÁ™ÜÁ™àÁ™ïÁ™¶Á™†Á™¨Á™®Á™≠Á™≥Ë°§Ë°©Ë°≤Ë°ΩË°øË¢ÇË¢¢Ë£ÜË¢∑Ë¢ºË£âË£¢Ë£éË££Ë£•Ë£±Ë§öË£ºË£®Ë£æË£∞Ë§°Ë§ôË§ìË§õË§äË§¥Ë§´Ë§∂Ë•ÅË•¶Ë•ªÁñãËÉ•Áö≤Áö¥ÁüúËÄíËÄîËÄñËÄúËÄ†ËÄ¢ËÄ•ËÄ¶ËÄßËÄ©ËÄ®ËÄ±ËÄãËÄµËÅÉËÅÜËÅçËÅíËÅ©ËÅ±Ë¶ÉÈ°∏È¢ÄÈ¢ÉÔøΩ".split("");
    for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) {
        e[D[241][j]] = 61696 + j;
        d[61696 + j] = D[241][j];
    };
    D[242] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈß∫ÈßªÈßºÈßΩÈßæÈßøÈ®ÄÈ®ÅÈ®ÇÈ®ÉÈ®ÑÈ®ÖÈ®ÜÈ®áÈ®àÈ®âÈ®äÈ®ãÈ®åÈ®çÈ®éÈ®èÈ®êÈ®ëÈ®íÈ®ìÈ®îÈ®ïÈ®ñÈ®óÈ®òÈ®ôÈ®öÈ®õÈ®úÈ®ùÈ®ûÈ®üÈ®†È®°È®¢È®£È®§È®•È®¶È®ßÈ®®È®©È®™È®´È®¨È®≠È®ÆÈ®ØÈ®∞È®±È®≤È®≥È®¥È®µÈ®∂È®∑È®∏ÔøΩÈ®πÈ®∫È®ªÈ®ºÈ®ΩÈ®æÈ®øÈ©ÄÈ©ÅÈ©ÇÈ©ÉÈ©ÑÈ©ÖÈ©ÜÈ©áÈ©àÈ©âÈ©äÈ©ãÈ©åÈ©çÈ©éÈ©èÈ©êÈ©ëÈ©íÈ©ìÈ©îÈ©ïÈ©ñÈ©óÈ©òÈ©ôÈ¢âÈ¢åÈ¢çÈ¢èÈ¢îÈ¢öÈ¢õÈ¢ûÈ¢üÈ¢°È¢¢È¢•È¢¶ËôçËôîËô¨ËôÆËôøËô∫ËôºËôªËö®ËöçËöãËö¨ËöùËößËö£Ëö™ËöìËö©Ëö∂ËõÑËöµËõéËö∞Ëö∫Ëö±ËöØËõâËõèËö¥Ëõ©Ëõ±Ëõ≤Ëõ≠Ëõ≥ËõêËúìËõûËõ¥ËõüËõòËõëËúÉËúáËõ∏ËúàËúäËúçËúâËú£ËúªËúûËú•ËúÆËúöËúæËùàËú¥Ëú±Ëú©Ëú∑ËúøËûÇËú¢ËùΩËùæËùªËù†Ëù∞ËùåËùÆËûãËùìËù£ËùºËù§ËùôËù•ËûìËûØËû®ËüíÔøΩ".split("");
    for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) {
        e[D[242][j]] = 61952 + j;
        d[61952 + j] = D[242][j];
    };
    D[243] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ©öÈ©õÈ©úÈ©ùÈ©ûÈ©üÈ©†È©°È©¢È©£È©§È©•È©¶È©ßÈ©®È©©È©™È©´È©≤È™ÉÈ™âÈ™çÈ™éÈ™îÈ™ïÈ™ôÈ™¶È™©È™™È™´È™¨È™≠È™ÆÈ™ØÈ™≤È™≥È™¥È™µÈ™πÈ™ªÈ™ΩÈ™æÈ™øÈ´ÉÈ´ÑÈ´ÜÈ´áÈ´àÈ´âÈ´äÈ´çÈ´éÈ´èÈ´êÈ´íÈ´îÈ´ïÈ´ñÈ´óÈ´ôÈ´öÈ´õÈ´úÔøΩÈ´ùÈ´ûÈ´†È´¢È´£È´§È´•È´ßÈ´®È´©È´™È´¨È´ÆÈ´∞È´±È´≤È´≥È´¥È´µÈ´∂È´∑È´∏È´∫È´ºÈ´ΩÈ´æÈ´øÈ¨ÄÈ¨ÅÈ¨ÇÈ¨ÑÈ¨ÖÈ¨ÜËüÜËûàËûÖËû≠ËûóËûÉËû´Ëü•Ëû¨ËûµËû≥ËüãËüìËûΩËüëËüÄËüäËüõËü™Ëü†ËüÆË†ñË†ìËüæË†äË†õË†°Ë†πË†ºÁº∂ÁΩÇÁΩÑÁΩÖËàêÁ´∫Á´ΩÁ¨àÁ¨ÉÁ¨ÑÁ¨ïÁ¨äÁ¨´Á¨èÁ≠áÁ¨∏Á¨™Á¨ôÁ¨ÆÁ¨±Á¨†Á¨•Á¨§Á¨≥Á¨æÁ¨ûÁ≠òÁ≠öÁ≠ÖÁ≠µÁ≠åÁ≠ùÁ≠†Á≠ÆÁ≠ªÁ≠¢Á≠≤Á≠±ÁÆêÁÆ¶ÁÆßÁÆ∏ÁÆ¨ÁÆùÁÆ®ÁÆÖÁÆ™ÁÆúÁÆ¢ÁÆ´ÁÆ¥ÁØëÁØÅÁØåÁØùÁØöÁØ•ÁØ¶ÁØ™Á∞åÁØæÁØºÁ∞èÁ∞ñÁ∞ãÔøΩ".split("");
    for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) {
        e[D[243][j]] = 62208 + j;
        d[62208 + j] = D[243][j];
    };
    D[244] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ¨áÈ¨âÈ¨äÈ¨ãÈ¨åÈ¨çÈ¨éÈ¨êÈ¨ëÈ¨íÈ¨îÈ¨ïÈ¨ñÈ¨óÈ¨òÈ¨ôÈ¨öÈ¨õÈ¨úÈ¨ùÈ¨ûÈ¨†È¨°È¨¢È¨§È¨•È¨¶È¨ßÈ¨®È¨©È¨™È¨´È¨¨È¨≠È¨ÆÈ¨∞È¨±È¨≥È¨¥È¨µÈ¨∂È¨∑È¨∏È¨πÈ¨∫È¨ΩÈ¨æÈ¨øÈ≠ÄÈ≠ÜÈ≠äÈ≠ãÈ≠åÈ≠éÈ≠êÈ≠íÈ≠ìÈ≠ïÈ≠ñÈ≠óÈ≠òÈ≠ôÈ≠öÔøΩÈ≠õÈ≠úÈ≠ùÈ≠ûÈ≠üÈ≠†È≠°È≠¢È≠£È≠§È≠•È≠¶È≠ßÈ≠®È≠©È≠™È≠´È≠¨È≠≠È≠ÆÈ≠ØÈ≠∞È≠±È≠≤È≠≥È≠¥È≠µÈ≠∂È≠∑È≠∏È≠πÈ≠∫È≠ªÁ∞üÁ∞™Á∞¶Á∞∏Á±ÅÁ±ÄËáæËàÅËàÇËàÑËá¨Ë°ÑËà°Ëà¢Ëà£Ëà≠ËàØËà®Ëà´Ëà∏ËàªËà≥Ëà¥ËàæËâÑËââËâãËâèËâöËâüËâ®Ë°æË¢ÖË¢àË£òË£üË•ûÁæùÁæüÁæßÁæØÁæ∞Áæ≤Á±ºÊïâÁ≤ëÁ≤ùÁ≤úÁ≤ûÁ≤¢Á≤≤Á≤ºÁ≤ΩÁ≥ÅÁ≥áÁ≥åÁ≥çÁ≥àÁ≥ÖÁ≥óÁ≥®ËâÆÊö®ÁæøÁøéÁøïÁø•Áø°Áø¶Áø©ÁøÆÁø≥Á≥∏Áµ∑Á∂¶Á∂ÆÁπáÁ∫õÈ∫∏È∫¥Ëµ≥Ë∂ÑË∂îË∂ëË∂±ËµßËµ≠Ë±áË±âÈÖäÈÖêÈÖéÈÖèÈÖ§ÔøΩ".split("");
    for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) {
        e[D[244][j]] = 62464 + j;
        d[62464 + j] = D[244][j];
    };
    D[245] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ≠ºÈ≠ΩÈ≠æÈ≠øÈÆÄÈÆÅÈÆÇÈÆÉÈÆÑÈÆÖÈÆÜÈÆáÈÆàÈÆâÈÆäÈÆãÈÆåÈÆçÈÆéÈÆèÈÆêÈÆëÈÆíÈÆìÈÆîÈÆïÈÆñÈÆóÈÆòÈÆôÈÆöÈÆõÈÆúÈÆùÈÆûÈÆüÈÆ†ÈÆ°ÈÆ¢ÈÆ£ÈÆ§ÈÆ•ÈÆ¶ÈÆßÈÆ®ÈÆ©ÈÆ™ÈÆ´ÈÆ¨ÈÆ≠ÈÆÆÈÆØÈÆ∞ÈÆ±ÈÆ≤ÈÆ≥ÈÆ¥ÈÆµÈÆ∂ÈÆ∑ÈÆ∏ÈÆπÈÆ∫ÔøΩÈÆªÈÆºÈÆΩÈÆæÈÆøÈØÄÈØÅÈØÇÈØÉÈØÑÈØÖÈØÜÈØáÈØàÈØâÈØäÈØãÈØåÈØçÈØéÈØèÈØêÈØëÈØíÈØìÈØîÈØïÈØñÈØóÈØòÈØôÈØöÈØõÈÖ¢ÈÖ°ÈÖ∞ÈÖ©ÈÖØÈÖΩÈÖæÈÖ≤ÈÖ¥ÈÖπÈÜåÈÜÖÈÜêÈÜçÈÜëÈÜ¢ÈÜ£ÈÜ™ÈÜ≠ÈÜÆÈÜØÈÜµÈÜ¥ÈÜ∫Ë±ïÈπæË∂∏Ë∑´Ë∏ÖËπôËπ©Ë∂µË∂øË∂ºË∂∫Ë∑ÑË∑ñË∑óË∑öË∑ûË∑éË∑èË∑õË∑ÜË∑¨Ë∑∑Ë∑∏Ë∑£Ë∑πË∑ªË∑§Ë∏âË∑ΩË∏îË∏ùË∏üË∏¨Ë∏ÆË∏£Ë∏ØË∏∫ËπÄË∏πË∏µË∏ΩË∏±ËπâËπÅËπÇËπëËπíËπäËπ∞Ëπ∂ËπºËπØËπ¥Ë∫ÖË∫èË∫îË∫êË∫úË∫ûË±∏Ë≤ÇË≤äË≤ÖË≤òË≤îÊñõËßñËßûËßöËßúÔøΩ".split("");
    for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) {
        e[D[245][j]] = 62720 + j;
        d[62720 + j] = D[245][j];
    };
    D[246] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈØúÈØùÈØûÈØüÈØ†ÈØ°ÈØ¢ÈØ£ÈØ§ÈØ•ÈØ¶ÈØßÈØ®ÈØ©ÈØ™ÈØ´ÈØ¨ÈØ≠ÈØÆÈØØÈØ∞ÈØ±ÈØ≤ÈØ≥ÈØ¥ÈØµÈØ∂ÈØ∑ÈØ∏ÈØπÈØ∫ÈØªÈØºÈØΩÈØæÈØøÈ∞ÄÈ∞ÅÈ∞ÇÈ∞ÉÈ∞ÑÈ∞ÖÈ∞ÜÈ∞áÈ∞àÈ∞âÈ∞äÈ∞ãÈ∞åÈ∞çÈ∞éÈ∞èÈ∞êÈ∞ëÈ∞íÈ∞ìÈ∞îÈ∞ïÈ∞ñÈ∞óÈ∞òÈ∞ôÈ∞öÔøΩÈ∞õÈ∞úÈ∞ùÈ∞ûÈ∞üÈ∞†È∞°È∞¢È∞£È∞§È∞•È∞¶È∞ßÈ∞®È∞©È∞™È∞´È∞¨È∞≠È∞ÆÈ∞ØÈ∞∞È∞±È∞≤È∞≥È∞¥È∞µÈ∞∂È∞∑È∞∏È∞πÈ∞∫È∞ªËß•Ëß´ËßØË®æË¨¶ÈùìÈõ©Èõ≥ÈõØÈúÜÈúÅÈúàÈúèÈúéÈú™Èú≠Èú∞ÈúæÈæÄÈæÉÈæÖÈæÜÈæáÈæàÈæâÈæäÈæåÈªæÈºãÈºçÈöπÈöºÈöΩÈõéÈõíÁûøÈõ†ÈäéÈäÆÈãàÈåæÈç™ÈèäÈéèÈêæÈë´È±øÈ≤ÇÈ≤ÖÈ≤ÜÈ≤áÈ≤àÁ®£È≤ãÈ≤éÈ≤êÈ≤ëÈ≤íÈ≤îÈ≤ïÈ≤öÈ≤õÈ≤ûÈ≤üÈ≤†È≤°È≤¢È≤£È≤•È≤¶È≤ßÈ≤®È≤©È≤´È≤≠È≤ÆÈ≤∞È≤±È≤≤È≤≥È≤¥È≤µÈ≤∂È≤∑È≤∫È≤ªÈ≤ºÈ≤ΩÈ≥ÑÈ≥ÖÈ≥ÜÈ≥áÈ≥äÈ≥ãÔøΩ".split("");
    for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) {
        e[D[246][j]] = 62976 + j;
        d[62976 + j] = D[246][j];
    };
    D[247] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ∞ºÈ∞ΩÈ∞æÈ∞øÈ±ÄÈ±ÅÈ±ÇÈ±ÉÈ±ÑÈ±ÖÈ±ÜÈ±áÈ±àÈ±âÈ±äÈ±ãÈ±åÈ±çÈ±éÈ±èÈ±êÈ±ëÈ±íÈ±ìÈ±îÈ±ïÈ±ñÈ±óÈ±òÈ±ôÈ±öÈ±õÈ±úÈ±ùÈ±ûÈ±üÈ±†È±°È±¢È±£È±§È±•È±¶È±ßÈ±®È±©È±™È±´È±¨È±≠È±ÆÈ±ØÈ±∞È±±È±≤È±≥È±¥È±µÈ±∂È±∑È±∏È±πÈ±∫ÔøΩÈ±ªÈ±ΩÈ±æÈ≤ÄÈ≤ÉÈ≤ÑÈ≤âÈ≤äÈ≤åÈ≤èÈ≤ìÈ≤ñÈ≤óÈ≤òÈ≤ôÈ≤ùÈ≤™È≤¨È≤ØÈ≤πÈ≤æÈ≤øÈ≥ÄÈ≥ÅÈ≥ÇÈ≥àÈ≥âÈ≥ëÈ≥íÈ≥öÈ≥õÈ≥†È≥°È≥åÈ≥çÈ≥éÈ≥èÈ≥êÈ≥ìÈ≥îÈ≥ïÈ≥óÈ≥òÈ≥ôÈ≥úÈ≥ùÈ≥üÈ≥¢ÈùºÈûÖÈûëÈûíÈûîÈûØÈû´Èû£Èû≤Èû¥È™±È™∞È™∑ÈπòÈ™∂È™∫È™ºÈ´ÅÈ´ÄÈ´ÖÈ´ÇÈ´ãÈ´åÈ´ëÈ≠ÖÈ≠ÉÈ≠áÈ≠âÈ≠àÈ≠çÈ≠ëÈ£®È§çÈ§ÆÈ•ïÈ•îÈ´üÈ´°È´¶È´ØÈ´´È´ªÈ´≠È´πÈ¨àÈ¨èÈ¨ìÈ¨üÈ¨£È∫ΩÈ∫æÁ∏ªÈ∫ÇÈ∫áÈ∫àÈ∫ãÈ∫íÈèñÈ∫ùÈ∫üÈªõÈªúÈªùÈª†ÈªüÈª¢Èª©ÈªßÈª•Èª™ÈªØÈº¢Èº¨ÈºØÈºπÈº∑ÈºΩÈºæÈΩÑÔøΩ".split("");
    for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) {
        e[D[247][j]] = 63232 + j;
        d[63232 + j] = D[247][j];
    };
    D[248] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ≥£È≥§È≥•È≥¶È≥ßÈ≥®È≥©È≥™È≥´È≥¨È≥≠È≥ÆÈ≥ØÈ≥∞È≥±È≥≤È≥≥È≥¥È≥µÈ≥∂È≥∑È≥∏È≥πÈ≥∫È≥ªÈ≥ºÈ≥ΩÈ≥æÈ≥øÈ¥ÄÈ¥ÅÈ¥ÇÈ¥ÉÈ¥ÑÈ¥ÖÈ¥ÜÈ¥áÈ¥àÈ¥âÈ¥äÈ¥ãÈ¥åÈ¥çÈ¥éÈ¥èÈ¥êÈ¥ëÈ¥íÈ¥ìÈ¥îÈ¥ïÈ¥ñÈ¥óÈ¥òÈ¥ôÈ¥öÈ¥õÈ¥úÈ¥ùÈ¥ûÈ¥üÈ¥†È¥°ÔøΩÈ¥¢È¥£È¥§È¥•È¥¶È¥ßÈ¥®È¥©È¥™È¥´È¥¨È¥≠È¥ÆÈ¥ØÈ¥∞È¥±È¥≤È¥≥È¥¥È¥µÈ¥∂È¥∑È¥∏È¥πÈ¥∫È¥ªÈ¥ºÈ¥ΩÈ¥æÈ¥øÈµÄÈµÅÈµÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 65533) {
        e[D[248][j]] = 63488 + j;
        d[63488 + j] = D[248][j];
    };
    D[249] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈµÉÈµÑÈµÖÈµÜÈµáÈµàÈµâÈµäÈµãÈµåÈµçÈµéÈµèÈµêÈµëÈµíÈµìÈµîÈµïÈµñÈµóÈµòÈµôÈµöÈµõÈµúÈµùÈµûÈµüÈµ†Èµ°Èµ¢Èµ£Èµ§Èµ•Èµ¶ÈµßÈµ®Èµ©Èµ™Èµ´Èµ¨Èµ≠ÈµÆÈµØÈµ∞Èµ±Èµ≤Èµ≥Èµ¥ÈµµÈµ∂Èµ∑Èµ∏ÈµπÈµ∫ÈµªÈµºÈµΩÈµæÈµøÈ∂ÄÈ∂ÅÔøΩÈ∂ÇÈ∂ÉÈ∂ÑÈ∂ÖÈ∂ÜÈ∂áÈ∂àÈ∂âÈ∂äÈ∂ãÈ∂åÈ∂çÈ∂éÈ∂èÈ∂êÈ∂ëÈ∂íÈ∂ìÈ∂îÈ∂ïÈ∂ñÈ∂óÈ∂òÈ∂ôÈ∂öÈ∂õÈ∂úÈ∂ùÈ∂ûÈ∂üÈ∂†È∂°È∂¢ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 65533) {
        e[D[249][j]] = 63744 + j;
        d[63744 + j] = D[249][j];
    };
    D[250] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ∂£È∂§È∂•È∂¶È∂ßÈ∂®È∂©È∂™È∂´È∂¨È∂≠È∂ÆÈ∂ØÈ∂∞È∂±È∂≤È∂≥È∂¥È∂µÈ∂∂È∂∑È∂∏È∂πÈ∂∫È∂ªÈ∂ºÈ∂ΩÈ∂æÈ∂øÈ∑ÄÈ∑ÅÈ∑ÇÈ∑ÉÈ∑ÑÈ∑ÖÈ∑ÜÈ∑áÈ∑àÈ∑âÈ∑äÈ∑ãÈ∑åÈ∑çÈ∑éÈ∑èÈ∑êÈ∑ëÈ∑íÈ∑ìÈ∑îÈ∑ïÈ∑ñÈ∑óÈ∑òÈ∑ôÈ∑öÈ∑õÈ∑úÈ∑ùÈ∑ûÈ∑üÈ∑†È∑°ÔøΩÈ∑¢È∑£È∑§È∑•È∑¶È∑ßÈ∑®È∑©È∑™È∑´È∑¨È∑≠È∑ÆÈ∑ØÈ∑∞È∑±È∑≤È∑≥È∑¥È∑µÈ∑∂È∑∑È∑∏È∑πÈ∑∫È∑ªÈ∑ºÈ∑ΩÈ∑æÈ∑øÈ∏ÄÈ∏ÅÈ∏ÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 65533) {
        e[D[250][j]] = 64000 + j;
        d[64000 + j] = D[250][j];
    };
    D[251] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ∏ÉÈ∏ÑÈ∏ÖÈ∏ÜÈ∏áÈ∏àÈ∏âÈ∏äÈ∏ãÈ∏åÈ∏çÈ∏éÈ∏èÈ∏êÈ∏ëÈ∏íÈ∏ìÈ∏îÈ∏ïÈ∏ñÈ∏óÈ∏òÈ∏ôÈ∏öÈ∏õÈ∏úÈ∏ùÈ∏ûÈ∏§È∏ßÈ∏ÆÈ∏∞È∏¥È∏ªÈ∏ºÈπÄÈπçÈπêÈπíÈπìÈπîÈπñÈπôÈπùÈπüÈπ†Èπ°Èπ¢Èπ•ÈπÆÈπØÈπ≤Èπ¥ÈπµÈπ∂Èπ∑Èπ∏ÈππÈπ∫ÈπªÈπºÈπΩÈ∫ÄÔøΩÈ∫ÅÈ∫ÉÈ∫ÑÈ∫ÖÈ∫ÜÈ∫âÈ∫äÈ∫åÈ∫çÈ∫éÈ∫èÈ∫êÈ∫ëÈ∫îÈ∫ïÈ∫ñÈ∫óÈ∫òÈ∫ôÈ∫öÈ∫õÈ∫úÈ∫ûÈ∫†È∫°È∫¢È∫£È∫§È∫•È∫ßÈ∫®È∫©È∫™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 65533) {
        e[D[251][j]] = 64256 + j;
        d[64256 + j] = D[251][j];
    };
    D[252] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ∫´È∫¨È∫≠È∫ÆÈ∫ØÈ∫∞È∫±È∫≤È∫≥È∫µÈ∫∂È∫∑È∫πÈ∫∫È∫ºÈ∫øÈªÄÈªÅÈªÇÈªÉÈªÖÈªÜÈªáÈªàÈªäÈªãÈªåÈªêÈªíÈªìÈªïÈªñÈªóÈªôÈªöÈªûÈª°Èª£Èª§Èª¶Èª®Èª´Èª¨Èª≠ÈªÆÈª∞Èª±Èª≤Èª≥Èª¥ÈªµÈª∂Èª∑Èª∏Èª∫ÈªΩÈªøÈºÄÈºÅÈºÇÈºÉÈºÑÈºÖÔøΩÈºÜÈºáÈºàÈºâÈºäÈºåÈºèÈºëÈºíÈºîÈºïÈºñÈºòÈºöÈºõÈºúÈºùÈºûÈºüÈº°Èº£Èº§Èº•Èº¶ÈºßÈº®Èº©Èº™Èº´Èº≠ÈºÆÈº∞Èº±ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 65533) {
        e[D[252][j]] = 64512 + j;
        d[64512 + j] = D[252][j];
    };
    D[253] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈº≤Èº≥Èº¥ÈºµÈº∂Èº∏Èº∫ÈººÈºøÈΩÄÈΩÅÈΩÇÈΩÉÈΩÖÈΩÜÈΩáÈΩàÈΩâÈΩäÈΩãÈΩåÈΩçÈΩéÈΩèÈΩíÈΩìÈΩîÈΩïÈΩñÈΩóÈΩòÈΩôÈΩöÈΩõÈΩúÈΩùÈΩûÈΩüÈΩ†ÈΩ°ÈΩ¢ÈΩ£ÈΩ§ÈΩ•ÈΩ¶ÈΩßÈΩ®ÈΩ©ÈΩ™ÈΩ´ÈΩ¨ÈΩ≠ÈΩÆÈΩØÈΩ∞ÈΩ±ÈΩ≤ÈΩ≥ÈΩ¥ÈΩµÈΩ∂ÈΩ∑ÈΩ∏ÔøΩÈΩπÈΩ∫ÈΩªÈΩºÈΩΩÈΩæÈæÅÈæÇÈæçÈæéÈæèÈæêÈæëÈæíÈæìÈæîÈæïÈæñÈæóÈæòÈæúÈæùÈæûÈæ°Èæ¢Èæ£Èæ§Èæ•Ô§¨Ô•πÔ¶ïÔßßÔß±ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[253].length; ++j) if (D[253][j].charCodeAt(0) !== 65533) {
        e[D[253][j]] = 64768 + j;
        d[64768 + j] = D[253][j];
    };
    D[254] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ®åÔ®çÔ®éÔ®èÔ®ëÔ®ìÔ®îÔ®òÔ®üÔ®†Ô®°Ô®£Ô®§Ô®ßÔ®®Ô®©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[254].length; ++j) if (D[254][j].charCodeAt(0) !== 65533) {
        e[D[254][j]] = 65024 + j;
        d[65024 + j] = D[254][j];
    };
    return {
        "enc": e,
        "dec": d
    };
})();
cptable[949] = (function() {
    var d = [],
        e = {},
        D = [],
        j;
    D[0] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) {
        e[D[0][j]] = 0 + j;
        d[0 + j] = D[0][j];
    };
    D[129] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ∞ÇÍ∞ÉÍ∞ÖÍ∞ÜÍ∞ãÍ∞åÍ∞çÍ∞éÍ∞èÍ∞òÍ∞ûÍ∞üÍ∞°Í∞¢Í∞£Í∞•Í∞¶Í∞ßÍ∞®Í∞©Í∞™Í∞´Í∞ÆÍ∞≤Í∞≥Í∞¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ∞µÍ∞∂Í∞∑Í∞∫Í∞ªÍ∞ΩÍ∞æÍ∞øÍ±ÅÍ±ÇÍ±ÉÍ±ÑÍ±ÖÍ±ÜÍ±áÍ±àÍ±âÍ±äÍ±åÍ±éÍ±èÍ±êÍ±ëÍ±íÍ±ìÍ±ïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ±ñÍ±óÍ±ôÍ±öÍ±õÍ±ùÍ±ûÍ±üÍ±†Í±°Í±¢Í±£Í±§Í±•Í±¶Í±ßÍ±®Í±©Í±™Í±´Í±¨Í±≠Í±ÆÍ±ØÍ±≤Í±≥Í±µÍ±∂Í±πÍ±ªÍ±ºÍ±ΩÍ±æÍ±øÍ≤ÇÍ≤áÍ≤àÍ≤çÍ≤éÍ≤èÍ≤ëÍ≤íÍ≤ìÍ≤ïÍ≤ñÍ≤óÍ≤òÍ≤ôÍ≤öÍ≤õÍ≤ûÍ≤¢Í≤£Í≤§Í≤•Í≤¶Í≤ßÍ≤´Í≤≠Í≤ÆÍ≤±Í≤≤Í≤≥Í≤¥Í≤µÍ≤∂Í≤∑Í≤∫Í≤æÍ≤øÍ≥ÄÍ≥ÇÍ≥ÉÍ≥ÖÍ≥ÜÍ≥áÍ≥âÍ≥äÍ≥ãÍ≥çÍ≥éÍ≥èÍ≥êÍ≥ëÍ≥íÍ≥ìÍ≥îÍ≥ñÍ≥òÍ≥ôÍ≥öÍ≥õÍ≥úÍ≥ùÍ≥ûÍ≥üÍ≥¢Í≥£Í≥•Í≥¶Í≥©Í≥´Í≥≠Í≥ÆÍ≥≤Í≥¥Í≥∑Í≥∏Í≥πÍ≥∫Í≥ªÍ≥æÍ≥øÍ¥ÅÍ¥ÇÍ¥ÉÍ¥ÖÍ¥áÍ¥àÍ¥âÍ¥äÍ¥ãÍ¥éÍ¥êÍ¥íÍ¥ìÔøΩ".split("");
    for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 65533) {
        e[D[129][j]] = 33024 + j;
        d[33024 + j] = D[129][j];
    };
    D[130] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ¥îÍ¥ïÍ¥ñÍ¥óÍ¥ôÍ¥öÍ¥õÍ¥ùÍ¥ûÍ¥üÍ¥°Í¥¢Í¥£Í¥§Í¥•Í¥¶Í¥ßÍ¥®Í¥™Í¥´Í¥ÆÍ¥ØÍ¥∞Í¥±Í¥≤Í¥≥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ¥∂Í¥∑Í¥πÍ¥∫Í¥ªÍ¥ΩÍ¥æÍ¥øÍµÄÍµÅÍµÇÍµÉÍµÜÍµàÍµäÍµãÍµåÍµçÍµéÍµèÍµëÍµíÍµìÍµïÍµñÍµóÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍµôÍµöÍµõÍµúÍµùÍµûÍµüÍµ†Íµ¢Íµ§Íµ•Íµ¶ÍµßÍµ®Íµ©Íµ™Íµ´ÍµÆÍµØÍµ±Íµ≤Íµ∑Íµ∏ÍµπÍµ∫ÍµæÍ∂ÄÍ∂ÉÍ∂ÑÍ∂ÖÍ∂ÜÍ∂áÍ∂äÍ∂ãÍ∂çÍ∂éÍ∂èÍ∂ëÍ∂íÍ∂ìÍ∂îÍ∂ïÍ∂ñÍ∂óÍ∂òÍ∂ôÍ∂öÍ∂õÍ∂ûÍ∂üÍ∂†Í∂°Í∂¢Í∂£Í∂•Í∂¶Í∂ßÍ∂®Í∂©Í∂™Í∂´Í∂¨Í∂≠Í∂ÆÍ∂ØÍ∂∞Í∂±Í∂≤Í∂≥Í∂¥Í∂µÍ∂∂Í∂∏Í∂πÍ∂∫Í∂ªÍ∂ºÍ∂ΩÍ∂æÍ∂øÍ∑ÇÍ∑ÉÍ∑ÖÍ∑ÜÍ∑áÍ∑âÍ∑äÍ∑ãÍ∑åÍ∑çÍ∑éÍ∑èÍ∑íÍ∑îÍ∑ïÍ∑ñÍ∑óÍ∑òÍ∑ôÍ∑öÍ∑õÍ∑ùÍ∑ûÍ∑üÍ∑°Í∑¢Í∑£Í∑•Í∑¶Í∑ßÍ∑®Í∑©Í∑™Í∑´Í∑¨Í∑≠Í∑ÆÍ∑ØÍ∑∞Í∑±Í∑≤Í∑≥Í∑¥Í∑µÍ∑∂Í∑∑ÔøΩ".split("");
    for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 65533) {
        e[D[130][j]] = 33280 + j;
        d[33280 + j] = D[130][j];
    };
    D[131] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ∑∫Í∑ªÍ∑ΩÍ∑æÍ∏ÇÍ∏ÉÍ∏ÑÍ∏ÖÍ∏ÜÍ∏áÍ∏äÍ∏åÍ∏éÍ∏èÍ∏êÍ∏ëÍ∏íÍ∏ìÍ∏ïÍ∏ñÍ∏óÍ∏òÍ∏ôÍ∏öÍ∏õÍ∏úÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ∏ùÍ∏ûÍ∏üÍ∏†Í∏°Í∏¢Í∏£Í∏§Í∏•Í∏¶Í∏ßÍ∏®Í∏©Í∏™Í∏´Í∏¨Í∏≠Í∏ÆÍ∏ØÍ∏≤Í∏≥Í∏µÍ∏∂Í∏πÍ∏ªÍ∏ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍ∏ΩÍ∏æÍ∏øÍπÇÍπÑÍπáÍπàÍπâÍπãÍπèÍπëÍπíÍπìÍπïÍπóÍπòÍπôÍπöÍπõÍπûÍπ¢Íπ£Íπ§Íπ¶ÍπßÍπ™Íπ´Íπ≠ÍπÆÍπØÍπ±Íπ≤Íπ≥Íπ¥ÍπµÍπ∂Íπ∑Íπ∫ÍπæÍπøÍ∫ÄÍ∫ÅÍ∫ÇÍ∫ÉÍ∫ÜÍ∫áÍ∫àÍ∫âÍ∫äÍ∫ãÍ∫çÍ∫éÍ∫èÍ∫êÍ∫ëÍ∫íÍ∫ìÍ∫îÍ∫ïÍ∫ñÍ∫óÍ∫òÍ∫ôÍ∫öÍ∫õÍ∫úÍ∫ùÍ∫ûÍ∫üÍ∫†Í∫°Í∫¢Í∫£Í∫§Í∫•Í∫¶Í∫ßÍ∫®Í∫©Í∫™Í∫´Í∫¨Í∫≠Í∫ÆÍ∫ØÍ∫∞Í∫±Í∫≤Í∫≥Í∫¥Í∫µÍ∫∂Í∫∑Í∫∏Í∫πÍ∫∫Í∫ªÍ∫øÍªÅÍªÇÍªÉÍªÖÍªÜÍªáÍªàÍªâÍªäÍªãÍªéÍªíÍªìÍªîÍªïÍªñÍªóÍªöÍªõÍªùÍªûÍªüÍª†Íª°Íª¢Íª£Íª§Íª•ÔøΩ".split("");
    for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 65533) {
        e[D[131][j]] = 33536 + j;
        d[33536 + j] = D[131][j];
    };
    D[132] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍª¶ÍªßÍª©Íª™Íª¨ÍªÆÍªØÍª∞Íª±Íª≤Íª≥ÍªµÍª∂Íª∑ÍªπÍª∫ÍªªÍªΩÍªæÍªøÍºÄÍºÅÍºÇÍºÉÍºÑÍºÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍºÜÍºâÍºäÍºãÍºåÍºéÍºèÍºëÍºíÍºìÍºîÍºïÍºñÍºóÍºòÍºôÍºöÍºõÍºúÍºùÍºûÍºüÍº†Íº°Íº¢Íº£ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍº§Íº•Íº¶ÍºßÍº®Íº©Íº™Íº´ÍºÆÍºØÍº±Íº≥ÍºµÍº∂Íº∑Íº∏ÍºπÍº∫ÍºªÍºæÍΩÄÍΩÑÍΩÖÍΩÜÍΩáÍΩäÍΩãÍΩåÍΩçÍΩéÍΩèÍΩëÍΩíÍΩìÍΩîÍΩïÍΩñÍΩóÍΩòÍΩôÍΩöÍΩõÍΩûÍΩüÍΩ†ÍΩ°ÍΩ¢ÍΩ£ÍΩ¶ÍΩßÍΩ®ÍΩ©ÍΩ™ÍΩ´ÍΩ¨ÍΩ≠ÍΩÆÍΩØÍΩ∞ÍΩ±ÍΩ≤ÍΩ≥ÍΩ¥ÍΩµÍΩ∂ÍΩ∑ÍΩ∏ÍΩ∫ÍΩªÍΩºÍΩΩÍΩæÍΩøÍæÅÍæÇÍæÉÍæÖÍæÜÍæáÍæâÍæäÍæãÍæåÍæçÍæéÍæèÍæíÍæìÍæîÍæñÍæóÍæòÍæôÍæöÍæõÍæùÍæûÍæüÍæ†Íæ°Íæ¢Íæ£Íæ§Íæ•Íæ¶ÍæßÍæ®Íæ©Íæ™Íæ´Íæ¨Íæ≠ÍæÆÍæØÍæ∞Íæ±Íæ≤Íæ≥Íæ¥ÍæµÍæ∂Íæ∑Íæ∫ÍæªÍæΩÍææÔøΩ".split("");
    for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 65533) {
        e[D[132][j]] = 33792 + j;
        d[33792 + j] = D[132][j];
    };
    D[133] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍæøÍøÅÍøÇÍøÉÍøÑÍøÖÍøÜÍøäÍøåÍøèÍøêÍøëÍøíÍøìÍøïÍøñÍøóÍøòÍøôÍøöÍøõÍøùÍøûÍøüÍø†Íø°ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÍø¢Íø£Íø§Íø•Íø¶ÍøßÍø™Íø´Íø¨Íø≠ÍøÆÍøØÍø≤Íø≥ÍøµÍø∂Íø∑ÍøπÍø∫ÍøªÍøºÍøΩÍøæÍøøÎÄÇÎÄÉÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎÄÖÎÄÜÎÄáÎÄàÎÄâÎÄäÎÄãÎÄçÎÄéÎÄèÎÄëÎÄíÎÄìÎÄïÎÄñÎÄóÎÄòÎÄôÎÄöÎÄõÎÄûÎÄüÎÄ†ÎÄ°ÎÄ¢ÎÄ£ÎÄ§ÎÄ•ÎÄ¶ÎÄßÎÄ©ÎÄ™ÎÄ´ÎÄ¨ÎÄ≠ÎÄÆÎÄØÎÄ∞ÎÄ±ÎÄ≤ÎÄ≥ÎÄ¥ÎÄµÎÄ∂ÎÄ∑ÎÄ∏ÎÄπÎÄ∫ÎÄªÎÄºÎÄΩÎÄæÎÄøÎÅÄÎÅÅÎÅÇÎÅÉÎÅÜÎÅáÎÅâÎÅãÎÅçÎÅèÎÅêÎÅëÎÅíÎÅñÎÅòÎÅöÎÅõÎÅúÎÅûÎÅüÎÅ†ÎÅ°ÎÅ¢ÎÅ£ÎÅ§ÎÅ•ÎÅ¶ÎÅßÎÅ®ÎÅ©ÎÅ™ÎÅ´ÎÅ¨ÎÅ≠ÎÅÆÎÅØÎÅ∞ÎÅ±ÎÅ≤ÎÅ≥ÎÅ¥ÎÅµÎÅ∂ÎÅ∑ÎÅ∏ÎÅπÎÅ∫ÎÅªÎÅæÎÅøÎÇÅÎÇÇÎÇÉÎÇÖÎÇÜÎÇáÎÇàÎÇâÎÇäÎÇãÎÇéÎÇêÎÇíÎÇìÎÇîÎÇïÎÇñÎÇóÎÇõÎÇùÎÇûÎÇ£ÎÇ§ÔøΩ".split("");
    for (j = 0; j != D[133].length; ++j) if (D[133][j].charCodeAt(0) !== 65533) {
        e[D[133][j]] = 34048 + j;
        d[34048 + j] = D[133][j];
    };
    D[134] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎÇ•ÎÇ¶ÎÇßÎÇ™ÎÇ∞ÎÇ≤ÎÇ∂ÎÇ∑ÎÇπÎÇ∫ÎÇªÎÇΩÎÇæÎÇøÎÉÄÎÉÅÎÉÇÎÉÉÎÉÜÎÉäÎÉãÎÉåÎÉçÎÉéÎÉèÎÉíÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎÉìÎÉïÎÉñÎÉóÎÉôÎÉöÎÉõÎÉúÎÉùÎÉûÎÉüÎÉ°ÎÉ¢ÎÉ£ÎÉ§ÎÉ¶ÎÉßÎÉ®ÎÉ©ÎÉ™ÎÉ´ÎÉ¨ÎÉ≠ÎÉÆÎÉØÎÉ∞ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎÉ±ÎÉ≤ÎÉ≥ÎÉ¥ÎÉµÎÉ∂ÎÉ∑ÎÉ∏ÎÉπÎÉ∫ÎÉªÎÉºÎÉΩÎÉæÎÉøÎÑÄÎÑÅÎÑÇÎÑÉÎÑÑÎÑÖÎÑÜÎÑáÎÑäÎÑçÎÑéÎÑèÎÑëÎÑîÎÑïÎÑñÎÑóÎÑöÎÑûÎÑüÎÑ†ÎÑ°ÎÑ¢ÎÑ¶ÎÑßÎÑ©ÎÑ™ÎÑ´ÎÑ≠ÎÑÆÎÑØÎÑ∞ÎÑ±ÎÑ≤ÎÑ≥ÎÑ∂ÎÑ∫ÎÑªÎÑºÎÑΩÎÑæÎÑøÎÖÇÎÖÉÎÖÖÎÖÜÎÖáÎÖâÎÖäÎÖãÎÖåÎÖçÎÖéÎÖèÎÖíÎÖìÎÖñÎÖóÎÖôÎÖöÎÖõÎÖùÎÖûÎÖüÎÖ°ÎÖ¢ÎÖ£ÎÖ§ÎÖ•ÎÖ¶ÎÖßÎÖ®ÎÖ©ÎÖ™ÎÖ´ÎÖ¨ÎÖ≠ÎÖÆÎÖØÎÖ∞ÎÖ±ÎÖ≤ÎÖ≥ÎÖ¥ÎÖµÎÖ∂ÎÖ∑ÎÖ∫ÎÖªÎÖΩÎÖæÎÖøÎÜÅÎÜÉÎÜÑÎÜÖÎÜÜÎÜáÎÜäÎÜåÎÜéÎÜèÎÜêÎÜëÎÜïÎÜñÎÜóÎÜôÎÜöÎÜõÎÜùÔøΩ".split("");
    for (j = 0; j != D[134].length; ++j) if (D[134][j].charCodeAt(0) !== 65533) {
        e[D[134][j]] = 34304 + j;
        d[34304 + j] = D[134][j];
    };
    D[135] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎÜûÎÜüÎÜ†ÎÜ°ÎÜ¢ÎÜ£ÎÜ§ÎÜ•ÎÜ¶ÎÜßÎÜ©ÎÜ™ÎÜ´ÎÜ¨ÎÜ≠ÎÜÆÎÜØÎÜ∞ÎÜ±ÎÜ≤ÎÜ≥ÎÜ¥ÎÜµÎÜ∂ÎÜ∑ÎÜ∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎÜπÎÜ∫ÎÜªÎÜºÎÜΩÎÜæÎÜøÎáÄÎáÅÎáÇÎáÉÎáÑÎáÖÎáÜÎááÎáàÎáâÎáäÎáãÎáçÎáéÎáèÎáëÎáíÎáìÎáïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎáñÎáóÎáòÎáôÎáöÎáõÎáûÎá†Îá°Îá¢Îá£Îá§Îá•Îá¶ÎáßÎá™Îá´Îá≠ÎáÆÎáØÎá±Îá≤Îá≥Îá¥ÎáµÎá∂Îá∑Îá∏Îá∫ÎáºÎáæÎáøÎàÄÎàÅÎàÇÎàÉÎàÜÎàáÎàâÎàäÎàçÎàéÎàèÎàêÎàëÎàíÎàìÎàñÎàòÎàöÎàõÎàúÎàùÎàûÎàüÎà°Îà¢Îà£Îà§Îà•Îà¶ÎàßÎà®Îà©Îà™Îà´Îà¨Îà≠ÎàÆÎàØÎà∞Îà±Îà≤Îà≥ÎàµÎà∂Îà∑Îà∏ÎàπÎà∫ÎàªÎàΩÎàæÎàøÎâÄÎâÅÎâÇÎâÉÎâÑÎâÖÎâÜÎâáÎâàÎââÎâäÎâãÎâåÎâçÎâéÎâèÎâêÎâëÎâíÎâìÎâîÎâïÎâñÎâóÎâôÎâöÎâõÎâùÎâûÎâüÎâ°Îâ¢Îâ£Îâ§Îâ•Îâ¶ÎâßÎâ™Îâ´Îâ¨Îâ≠ÎâÆÔøΩ".split("");
    for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 65533) {
        e[D[135][j]] = 34560 + j;
        d[34560 + j] = D[135][j];
    };
    D[136] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎâØÎâ∞Îâ±Îâ≤Îâ≥Îâ∂Îâ∑Îâ∏ÎâπÎâ∫ÎâªÎâΩÎâæÎâøÎäÄÎäÅÎäÇÎäÉÎäÜÎäáÎäàÎääÎäãÎäåÎäçÎäéÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎäèÎäíÎäìÎäïÎäñÎäóÎäõÎäúÎäùÎäûÎäüÎä¢Îä§ÎäßÎä®Îä©Îä´Îä≠ÎäÆÎäØÎä±Îä≤Îä≥ÎäµÎä∂Îä∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎä∏ÎäπÎä∫ÎäªÎäºÎäΩÎäæÎäøÎãÄÎãÅÎãÇÎãÉÎãÑÎãÖÎãÜÎãáÎãäÎããÎãçÎãéÎãèÎãëÎãìÎãîÎãïÎãñÎãóÎãöÎãúÎãûÎãüÎã†Îã°Îã£ÎãßÎã©Îã™Îã∞Îã±Îã≤Îã∂ÎãºÎãΩÎãæÎåÇÎåÉÎåÖÎåÜÎåáÎåâÎåäÎåãÎååÎåçÎåéÎåèÎåíÎåñÎåóÎåòÎåôÎåöÎåõÎåùÎåûÎåüÎå†Îå°Îå¢Îå£Îå§Îå•Îå¶ÎåßÎå®Îå©Îå™Îå´Îå¨Îå≠ÎåÆÎåØÎå∞Îå±Îå≤Îå≥Îå¥ÎåµÎå∂Îå∑Îå∏ÎåπÎå∫ÎåªÎåºÎåΩÎåæÎåøÎçÄÎçÅÎçÇÎçÉÎçÑÎçÖÎçÜÎçáÎçàÎçâÎçäÎçãÎçåÎççÎçéÎçèÎçêÎçëÎçíÎçìÎçóÎçôÎçöÎçùÎç†Îç°Îç¢Îç£ÔøΩ".split("");
    for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 65533) {
        e[D[136][j]] = 34816 + j;
        d[34816 + j] = D[136][j];
    };
    D[137] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎç¶Îç®Îç™Îç¨Îç≠ÎçØÎç≤Îç≥ÎçµÎç∂Îç∑ÎçπÎç∫ÎçªÎçºÎçΩÎçæÎçøÎéÇÎéÜÎéáÎéàÎéâÎéäÎéãÎéçÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎééÎéèÎéëÎéíÎéìÎéïÎéñÎéóÎéòÎéôÎéöÎéõÎéúÎéùÎéûÎéüÎé¢Îé£Îé§Îé•Îé¶ÎéßÎé©Îé™Îé´Îé≠ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎéÆÎéØÎé∞Îé±Îé≤Îé≥Îé¥ÎéµÎé∂Îé∑Îé∏ÎéπÎé∫ÎéªÎéºÎéΩÎéæÎéøÎèÄÎèÅÎèÇÎèÉÎèÜÎèáÎèâÎèäÎèçÎèèÎèëÎèíÎèìÎèñÎèòÎèöÎèúÎèûÎèüÎè°Îè¢Îè£Îè•Îè¶ÎèßÎè©Îè™Îè´Îè¨Îè≠ÎèÆÎèØÎè∞Îè±Îè≤Îè≥Îè¥ÎèµÎè∂Îè∑Îè∏ÎèπÎè∫ÎèªÎèΩÎèæÎèøÎêÄÎêÅÎêÇÎêÉÎêÑÎêÖÎêÜÎêáÎêàÎêâÎêäÎêãÎêåÎêçÎêéÎêèÎêëÎêíÎêìÎêîÎêïÎêñÎêóÎêôÎêöÎêõÎêùÎêûÎêüÎê°Îê¢Îê£Îê§Îê•Îê¶ÎêßÎê™Îê¨Îê≠ÎêÆÎêØÎê∞Îê±Îê≤Îê≥ÎêµÎê∂Îê∑Îê∏ÎêπÎê∫ÎêªÎêºÎêΩÎêæÎêøÎëÄÎëÅÎëÇÎëÉÎëÑÔøΩ".split("");
    for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 65533) {
        e[D[137][j]] = 35072 + j;
        d[35072 + j] = D[137][j];
    };
    D[138] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎëÖÎëÜÎëáÎëàÎëâÎëäÎëãÎëåÎëçÎëéÎëèÎëíÎëìÎëïÎëñÎëóÎëôÎëöÎëõÎëúÎëùÎëûÎëüÎë¢Îë§Îë¶ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎëßÎë®Îë©Îë™Îë´Îë≠ÎëÆÎëØÎë∞Îë±Îë≤Îë≥Îë¥ÎëµÎë∂Îë∑Îë∏ÎëπÎë∫ÎëªÎëºÎëΩÎëæÎëøÎíÅÎíÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎíÉÎíÑÎíÖÎíÜÎíáÎíâÎíäÎíãÎíåÎíçÎíéÎíèÎíêÎíëÎííÎíìÎíîÎíïÎíñÎíóÎíòÎíôÎíöÎíõÎíúÎíûÎíüÎí†Îí°Îí¢Îí£Îí•Îí¶ÎíßÎí©Îí™Îí´Îí≠ÎíÆÎíØÎí∞Îí±Îí≤Îí≥Îí¥Îí∂Îí∏Îí∫ÎíªÎíºÎíΩÎíæÎíøÎìÅÎìÇÎìÉÎìÖÎìÜÎìáÎìâÎìäÎìãÎìåÎìçÎìéÎìèÎìëÎìíÎììÎìîÎìñÎìóÎìòÎìôÎìöÎìõÎìûÎìüÎì°Îì¢Îì•ÎìßÎì®Îì©Îì™Îì´ÎìÆÎì∞Îì≤Îì≥Îì¥ÎìµÎì∂Îì∑ÎìπÎì∫ÎìªÎìºÎìΩÎìæÎìøÎîÄÎîÅÎîÇÎîÉÎîÑÎîÖÎîÜÎîáÎîàÎîâÎîäÎîãÎîåÎîçÎîéÎîèÎîêÎîëÎîíÎîìÎîñÎîóÎîôÎîöÎîùÔøΩ".split("");
    for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 65533) {
        e[D[138][j]] = 35328 + j;
        d[35328 + j] = D[138][j];
    };
    D[139] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎîûÎîüÎî†Îî°Îî¢Îî£Îî¶Îî´Îî¨Îî≠ÎîÆÎîØÎî≤Îî≥ÎîµÎî∂Îî∑ÎîπÎî∫ÎîªÎîºÎîΩÎîæÎîøÎïÇÎïÜÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎïáÎïàÎïâÎïäÎïéÎïèÎïëÎïíÎïìÎïïÎïñÎïóÎïòÎïôÎïöÎïõÎïûÎï¢Îï£Îï§Îï•Îï¶ÎïßÎï®Îï©Îï™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎï´Îï¨Îï≠ÎïÆÎïØÎï∞Îï±Îï≤Îï≥Îï¥ÎïµÎï∂Îï∑Îï∏ÎïπÎï∫ÎïªÎïºÎïΩÎïæÎïøÎñÄÎñÅÎñÇÎñÉÎñÑÎñÖÎñÜÎñáÎñàÎñâÎñäÎñãÎñåÎñçÎñéÎñèÎñêÎñëÎñíÎñìÎñîÎñïÎññÎñóÎñòÎñôÎñöÎñõÎñúÎñùÎñûÎñüÎñ¢Îñ£Îñ•Îñ¶ÎñßÎñ©Îñ¨Îñ≠ÎñÆÎñØÎñ≤Îñ∂Îñ∑Îñ∏ÎñπÎñ∫ÎñæÎñøÎóÅÎóÇÎóÉÎóÖÎóÜÎóáÎóàÎóâÎóäÎóãÎóéÎóíÎóìÎóîÎóïÎóñÎóóÎóôÎóöÎóõÎóúÎóùÎóûÎóüÎó†Îó°Îó¢Îó£Îó§Îó•Îó¶ÎóßÎó®Îó©Îó™Îó´Îó≠ÎóÆÎóØÎó∞Îó±Îó≤Îó≥Îó¥ÎóµÎó∂Îó∑Îó∏ÎóπÎó∫ÎóªÎóºÎóΩÎóæÎóøÔøΩ".split("");
    for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 65533) {
        e[D[139][j]] = 35584 + j;
        d[35584 + j] = D[139][j];
    };
    D[140] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎòÄÎòÅÎòÇÎòÉÎòÑÎòÖÎòÜÎòáÎòàÎòâÎòäÎòãÎòåÎòçÎòéÎòèÎòíÎòìÎòïÎòñÎòóÎòôÎòöÎòõÎòúÎòùÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎòûÎòüÎò†Îò°Îò¢Îò£Îò§Îò¶ÎòßÎò®Îò©Îò™Îò´Îò≠ÎòÆÎòØÎò∞Îò±Îò≤Îò≥ÎòµÎò∂Îò∑Îò∏ÎòπÎò∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎòªÎòºÎòΩÎòæÎòøÎôÄÎôÅÎôÇÎôÉÎôÑÎôÖÎôÜÎôáÎôâÎôäÎôãÎôåÎôçÎôéÎôèÎôêÎôëÎôíÎôìÎôîÎôïÎôñÎôóÎôòÎôôÎôöÎôõÎôúÎôùÎôûÎôüÎô†Îô°Îô¢Îô£Îô•Îô¶ÎôßÎô©Îô™Îô´Îô¨Îô≠ÎôÆÎôØÎô∞Îô±Îô≤Îô≥Îô¥ÎôµÎô∂Îô∑Îô∏ÎôπÎô∫ÎôªÎôºÎôΩÎôæÎôøÎöÄÎöÅÎöÇÎöÉÎöÑÎöÖÎöÜÎöáÎöàÎöâÎöäÎöãÎöåÎöçÎöéÎöèÎöêÎöëÎöíÎöìÎöîÎöïÎöñÎöóÎöòÎöôÎööÎöõÎöûÎöüÎö°Îö¢Îö£Îö•Îö¶ÎößÎö®Îö©Îö™Îö≠ÎöÆÎöØÎö∞Îö≤Îö≥Îö¥ÎöµÎö∂Îö∑Îö∏ÎöπÎö∫ÎöªÎöºÎöΩÎöæÎöøÎõÄÎõÅÎõÇÔøΩ".split("");
    for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 65533) {
        e[D[140][j]] = 35840 + j;
        d[35840 + j] = D[140][j];
    };
    D[141] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎõÉÎõÑÎõÖÎõÜÎõáÎõàÎõâÎõäÎõãÎõåÎõçÎõéÎõèÎõêÎõëÎõíÎõìÎõïÎõñÎõóÎõòÎõôÎõöÎõõÎõúÎõùÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎõûÎõüÎõ†Îõ°Îõ¢Îõ£Îõ§Îõ•Îõ¶ÎõßÎõ®Îõ©Îõ™Îõ´Îõ¨Îõ≠ÎõÆÎõØÎõ±Îõ≤Îõ≥ÎõµÎõ∂Îõ∑ÎõπÎõ∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎõªÎõºÎõΩÎõæÎõøÎúÇÎúÉÎúÑÎúÜÎúáÎúàÎúâÎúäÎúãÎúåÎúçÎúéÎúèÎúêÎúëÎúíÎúìÎúîÎúïÎúñÎúóÎúòÎúôÎúöÎúõÎúúÎúùÎúûÎúüÎú†Îú°Îú¢Îú£Îú§Îú•Îú¶ÎúßÎú™Îú´Îú≠ÎúÆÎú±Îú≤Îú≥Îú¥ÎúµÎú∂Îú∑Îú∫ÎúºÎúΩÎúæÎúøÎùÄÎùÅÎùÇÎùÉÎùÖÎùÜÎùáÎùâÎùäÎùãÎùçÎùéÎùèÎùêÎùëÎùíÎùìÎùñÎùóÎùòÎùôÎùöÎùõÎùúÎùùÎùûÎùüÎù°Îù¢Îù£Îù•Îù¶ÎùßÎù©Îù™Îù´Îù¨Îù≠ÎùÆÎùØÎù≤Îù¥Îù∂Îù∑Îù∏ÎùπÎù∫ÎùªÎùæÎùøÎûÅÎûÇÎûÉÎûÖÎûÜÎûáÎûàÎûâÎûäÎûãÎûéÎûìÎûîÎûïÎûöÎûõÎûùÎûûÔøΩ".split("");
    for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 65533) {
        e[D[141][j]] = 36096 + j;
        d[36096 + j] = D[141][j];
    };
    D[142] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎûüÎû°Îû¢Îû£Îû§Îû•Îû¶ÎûßÎû™ÎûÆÎûØÎû∞Îû±Îû≤Îû≥Îû∂Îû∑ÎûπÎû∫ÎûªÎûºÎûΩÎûæÎûøÎüÄÎüÅÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎüÇÎüÉÎüÑÎüÖÎüÜÎüàÎüäÎüãÎüåÎüçÎüéÎüèÎüêÎüëÎüíÎüìÎüîÎüïÎüñÎüóÎüòÎüôÎüöÎüõÎüúÎüùÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎüûÎüüÎü†Îü°Îü¢Îü£Îü§Îü•Îü¶ÎüßÎü®Îü©Îü™Îü´ÎüÆÎüØÎü±Îü≤Îü≥ÎüµÎü∂Îü∑Îü∏ÎüπÎü∫ÎüªÎüæÎ†ÇÎ†ÉÎ†ÑÎ†ÖÎ†ÜÎ†äÎ†ãÎ†çÎ†éÎ†èÎ†ëÎ†íÎ†ìÎ†îÎ†ïÎ†ñÎ†óÎ†öÎ†úÎ†ûÎ†üÎ††Î†°Î†¢Î†£Î†¶Î†ßÎ†©Î†™Î†´Î†≠Î†ÆÎ†ØÎ†∞Î†±Î†≤Î†≥Î†∂Î†∫Î†ªÎ†ºÎ†ΩÎ†æÎ†øÎ°ÅÎ°ÇÎ°ÉÎ°ÖÎ°ÜÎ°áÎ°àÎ°âÎ°äÎ°ãÎ°åÎ°çÎ°éÎ°èÎ°êÎ°íÎ°îÎ°ïÎ°ñÎ°óÎ°òÎ°ôÎ°öÎ°õÎ°ûÎ°üÎ°°Î°¢Î°£Î°•Î°¶Î°ßÎ°®Î°©Î°™Î°´Î°ÆÎ°∞Î°≤Î°≥Î°¥Î°µÎ°∂Î°∑Î°πÎ°∫Î°ªÎ°ΩÎ°æÎ°øÎ¢ÄÎ¢ÅÎ¢ÇÎ¢ÉÎ¢ÑÔøΩ".split("");
    for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 65533) {
        e[D[142][j]] = 36352 + j;
        d[36352 + j] = D[142][j];
    };
    D[143] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¢ÖÎ¢ÜÎ¢áÎ¢àÎ¢âÎ¢äÎ¢ãÎ¢åÎ¢éÎ¢èÎ¢êÎ¢ëÎ¢íÎ¢ìÎ¢îÎ¢ïÎ¢ñÎ¢óÎ¢òÎ¢ôÎ¢öÎ¢õÎ¢úÎ¢ùÎ¢ûÎ¢üÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¢†Î¢°Î¢¢Î¢£Î¢§Î¢•Î¢¶Î¢ßÎ¢©Î¢™Î¢´Î¢¨Î¢≠Î¢ÆÎ¢ØÎ¢±Î¢≤Î¢≥Î¢µÎ¢∂Î¢∑Î¢πÎ¢∫Î¢ªÎ¢ºÎ¢ΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¢æÎ¢øÎ£ÇÎ£ÑÎ£ÜÎ£áÎ£àÎ£âÎ£äÎ£ãÎ£çÎ£éÎ£èÎ£ëÎ£íÎ£ìÎ£ïÎ£ñÎ£óÎ£òÎ£ôÎ£öÎ£õÎ£úÎ£ûÎ£†Î£¢Î££Î£§Î£•Î£¶Î£ßÎ£™Î£´Î£≠Î£ÆÎ£ØÎ£±Î£≤Î£≥Î£¥Î£µÎ£∂Î£∑Î£∫Î£ºÎ£æÎ£øÎ§ÄÎ§ÅÎ§ÇÎ§ÉÎ§ÖÎ§ÜÎ§áÎ§àÎ§âÎ§äÎ§ãÎ§åÎ§çÎ§éÎ§èÎ§êÎ§ëÎ§íÎ§ìÎ§îÎ§ïÎ§ñÎ§óÎ§ôÎ§öÎ§õÎ§úÎ§ùÎ§ûÎ§üÎ§°Î§¢Î§£Î§§Î§•Î§¶Î§ßÎ§®Î§©Î§™Î§´Î§¨Î§≠Î§ÆÎ§ØÎ§∞Î§±Î§≤Î§≥Î§¥Î§µÎ§∂Î§∑Î§∏Î§πÎ§∫Î§ªÎ§æÎ§øÎ•ÅÎ•ÇÎ•ÉÎ•ÖÎ•ÜÎ•áÎ•àÎ•âÎ•äÎ•ãÎ•çÎ•éÎ•êÎ•íÎ•ìÎ•îÎ•ïÎ•ñÎ•óÔøΩ".split("");
    for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 65533) {
        e[D[143][j]] = 36608 + j;
        d[36608 + j] = D[143][j];
    };
    D[144] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ•öÎ•õÎ•ùÎ•ûÎ•üÎ•°Î•¢Î•£Î•§Î••Î•¶Î•ßÎ•™Î•¨Î•ÆÎ•ØÎ•∞Î•±Î•≤Î•≥Î•∂Î•∑Î•πÎ•∫Î•ªÎ•ΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ•æÎ•øÎ¶ÄÎ¶ÅÎ¶ÇÎ¶ÉÎ¶ÜÎ¶àÎ¶ãÎ¶åÎ¶èÎ¶êÎ¶ëÎ¶íÎ¶ìÎ¶îÎ¶ïÎ¶ñÎ¶óÎ¶òÎ¶ôÎ¶öÎ¶õÎ¶úÎ¶ùÎ¶ûÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¶üÎ¶†Î¶°Î¶¢Î¶£Î¶§Î¶•Î¶¶Î¶ßÎ¶®Î¶©Î¶™Î¶´Î¶ÆÎ¶ØÎ¶±Î¶≤Î¶≥Î¶µÎ¶∂Î¶∑Î¶∏Î¶πÎ¶∫Î¶ªÎ¶æÎßÄÎßÇÎßÉÎßÑÎßÖÎßÜÎßáÎßäÎßãÎßçÎßìÎßîÎßïÎßñÎßóÎßöÎßúÎßüÎß†Îß¢Îß¶ÎßßÎß©Îß™Îß´Îß≠ÎßÆÎßØÎß∞Îß±Îß≤Îß≥Îß∂ÎßªÎßºÎßΩÎßæÎßøÎ®ÇÎ®ÉÎ®ÑÎ®ÖÎ®ÜÎ®áÎ®âÎ®äÎ®ãÎ®åÎ®çÎ®éÎ®èÎ®êÎ®ëÎ®íÎ®ìÎ®îÎ®ñÎ®óÎ®òÎ®ôÎ®öÎ®õÎ®úÎ®ùÎ®ûÎ®üÎ®†Î®°Î®¢Î®£Î®§Î®•Î®¶Î®ßÎ®®Î®©Î®™Î®´Î®¨Î®≠Î®ÆÎ®ØÎ®∞Î®±Î®≤Î®≥Î®¥Î®µÎ®∂Î®∑Î®∫Î®ªÎ®ΩÎ®æÎ®øÎ©ÅÎ©ÉÎ©ÑÎ©ÖÎ©ÜÔøΩ".split("");
    for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 65533) {
        e[D[144][j]] = 36864 + j;
        d[36864 + j] = D[144][j];
    };
    D[145] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ©áÎ©äÎ©åÎ©èÎ©êÎ©ëÎ©íÎ©ñÎ©óÎ©ôÎ©öÎ©õÎ©ùÎ©ûÎ©üÎ©†Î©°Î©¢Î©£Î©¶Î©™Î©´Î©¨Î©≠Î©ÆÎ©ØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ©≤Î©≥Î©µÎ©∂Î©∑Î©πÎ©∫Î©ªÎ©ºÎ©ΩÎ©æÎ©øÎ™ÄÎ™ÅÎ™ÇÎ™ÜÎ™àÎ™âÎ™äÎ™ãÎ™çÎ™éÎ™èÎ™êÎ™ëÎ™íÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ™ìÎ™îÎ™ïÎ™ñÎ™óÎ™òÎ™ôÎ™öÎ™õÎ™úÎ™ùÎ™ûÎ™üÎ™†Î™°Î™¢Î™£Î™§Î™•Î™¶Î™ßÎ™™Î™≠Î™ÆÎ™ØÎ™±Î™≥Î™¥Î™µÎ™∂Î™∑Î™∫Î™ºÎ™æÎ™øÎ´ÄÎ´ÅÎ´ÇÎ´ÉÎ´ÖÎ´ÜÎ´áÎ´âÎ´äÎ´ãÎ´åÎ´çÎ´éÎ´èÎ´êÎ´ëÎ´íÎ´ìÎ´îÎ´ïÎ´ñÎ´óÎ´öÎ´õÎ´úÎ´ùÎ´ûÎ´üÎ´†Î´°Î´¢Î´£Î´§Î´•Î´¶Î´ßÎ´®Î´©Î´™Î´´Î´¨Î´≠Î´ÆÎ´ØÎ´∞Î´±Î´≤Î´≥Î´¥Î´µÎ´∂Î´∑Î´∏Î´πÎ´∫Î´ªÎ´ΩÎ´æÎ´øÎ¨ÅÎ¨ÇÎ¨ÉÎ¨ÖÎ¨ÜÎ¨áÎ¨àÎ¨âÎ¨äÎ¨ãÎ¨åÎ¨éÎ¨êÎ¨íÎ¨ìÎ¨îÎ¨ïÎ¨ñÎ¨óÎ¨ôÎ¨öÎ¨õÎ¨ùÎ¨ûÎ¨üÎ¨°Î¨¢Î¨£Î¨§Î¨•Î¨¶Î¨ßÔøΩ".split("");
    for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 65533) {
        e[D[145][j]] = 37120 + j;
        d[37120 + j] = D[145][j];
    };
    D[146] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¨®Î¨™Î¨¨Î¨≠Î¨ÆÎ¨ØÎ¨∞Î¨±Î¨≤Î¨≥Î¨∑Î¨πÎ¨∫Î¨øÎ≠ÄÎ≠ÅÎ≠ÇÎ≠ÉÎ≠ÜÎ≠àÎ≠äÎ≠ãÎ≠åÎ≠éÎ≠ëÎ≠íÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ≠ìÎ≠ïÎ≠ñÎ≠óÎ≠ôÎ≠öÎ≠õÎ≠úÎ≠ùÎ≠ûÎ≠üÎ≠†Î≠¢Î≠§Î≠•Î≠¶Î≠ßÎ≠®Î≠©Î≠™Î≠´Î≠≠Î≠ÆÎ≠ØÎ≠∞Î≠±ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ≠≤Î≠≥Î≠¥Î≠µÎ≠∂Î≠∑Î≠∏Î≠πÎ≠∫Î≠ªÎ≠ºÎ≠ΩÎ≠æÎ≠øÎÆÄÎÆÅÎÆÇÎÆÉÎÆÑÎÆÖÎÆÜÎÆáÎÆâÎÆäÎÆãÎÆçÎÆéÎÆèÎÆëÎÆíÎÆìÎÆîÎÆïÎÆñÎÆóÎÆòÎÆôÎÆöÎÆõÎÆúÎÆùÎÆûÎÆüÎÆ†ÎÆ°ÎÆ¢ÎÆ£ÎÆ•ÎÆ¶ÎÆßÎÆ©ÎÆ™ÎÆ´ÎÆ≠ÎÆÆÎÆØÎÆ∞ÎÆ±ÎÆ≤ÎÆ≥ÎÆµÎÆ∂ÎÆ∏ÎÆπÎÆ∫ÎÆªÎÆºÎÆΩÎÆæÎÆøÎØÅÎØÇÎØÉÎØÖÎØÜÎØáÎØâÎØäÎØãÎØåÎØçÎØéÎØèÎØëÎØíÎØîÎØïÎØñÎØóÎØòÎØôÎØöÎØõÎØúÎØùÎØûÎØüÎØ†ÎØ°ÎØ¢ÎØ£ÎØ§ÎØ•ÎØ¶ÎØßÎØ®ÎØ©ÎØ™ÎØ´ÎØ¨ÎØ≠ÎØÆÎØØÎØ∞ÎØ±ÎØ≤ÎØ≥ÎØ¥ÎØµÎØ∂ÎØ∑ÎØ∫ÎØªÎØΩÎØæÎ∞ÅÔøΩ".split("");
    for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 65533) {
        e[D[146][j]] = 37376 + j;
        d[37376 + j] = D[146][j];
    };
    D[147] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ∞ÉÎ∞ÑÎ∞ÖÎ∞ÜÎ∞áÎ∞äÎ∞éÎ∞êÎ∞íÎ∞ìÎ∞ôÎ∞öÎ∞†Î∞°Î∞¢Î∞£Î∞¶Î∞®Î∞™Î∞´Î∞¨Î∞ÆÎ∞ØÎ∞≤Î∞≥Î∞µÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ∞∂Î∞∑Î∞πÎ∞∫Î∞ªÎ∞ºÎ∞ΩÎ∞æÎ∞øÎ±ÇÎ±ÜÎ±áÎ±àÎ±äÎ±ãÎ±éÎ±èÎ±ëÎ±íÎ±ìÎ±îÎ±ïÎ±ñÎ±óÎ±òÎ±ôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ±öÎ±õÎ±úÎ±ûÎ±üÎ±†Î±°Î±¢Î±£Î±§Î±•Î±¶Î±ßÎ±®Î±©Î±™Î±´Î±¨Î±≠Î±ÆÎ±ØÎ±∞Î±±Î±≤Î±≥Î±¥Î±µÎ±∂Î±∑Î±∏Î±πÎ±∫Î±ªÎ±ºÎ±ΩÎ±æÎ±øÎ≤ÄÎ≤ÅÎ≤ÇÎ≤ÉÎ≤ÜÎ≤áÎ≤âÎ≤äÎ≤çÎ≤èÎ≤êÎ≤ëÎ≤íÎ≤ìÎ≤ñÎ≤òÎ≤õÎ≤úÎ≤ùÎ≤ûÎ≤üÎ≤¢Î≤£Î≤•Î≤¶Î≤©Î≤™Î≤´Î≤¨Î≤≠Î≤ÆÎ≤ØÎ≤≤Î≤∂Î≤∑Î≤∏Î≤πÎ≤∫Î≤ªÎ≤æÎ≤øÎ≥ÅÎ≥ÇÎ≥ÉÎ≥ÖÎ≥ÜÎ≥áÎ≥àÎ≥âÎ≥äÎ≥ãÎ≥åÎ≥éÎ≥íÎ≥ìÎ≥îÎ≥ñÎ≥óÎ≥ôÎ≥öÎ≥õÎ≥ùÎ≥ûÎ≥üÎ≥†Î≥°Î≥¢Î≥£Î≥§Î≥•Î≥¶Î≥ßÎ≥®Î≥©Î≥™Î≥´Î≥¨Î≥≠Î≥ÆÎ≥ØÎ≥∞Î≥±Î≥≤Î≥≥Î≥∑Î≥πÎ≥∫Î≥ªÎ≥ΩÔøΩ".split("");
    for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 65533) {
        e[D[147][j]] = 37632 + j;
        d[37632 + j] = D[147][j];
    };
    D[148] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ≥æÎ≥øÎ¥ÄÎ¥ÅÎ¥ÇÎ¥ÉÎ¥ÜÎ¥àÎ¥äÎ¥ãÎ¥åÎ¥çÎ¥éÎ¥èÎ¥ëÎ¥íÎ¥ìÎ¥ïÎ¥ñÎ¥óÎ¥òÎ¥ôÎ¥öÎ¥õÎ¥úÎ¥ùÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¥ûÎ¥üÎ¥†Î¥°Î¥¢Î¥£Î¥•Î¥¶Î¥ßÎ¥®Î¥©Î¥™Î¥´Î¥≠Î¥ÆÎ¥ØÎ¥∞Î¥±Î¥≤Î¥≥Î¥¥Î¥µÎ¥∂Î¥∑Î¥∏Î¥πÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ¥∫Î¥ªÎ¥ºÎ¥ΩÎ¥æÎ¥øÎµÅÎµÇÎµÉÎµÑÎµÖÎµÜÎµáÎµäÎµãÎµçÎµéÎµèÎµëÎµíÎµìÎµîÎµïÎµñÎµóÎµöÎµõÎµúÎµùÎµûÎµüÎµ†Îµ°Îµ¢Îµ£Îµ•Îµ¶ÎµßÎµ©Îµ™Îµ´Îµ¨Îµ≠ÎµÆÎµØÎµ∞Îµ±Îµ≤Îµ≥Îµ¥ÎµµÎµ∂Îµ∑Îµ∏ÎµπÎµ∫ÎµªÎµºÎµΩÎµæÎµøÎ∂ÇÎ∂ÉÎ∂ÖÎ∂ÜÎ∂ãÎ∂åÎ∂çÎ∂éÎ∂èÎ∂íÎ∂îÎ∂ñÎ∂óÎ∂òÎ∂õÎ∂ùÎ∂ûÎ∂üÎ∂†Î∂°Î∂¢Î∂£Î∂•Î∂¶Î∂ßÎ∂®Î∂©Î∂™Î∂´Î∂¨Î∂≠Î∂ÆÎ∂ØÎ∂±Î∂≤Î∂≥Î∂¥Î∂µÎ∂∂Î∂∑Î∂πÎ∂∫Î∂ªÎ∂ºÎ∂ΩÎ∂æÎ∂øÎ∑ÄÎ∑ÅÎ∑ÇÎ∑ÉÎ∑ÑÎ∑ÖÎ∑ÜÎ∑áÎ∑àÎ∑âÎ∑äÎ∑ãÎ∑åÎ∑çÎ∑éÎ∑èÎ∑êÎ∑ëÔøΩ".split("");
    for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 65533) {
        e[D[148][j]] = 37888 + j;
        d[37888 + j] = D[148][j];
    };
    D[149] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ∑íÎ∑ìÎ∑ñÎ∑óÎ∑ôÎ∑öÎ∑õÎ∑ùÎ∑ûÎ∑üÎ∑†Î∑°Î∑¢Î∑£Î∑§Î∑•Î∑¶Î∑ßÎ∑®Î∑™Î∑´Î∑¨Î∑≠Î∑ÆÎ∑ØÎ∑±ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ∑≤Î∑≥Î∑µÎ∑∂Î∑∑Î∑πÎ∑∫Î∑ªÎ∑ºÎ∑ΩÎ∑æÎ∑øÎ∏ÅÎ∏ÇÎ∏ÑÎ∏ÜÎ∏áÎ∏àÎ∏âÎ∏äÎ∏ãÎ∏éÎ∏èÎ∏ëÎ∏íÎ∏ìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ∏ïÎ∏ñÎ∏óÎ∏òÎ∏ôÎ∏öÎ∏õÎ∏ûÎ∏†Î∏°Î∏¢Î∏£Î∏§Î∏•Î∏¶Î∏ßÎ∏®Î∏©Î∏™Î∏´Î∏¨Î∏≠Î∏ÆÎ∏ØÎ∏∞Î∏±Î∏≤Î∏≥Î∏¥Î∏µÎ∏∂Î∏∑Î∏∏Î∏πÎ∏∫Î∏ªÎ∏ºÎ∏ΩÎ∏æÎ∏øÎπÄÎπÅÎπÇÎπÉÎπÜÎπáÎπâÎπäÎπãÎπçÎπèÎπêÎπëÎπíÎπìÎπñÎπòÎπúÎπùÎπûÎπüÎπ¢Îπ£Îπ•Îπ¶ÎπßÎπ©Îπ´Îπ¨Îπ≠ÎπÆÎπØÎπ≤Îπ∂Îπ∑Îπ∏ÎππÎπ∫ÎπæÎπøÎ∫ÅÎ∫ÇÎ∫ÉÎ∫ÖÎ∫ÜÎ∫áÎ∫àÎ∫âÎ∫äÎ∫ãÎ∫éÎ∫íÎ∫ìÎ∫îÎ∫ïÎ∫ñÎ∫óÎ∫öÎ∫õÎ∫úÎ∫ùÎ∫ûÎ∫üÎ∫†Î∫°Î∫¢Î∫£Î∫§Î∫•Î∫¶Î∫ßÎ∫©Î∫™Î∫´Î∫¨Î∫≠Î∫ÆÎ∫ØÎ∫∞Î∫±Î∫≤Î∫≥Î∫¥Î∫µÎ∫∂Î∫∑ÔøΩ".split("");
    for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 65533) {
        e[D[149][j]] = 38144 + j;
        d[38144 + j] = D[149][j];
    };
    D[150] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎ∫∏Î∫πÎ∫∫Î∫ªÎ∫ºÎ∫ΩÎ∫æÎ∫øÎªÄÎªÅÎªÇÎªÉÎªÑÎªÖÎªÜÎªáÎªàÎªâÎªäÎªãÎªåÎªçÎªéÎªèÎªíÎªìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎªïÎªñÎªôÎªöÎªõÎªúÎªùÎªûÎªüÎª°Îª¢Îª¶ÎªßÎª®Îª©Îª™Îª´Îª≠ÎªÆÎªØÎª∞Îª±Îª≤Îª≥Îª¥ÎªµÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎª∂Îª∑Îª∏ÎªπÎª∫ÎªªÎªºÎªΩÎªæÎªøÎºÄÎºÇÎºÉÎºÑÎºÖÎºÜÎºáÎºäÎºãÎºåÎºçÎºéÎºèÎºêÎºëÎºíÎºìÎºîÎºïÎºñÎºóÎºöÎºûÎºüÎº†Îº°Îº¢Îº£Îº§Îº•Îº¶ÎºßÎº®Îº©Îº™Îº´Îº¨Îº≠ÎºÆÎºØÎº∞Îº±Îº≤Îº≥Îº¥ÎºµÎº∂Îº∑Îº∏ÎºπÎº∫ÎºªÎººÎºΩÎºæÎºøÎΩÇÎΩÉÎΩÖÎΩÜÎΩáÎΩâÎΩäÎΩãÎΩåÎΩçÎΩéÎΩèÎΩíÎΩìÎΩîÎΩñÎΩóÎΩòÎΩôÎΩöÎΩõÎΩúÎΩùÎΩûÎΩüÎΩ†ÎΩ°ÎΩ¢ÎΩ£ÎΩ§ÎΩ•ÎΩ¶ÎΩßÎΩ®ÎΩ©ÎΩ™ÎΩ´ÎΩ¨ÎΩ≠ÎΩÆÎΩØÎΩ∞ÎΩ±ÎΩ≤ÎΩ≥ÎΩ¥ÎΩµÎΩ∂ÎΩ∑ÎΩ∏ÎΩπÎΩ∫ÎΩªÎΩºÎΩΩÎΩæÎΩøÎæÄÎæÅÎæÇÔøΩ".split("");
    for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 65533) {
        e[D[150][j]] = 38400 + j;
        d[38400 + j] = D[150][j];
    };
    D[151] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎæÉÎæÑÎæÖÎæÜÎæáÎæàÎæâÎæäÎæãÎæåÎæçÎæéÎæèÎæêÎæëÎæíÎæìÎæïÎæñÎæóÎæòÎæôÎæöÎæõÎæúÎæùÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎæûÎæüÎæ†Îæ°Îæ¢Îæ£Îæ§Îæ•Îæ¶ÎæßÎæ®Îæ©Îæ™Îæ´Îæ¨Îæ≠ÎæÆÎæØÎæ±Îæ≤Îæ≥Îæ¥ÎæµÎæ∂Îæ∑Îæ∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÎæπÎæ∫ÎæªÎæºÎæΩÎææÎæøÎøÄÎøÅÎøÇÎøÉÎøÑÎøÜÎøáÎøàÎøâÎøäÎøãÎøéÎøèÎøëÎøíÎøìÎøïÎøñÎøóÎøòÎøôÎøöÎøõÎøùÎøûÎø†Îø¢Îø£Îø§Îø•Îø¶ÎøßÎø®Îø©Îø™Îø´Îø¨Îø≠ÎøÆÎøØÎø∞Îø±Îø≤Îø≥Îø¥ÎøµÎø∂Îø∑Îø∏ÎøπÎø∫ÎøªÎøºÎøΩÎøæÎøøÏÄÄÏÄÅÏÄÇÏÄÉÏÄÑÏÄÖÏÄÜÏÄáÏÄàÏÄâÏÄäÏÄãÏÄåÏÄçÏÄéÏÄèÏÄêÏÄëÏÄíÏÄìÏÄîÏÄïÏÄñÏÄóÏÄòÏÄôÏÄöÏÄõÏÄúÏÄùÏÄûÏÄüÏÄ†ÏÄ°ÏÄ¢ÏÄ£ÏÄ§ÏÄ•ÏÄ¶ÏÄßÏÄ®ÏÄ©ÏÄ™ÏÄ´ÏÄ¨ÏÄ≠ÏÄÆÏÄØÏÄ∞ÏÄ±ÏÄ≤ÏÄ≥ÏÄ¥ÏÄµÏÄ∂ÏÄ∑ÏÄ∏ÏÄπÏÄ∫ÏÄªÏÄΩÏÄæÏÄøÔøΩ".split("");
    for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 65533) {
        e[D[151][j]] = 38656 + j;
        d[38656 + j] = D[151][j];
    };
    D[152] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÅÄÏÅÅÏÅÇÏÅÉÏÅÑÏÅÖÏÅÜÏÅáÏÅàÏÅâÏÅäÏÅãÏÅåÏÅçÏÅéÏÅèÏÅêÏÅíÏÅìÏÅîÏÅïÏÅñÏÅóÏÅôÏÅöÏÅõÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÅùÏÅûÏÅüÏÅ°ÏÅ¢ÏÅ£ÏÅ§ÏÅ•ÏÅ¶ÏÅßÏÅ™ÏÅ´ÏÅ¨ÏÅ≠ÏÅÆÏÅØÏÅ∞ÏÅ±ÏÅ≤ÏÅ≥ÏÅ¥ÏÅµÏÅ∂ÏÅ∑ÏÅ∏ÏÅπÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÅ∫ÏÅªÏÅºÏÅΩÏÅæÏÅøÏÇÄÏÇÅÏÇÇÏÇÉÏÇÑÏÇÖÏÇÜÏÇáÏÇàÏÇâÏÇäÏÇãÏÇåÏÇçÏÇéÏÇèÏÇíÏÇìÏÇïÏÇñÏÇóÏÇôÏÇöÏÇõÏÇúÏÇùÏÇûÏÇüÏÇ¢ÏÇ§ÏÇ¶ÏÇßÏÇ®ÏÇ©ÏÇ™ÏÇ´ÏÇÆÏÇ±ÏÇ≤ÏÇ∑ÏÇ∏ÏÇπÏÇ∫ÏÇªÏÇæÏÉÇÏÉÉÏÉÑÏÉÜÏÉáÏÉäÏÉãÏÉçÏÉéÏÉèÏÉëÏÉíÏÉìÏÉîÏÉïÏÉñÏÉóÏÉöÏÉûÏÉüÏÉ†ÏÉ°ÏÉ¢ÏÉ£ÏÉ¶ÏÉßÏÉ©ÏÉ™ÏÉ´ÏÉ≠ÏÉÆÏÉØÏÉ∞ÏÉ±ÏÉ≤ÏÉ≥ÏÉ∂ÏÉ∏ÏÉ∫ÏÉªÏÉºÏÉΩÏÉæÏÉøÏÑÅÏÑÇÏÑÉÏÑÖÏÑÜÏÑáÏÑâÏÑäÏÑãÏÑåÏÑçÏÑéÏÑèÏÑëÏÑíÏÑìÏÑîÏÑñÏÑóÏÑòÏÑôÏÑöÏÑõÏÑ°ÏÑ¢ÏÑ•ÏÑ®ÏÑ©ÏÑ™ÏÑ´ÏÑÆÔøΩ".split("");
    for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 65533) {
        e[D[152][j]] = 38912 + j;
        d[38912 + j] = D[152][j];
    };
    D[153] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÑ≤ÏÑ≥ÏÑ¥ÏÑµÏÑ∑ÏÑ∫ÏÑªÏÑΩÏÑæÏÑøÏÖÅÏÖÇÏÖÉÏÖÑÏÖÖÏÖÜÏÖáÏÖäÏÖéÏÖèÏÖêÏÖëÏÖíÏÖìÏÖñÏÖóÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÖôÏÖöÏÖõÏÖùÏÖûÏÖüÏÖ†ÏÖ°ÏÖ¢ÏÖ£ÏÖ¶ÏÖ™ÏÖ´ÏÖ¨ÏÖ≠ÏÖÆÏÖØÏÖ±ÏÖ≤ÏÖ≥ÏÖµÏÖ∂ÏÖ∑ÏÖπÏÖ∫ÏÖªÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÖºÏÖΩÏÖæÏÖøÏÜÄÏÜÅÏÜÇÏÜÉÏÜÑÏÜÜÏÜáÏÜàÏÜâÏÜäÏÜãÏÜèÏÜëÏÜíÏÜìÏÜïÏÜóÏÜòÏÜôÏÜöÏÜõÏÜûÏÜ†ÏÜ¢ÏÜ£ÏÜ§ÏÜ¶ÏÜßÏÜ™ÏÜ´ÏÜ≠ÏÜÆÏÜØÏÜ±ÏÜ≤ÏÜ≥ÏÜ¥ÏÜµÏÜ∂ÏÜ∑ÏÜ∏ÏÜπÏÜ∫ÏÜªÏÜºÏÜæÏÜøÏáÄÏáÅÏáÇÏáÉÏáÖÏáÜÏááÏáâÏáäÏáãÏáçÏáéÏáèÏáêÏáëÏáíÏáìÏáïÏáñÏáôÏáöÏáõÏáúÏáùÏáûÏáüÏá°Ïá¢Ïá£Ïá•Ïá¶ÏáßÏá©Ïá™Ïá´Ïá¨Ïá≠ÏáÆÏáØÏá≤Ïá¥ÏáµÏá∂Ïá∑Ïá∏ÏáπÏá∫ÏáªÏáæÏáøÏàÅÏàÇÏàÉÏàÖÏàÜÏàáÏààÏàâÏàäÏàãÏàéÏàêÏàíÏàìÏàîÏàïÏàñÏàóÏàöÏàõÏàùÏàûÏà°Ïà¢Ïà£ÔøΩ".split("");
    for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 65533) {
        e[D[153][j]] = 39168 + j;
        d[39168 + j] = D[153][j];
    };
    D[154] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏà§Ïà•Ïà¶ÏàßÏà™Ïà¨ÏàÆÏà∞Ïà≥ÏàµÏà∂Ïà∑Ïà∏ÏàπÏà∫ÏàªÏàºÏàΩÏàæÏàøÏâÄÏâÅÏâÇÏâÉÏâÑÏâÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏâÜÏâáÏââÏâäÏâãÏâåÏâçÏâéÏâèÏâíÏâìÏâïÏâñÏâóÏâôÏâöÏâõÏâúÏâùÏâûÏâüÏâ°Ïâ¢Ïâ£Ïâ§Ïâ¶ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏâßÏâ®Ïâ©Ïâ™Ïâ´ÏâÆÏâØÏâ±Ïâ≤Ïâ≥ÏâµÏâ∂Ïâ∑Ïâ∏ÏâπÏâ∫ÏâªÏâæÏäÄÏäÇÏäÉÏäÑÏäÖÏäÜÏäáÏääÏäãÏäåÏäçÏäéÏäèÏäëÏäíÏäìÏäîÏäïÏäñÏäóÏäôÏäöÏäúÏäûÏäüÏä†Ïä°Ïä¢Ïä£Ïä¶ÏäßÏä©Ïä™Ïä´ÏäÆÏäØÏä∞Ïä±Ïä≤Ïä≥Ïä∂Ïä∏Ïä∫ÏäªÏäºÏäΩÏäæÏäøÏãÄÏãÅÏãÇÏãÉÏãÑÏãÖÏãÜÏãáÏãàÏãâÏãäÏããÏãåÏãçÏãéÏãèÏãêÏãëÏãíÏãìÏãîÏãïÏãñÏãóÏãòÏãôÏãöÏãõÏãûÏãüÏã°Ïã¢Ïã•Ïã¶ÏãßÏã®Ïã©Ïã™ÏãÆÏã∞Ïã≤Ïã≥Ïã¥ÏãµÏã∑Ïã∫ÏãΩÏãæÏãøÏåÅÏåÇÏåÉÏåÑÏåÖÏåÜÏåáÏåäÏåãÏåéÏåèÔøΩ".split("");
    for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 65533) {
        e[D[154][j]] = 39424 + j;
        d[39424 + j] = D[154][j];
    };
    D[155] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏåêÏåëÏåíÏåñÏåóÏåôÏåöÏåõÏåùÏåûÏåüÏå†Ïå°Ïå¢Ïå£Ïå¶ÏåßÏå™Ïå´Ïå¨Ïå≠ÏåÆÏåØÏå∞Ïå±Ïå≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏå≥Ïå¥ÏåµÏå∂Ïå∑Ïå∏ÏåπÏå∫ÏåªÏåºÏåΩÏåæÏåøÏçÄÏçÅÏçÇÏçÉÏçÑÏçÜÏçáÏçàÏçâÏçäÏçãÏçåÏççÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏçéÏçèÏçêÏçëÏçíÏçìÏçîÏçïÏçñÏçóÏçòÏçôÏçöÏçõÏçúÏçùÏçûÏçüÏç†Ïç°Ïç¢Ïç£Ïç§Ïç•Ïç¶ÏçßÏç™Ïç´Ïç≠ÏçÆÏçØÏç±Ïç≥Ïç¥ÏçµÏç∂Ïç∑Ïç∫ÏçªÏçæÏçøÏéÄÏéÅÏéÇÏéÉÏéÖÏéÜÏéáÏéâÏéäÏéãÏéçÏééÏéèÏéêÏéëÏéíÏéìÏéîÏéïÏéñÏéóÏéòÏéôÏéöÏéõÏéúÏéùÏéûÏéüÏé†Ïé°Ïé¢Ïé£Ïé§Ïé•Ïé¶ÏéßÏé®Ïé©Ïé™Ïé´Ïé¨Ïé≠ÏéÆÏéØÏé∞Ïé±Ïé≤Ïé≥Ïé¥ÏéµÏé∂Ïé∑Ïé∏ÏéπÏé∫ÏéªÏéºÏéΩÏéæÏéøÏèÅÏèÇÏèÉÏèÑÏèÖÏèÜÏèáÏèàÏèâÏèäÏèãÏèåÏèçÏèéÏèèÏèêÏèëÏèíÏèìÏèîÏèïÏèñÏèóÏèöÔøΩ".split("");
    for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 65533) {
        e[D[155][j]] = 39680 + j;
        d[39680 + j] = D[155][j];
    };
    D[156] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏèõÏèùÏèûÏè°Ïè£Ïè§Ïè•Ïè¶ÏèßÏè™Ïè´Ïè¨ÏèÆÏèØÏè∞Ïè±Ïè≤Ïè≥Ïè∂Ïè∑ÏèπÏè∫ÏèªÏèºÏèΩÏèæÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏèøÏêÄÏêÅÏêÇÏêÉÏêÑÏêÖÏêÜÏêáÏêâÏêäÏêãÏêåÏêçÏêéÏêèÏêëÏêíÏêìÏêîÏêïÏêñÏêóÏêòÏêôÏêöÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏêõÏêúÏêùÏêûÏêüÏê†Ïê°Ïê¢Ïê£Ïê•Ïê¶ÏêßÏê®Ïê©Ïê™Ïê´Ïê≠ÏêÆÏêØÏê±Ïê≤Ïê≥ÏêµÏê∂Ïê∑Ïê∏ÏêπÏê∫ÏêªÏêæÏêøÏëÄÏëÅÏëÇÏëÉÏëÑÏëÖÏëÜÏëáÏëâÏëäÏëãÏëåÏëçÏëéÏëèÏëêÏëëÏëíÏëìÏëîÏëïÏëñÏëóÏëòÏëôÏëöÏëõÏëúÏëùÏëûÏëüÏë†Ïë°Ïë¢Ïë£Ïë¶ÏëßÏë©Ïë™Ïë´Ïë≠ÏëÆÏëØÏë∞Ïë±Ïë≤Ïë≥Ïë∂Ïë∑Ïë∏Ïë∫ÏëªÏëºÏëΩÏëæÏëøÏíÅÏíÇÏíÉÏíÑÏíÖÏíÜÏíáÏíàÏíâÏíäÏíãÏíåÏíçÏíéÏíèÏíêÏíëÏííÏíìÏíïÏíñÏíóÏíòÏíôÏíöÏíõÏíùÏíûÏíüÏí†Ïí°Ïí¢Ïí£Ïí§Ïí•Ïí¶ÏíßÏí®Ïí©ÔøΩ".split("");
    for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 65533) {
        e[D[156][j]] = 39936 + j;
        d[39936 + j] = D[156][j];
    };
    D[157] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏí™Ïí´Ïí¨Ïí≠ÏíÆÏíØÏí∞Ïí±Ïí≤Ïí≥Ïí¥ÏíµÏí∂Ïí∑ÏíπÏí∫ÏíªÏíΩÏíæÏíøÏìÄÏìÅÏìÇÏìÉÏìÑÏìÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏìÜÏìáÏìàÏìâÏìäÏìãÏìåÏìçÏìéÏìèÏìêÏìëÏìíÏììÏìîÏìïÏìñÏìóÏìòÏìôÏìöÏìõÏìúÏìùÏìûÏìüÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏì†Ïì°Ïì¢Ïì£Ïì§Ïì•Ïì¶ÏìßÏì®Ïì™Ïì´Ïì¨Ïì≠ÏìÆÏìØÏì≤Ïì≥ÏìµÏì∂Ïì∑ÏìπÏìªÏìºÏìΩÏìæÏîÇÏîÉÏîÑÏîÖÏîÜÏîáÏîàÏîâÏîäÏîãÏîçÏîéÏîèÏîëÏîíÏîìÏîïÏîñÏîóÏîòÏîôÏîöÏîõÏîùÏîûÏîüÏî†Ïî°Ïî¢Ïî£Ïî§Ïî•Ïî¶ÏîßÏî™Ïî´Ïî≠ÏîÆÏîØÏî±Ïî≤Ïî≥Ïî¥ÏîµÏî∂Ïî∑Ïî∫ÏîºÏîæÏîøÏïÄÏïÅÏïÇÏïÉÏïÜÏïáÏïãÏïèÏïêÏïëÏïíÏïñÏïöÏïõÏïúÏïüÏï¢Ïï£Ïï•Ïï¶ÏïßÏï©Ïï™Ïï´Ïï¨Ïï≠ÏïÆÏïØÏï≤Ïï∂Ïï∑Ïï∏ÏïπÏï∫ÏïªÏïæÏïøÏñÅÏñÇÏñÉÏñÖÏñÜÏñàÏñâÏñäÏñãÏñéÏñêÏñíÏñìÏñîÔøΩ".split("");
    for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 65533) {
        e[D[157][j]] = 40192 + j;
        d[40192 + j] = D[157][j];
    };
    D[158] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏññÏñôÏñöÏñõÏñùÏñûÏñüÏñ°Ïñ¢Ïñ£Ïñ§Ïñ•Ïñ¶ÏñßÏñ®Ïñ™Ïñ´Ïñ¨Ïñ≠ÏñÆÏñØÏñ∞Ïñ±Ïñ≤Ïñ≥Ïñ∂ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏñ∑Ïñ∫ÏñøÏóÄÏóÅÏóÇÏóÉÏóãÏóçÏóèÏóíÏóìÏóïÏóñÏóóÏóôÏóöÏóõÏóúÏóùÏóûÏóüÏó¢Ïó§Ïó¶ÏóßÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏó®Ïó©Ïó™Ïó´ÏóØÏó±Ïó≤Ïó≥ÏóµÏó∏ÏóπÏó∫ÏóªÏòÇÏòÉÏòÑÏòâÏòäÏòãÏòçÏòéÏòèÏòëÏòíÏòìÏòîÏòïÏòñÏòóÏòöÏòùÏòûÏòüÏò†Ïò°Ïò¢Ïò£Ïò¶ÏòßÏò©Ïò™Ïò´ÏòØÏò±Ïò≤Ïò∂Ïò∏Ïò∫ÏòºÏòΩÏòæÏòøÏôÇÏôÉÏôÖÏôÜÏôáÏôâÏôäÏôãÏôåÏôçÏôéÏôèÏôíÏôñÏôóÏôòÏôôÏôöÏôõÏôûÏôüÏô°Ïô¢Ïô£Ïô§Ïô•Ïô¶ÏôßÏô®Ïô©Ïô™Ïô´Ïô≠ÏôÆÏô∞Ïô≤Ïô≥Ïô¥ÏôµÏô∂Ïô∑Ïô∫ÏôªÏôΩÏôæÏôøÏöÅÏöÇÏöÉÏöÑÏöÖÏöÜÏöáÏöäÏöåÏöéÏöèÏöêÏöëÏöíÏöìÏöñÏöóÏöôÏööÏöõÏöùÏöûÏöüÏö†Ïö°Ïö¢Ïö£Ïö¶ÔøΩ".split("");
    for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 65533) {
        e[D[158][j]] = 40448 + j;
        d[40448 + j] = D[158][j];
    };
    D[159] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏö®Ïö™Ïö´Ïö¨Ïö≠ÏöÆÏöØÏö≤Ïö≥ÏöµÏö∂Ïö∑ÏöªÏöºÏöΩÏöæÏöøÏõÇÏõÑÏõÜÏõáÏõàÏõâÏõäÏõãÏõéÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏõèÏõëÏõíÏõìÏõïÏõñÏõóÏõòÏõôÏõöÏõõÏõûÏõüÏõ¢Ïõ£Ïõ§Ïõ•Ïõ¶ÏõßÏõ™Ïõ´Ïõ≠ÏõÆÏõØÏõ±Ïõ≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏõ≥Ïõ¥ÏõµÏõ∂Ïõ∑Ïõ∫ÏõªÏõºÏõæÏõøÏúÄÏúÅÏúÇÏúÉÏúÜÏúáÏúâÏúäÏúãÏúçÏúéÏúèÏúêÏúëÏúíÏúìÏúñÏúòÏúöÏúõÏúúÏúùÏúûÏúüÏú¢Ïú£Ïú•Ïú¶ÏúßÏú©Ïú™Ïú´Ïú¨Ïú≠ÏúÆÏúØÏú≤Ïú¥Ïú∂Ïú∏ÏúπÏú∫ÏúªÏúæÏúøÏùÅÏùÇÏùÉÏùÖÏùÜÏùáÏùàÏùâÏùãÏùéÏùêÏùôÏùöÏùõÏùùÏùûÏùüÏù°Ïù¢Ïù£Ïù§Ïù•Ïù¶ÏùßÏù©Ïù™Ïù¨Ïù≠ÏùÆÏùØÏù∞Ïù±Ïù≤Ïù≥Ïù∂Ïù∑ÏùπÏù∫ÏùªÏùøÏûÄÏûÅÏûÇÏûÜÏûãÏûåÏûçÏûèÏûíÏûìÏûïÏûôÏûõÏûúÏûùÏûûÏûüÏû¢ÏûßÏû®Ïû©Ïû™Ïû´ÏûÆÏûØÏû±Ïû≤Ïû≥ÏûµÏû∂Ïû∑ÔøΩ".split("");
    for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 65533) {
        e[D[159][j]] = 40704 + j;
        d[40704 + j] = D[159][j];
    };
    D[160] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏû∏ÏûπÏû∫ÏûªÏûæÏüÇÏüÉÏüÑÏüÖÏüÜÏüáÏüäÏüãÏüçÏüèÏüëÏüíÏüìÏüîÏüïÏüñÏüóÏüôÏüöÏüõÏüúÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏüûÏüüÏü†Ïü°Ïü¢Ïü£Ïü•Ïü¶ÏüßÏü©Ïü™Ïü´Ïü≠ÏüÆÏüØÏü∞Ïü±Ïü≤Ïü≥Ïü¥ÏüµÏü∂Ïü∑Ïü∏ÏüπÏü∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏüªÏüºÏüΩÏüæÏüøÏ†ÇÏ†ÉÏ†ÖÏ†ÜÏ†áÏ†âÏ†ãÏ†åÏ†çÏ†éÏ†èÏ†íÏ†îÏ†óÏ†òÏ†ôÏ†öÏ†õÏ†ûÏ†üÏ†°Ï†¢Ï†£Ï†•Ï†¶Ï†ßÏ†®Ï†©Ï†™Ï†´Ï†ÆÏ†∞Ï†≤Ï†≥Ï†¥Ï†µÏ†∂Ï†∑Ï†πÏ†∫Ï†ªÏ†ΩÏ†æÏ†øÏ°ÅÏ°ÇÏ°ÉÏ°ÑÏ°ÖÏ°ÜÏ°áÏ°äÏ°ãÏ°éÏ°èÏ°êÏ°ëÏ°íÏ°ìÏ°ïÏ°ñÏ°óÏ°òÏ°ôÏ°öÏ°õÏ°úÏ°ùÏ°ûÏ°üÏ°†Ï°°Ï°¢Ï°£Ï°§Ï°•Ï°¶Ï°ßÏ°®Ï°©Ï°™Ï°´Ï°¨Ï°≠Ï°ÆÏ°ØÏ°≤Ï°≥Ï°µÏ°∂Ï°∑Ï°πÏ°ªÏ°ºÏ°ΩÏ°æÏ°øÏ¢ÇÏ¢ÑÏ¢àÏ¢âÏ¢äÏ¢éÏ¢èÏ¢êÏ¢ëÏ¢íÏ¢ìÏ¢ïÏ¢ñÏ¢óÏ¢òÏ¢ôÏ¢öÏ¢õÏ¢úÏ¢ûÏ¢†Ï¢¢Ï¢£Ï¢§ÔøΩ".split("");
    for (j = 0; j != D[160].length; ++j) if (D[160][j].charCodeAt(0) !== 65533) {
        e[D[160][j]] = 40960 + j;
        d[40960 + j] = D[160][j];
    };
    D[161] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¢•Ï¢¶Ï¢ßÏ¢©Ï¢™Ï¢´Ï¢¨Ï¢≠Ï¢ÆÏ¢ØÏ¢∞Ï¢±Ï¢≤Ï¢≥Ï¢¥Ï¢µÏ¢∂Ï¢∑Ï¢∏Ï¢πÏ¢∫Ï¢ªÏ¢æÏ¢øÏ£ÄÏ£ÅÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ£ÇÏ£ÉÏ£ÖÏ£ÜÏ£áÏ£âÏ£äÏ£ãÏ£çÏ£éÏ£èÏ£êÏ£ëÏ£íÏ£ìÏ£ñÏ£òÏ£öÏ£õÏ£úÏ£ùÏ£ûÏ£üÏ£¢Ï££Ï£•ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ£¶Ï£ßÏ£®Ï£©Ï£™Ï£´Ï£¨Ï£≠Ï£ÆÏ£ØÏ£∞Ï£±Ï£≤Ï£≥Ï£¥Ï£∂Ï£∑Ï£∏Ï£πÏ£∫Ï£ªÏ£æÏ£øÏ§ÅÏ§ÇÏ§ÉÏ§áÏ§àÏ§âÏ§äÏ§ãÏ§é\u3000„ÄÅ„ÄÇ¬∑\u2025\u2026¬®„ÄÉ¬≠\u2015‚à•Ôºº‚àº\u2018\u2019\u201c\u201d„Äî„Äï„Äà„Äâ„Ää„Äã„Äå„Äç„Äé„Äè„Äê„Äë¬±√ó√∑‚â†‚â§‚â•‚àû‚à¥¬∞\u2032\u2033‚ÑÉ‚Ñ´Ôø†Ôø°Ôø•‚ôÇ‚ôÄ‚à†‚ä•‚åí‚àÇ‚àá‚â°‚âí¬ß\u203b‚òÜ‚òÖ‚óã‚óè‚óé‚óá‚óÜ‚ñ°‚ñ†‚ñ≥‚ñ≤‚ñΩ‚ñº‚Üí‚Üê‚Üë‚Üì‚Üî„Äì‚â™‚â´‚àö‚àΩ‚àù‚àµ‚à´‚à¨‚àà‚àã‚äÜ‚äá‚äÇ‚äÉ‚à™‚à©‚àß‚à®Ôø¢ÔøΩ".split("");
    for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) {
        e[D[161][j]] = 41216 + j;
        d[41216 + j] = D[161][j];
    };
    D[162] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ§êÏ§íÏ§ìÏ§îÏ§ïÏ§ñÏ§óÏ§ôÏ§öÏ§õÏ§úÏ§ùÏ§ûÏ§üÏ§†Ï§°Ï§¢Ï§£Ï§§Ï§•Ï§¶Ï§ßÏ§®Ï§©Ï§™Ï§´ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ§≠Ï§ÆÏ§ØÏ§∞Ï§±Ï§≤Ï§≥Ï§µÏ§∂Ï§∑Ï§∏Ï§πÏ§∫Ï§ªÏ§ºÏ§ΩÏ§æÏ§øÏ•ÄÏ•ÅÏ•ÇÏ•ÉÏ•ÑÏ•ÖÏ•ÜÏ•áÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ•àÏ•âÏ•äÏ•ãÏ•åÏ•çÏ•éÏ•èÏ•íÏ•ìÏ•ïÏ•ñÏ•óÏ•ôÏ•öÏ•õÏ•úÏ•ùÏ•ûÏ•üÏ•¢Ï•§Ï••Ï•¶Ï•ßÏ•®Ï•©Ï•™Ï•´Ï•≠Ï•ÆÏ•Ø‚áí‚áî‚àÄ‚àÉ¬¥ÔΩûÀáÀòÀùÀöÀô¬∏Àõ¬°¬øÀê‚àÆ‚àë‚àè¬§‚Ñâ\u2030‚óÅ‚óÄ‚ñ∑‚ñ∂‚ô§‚ô†‚ô°‚ô•‚ôß‚ô£‚äô‚óà‚ñ£‚óê‚óë‚ñí‚ñ§‚ñ•‚ñ®‚ñß‚ñ¶‚ñ©‚ô®‚òè‚òé‚òú‚òû¬∂\u2020\u2021‚Üï‚Üó‚Üô‚Üñ‚Üò‚ô≠‚ô©‚ô™‚ô¨„âø„àú‚Ññ„èá‚Ñ¢„èÇ„èò‚Ñ°‚Ç¨¬ÆÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) {
        e[D[162][j]] = 41472 + j;
        d[41472 + j] = D[162][j];
    };
    D[163] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ•±Ï•≤Ï•≥Ï•µÏ•∂Ï•∑Ï•∏Ï•πÏ•∫Ï•ªÏ•ΩÏ•æÏ•øÏ¶ÄÏ¶ÅÏ¶ÇÏ¶ÉÏ¶ÑÏ¶ÖÏ¶ÜÏ¶áÏ¶äÏ¶ãÏ¶çÏ¶éÏ¶èÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¶ëÏ¶íÏ¶ìÏ¶îÏ¶ïÏ¶ñÏ¶óÏ¶öÏ¶úÏ¶ûÏ¶üÏ¶†Ï¶°Ï¶¢Ï¶£Ï¶§Ï¶•Ï¶¶Ï¶ßÏ¶®Ï¶©Ï¶™Ï¶´Ï¶¨Ï¶≠Ï¶ÆÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¶ØÏ¶∞Ï¶±Ï¶≤Ï¶≥Ï¶¥Ï¶µÏ¶∂Ï¶∑Ï¶∏Ï¶πÏ¶∫Ï¶ªÏ¶ºÏ¶ΩÏ¶æÏ¶øÏßÇÏßÉÏßÖÏßÜÏßâÏßãÏßåÏßçÏßéÏßèÏßíÏßîÏßóÏßòÏßõÔºÅÔºÇÔºÉÔºÑÔºÖÔºÜÔºáÔºàÔºâÔºäÔºãÔºåÔºçÔºéÔºèÔºêÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºôÔºöÔºõÔºúÔºùÔºûÔºüÔº†Ôº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫ÔºªÔø¶ÔºΩÔºæÔºøÔΩÄÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔΩóÔΩòÔΩôÔΩöÔΩõÔΩúÔΩùÔø£ÔøΩ".split("");
    for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) {
        e[D[163][j]] = 41728 + j;
        d[41728 + j] = D[163][j];
    };
    D[164] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏßûÏßüÏß°Ïß£Ïß•Ïß¶Ïß®Ïß©Ïß™Ïß´ÏßÆÏß≤Ïß≥Ïß¥ÏßµÏß∂Ïß∑Ïß∫ÏßªÏßΩÏßæÏßøÏ®ÅÏ®ÇÏ®ÉÏ®ÑÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ®ÖÏ®ÜÏ®áÏ®äÏ®éÏ®èÏ®êÏ®ëÏ®íÏ®ìÏ®ïÏ®ñÏ®óÏ®ôÏ®öÏ®õÏ®úÏ®ùÏ®ûÏ®üÏ®†Ï®°Ï®¢Ï®£Ï®§Ï®•ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ®¶Ï®ßÏ®®Ï®™Ï®´Ï®¨Ï®≠Ï®ÆÏ®ØÏ®∞Ï®±Ï®≤Ï®≥Ï®¥Ï®µÏ®∂Ï®∑Ï®∏Ï®πÏ®∫Ï®ªÏ®ºÏ®ΩÏ®æÏ®øÏ©ÄÏ©ÅÏ©ÇÏ©ÉÏ©ÑÏ©ÖÏ©Ü„Ñ±„Ñ≤„Ñ≥„Ñ¥„Ñµ„Ñ∂„Ñ∑„Ñ∏„Ñπ„Ñ∫„Ñª„Ñº„ÑΩ„Ñæ„Ñø„ÖÄ„ÖÅ„ÖÇ„ÖÉ„ÖÑ„ÖÖ„ÖÜ„Öá„Öà„Öâ„Öä„Öã„Öå„Öç„Öé„Öè„Öê„Öë„Öí„Öì„Öî„Öï„Öñ„Öó„Öò„Öô„Öö„Öõ„Öú„Öù„Öû„Öü„Ö†„Ö°„Ö¢„Ö£„Ö§„Ö•„Ö¶„Öß„Ö®„Ö©„Ö™„Ö´„Ö¨„Ö≠„ÖÆ„ÖØ„Ö∞„Ö±„Ö≤„Ö≥„Ö¥„Öµ„Ö∂„Ö∑„Ö∏„Öπ„Ö∫„Öª„Öº„ÖΩ„Öæ„Öø„ÜÄ„ÜÅ„ÜÇ„ÜÉ„ÜÑ„ÜÖ„ÜÜ„Üá„Üà„Üâ„Üä„Üã„Üå„Üç„ÜéÔøΩ".split("");
    for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) {
        e[D[164][j]] = 41984 + j;
        d[41984 + j] = D[164][j];
    };
    D[165] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ©áÏ©àÏ©âÏ©äÏ©ãÏ©éÏ©èÏ©ëÏ©íÏ©ìÏ©ïÏ©ñÏ©óÏ©òÏ©ôÏ©öÏ©õÏ©ûÏ©¢Ï©£Ï©§Ï©•Ï©¶Ï©ßÏ©©Ï©™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ©´Ï©¨Ï©≠Ï©ÆÏ©ØÏ©∞Ï©±Ï©≤Ï©≥Ï©¥Ï©µÏ©∂Ï©∑Ï©∏Ï©πÏ©∫Ï©ªÏ©ºÏ©æÏ©øÏ™ÄÏ™ÅÏ™ÇÏ™ÉÏ™ÖÏ™ÜÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ™áÏ™àÏ™âÏ™äÏ™ãÏ™åÏ™çÏ™éÏ™èÏ™êÏ™ëÏ™íÏ™ìÏ™îÏ™ïÏ™ñÏ™óÏ™ôÏ™öÏ™õÏ™úÏ™ùÏ™ûÏ™üÏ™†Ï™°Ï™¢Ï™£Ï™§Ï™•Ï™¶Ï™ß‚Ö∞‚Ö±‚Ö≤‚Ö≥‚Ö¥‚Öµ‚Ö∂‚Ö∑‚Ö∏‚ÖπÔøΩÔøΩÔøΩÔøΩÔøΩ‚Ö†‚Ö°‚Ö¢‚Ö£‚Ö§‚Ö•‚Ö¶‚Öß‚Ö®‚Ö©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) {
        e[D[165][j]] = 42240 + j;
        d[42240 + j] = D[165][j];
    };
    D[166] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ™®Ï™©Ï™™Ï™´Ï™¨Ï™≠Ï™ÆÏ™ØÏ™∞Ï™±Ï™≤Ï™≥Ï™¥Ï™µÏ™∂Ï™∑Ï™∏Ï™πÏ™∫Ï™ªÏ™æÏ™øÏ´ÅÏ´ÇÏ´ÉÏ´ÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ´ÜÏ´áÏ´àÏ´âÏ´äÏ´ãÏ´éÏ´êÏ´íÏ´îÏ´ïÏ´ñÏ´óÏ´öÏ´õÏ´úÏ´ùÏ´ûÏ´üÏ´°Ï´¢Ï´£Ï´§Ï´•Ï´¶Ï´ßÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ´®Ï´©Ï´™Ï´´Ï´≠Ï´ÆÏ´ØÏ´∞Ï´±Ï´≤Ï´≥Ï´µÏ´∂Ï´∑Ï´∏Ï´πÏ´∫Ï´ªÏ´ºÏ´ΩÏ´æÏ´øÏ¨ÄÏ¨ÅÏ¨ÇÏ¨ÉÏ¨ÑÏ¨ÖÏ¨ÜÏ¨áÏ¨âÏ¨ä‚îÄ‚îÇ‚îå‚îê‚îò‚îî‚îú‚î¨‚î§‚î¥‚îº‚îÅ‚îÉ‚îè‚îì‚îõ‚îó‚î£‚î≥‚î´‚îª‚ïã‚î†‚îØ‚î®‚î∑‚îø‚îù‚î∞‚î•‚î∏‚ïÇ‚îí‚îë‚îö‚îô‚îñ‚îï‚îé‚îç‚îû‚îü‚î°‚î¢‚î¶‚îß‚î©‚î™‚î≠‚îÆ‚î±‚î≤‚îµ‚î∂‚îπ‚î∫‚îΩ‚îæ‚ïÄ‚ïÅ‚ïÉ‚ïÑ‚ïÖ‚ïÜ‚ïá‚ïà‚ïâ‚ïäÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) {
        e[D[166][j]] = 42496 + j;
        d[42496 + j] = D[166][j];
    };
    D[167] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¨ãÏ¨åÏ¨çÏ¨éÏ¨èÏ¨ëÏ¨íÏ¨ìÏ¨ïÏ¨ñÏ¨óÏ¨ôÏ¨öÏ¨õÏ¨úÏ¨ùÏ¨ûÏ¨üÏ¨¢Ï¨£Ï¨§Ï¨•Ï¨¶Ï¨ßÏ¨®Ï¨©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¨™Ï¨´Ï¨¨Ï¨≠Ï¨ÆÏ¨ØÏ¨∞Ï¨±Ï¨≤Ï¨≥Ï¨¥Ï¨µÏ¨∂Ï¨∑Ï¨∏Ï¨πÏ¨∫Ï¨ªÏ¨ºÏ¨ΩÏ¨æÏ¨øÏ≠ÄÏ≠ÇÏ≠ÉÏ≠ÑÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ≠ÖÏ≠ÜÏ≠áÏ≠äÏ≠ãÏ≠çÏ≠éÏ≠èÏ≠ëÏ≠íÏ≠ìÏ≠îÏ≠ïÏ≠ñÏ≠óÏ≠öÏ≠õÏ≠úÏ≠ûÏ≠üÏ≠†Ï≠°Ï≠¢Ï≠£Ï≠•Ï≠¶Ï≠ßÏ≠®Ï≠©Ï≠™Ï≠´Ï≠¨„éï„éñ„éó‚Ñì„éò„èÑ„é£„é§„é•„é¶„éô„éö„éõ„éú„éù„éû„éü„é†„é°„é¢„èä„éç„éé„éè„èè„éà„éâ„èà„éß„é®„é∞„é±„é≤„é≥„é¥„éµ„é∂„é∑„é∏„éπ„éÄ„éÅ„éÇ„éÉ„éÑ„é∫„éª„éº„éΩ„éæ„éø„éê„éë„éí„éì„éî‚Ñ¶„èÄ„èÅ„éä„éã„éå„èñ„èÖ„é≠„éÆ„éØ„èõ„é©„é™„é´„é¨„èù„èê„èì„èÉ„èâ„èú„èÜÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) {
        e[D[167][j]] = 42752 + j;
        d[42752 + j] = D[167][j];
    };
    D[168] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ≠≠Ï≠ÆÏ≠ØÏ≠∞Ï≠±Ï≠≤Ï≠≥Ï≠¥Ï≠µÏ≠∂Ï≠∑Ï≠∫Ï≠ªÏ≠ºÏ≠ΩÏ≠æÏ≠øÏÆÄÏÆÅÏÆÇÏÆÉÏÆÑÏÆÖÏÆÜÏÆáÏÆàÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÆâÏÆäÏÆãÏÆåÏÆçÏÆéÏÆèÏÆêÏÆëÏÆíÏÆìÏÆîÏÆïÏÆñÏÆóÏÆòÏÆôÏÆöÏÆõÏÆùÏÆûÏÆüÏÆ†ÏÆ°ÏÆ¢ÏÆ£ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏÆ§ÏÆ•ÏÆ¶ÏÆßÏÆ®ÏÆ©ÏÆ™ÏÆ´ÏÆ¨ÏÆ≠ÏÆÆÏÆØÏÆ∞ÏÆ±ÏÆ≤ÏÆ≥ÏÆ¥ÏÆµÏÆ∂ÏÆ∑ÏÆπÏÆ∫ÏÆªÏÆºÏÆΩÏÆæÏÆøÏØÄÏØÅÏØÇÏØÉÏØÑ√Ü√ê¬™ƒ¶ÔøΩƒ≤ÔøΩƒø≈Å√ò≈í¬∫√û≈¶≈äÔøΩ„â†„â°„â¢„â£„â§„â•„â¶„âß„â®„â©„â™„â´„â¨„â≠„âÆ„âØ„â∞„â±„â≤„â≥„â¥„âµ„â∂„â∑„â∏„âπ„â∫„âª‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®‚ë©‚ë™‚ë´‚ë¨‚ë≠‚ëÆ¬Ω‚Öì‚Öî¬º¬æ‚Öõ‚Öú‚Öù‚ÖûÔøΩ".split("");
    for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) {
        e[D[168][j]] = 43008 + j;
        d[43008 + j] = D[168][j];
    };
    D[169] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏØÖÏØÜÏØáÏØàÏØâÏØäÏØãÏØåÏØçÏØéÏØèÏØêÏØëÏØíÏØìÏØïÏØñÏØóÏØòÏØôÏØöÏØõÏØúÏØùÏØûÏØüÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏØ†ÏØ°ÏØ¢ÏØ£ÏØ•ÏØ¶ÏØ®ÏØ™ÏØ´ÏØ¨ÏØ≠ÏØÆÏØØÏØ∞ÏØ±ÏØ≤ÏØ≥ÏØ¥ÏØµÏØ∂ÏØ∑ÏØ∏ÏØπÏØ∫ÏØªÏØºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏØΩÏØæÏØøÏ∞ÄÏ∞ÅÏ∞ÇÏ∞ÉÏ∞ÑÏ∞ÖÏ∞ÜÏ∞áÏ∞àÏ∞âÏ∞äÏ∞ãÏ∞éÏ∞èÏ∞ëÏ∞íÏ∞ìÏ∞ïÏ∞ñÏ∞óÏ∞òÏ∞ôÏ∞öÏ∞õÏ∞ûÏ∞üÏ∞†Ï∞£Ï∞§√¶ƒë√∞ƒßƒ±ƒ≥ƒ∏≈Ä≈Ç√∏≈ì√ü√æ≈ß≈ã≈â„àÄ„àÅ„àÇ„àÉ„àÑ„àÖ„àÜ„àá„àà„àâ„àä„àã„àå„àç„àé„àè„àê„àë„àí„àì„àî„àï„àñ„àó„àò„àô„àö„àõ‚íú‚íù‚íû‚íü‚í†‚í°‚í¢‚í£‚í§‚í•‚í¶‚íß‚í®‚í©‚í™‚í´‚í¨‚í≠‚íÆ‚íØ‚í∞‚í±‚í≤‚í≥‚í¥‚íµ‚ë¥‚ëµ‚ë∂‚ë∑‚ë∏‚ëπ‚ë∫‚ëª‚ëº‚ëΩ‚ëæ‚ëø‚íÄ‚íÅ‚íÇ¬π¬≤¬≥‚Å¥‚Åø‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑÔøΩ".split("");
    for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) {
        e[D[169][j]] = 43264 + j;
        d[43264 + j] = D[169][j];
    };
    D[170] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∞•Ï∞¶Ï∞™Ï∞´Ï∞≠Ï∞ØÏ∞±Ï∞≤Ï∞≥Ï∞¥Ï∞µÏ∞∂Ï∞∑Ï∞∫Ï∞øÏ±ÄÏ±ÅÏ±ÇÏ±ÉÏ±ÜÏ±áÏ±âÏ±äÏ±ãÏ±çÏ±éÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ±èÏ±êÏ±ëÏ±íÏ±ìÏ±ñÏ±öÏ±õÏ±úÏ±ùÏ±ûÏ±üÏ±°Ï±¢Ï±£Ï±•Ï±ßÏ±©Ï±™Ï±´Ï±¨Ï±≠Ï±ÆÏ±ØÏ±±Ï±≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ±≥Ï±¥Ï±∂Ï±∑Ï±∏Ï±πÏ±∫Ï±ªÏ±ºÏ±ΩÏ±æÏ±øÏ≤ÄÏ≤ÅÏ≤ÇÏ≤ÉÏ≤ÑÏ≤ÖÏ≤ÜÏ≤áÏ≤àÏ≤âÏ≤äÏ≤ãÏ≤åÏ≤çÏ≤éÏ≤èÏ≤êÏ≤ëÏ≤íÏ≤ì„ÅÅ„ÅÇ„ÅÉ„ÅÑ„ÅÖ„ÅÜ„Åá„Åà„Åâ„Åä„Åã„Åå„Åç„Åé„Åè„Åê„Åë„Åí„Åì„Åî„Åï„Åñ„Åó„Åò„Åô„Åö„Åõ„Åú„Åù„Åû„Åü„Å†„Å°„Å¢„Å£„Å§„Å•„Å¶„Åß„Å®„Å©„Å™„Å´„Å¨„Å≠„ÅÆ„ÅØ„Å∞„Å±„Å≤„Å≥„Å¥„Åµ„Å∂„Å∑„Å∏„Åπ„Å∫„Åª„Åº„ÅΩ„Åæ„Åø„ÇÄ„ÇÅ„ÇÇ„ÇÉ„ÇÑ„ÇÖ„ÇÜ„Çá„Çà„Çâ„Çä„Çã„Çå„Çç„Çé„Çè„Çê„Çë„Çí„ÇìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 65533) {
        e[D[170][j]] = 43520 + j;
        d[43520 + j] = D[170][j];
    };
    D[171] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ≤îÏ≤ïÏ≤ñÏ≤óÏ≤öÏ≤õÏ≤ùÏ≤ûÏ≤üÏ≤°Ï≤¢Ï≤£Ï≤§Ï≤•Ï≤¶Ï≤ßÏ≤™Ï≤ÆÏ≤ØÏ≤∞Ï≤±Ï≤≤Ï≤≥Ï≤∂Ï≤∑Ï≤πÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ≤∫Ï≤ªÏ≤ΩÏ≤æÏ≤øÏ≥ÄÏ≥ÅÏ≥ÇÏ≥ÉÏ≥ÜÏ≥àÏ≥äÏ≥ãÏ≥åÏ≥çÏ≥éÏ≥èÏ≥ëÏ≥íÏ≥ìÏ≥ïÏ≥ñÏ≥óÏ≥òÏ≥ôÏ≥öÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ≥õÏ≥úÏ≥ùÏ≥ûÏ≥üÏ≥†Ï≥°Ï≥¢Ï≥£Ï≥•Ï≥¶Ï≥ßÏ≥®Ï≥©Ï≥™Ï≥´Ï≥≠Ï≥ÆÏ≥ØÏ≥±Ï≥≤Ï≥≥Ï≥¥Ï≥µÏ≥∂Ï≥∑Ï≥∏Ï≥πÏ≥∫Ï≥ªÏ≥ºÏ≥Ω„Ç°„Ç¢„Ç£„Ç§„Ç•„Ç¶„Çß„Ç®„Ç©„Ç™„Ç´„Ç¨„Ç≠„ÇÆ„ÇØ„Ç∞„Ç±„Ç≤„Ç≥„Ç¥„Çµ„Ç∂„Ç∑„Ç∏„Çπ„Ç∫„Çª„Çº„ÇΩ„Çæ„Çø„ÉÄ„ÉÅ„ÉÇ„ÉÉ„ÉÑ„ÉÖ„ÉÜ„Éá„Éà„Éâ„Éä„Éã„Éå„Éç„Éé„Éè„Éê„Éë„Éí„Éì„Éî„Éï„Éñ„Éó„Éò„Éô„Éö„Éõ„Éú„Éù„Éû„Éü„É†„É°„É¢„É£„É§„É•„É¶„Éß„É®„É©„É™„É´„É¨„É≠„ÉÆ„ÉØ„É∞„É±„É≤„É≥„É¥„Éµ„É∂ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 65533) {
        e[D[171][j]] = 43776 + j;
        d[43776 + j] = D[171][j];
    };
    D[172] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ≥æÏ≥øÏ¥ÄÏ¥ÇÏ¥ÉÏ¥ÑÏ¥ÖÏ¥ÜÏ¥áÏ¥äÏ¥ãÏ¥çÏ¥éÏ¥èÏ¥ëÏ¥íÏ¥ìÏ¥îÏ¥ïÏ¥ñÏ¥óÏ¥öÏ¥úÏ¥ûÏ¥üÏ¥†ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¥°Ï¥¢Ï¥£Ï¥•Ï¥¶Ï¥ßÏ¥©Ï¥™Ï¥´Ï¥≠Ï¥ÆÏ¥ØÏ¥∞Ï¥±Ï¥≤Ï¥≥Ï¥¥Ï¥µÏ¥∂Ï¥∑Ï¥∏Ï¥∫Ï¥ªÏ¥ºÏ¥ΩÏ¥æÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ¥øÏµÄÏµÅÏµÇÏµÉÏµÑÏµÖÏµÜÏµáÏµàÏµâÏµäÏµãÏµåÏµçÏµéÏµèÏµêÏµëÏµíÏµìÏµîÏµïÏµñÏµóÏµòÏµôÏµöÏµõÏµùÏµûÏµü–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–ØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 65533) {
        e[D[172][j]] = 44032 + j;
        d[44032 + j] = D[172][j];
    };
    D[173] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏµ°Ïµ¢Ïµ£Ïµ•Ïµ¶ÏµßÏµ®Ïµ©Ïµ™Ïµ´ÏµÆÏµ∞Ïµ≤Ïµ≥Ïµ¥ÏµµÏµ∂Ïµ∑ÏµπÏµ∫ÏµªÏµºÏµΩÏµæÏµøÏ∂ÄÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∂ÅÏ∂ÇÏ∂ÉÏ∂ÑÏ∂ÖÏ∂ÜÏ∂áÏ∂âÏ∂äÏ∂ãÏ∂åÏ∂çÏ∂éÏ∂èÏ∂êÏ∂ëÏ∂íÏ∂ìÏ∂ñÏ∂óÏ∂ôÏ∂öÏ∂õÏ∂ùÏ∂ûÏ∂üÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∂†Ï∂°Ï∂¢Ï∂£Ï∂¶Ï∂®Ï∂™Ï∂´Ï∂¨Ï∂≠Ï∂ÆÏ∂ØÏ∂±Ï∂≤Ï∂≥Ï∂¥Ï∂µÏ∂∂Ï∂∑Ï∂∏Ï∂πÏ∂∫Ï∂ªÏ∂ºÏ∂ΩÏ∂æÏ∂øÏ∑ÄÏ∑ÅÏ∑ÇÏ∑ÉÏ∑ÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 65533) {
        e[D[173][j]] = 44288 + j;
        d[44288 + j] = D[173][j];
    };
    D[174] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∑ÜÏ∑áÏ∑àÏ∑âÏ∑äÏ∑ãÏ∑çÏ∑éÏ∑èÏ∑ëÏ∑íÏ∑ìÏ∑îÏ∑ïÏ∑ñÏ∑óÏ∑òÏ∑ôÏ∑öÏ∑õÏ∑úÏ∑ùÏ∑ûÏ∑üÏ∑†Ï∑°ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∑¢Ï∑£Ï∑§Ï∑•Ï∑¶Ï∑ßÏ∑©Ï∑™Ï∑´Ï∑≠Ï∑ÆÏ∑ØÏ∑±Ï∑≤Ï∑≥Ï∑¥Ï∑µÏ∑∂Ï∑∑Ï∑∫Ï∑ºÏ∑æÏ∑øÏ∏ÄÏ∏ÅÏ∏ÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∏ÉÏ∏ÖÏ∏ÜÏ∏áÏ∏âÏ∏äÏ∏ãÏ∏çÏ∏éÏ∏èÏ∏êÏ∏ëÏ∏íÏ∏ìÏ∏ïÏ∏ñÏ∏óÏ∏òÏ∏öÏ∏õÏ∏úÏ∏ùÏ∏ûÏ∏üÏ∏¢Ï∏£Ï∏•Ï∏¶Ï∏ßÏ∏©Ï∏™Ï∏´ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 65533) {
        e[D[174][j]] = 44544 + j;
        d[44544 + j] = D[174][j];
    };
    D[175] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∏¨Ï∏≠Ï∏ÆÏ∏ØÏ∏≤Ï∏¥Ï∏∂Ï∏∑Ï∏∏Ï∏πÏ∏∫Ï∏ªÏ∏ºÏ∏ΩÏ∏æÏ∏øÏπÄÏπÅÏπÇÏπÉÏπÑÏπÖÏπÜÏπáÏπàÏπâÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏπäÏπãÏπåÏπçÏπéÏπèÏπêÏπëÏπíÏπìÏπîÏπïÏπñÏπóÏπöÏπõÏπùÏπûÏπ¢Ïπ£Ïπ§Ïπ•Ïπ¶ÏπßÏπ™Ïπ¨ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏπÆÏπØÏπ∞Ïπ±Ïπ≤Ïπ≥Ïπ∂Ïπ∑ÏππÏπ∫ÏπªÏπΩÏπæÏπøÏ∫ÄÏ∫ÅÏ∫ÇÏ∫ÉÏ∫ÜÏ∫àÏ∫äÏ∫ãÏ∫åÏ∫çÏ∫éÏ∫èÏ∫íÏ∫ìÏ∫ïÏ∫ñÏ∫óÏ∫ôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 65533) {
        e[D[175][j]] = 44800 + j;
        d[44800 + j] = D[175][j];
    };
    D[176] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∫öÏ∫õÏ∫úÏ∫ùÏ∫ûÏ∫üÏ∫¢Ï∫¶Ï∫ßÏ∫®Ï∫©Ï∫™Ï∫´Ï∫ÆÏ∫ØÏ∫∞Ï∫±Ï∫≤Ï∫≥Ï∫¥Ï∫µÏ∫∂Ï∫∑Ï∫∏Ï∫πÏ∫∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏ∫ªÏ∫ºÏ∫ΩÏ∫æÏ∫øÏªÄÏªÇÏªÉÏªÑÏªÖÏªÜÏªáÏªàÏªâÏªäÏªãÏªåÏªçÏªéÏªèÏªêÏªëÏªíÏªìÏªîÏªïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏªñÏªóÏªòÏªôÏªöÏªõÏªúÏªùÏªûÏªüÏª†Ïª°Ïª¢Ïª£Ïª¶ÏªßÏª©Ïª™Ïª≠ÏªÆÏªØÏª∞Ïª±Ïª≤Ïª≥Ïª∂Ïª∫ÏªªÏªºÏªΩÏªæÏªøÍ∞ÄÍ∞ÅÍ∞ÑÍ∞áÍ∞àÍ∞âÍ∞äÍ∞êÍ∞ëÍ∞íÍ∞ìÍ∞îÍ∞ïÍ∞ñÍ∞óÍ∞ôÍ∞öÍ∞õÍ∞úÍ∞ùÍ∞†Í∞§Í∞¨Í∞≠Í∞ØÍ∞∞Í∞±Í∞∏Í∞πÍ∞ºÍ±ÄÍ±ãÍ±çÍ±îÍ±òÍ±úÍ±∞Í±±Í±¥Í±∑Í±∏Í±∫Í≤ÄÍ≤ÅÍ≤ÉÍ≤ÑÍ≤ÖÍ≤ÜÍ≤âÍ≤äÍ≤ãÍ≤åÍ≤êÍ≤îÍ≤úÍ≤ùÍ≤üÍ≤†Í≤°Í≤®Í≤©Í≤™Í≤¨Í≤ØÍ≤∞Í≤∏Í≤πÍ≤ªÍ≤ºÍ≤ΩÍ≥ÅÍ≥ÑÍ≥àÍ≥åÍ≥ïÍ≥óÍ≥†Í≥°Í≥§Í≥ßÍ≥®Í≥™Í≥¨Í≥ØÍ≥∞Í≥±Í≥≥Í≥µÍ≥∂Í≥ºÍ≥ΩÍ¥ÄÍ¥ÑÍ¥ÜÔøΩ".split("");
    for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) {
        e[D[176][j]] = 45056 + j;
        d[45056 + j] = D[176][j];
    };
    D[177] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏºÇÏºÉÏºÖÏºÜÏºáÏºâÏºäÏºãÏºåÏºçÏºéÏºèÏºíÏºîÏºñÏºóÏºòÏºôÏºöÏºõÏºùÏºûÏºüÏº°Ïº¢Ïº£ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏº•Ïº¶ÏºßÏº®Ïº©Ïº™Ïº´ÏºÆÏº≤Ïº≥Ïº¥ÏºµÏº∂Ïº∑ÏºπÏº∫ÏºªÏººÏºΩÏºæÏºøÏΩÄÏΩÅÏΩÇÏΩÉÏΩÑÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏΩÖÏΩÜÏΩáÏΩàÏΩâÏΩäÏΩãÏΩåÏΩçÏΩéÏΩèÏΩêÏΩëÏΩíÏΩìÏΩñÏΩóÏΩôÏΩöÏΩõÏΩùÏΩûÏΩüÏΩ†ÏΩ°ÏΩ¢ÏΩ£ÏΩ¶ÏΩ®ÏΩ™ÏΩ´ÏΩ¨Í¥åÍ¥çÍ¥èÍ¥ëÍ¥òÍ¥úÍ¥†Í¥©Í¥¨Í¥≠Í¥¥Í¥µÍ¥∏Í¥ºÍµÑÍµÖÍµáÍµâÍµêÍµîÍµòÍµ°Íµ£Íµ¨Íµ≠Íµ∞Íµ≥Íµ¥ÍµµÍµ∂ÍµªÍµºÍµΩÍµøÍ∂ÅÍ∂ÇÍ∂àÍ∂âÍ∂åÍ∂êÍ∂úÍ∂ùÍ∂§Í∂∑Í∑ÄÍ∑ÅÍ∑ÑÍ∑àÍ∑êÍ∑ëÍ∑ìÍ∑úÍ∑†Í∑§Í∑∏Í∑πÍ∑ºÍ∑øÍ∏ÄÍ∏ÅÍ∏àÍ∏âÍ∏ãÍ∏çÍ∏îÍ∏∞Í∏±Í∏¥Í∏∑Í∏∏Í∏∫ÍπÄÍπÅÍπÉÍπÖÍπÜÍπäÍπåÍπçÍπéÍπêÍπîÍπñÍπúÍπùÍπüÍπ†Íπ°Íπ•Íπ®Íπ©Íπ¨Íπ∞Íπ∏ÔøΩ".split("");
    for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) {
        e[D[177][j]] = 45312 + j;
        d[45312 + j] = D[177][j];
    };
    D[178] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏΩ≠ÏΩÆÏΩØÏΩ≤ÏΩ≥ÏΩµÏΩ∂ÏΩ∑ÏΩπÏΩ∫ÏΩªÏΩºÏΩΩÏΩæÏΩøÏæÅÏæÇÏæÉÏæÑÏæÜÏæáÏæàÏæâÏæäÏæãÏæçÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏæéÏæèÏæêÏæëÏæíÏæìÏæîÏæïÏæñÏæóÏæòÏæôÏæöÏæõÏæúÏæùÏæûÏæüÏæ†Ïæ¢Ïæ£Ïæ§Ïæ•Ïæ¶ÏæßÏæ©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏæ™Ïæ´Ïæ¨Ïæ≠ÏæÆÏæØÏæ±Ïæ≤Ïæ≥Ïæ¥ÏæµÏæ∂Ïæ∑Ïæ∏ÏæπÏæ∫ÏæªÏæºÏæΩÏææÏæøÏøÄÏøÅÏøÇÏøÉÏøÖÏøÜÏøáÏøàÏøâÏøäÏøãÍππÍπªÍπºÍπΩÍ∫ÑÍ∫ÖÍ∫åÍ∫ºÍ∫ΩÍ∫æÍªÄÍªÑÍªåÍªçÍªèÍªêÍªëÍªòÍªôÍªúÍª®Íª´Íª≠Íª¥Íª∏ÍªºÍºáÍºàÍºçÍºêÍº¨Íº≠Íº∞Íº≤Íº¥ÍººÍºΩÍºøÍΩÅÍΩÇÍΩÉÍΩàÍΩâÍΩêÍΩúÍΩùÍΩ§ÍΩ•ÍΩπÍæÄÍæÑÍæàÍæêÍæëÍæïÍæúÍæ∏ÍæπÍæºÍøÄÍøáÍøàÍøâÍøãÍøçÍøéÍøîÍøúÍø®Íø©Íø∞Íø±Íø¥Íø∏ÎÄÄÎÄÅÎÄÑÎÄåÎÄêÎÄîÎÄúÎÄùÎÄ®ÎÅÑÎÅÖÎÅàÎÅäÎÅåÎÅéÎÅìÎÅîÎÅïÎÅóÎÅôÔøΩ".split("");
    for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) {
        e[D[178][j]] = 45568 + j;
        d[45568 + j] = D[178][j];
    };
    D[179] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏøåÏøçÏøéÏøèÏøêÏøëÏøíÏøìÏøîÏøïÏøñÏøóÏøòÏøôÏøöÏøõÏøúÏøùÏøûÏøüÏø¢Ïø£Ïø•Ïø¶ÏøßÏø©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÏø™Ïø´Ïø¨Ïø≠ÏøÆÏøØÏø≤Ïø¥Ïø∂Ïø∑Ïø∏ÏøπÏø∫ÏøªÏøΩÏøæÏøøÌÄÅÌÄÇÌÄÉÌÄÖÌÄÜÌÄáÌÄàÌÄâÌÄäÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÄãÌÄåÌÄçÌÄéÌÄèÌÄêÌÄíÌÄìÌÄîÌÄïÌÄñÌÄóÌÄôÌÄöÌÄõÌÄúÌÄùÌÄûÌÄüÌÄ†ÌÄ°ÌÄ¢ÌÄ£ÌÄ§ÌÄ•ÌÄ¶ÌÄßÌÄ®ÌÄ©ÌÄ™ÌÄ´ÌÄ¨ÎÅùÎÅºÎÅΩÎÇÄÎÇÑÎÇåÎÇçÎÇèÎÇëÎÇòÎÇôÎÇöÎÇúÎÇüÎÇ†ÎÇ°ÎÇ¢ÎÇ®ÎÇ©ÎÇ´ÎÇ¨ÎÇ≠ÎÇÆÎÇØÎÇ±ÎÇ≥ÎÇ¥ÎÇµÎÇ∏ÎÇºÎÉÑÎÉÖÎÉáÎÉàÎÉâÎÉêÎÉëÎÉîÎÉòÎÉ†ÎÉ•ÎÑàÎÑâÎÑãÎÑåÎÑêÎÑíÎÑìÎÑòÎÑôÎÑõÎÑúÎÑùÎÑ£ÎÑ§ÎÑ•ÎÑ®ÎÑ¨ÎÑ¥ÎÑµÎÑ∑ÎÑ∏ÎÑπÎÖÄÎÖÅÎÖÑÎÖàÎÖêÎÖëÎÖîÎÖïÎÖòÎÖúÎÖ†ÎÖ∏ÎÖπÎÖºÎÜÄÎÜÇÎÜàÎÜâÎÜãÎÜçÎÜíÎÜìÎÜîÎÜòÎÜúÎÜ®ÎáåÎáêÎáîÎáúÎáùÔøΩ".split("");
    for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) {
        e[D[179][j]] = 45824 + j;
        d[45824 + j] = D[179][j];
    };
    D[180] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÄÆÌÄØÌÄ∞ÌÄ±ÌÄ≤ÌÄ≥ÌÄ∂ÌÄ∑ÌÄπÌÄ∫ÌÄªÌÄΩÌÄæÌÄøÌÅÄÌÅÅÌÅÇÌÅÉÌÅÜÌÅàÌÅäÌÅãÌÅåÌÅçÌÅéÌÅèÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÅëÌÅíÌÅìÌÅïÌÅñÌÅóÌÅôÌÅöÌÅõÌÅúÌÅùÌÅûÌÅüÌÅ°ÌÅ¢ÌÅ£ÌÅ§ÌÅ•ÌÅ¶ÌÅßÌÅ®ÌÅ©ÌÅ™ÌÅ´ÌÅÆÌÅØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÅ±ÌÅ≤ÌÅ≥ÌÅµÌÅ∂ÌÅ∑ÌÅ∏ÌÅπÌÅ∫ÌÅªÌÅæÌÅøÌÇÄÌÇÇÌÇÉÌÇÑÌÇÖÌÇÜÌÇáÌÇàÌÇâÌÇäÌÇãÌÇåÌÇçÌÇéÌÇèÌÇêÌÇëÌÇíÌÇìÌÇîÎáüÎá®Îá©Îá¨Îá∞ÎáπÎáªÎáΩÎàÑÎàÖÎààÎàãÎàåÎàîÎàïÎàóÎàôÎà†Îà¥ÎàºÎâòÎâúÎâ†Îâ®Îâ©Îâ¥ÎâµÎâºÎäÑÎäÖÎäâÎäêÎäëÎäîÎäòÎäôÎäöÎä†Îä°Îä£Îä•Îä¶Îä™Îä¨Îä∞Îä¥ÎãàÎãâÎãåÎãêÎãíÎãòÎãôÎãõÎãùÎã¢Îã§Îã•Îã¶Îã®Îã´Îã¨Îã≠ÎãÆÎãØÎã≥Îã¥ÎãµÎã∑Îã∏ÎãπÎã∫ÎãªÎãøÎåÄÎåÅÎåÑÎåàÎåêÎåëÎåìÎåîÎåïÎåúÎçîÎçïÎçñÎçòÎçõÎçúÎçûÎçüÎç§Îç•ÔøΩ".split("");
    for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) {
        e[D[180][j]] = 46080 + j;
        d[46080 + j] = D[180][j];
    };
    D[181] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÇïÌÇñÌÇóÌÇòÌÇôÌÇöÌÇõÌÇúÌÇùÌÇûÌÇüÌÇ†ÌÇ°ÌÇ¢ÌÇ£ÌÇ¶ÌÇßÌÇ©ÌÇ™ÌÇ´ÌÇ≠ÌÇÆÌÇØÌÇ∞ÌÇ±ÌÇ≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÇ≥ÌÇ∂ÌÇ∏ÌÇ∫ÌÇªÌÇºÌÇΩÌÇæÌÇøÌÉÇÌÉÉÌÉÖÌÉÜÌÉáÌÉäÌÉãÌÉåÌÉçÌÉéÌÉèÌÉíÌÉñÌÉóÌÉòÌÉôÌÉöÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÉõÌÉûÌÉüÌÉ°ÌÉ¢ÌÉ£ÌÉ•ÌÉ¶ÌÉßÌÉ®ÌÉ©ÌÉ™ÌÉ´ÌÉÆÌÉ≤ÌÉ≥ÌÉ¥ÌÉµÌÉ∂ÌÉ∑ÌÉπÌÉ∫ÌÉªÌÉºÌÉΩÌÉæÌÉøÌÑÄÌÑÅÌÑÇÌÑÉÌÑÑÎçßÎç©Îç´ÎçÆÎç∞Îç±Îç¥Îç∏ÎéÄÎéÅÎéÉÎéÑÎéÖÎéåÎéêÎéîÎé†Îé°Îé®Îé¨ÎèÑÎèÖÎèàÎèãÎèåÎèéÎèêÎèîÎèïÎèóÎèôÎèõÎèùÎè†Îè§Îè®ÎèºÎêêÎêòÎêúÎê†Îê®Îê©Îê´Îê¥ÎëêÎëëÎëîÎëòÎë†Îë°Îë£Îë•Îë¨ÎíÄÎíàÎíùÎí§Îí®Îí¨ÎíµÎí∑ÎíπÎìÄÎìÑÎìàÎìêÎìïÎìúÎìùÎì†Îì£Îì§Îì¶Îì¨Îì≠ÎìØÎì±Îì∏ÎîîÎîïÎîòÎîõÎîúÎî§Îî•ÎîßÎî®Îî©Îî™Îî∞Îî±Îî¥Îî∏ÔøΩ".split("");
    for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) {
        e[D[181][j]] = 46336 + j;
        d[46336 + j] = D[181][j];
    };
    D[182] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÑÖÌÑÜÌÑáÌÑàÌÑâÌÑäÌÑãÌÑåÌÑéÌÑèÌÑêÌÑëÌÑíÌÑìÌÑîÌÑïÌÑñÌÑóÌÑòÌÑôÌÑöÌÑõÌÑúÌÑùÌÑûÌÑüÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÑ†ÌÑ°ÌÑ¢ÌÑ£ÌÑ§ÌÑ•ÌÑ¶ÌÑßÌÑ®ÌÑ©ÌÑ™ÌÑ´ÌÑ¨ÌÑ≠ÌÑÆÌÑØÌÑ≤ÌÑ≥ÌÑµÌÑ∂ÌÑ∑ÌÑπÌÑªÌÑºÌÑΩÌÑæÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÑøÌÖÇÌÖÜÌÖáÌÖàÌÖâÌÖäÌÖãÌÖéÌÖèÌÖëÌÖíÌÖìÌÖïÌÖñÌÖóÌÖòÌÖôÌÖöÌÖõÌÖûÌÖ†ÌÖ¢ÌÖ£ÌÖ§ÌÖ•ÌÖ¶ÌÖßÌÖ©ÌÖ™ÌÖ´ÌÖ≠ÎïÄÎïÅÎïÉÎïÑÎïÖÎïãÎïåÎïçÎïêÎïîÎïúÎïùÎïüÎï†Îï°Îñ†Îñ°Îñ§Îñ®Îñ™Îñ´Îñ∞Îñ±Îñ≥Îñ¥ÎñµÎñªÎñºÎñΩÎóÄÎóÑÎóåÎóçÎóèÎóêÎóëÎóòÎó¨ÎòêÎòëÎòîÎòòÎò•Îò¨Îò¥ÎôàÎô§Îô®ÎöúÎöùÎö†Îö§Îö´Îö¨Îö±ÎõîÎõ∞Îõ¥Îõ∏ÎúÄÎúÅÎúÖÎú®Îú©Îú¨ÎúØÎú∞Îú∏ÎúπÎúªÎùÑÎùàÎùåÎùîÎùïÎù†Îù§Îù®Îù∞Îù±Îù≥ÎùµÎùºÎùΩÎûÄÎûÑÎûåÎûçÎûèÎûêÎûëÎûíÎûñÎûóÔøΩ".split("");
    for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) {
        e[D[182][j]] = 46592 + j;
        d[46592 + j] = D[182][j];
    };
    D[183] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÖÆÌÖØÌÖ∞ÌÖ±ÌÖ≤ÌÖ≥ÌÖ¥ÌÖµÌÖ∂ÌÖ∑ÌÖ∏ÌÖπÌÖ∫ÌÖªÌÖΩÌÖæÌÖøÌÜÄÌÜÅÌÜÇÌÜÉÌÜÖÌÜÜÌÜáÌÜâÌÜäÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÜãÌÜåÌÜçÌÜéÌÜèÌÜêÌÜëÌÜíÌÜìÌÜîÌÜïÌÜñÌÜóÌÜòÌÜôÌÜöÌÜõÌÜúÌÜùÌÜûÌÜüÌÜ¢ÌÜ£ÌÜ•ÌÜ¶ÌÜßÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌÜ©ÌÜ™ÌÜ´ÌÜ¨ÌÜ≠ÌÜÆÌÜØÌÜ≤ÌÜ¥ÌÜ∂ÌÜ∑ÌÜ∏ÌÜπÌÜªÌÜΩÌÜæÌÜøÌáÅÌáÇÌáÉÌáÑÌáÖÌáÜÌááÌáàÌáâÌáäÌáãÌáåÌáçÌáéÌáèÎûòÎûôÎûúÎû†Îû®Îû©Îû´Îû¨Îû≠Îû¥ÎûµÎû∏ÎüáÎüâÎü¨Îü≠Îü∞Îü¥ÎüºÎüΩÎüøÎ†ÄÎ†ÅÎ†áÎ†àÎ†âÎ†åÎ†êÎ†òÎ†ôÎ†õÎ†ùÎ†§Î†•Î†®Î†¨Î†¥Î†µÎ†∑Î†∏Î†πÎ°ÄÎ°ÑÎ°ëÎ°ìÎ°úÎ°ùÎ°†Î°§Î°¨Î°≠Î°ØÎ°±Î°∏Î°ºÎ¢çÎ¢®Î¢∞Î¢¥Î¢∏Î£ÄÎ£ÅÎ£ÉÎ£ÖÎ£åÎ£êÎ£îÎ£ùÎ£üÎ£°Î£®Î£©Î£¨Î£∞Î£∏Î£πÎ£ªÎ£ΩÎ§ÑÎ§òÎ§†Î§ºÎ§ΩÎ•ÄÎ•ÑÎ•åÎ•èÎ•ëÎ•òÎ•ôÎ•úÎ•†Î•®Î•©ÔøΩ".split("");
    for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) {
        e[D[183][j]] = 46848 + j;
        d[46848 + j] = D[183][j];
    };
    D[184] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌáêÌáëÌáíÌáìÌáîÌáïÌáñÌáóÌáôÌáöÌáõÌáúÌáùÌáûÌáüÌá†Ìá°Ìá¢Ìá£Ìá§Ìá•Ìá¶ÌáßÌá®Ìá©Ìá™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌá´Ìá¨Ìá≠ÌáÆÌáØÌá∞Ìá±Ìá≤Ìá≥ÌáµÌá∂Ìá∑ÌáπÌá∫ÌáªÌáºÌáΩÌáæÌáøÌàÄÌàÅÌàÇÌàÉÌàÑÌàÖÌàÜÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌààÌàäÌàãÌàåÌàçÌàéÌàèÌàëÌàíÌàìÌàîÌàïÌàñÌàóÌàòÌàôÌàöÌàõÌàúÌàùÌàûÌàüÌà†Ìà°Ìà¢Ìà£Ìà§Ìà•Ìà¶ÌàßÌà®Ìà©Î•´Î•≠Î•¥Î•µÎ•∏Î•ºÎ¶ÑÎ¶ÖÎ¶áÎ¶âÎ¶äÎ¶çÎ¶éÎ¶¨Î¶≠Î¶∞Î¶¥Î¶ºÎ¶ΩÎ¶øÎßÅÎßàÎßâÎßåÎßéÎßèÎßêÎßëÎßíÎßòÎßôÎßõÎßùÎßûÎß°Îß£Îß§Îß•Îß®Îß¨Îß¥ÎßµÎß∑Îß∏ÎßπÎß∫Î®ÄÎ®ÅÎ®àÎ®ïÎ®∏Î®πÎ®ºÎ©ÄÎ©ÇÎ©àÎ©âÎ©ãÎ©çÎ©éÎ©ìÎ©îÎ©ïÎ©òÎ©úÎ©§Î©•Î©ßÎ©®Î©©Î©∞Î©±Î©¥Î©∏Î™ÉÎ™ÑÎ™ÖÎ™áÎ™åÎ™®Î™©Î™´Î™¨Î™∞Î™≤Î™∏Î™πÎ™ªÎ™ΩÎ´ÑÎ´àÎ´òÎ´ôÎ´ºÔøΩ".split("");
    for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) {
        e[D[184][j]] = 47104 + j;
        d[47104 + j] = D[184][j];
    };
    D[185] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌà™Ìà´ÌàÆÌàØÌà±Ìà≤Ìà≥ÌàµÌà∂Ìà∑Ìà∏ÌàπÌà∫ÌàªÌàæÌâÄÌâÇÌâÉÌâÑÌâÖÌâÜÌâáÌââÌâäÌâãÌâåÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌâçÌâéÌâèÌâêÌâëÌâíÌâìÌâîÌâïÌâñÌâóÌâòÌâôÌâöÌâõÌâùÌâûÌâüÌâ†Ìâ°Ìâ¢Ìâ£Ìâ•Ìâ¶ÌâßÌâ®ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌâ©Ìâ™Ìâ´Ìâ¨Ìâ≠ÌâÆÌâØÌâ∞Ìâ±Ìâ≤Ìâ≥Ìâ¥ÌâµÌâ∂Ìâ∑Ìâ∏ÌâπÌâ∫ÌâªÌâºÌâΩÌâæÌâøÌäÇÌäÉÌäÖÌäÜÌäáÌäâÌääÌäãÌäåÎ¨ÄÎ¨ÑÎ¨çÎ¨èÎ¨ëÎ¨òÎ¨úÎ¨†Î¨©Î¨´Î¨¥Î¨µÎ¨∂Î¨∏Î¨ªÎ¨ºÎ¨ΩÎ¨æÎ≠ÑÎ≠ÖÎ≠áÎ≠âÎ≠çÎ≠èÎ≠êÎ≠îÎ≠òÎ≠°Î≠£Î≠¨ÎÆàÎÆåÎÆêÎÆ§ÎÆ®ÎÆ¨ÎÆ¥ÎÆ∑ÎØÄÎØÑÎØàÎØêÎØìÎØ∏ÎØπÎØºÎØøÎ∞ÄÎ∞ÇÎ∞àÎ∞âÎ∞ãÎ∞åÎ∞çÎ∞èÎ∞ëÎ∞îÎ∞ïÎ∞ñÎ∞óÎ∞òÎ∞õÎ∞úÎ∞ùÎ∞ûÎ∞üÎ∞§Î∞•Î∞ßÎ∞©Î∞≠Î∞∞Î∞±Î∞¥Î∞∏Î±ÄÎ±ÅÎ±ÉÎ±ÑÎ±ÖÎ±âÎ±åÎ±çÎ±êÎ±ùÎ≤ÑÎ≤ÖÎ≤àÎ≤ãÎ≤åÎ≤éÎ≤îÎ≤ïÎ≤óÔøΩ".split("");
    for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) {
        e[D[185][j]] = 47360 + j;
        d[47360 + j] = D[185][j];
    };
    D[186] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌäçÌäéÌäèÌäíÌäìÌäîÌäñÌäóÌäòÌäôÌäöÌäõÌäùÌäûÌäüÌä°Ìä¢Ìä£Ìä•Ìä¶ÌäßÌä®Ìä©Ìä™Ìä´Ìä≠ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌäÆÌäØÌä∞Ìä≤Ìä≥Ìä¥ÌäµÌä∂Ìä∑Ìä∫ÌäªÌäΩÌäæÌãÅÌãÉÌãÑÌãÖÌãÜÌãáÌãäÌãåÌãçÌãéÌãèÌãêÌãëÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌãíÌãìÌãïÌãñÌãóÌãôÌãöÌãõÌãùÌãûÌãüÌã†Ìã°Ìã¢Ìã£Ìã¶ÌãßÌã®Ìã©Ìã™Ìã´Ìã¨Ìã≠ÌãÆÌãØÌã≤Ìã≥ÌãµÌã∂Ìã∑ÌãπÌã∫Î≤ôÎ≤öÎ≤†Î≤°Î≤§Î≤ßÎ≤®Î≤∞Î≤±Î≤≥Î≤¥Î≤µÎ≤ºÎ≤ΩÎ≥ÄÎ≥ÑÎ≥çÎ≥èÎ≥êÎ≥ëÎ≥ïÎ≥òÎ≥úÎ≥¥Î≥µÎ≥∂Î≥∏Î≥ºÎ¥ÑÎ¥ÖÎ¥áÎ¥âÎ¥êÎ¥îÎ¥§Î¥¨ÎµÄÎµàÎµâÎµåÎµêÎµòÎµôÎµ§Îµ®Î∂ÄÎ∂ÅÎ∂ÑÎ∂áÎ∂àÎ∂âÎ∂äÎ∂êÎ∂ëÎ∂ìÎ∂ïÎ∂ôÎ∂öÎ∂úÎ∂§Î∂∞Î∂∏Î∑îÎ∑ïÎ∑òÎ∑úÎ∑©Î∑∞Î∑¥Î∑∏Î∏ÄÎ∏ÉÎ∏ÖÎ∏åÎ∏çÎ∏êÎ∏îÎ∏úÎ∏ùÎ∏üÎπÑÎπÖÎπàÎπåÎπéÎπîÎπïÎπóÎπôÎπöÎπõÎπ†Îπ°Îπ§ÔøΩ".split("");
    for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) {
        e[D[186][j]] = 47616 + j;
        d[47616 + j] = D[186][j];
    };
    D[187] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌãªÌãºÌãΩÌãæÌãøÌåÇÌåÑÌåÜÌåáÌåàÌåâÌåäÌåãÌåèÌåëÌåíÌåìÌåïÌåóÌåòÌåôÌåöÌåõÌåûÌå¢Ìå£ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌå§Ìå¶ÌåßÌå™Ìå´Ìå≠ÌåÆÌåØÌå±Ìå≤Ìå≥Ìå¥ÌåµÌå∂Ìå∑Ìå∫ÌåæÌåøÌçÄÌçÅÌçÇÌçÉÌçÜÌçáÌçàÌçâÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌçäÌçãÌçåÌççÌçéÌçèÌçêÌçëÌçíÌçìÌçîÌçïÌçñÌçóÌçòÌçôÌçöÌçõÌçúÌçùÌçûÌçüÌç†Ìç°Ìç¢Ìç£Ìç§Ìç•Ìç¶ÌçßÌç®Ìç©Îπ®Îπ™Îπ∞Îπ±Îπ≥Îπ¥ÎπµÎπªÎπºÎπΩÎ∫ÄÎ∫ÑÎ∫åÎ∫çÎ∫èÎ∫êÎ∫ëÎ∫òÎ∫ôÎ∫®ÎªêÎªëÎªîÎªóÎªòÎª†Îª£Îª§Îª•Îª¨ÎºÅÎºàÎºâÎºòÎºôÎºõÎºúÎºùÎΩÄÎΩÅÎΩÑÎΩàÎΩêÎΩëÎΩïÎæîÎæ∞ÎøÖÎøåÎøçÎøêÎøîÎøúÎøüÎø°ÏÄºÏÅëÏÅòÏÅúÏÅ†ÏÅ®ÏÅ©ÏÇêÏÇëÏÇîÏÇòÏÇ†ÏÇ°ÏÇ£ÏÇ•ÏÇ¨ÏÇ≠ÏÇØÏÇ∞ÏÇ≥ÏÇ¥ÏÇµÏÇ∂ÏÇºÏÇΩÏÇøÏÉÄÏÉÅÏÉÖÏÉàÏÉâÏÉåÏÉêÏÉòÏÉôÏÉõÏÉúÏÉùÏÉ§ÔøΩ".split("");
    for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) {
        e[D[187][j]] = 47872 + j;
        d[47872 + j] = D[187][j];
    };
    D[188] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌç™Ìç´Ìç¨Ìç≠ÌçÆÌçØÌç∞Ìç±Ìç≤Ìç≥Ìç¥ÌçµÌç∂Ìç∑Ìç∏ÌçπÌç∫ÌçªÌçæÌçøÌéÅÌéÇÌéÉÌéÖÌéÜÌéáÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌéàÌéâÌéäÌéãÌééÌéíÌéìÌéîÌéïÌéñÌéóÌéöÌéõÌéùÌéûÌéüÌé°Ìé¢Ìé£Ìé§Ìé•Ìé¶ÌéßÌé™Ìé¨ÌéÆÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌéØÌé∞Ìé±Ìé≤Ìé≥ÌéµÌé∂Ìé∑ÌéπÌé∫ÌéªÌéΩÌéæÌéøÌèÄÌèÅÌèÇÌèÉÌèÜÌèáÌèäÌèãÌèåÌèçÌèéÌèèÌèëÌèíÌèìÌèîÌèïÌèñÏÉ•ÏÉ®ÏÉ¨ÏÉ¥ÏÉµÏÉ∑ÏÉπÏÑÄÏÑÑÏÑàÏÑêÏÑïÏÑúÏÑùÏÑûÏÑüÏÑ†ÏÑ£ÏÑ§ÏÑ¶ÏÑßÏÑ¨ÏÑ≠ÏÑØÏÑ∞ÏÑ±ÏÑ∂ÏÑ∏ÏÑπÏÑºÏÖÄÏÖàÏÖâÏÖãÏÖåÏÖçÏÖîÏÖïÏÖòÏÖúÏÖ§ÏÖ•ÏÖßÏÖ®ÏÖ©ÏÖ∞ÏÖ¥ÏÖ∏ÏÜÖÏÜåÏÜçÏÜéÏÜêÏÜîÏÜñÏÜúÏÜùÏÜüÏÜ°ÏÜ•ÏÜ®ÏÜ©ÏÜ¨ÏÜ∞ÏÜΩÏáÑÏáàÏáåÏáîÏáóÏáòÏá†Ïá§Ïá®Ïá∞Ïá±Ïá≥ÏáºÏáΩÏàÄÏàÑÏàåÏàçÏàèÏàëÏàòÏàôÏàúÏàüÏà†Ïà®Ïà©Ïà´Ïà≠ÔøΩ".split("");
    for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) {
        e[D[188][j]] = 48128 + j;
        d[48128 + j] = D[188][j];
    };
    D[189] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌèóÌèôÌèöÌèõÌèúÌèùÌèûÌèüÌè†Ìè¢Ìè§Ìè•Ìè¶ÌèßÌè®Ìè©Ìè™Ìè´ÌèÆÌèØÌè±Ìè≤Ìè≥ÌèµÌè∂Ìè∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌè∏ÌèπÌè∫ÌèªÌèæÌêÄÌêÇÌêÉÌêÑÌêÖÌêÜÌêáÌêâÌêäÌêãÌêåÌêçÌêéÌêèÌêêÌêëÌêíÌêìÌêîÌêïÌêñÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌêóÌêòÌêôÌêöÌêõÌêúÌêûÌêüÌê†Ìê°Ìê¢Ìê£Ìê§Ìê•Ìê¶ÌêßÌê®Ìê©Ìê™Ìê´Ìê¨Ìê≠ÌêÆÌêØÌê∞Ìê±Ìê≤Ìê≥Ìê¥ÌêµÌê∂Ìê∑ÏàØÏà±Ïà≤Ïà¥ÏâàÏâêÏâëÏâîÏâòÏâ†Ïâ•Ïâ¨Ïâ≠Ïâ∞Ïâ¥ÏâºÏâΩÏâøÏäÅÏäàÏäâÏäêÏäòÏäõÏäùÏä§Ïä•Ïä®Ïä¨Ïä≠Ïä¥ÏäµÏä∑ÏäπÏãúÏãùÏã†Ïã£Ïã§Ïã´Ïã¨Ïã≠ÏãØÏã±Ïã∂Ïã∏ÏãπÏãªÏãºÏåÄÏåàÏåâÏååÏåçÏåìÏåîÏåïÏåòÏåúÏå§Ïå•Ïå®Ïå©ÏçÖÏç®Ïç©Ïç¨Ïç∞Ïç≤Ïç∏ÏçπÏçºÏçΩÏéÑÏéàÏéåÏèÄÏèòÏèôÏèúÏèüÏè†Ïè¢Ïè®Ïè©Ïè≠Ïè¥ÏèµÏè∏ÏêàÏêêÏê§Ïê¨Ïê∞ÔøΩ".split("");
    for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) {
        e[D[189][j]] = 48384 + j;
        d[48384 + j] = D[189][j];
    };
    D[190] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌê∏ÌêπÌê∫ÌêªÌêºÌêΩÌêæÌêøÌëÅÌëÇÌëÉÌëÖÌëÜÌëáÌëàÌëâÌëäÌëãÌëåÌëçÌëéÌëèÌëêÌëëÌëíÌëìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌëîÌëïÌëñÌëóÌëòÌëôÌëöÌëõÌëùÌëûÌëüÌë°Ìë¢Ìë£Ìë•Ìë¶ÌëßÌë®Ìë©Ìë™Ìë´Ìë¨ÌëÆÌë∞Ìë±Ìë≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌë≥Ìë¥ÌëµÌë∂Ìë∑Ìë∫ÌëªÌëΩÌëæÌíÅÌíÉÌíÑÌíÖÌíÜÌíáÌíäÌíåÌíéÌíèÌíêÌíëÌííÌíìÌíïÌíñÌíóÌíòÌíôÌíöÌíõÌíúÌíùÏê¥ÏêºÏêΩÏëàÏë§Ïë•Ïë®Ïë¨Ïë¥ÏëµÏëπÏíÄÏíîÏíúÏí∏ÏíºÏì©Ïì∞Ïì±Ïì¥Ïì∏Ïì∫ÏìøÏîÄÏîÅÏîåÏîêÏîîÏîúÏî®Ïî©Ïî¨Ïî∞Ïî∏ÏîπÏîªÏîΩÏïÑÏïÖÏïàÏïâÏïäÏïåÏïçÏïéÏïìÏïîÏïïÏïóÏïòÏïôÏïùÏïûÏï†Ïï°Ïï§Ïï®Ïï∞Ïï±Ïï≥Ïï¥ÏïµÏïºÏïΩÏñÄÏñÑÏñáÏñåÏñçÏñèÏñëÏñïÏñóÏñòÏñúÏñ†Ïñ©Ïñ¥ÏñµÏñ∏ÏñπÏñªÏñºÏñΩÏñæÏóÑÏóÖÏóÜÏóáÏóàÏóâÏóäÏóåÏóéÔøΩ".split("");
    for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) {
        e[D[190][j]] = 48640 + j;
        d[48640 + j] = D[190][j];
    };
    D[191] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌíûÌíüÌí†Ìí°Ìí¢Ìí£Ìí§Ìí•Ìí¶ÌíßÌí®Ìí™Ìí´Ìí¨Ìí≠ÌíÆÌíØÌí∞Ìí±Ìí≤Ìí≥Ìí¥ÌíµÌí∂Ìí∑Ìí∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌíπÌí∫ÌíªÌíºÌíΩÌíæÌíøÌìÄÌìÅÌìÇÌìÉÌìÑÌìÖÌìÜÌìáÌìàÌìâÌìäÌìãÌìçÌìéÌìèÌìëÌìíÌììÌìïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌìñÌìóÌìòÌìôÌìöÌìõÌìùÌìûÌì†Ìì°Ìì¢Ìì£Ìì§Ìì•Ìì¶ÌìßÌì©Ìì™Ìì´Ìì≠ÌìÆÌìØÌì±Ìì≤Ìì≥Ìì¥ÌìµÌì∂Ìì∑ÌìπÌì∫ÌìºÏóêÏóëÏóîÏóòÏó†Ïó°Ïó£Ïó•Ïó¨Ïó≠ÏóÆÏó∞Ïó¥Ïó∂Ïó∑ÏóºÏóΩÏóæÏóøÏòÄÏòÅÏòÖÏòÜÏòáÏòàÏòåÏòêÏòòÏòôÏòõÏòúÏò§Ïò•Ïò®Ïò¨Ïò≠ÏòÆÏò∞Ïò≥Ïò¥ÏòµÏò∑ÏòπÏòªÏôÄÏôÅÏôÑÏôàÏôêÏôëÏôìÏôîÏôïÏôúÏôùÏô†Ïô¨ÏôØÏô±Ïô∏ÏôπÏôºÏöÄÏöàÏöâÏöãÏöçÏöîÏöïÏöòÏöúÏö§Ïö•ÏößÏö©Ïö∞Ïö±Ïö¥Ïö∏ÏöπÏö∫ÏõÄÏõÅÏõÉÏõÖÏõåÏõçÏõêÏõîÏõúÏõùÏõ†Ïõ°Ïõ®ÔøΩ".split("");
    for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) {
        e[D[191][j]] = 48896 + j;
        d[48896 + j] = D[191][j];
    };
    D[192] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌìæÌìøÌîÄÌîÅÌîÇÌîÉÌîÖÌîÜÌîáÌîâÌîäÌîãÌîçÌîéÌîèÌîêÌîëÌîíÌîìÌîñÌîòÌîôÌîöÌîõÌîúÌîùÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌîûÌîüÌî†Ìî°Ìî¢Ìî£Ìî§Ìî•Ìî¶ÌîßÌî®Ìî©Ìî™Ìî´Ìî¨Ìî≠ÌîÆÌîØÌî∞Ìî±Ìî≤Ìî≥Ìî¥ÌîµÌî∂Ìî∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌî∏ÌîπÌî∫ÌîªÌîæÌîøÌïÅÌïÇÌïÉÌïÖÌïÜÌïáÌïàÌïâÌïäÌïãÌïéÌïêÌïíÌïìÌïîÌïïÌïñÌïóÌïöÌïõÌïùÌïûÌïüÌï°Ìï¢Ìï£Ïõ©Ïõ¨Ïõ∞Ïõ∏ÏõπÏõΩÏúÑÏúÖÏúàÏúåÏúîÏúïÏúóÏúôÏú†Ïú°Ïú§Ïú®Ïú∞Ïú±Ïú≥ÏúµÏú∑ÏúºÏúΩÏùÄÏùÑÏùäÏùåÏùçÏùèÏùëÏùíÏùìÏùîÏùïÏùñÏùóÏùòÏùúÏù†Ïù®Ïù´Ïù¥ÏùµÏù∏ÏùºÏùΩÏùæÏûÉÏûÑÏûÖÏûáÏûàÏûâÏûäÏûéÏûêÏûëÏûîÏûñÏûóÏûòÏûöÏû†Ïû°Ïû£Ïû§Ïû•Ïû¶Ïû¨Ïû≠Ïû∞Ïû¥ÏûºÏûΩÏûøÏüÄÏüÅÏüàÏüâÏüåÏüéÏüêÏüòÏüùÏü§Ïü®Ïü¨Ï†ÄÏ†ÅÏ†ÑÏ†àÏ†äÔøΩ".split("");
    for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) {
        e[D[192][j]] = 49152 + j;
        d[49152 + j] = D[192][j];
    };
    D[193] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌï§Ìï¶ÌïßÌï™Ìï¨ÌïÆÌïØÌï∞Ìï±Ìï≤Ìï≥Ìï∂Ìï∑ÌïπÌï∫ÌïªÌïΩÌïæÌïøÌñÄÌñÅÌñÇÌñÉÌñÜÌñäÌñãÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌñåÌñçÌñéÌñèÌñëÌñíÌñìÌñîÌñïÌññÌñóÌñòÌñôÌñöÌñõÌñúÌñùÌñûÌñüÌñ†Ìñ°Ìñ¢Ìñ£Ìñ§Ìñ¶ÌñßÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌñ®Ìñ©Ìñ™Ìñ´Ìñ¨Ìñ≠ÌñÆÌñØÌñ∞Ìñ±Ìñ≤Ìñ≥Ìñ¥ÌñµÌñ∂Ìñ∑Ìñ∏ÌñπÌñ∫ÌñªÌñºÌñΩÌñæÌñøÌóÄÌóÅÌóÇÌóÉÌóÑÌóÖÌóÜÌóáÏ†êÏ†ëÏ†ìÏ†ïÏ†ñÏ†úÏ†ùÏ††Ï†§Ï†¨Ï†≠Ï†ØÏ†±Ï†∏Ï†ºÏ°ÄÏ°àÏ°âÏ°åÏ°çÏ°îÏ°∞Ï°±Ï°¥Ï°∏Ï°∫Ï¢ÄÏ¢ÅÏ¢ÉÏ¢ÖÏ¢ÜÏ¢áÏ¢ãÏ¢åÏ¢çÏ¢îÏ¢ùÏ¢üÏ¢°Ï¢®Ï¢ºÏ¢ΩÏ£ÑÏ£àÏ£åÏ£îÏ£ïÏ£óÏ£ôÏ£†Ï£°Ï£§Ï£µÏ£ºÏ£ΩÏ§ÄÏ§ÑÏ§ÖÏ§ÜÏ§åÏ§çÏ§èÏ§ëÏ§òÏ§¨Ï§¥Ï•êÏ•ëÏ•îÏ•òÏ•†Ï•°Ï•£Ï•¨Ï•∞Ï•¥Ï•ºÏ¶àÏ¶âÏ¶åÏ¶êÏ¶òÏ¶ôÏ¶õÏ¶ùÏßÄÏßÅÏßÑÏßáÏßàÏßäÏßêÏßëÏßìÔøΩ".split("");
    for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) {
        e[D[193][j]] = 49408 + j;
        d[49408 + j] = D[193][j];
    };
    D[194] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌóäÌóãÌóçÌóéÌóèÌóëÌóìÌóîÌóïÌóñÌóóÌóöÌóúÌóûÌóüÌó†Ìó°Ìó¢Ìó£Ìó¶ÌóßÌó©Ìó™Ìó´Ìó≠ÌóÆÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌóØÌó∞Ìó±Ìó≤Ìó≥Ìó∂Ìó∏Ìó∫ÌóªÌóºÌóΩÌóæÌóøÌòÇÌòÉÌòÖÌòÜÌòáÌòâÌòäÌòãÌòåÌòçÌòéÌòèÌòíÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌòñÌòóÌòòÌòôÌòöÌòõÌòùÌòûÌòüÌò°Ìò¢Ìò£Ìò•Ìò¶ÌòßÌò®Ìò©Ìò™Ìò´Ìò¨ÌòÆÌòØÌò∞Ìò±Ìò≤Ìò≥Ìò¥ÌòµÌò∂Ìò∑Ìò∫ÌòªÏßïÏßñÏßôÏßöÏßúÏßùÏß†Ïß¢Ïß§ÏßßÏß¨Ïß≠ÏßØÏß∞Ïß±Ïß∏ÏßπÏßºÏ®ÄÏ®àÏ®âÏ®ãÏ®åÏ®çÏ®îÏ®òÏ®©Ï©åÏ©çÏ©êÏ©îÏ©úÏ©ùÏ©üÏ©†Ï©°Ï©®Ï©ΩÏ™ÑÏ™òÏ™ºÏ™ΩÏ´ÄÏ´ÑÏ´åÏ´çÏ´èÏ´ëÏ´ìÏ´òÏ´ôÏ´†Ï´¨Ï´¥Ï¨àÏ¨êÏ¨îÏ¨òÏ¨†Ï¨°Ï≠ÅÏ≠àÏ≠âÏ≠åÏ≠êÏ≠òÏ≠ôÏ≠ùÏ≠§Ï≠∏Ï≠πÏÆúÏÆ∏ÏØîÏØ§ÏØßÏØ©Ï∞åÏ∞çÏ∞êÏ∞îÏ∞úÏ∞ùÏ∞°Ï∞¢Ï∞ßÏ∞®Ï∞©Ï∞¨Ï∞ÆÏ∞∞Ï∞∏Ï∞πÏ∞ªÔøΩ".split("");
    for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) {
        e[D[194][j]] = 49664 + j;
        d[49664 + j] = D[194][j];
    };
    D[195] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌòΩÌòæÌòøÌôÅÌôÇÌôÉÌôÑÌôÜÌôáÌôäÌôåÌôéÌôèÌôêÌôíÌôìÌôñÌôóÌôôÌôöÌôõÌôùÌôûÌôüÌô†Ìô°ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌô¢Ìô£Ìô§Ìô•Ìô¶Ìô®Ìô™Ìô´Ìô¨Ìô≠ÌôÆÌôØÌô≤Ìô≥ÌôµÌô∂Ìô∑Ìô∏ÌôπÌô∫ÌôªÌôºÌôΩÌôæÌôøÌöÄÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌöÅÌöÇÌöÑÌöÜÌöáÌöàÌöâÌöäÌöãÌöéÌöèÌöëÌöíÌöìÌöïÌöñÌöóÌöòÌöôÌööÌöõÌöúÌöûÌö†Ìö¢Ìö£Ìö§Ìö•Ìö¶ÌößÌö©Ìö™Ï∞ºÏ∞ΩÏ∞æÏ±ÑÏ±ÖÏ±àÏ±åÏ±îÏ±ïÏ±óÏ±òÏ±ôÏ±†Ï±§Ï±¶Ï±®Ï±∞Ï±µÏ≤òÏ≤ôÏ≤úÏ≤†Ï≤®Ï≤©Ï≤´Ï≤¨Ï≤≠Ï≤¥Ï≤µÏ≤∏Ï≤ºÏ≥ÑÏ≥ÖÏ≥áÏ≥âÏ≥êÏ≥îÏ≥§Ï≥¨Ï≥∞Ï¥ÅÏ¥àÏ¥âÏ¥åÏ¥êÏ¥òÏ¥ôÏ¥õÏ¥ùÏ¥§Ï¥®Ï¥¨Ï¥πÏµúÏµ†Ïµ§Ïµ¨Ïµ≠ÏµØÏµ±Ïµ∏Ï∂àÏ∂îÏ∂ïÏ∂òÏ∂úÏ∂§Ï∂•Ï∂ßÏ∂©Ï∂∞Ï∑ÑÏ∑åÏ∑êÏ∑®Ï∑¨Ï∑∞Ï∑∏Ï∑πÏ∑ªÏ∑ΩÏ∏ÑÏ∏àÏ∏åÏ∏îÏ∏ôÏ∏†Ï∏°Ï∏§Ï∏®Ï∏∞Ï∏±Ï∏≥Ï∏µÔøΩ".split("");
    for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) {
        e[D[195][j]] = 49920 + j;
        d[49920 + j] = D[195][j];
    };
    D[196] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌö´Ìö≠ÌöÆÌöØÌö±Ìö≤Ìö≥Ìö¥ÌöµÌö∂Ìö∑Ìö∏Ìö∫ÌöºÌöΩÌöæÌöøÌõÄÌõÅÌõÇÌõÉÌõÜÌõáÌõâÌõäÌõãÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌõçÌõéÌõèÌõêÌõíÌõìÌõïÌõñÌõòÌõöÌõõÌõúÌõùÌõûÌõüÌõ°Ìõ¢Ìõ£Ìõ•Ìõ¶ÌõßÌõ©Ìõ™Ìõ´Ìõ¨Ìõ≠ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌõÆÌõØÌõ±Ìõ≤Ìõ≥Ìõ¥Ìõ∂Ìõ∑Ìõ∏ÌõπÌõ∫ÌõªÌõæÌõøÌúÅÌúÇÌúÉÌúÖÌúÜÌúáÌúàÌúâÌúäÌúãÌúåÌúçÌúéÌúèÌúêÌúíÌúìÌúîÏπòÏπôÏπúÏπüÏπ†Ïπ°Ïπ®Ïπ©Ïπ´Ïπ≠Ïπ¥ÏπµÏπ∏ÏπºÏ∫ÑÏ∫ÖÏ∫áÏ∫âÏ∫êÏ∫ëÏ∫îÏ∫òÏ∫†Ï∫°Ï∫£Ï∫§Ï∫•Ï∫¨Ï∫≠ÏªÅÏª§Ïª•Ïª®Ïª´Ïª¨Ïª¥ÏªµÏª∑Ïª∏ÏªπÏºÄÏºÅÏºÑÏºàÏºêÏºëÏºìÏºïÏºúÏº†Ïº§Ïº¨Ïº≠ÏºØÏº∞Ïº±Ïº∏ÏΩîÏΩïÏΩòÏΩúÏΩ§ÏΩ•ÏΩßÏΩ©ÏΩ∞ÏΩ±ÏΩ¥ÏΩ∏ÏæÄÏæÖÏæåÏæ°Ïæ®Ïæ∞ÏøÑÏø†Ïø°Ïø§Ïø®Ïø∞Ïø±Ïø≥ÏøµÏøºÌÄÄÌÄÑÌÄëÌÄòÌÄ≠ÌÄ¥ÌÄµÌÄ∏ÌÄºÔøΩ".split("");
    for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) {
        e[D[196][j]] = 50176 + j;
        d[50176 + j] = D[196][j];
    };
    D[197] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌúïÌúñÌúóÌúöÌúõÌúùÌúûÌúüÌú°Ìú¢Ìú£Ìú§Ìú•Ìú¶ÌúßÌú™Ìú¨ÌúÆÌúØÌú∞Ìú±Ìú≤Ìú≥Ìú∂Ìú∑ÌúπÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌú∫ÌúªÌúΩÌúæÌúøÌùÄÌùÅÌùÇÌùÉÌùÖÌùÜÌùàÌùäÌùãÌùåÌùçÌùéÌùèÌùíÌùìÌùïÌùöÌùõÌùúÌùùÌùûÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌùüÌù¢Ìù§Ìù¶ÌùßÌù®Ìù™Ìù´Ìù≠ÌùÆÌùØÌù±Ìù≤Ìù≥ÌùµÌù∂Ìù∑Ìù∏ÌùπÌù∫ÌùªÌùæÌùøÌûÄÌûÇÌûÉÌûÑÌûÖÌûÜÌûáÌûäÌûãÌÅÑÌÅÖÌÅáÌÅâÌÅêÌÅîÌÅòÌÅ†ÌÅ¨ÌÅ≠ÌÅ∞ÌÅ¥ÌÅºÌÅΩÌÇÅÌÇ§ÌÇ•ÌÇ®ÌÇ¨ÌÇ¥ÌÇµÌÇ∑ÌÇπÌÉÄÌÉÅÌÉÑÌÉàÌÉâÌÉêÌÉëÌÉìÌÉîÌÉïÌÉúÌÉùÌÉ†ÌÉ§ÌÉ¨ÌÉ≠ÌÉØÌÉ∞ÌÉ±ÌÉ∏ÌÑçÌÑ∞ÌÑ±ÌÑ¥ÌÑ∏ÌÑ∫ÌÖÄÌÖÅÌÖÉÌÖÑÌÖÖÌÖåÌÖçÌÖêÌÖîÌÖúÌÖùÌÖüÌÖ°ÌÖ®ÌÖ¨ÌÖºÌÜÑÌÜàÌÜ†ÌÜ°ÌÜ§ÌÜ®ÌÜ∞ÌÜ±ÌÜ≥ÌÜµÌÜ∫ÌÜºÌáÄÌáòÌá¥Ìá∏ÌàáÌàâÌàêÌà¨Ìà≠Ìà∞Ìà¥ÌàºÌàΩÌàøÌâÅÌâàÌâúÔøΩ".split("");
    for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) {
        e[D[197][j]] = 50432 + j;
        d[50432 + j] = D[197][j];
    };
    D[198] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌûçÌûéÌûèÌûëÌûíÌûìÌûîÌûïÌûñÌûóÌûöÌûúÌûûÌûüÌû†Ìû°Ìû¢Ìû£ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌâ§ÌäÄÌäÅÌäÑÌäàÌäêÌäëÌäïÌäúÌä†Ìä§Ìä¨Ìä±Ìä∏ÌäπÌäºÌäøÌãÄÌãÇÌãàÌãâÌããÌãîÌãòÌãúÌã§Ìã•Ìã∞Ìã±Ìã¥Ìã∏ÌåÄÌåÅÌåÉÌåÖÌååÌåçÌåéÌåêÌåîÌåñÌåúÌåùÌåüÌå†Ìå°Ìå•Ìå®Ìå©Ìå¨Ìå∞Ìå∏ÌåπÌåªÌåºÌåΩÌçÑÌçÖÌçºÌçΩÌéÄÌéÑÌéåÌéçÌéèÌéêÌéëÌéòÌéôÌéúÌé†Ìé®Ìé©Ìé´Ìé≠Ìé¥Ìé∏ÌéºÌèÑÌèÖÌèàÌèâÌèêÌèòÌè°Ìè£Ìè¨Ìè≠Ìè∞Ìè¥ÌèºÌèΩÌèøÌêÅÔøΩ".split("");
    for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) {
        e[D[198][j]] = 50688 + j;
        d[50688 + j] = D[198][j];
    };
    D[199] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌêàÌêùÌëÄÌëÑÌëúÌë†Ìë§Ìë≠ÌëØÌë∏ÌëπÌëºÌëøÌíÄÌíÇÌíàÌíâÌíãÌíçÌíîÌí©ÌìåÌìêÌìîÌìúÌìüÌì®Ìì¨Ìì∞Ìì∏ÌìªÌìΩÌîÑÌîàÌîåÌîîÌîïÌîóÌîºÌîΩÌïÄÌïÑÌïåÌïçÌïèÌïëÌïòÌïôÌïúÌï†Ìï•Ìï®Ìï©Ìï´Ìï≠Ìï¥ÌïµÌï∏ÌïºÌñÑÌñÖÌñáÌñàÌñâÌñêÌñ•ÌóàÌóâÌóåÌóêÌóíÌóòÌóôÌóõÌóùÌó§Ìó•Ìó®Ìó¨Ìó¥ÌóµÌó∑ÌóπÌòÄÌòÅÌòÑÌòàÌòêÌòëÌòìÌòîÌòïÌòúÌò†ÔøΩ".split("");
    for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 65533) {
        e[D[199][j]] = 50944 + j;
        d[50944 + j] = D[199][j];
    };
    D[200] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÌò§Ìò≠Ìò∏ÌòπÌòºÌôÄÌôÖÌôàÌôâÌôãÌôçÌôëÌôîÌôïÌôòÌôúÌôßÌô©Ìô∞Ìô±Ìô¥ÌöÉÌöÖÌöåÌöçÌöêÌöîÌöùÌöüÌö°Ìö®Ìö¨Ìö∞ÌöπÌöªÌõÑÌõÖÌõàÌõåÌõëÌõîÌõóÌõôÌõ†Ìõ§Ìõ®Ìõ∞ÌõµÌõºÌõΩÌúÄÌúÑÌúëÌúòÌúôÌúúÌú†Ìú®Ìú©Ìú´Ìú≠Ìú¥ÌúµÌú∏ÌúºÌùÑÌùáÌùâÌùêÌùëÌùîÌùñÌùóÌùòÌùôÌù†Ìù°Ìù£Ìù•Ìù©Ìù¨Ìù∞Ìù¥ÌùºÌùΩÌûÅÌûàÌûâÌûåÌûêÌûòÌûôÌûõÌûùÔøΩ".split("");
    for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 65533) {
        e[D[200][j]] = 51200 + j;
        d[51200 + j] = D[200][j];
    };
    D[202] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰ºΩ‰Ω≥ÂÅáÂÉπÂä†ÂèØÂëµÂì•ÂòâÂ´ÅÂÆ∂ÊöáÊû∂Êû∑ÊüØÊ≠åÁèÇÁóÇÁ®ºËãõËåÑË°óË¢àË®∂Ë≥àË∑èËªªËø¶ÈßïÂàªÂç¥ÂêÑÊÅ™ÊÖ§ÊÆºÁèèËÑöË¶∫ËßíÈñ£‰æÉÂàäÂ¢æÂ•∏Âß¶Âπ≤ÂππÊááÊèÄÊùÜÊü¨Ê°øÊæóÁôéÁúãÁ£µÁ®àÁ´øÁ∞°ËÇùËâÆËâ±Ë´´Èñì‰π´ÂñùÊõ∑Ê∏¥Á¢£Á´≠ËëõË§êËùéÈû®ÂãòÂùéÂ†™ÂµåÊÑüÊÜæÊà°Êï¢ÊüëÊ©ÑÊ∏õÁîòÁñ≥Áõ£Áû∞Á¥∫ÈÇØÈëëÈëíÈæïÔøΩ".split("");
    for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) {
        e[D[202][j]] = 51712 + j;
        d[51712 + j] = D[202][j];
    };
    D[203] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂå£Â≤¨Áî≤ËÉõÈâÄÈñòÂâõÂ†àÂßúÂ≤°Â¥óÂ∫∑Âº∫ÂΩäÊÖ∑Ê±üÁï∫ÁñÜÁ≥†Áµ≥Á∂±ÁæåËÖîËà°ËñëË•ÅË¨õÈãºÈôçÈ±á‰ªã‰ª∑ÂÄãÂá±Â°èÊÑ∑ÊÑæÊÖ®ÊîπÊß™ÊºëÁñ•ÁöÜÁõñÁÆáËä•ËìãÔ§ÄÈéßÈñãÂñÄÂÆ¢ÂùëÔ§ÅÁ≤≥ÁæπÈÜµÂÄ®ÂéªÂ±ÖÂ∑®ÊãíÊçÆÊìöÊìßÊ∏†ÁÇ¨Á•õË∑ùË∏ûÔ§ÇÈÅΩÈâÖÈã∏‰πæ‰ª∂ÂÅ•Â∑æÂª∫ÊÑÜÊ•óËÖ±ËôîËπáÈçµÈ®´‰πûÂÇëÊù∞Ê°ÄÂÑâÂäçÂäíÊ™¢ÔøΩ".split("");
    for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) {
        e[D[203][j]] = 51968 + j;
        d[51968 + j] = D[203][j];
    };
    D[204] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁûºÈàêÈªîÂä´ÊÄØËø≤ÂÅàÊÜ©Êè≠ÊìäÊ†ºÊ™ÑÊøÄËÜàË¶°ÈöîÂ†ÖÁâΩÁä¨ÁîÑÁµπÁπ≠ËÇ©Ë¶ãË≠¥ÈÅ£ÈµëÊäâÊ±∫ÊΩîÁµêÁº∫Ë®£ÂÖºÊÖäÁÆùË¨ôÈâóÈéå‰∫¨‰øìÂÄûÂÇæÂÑÜÂãÅÂãçÂçøÂù∞Â¢ÉÂ∫öÂæëÊÖ∂ÊÜ¨ÊìéÊï¨ÊôØÊöªÊõ¥Ê¢óÊ∂áÁÇÖÁÉ±ÁíüÁí•ÁìäÁóôÁ°¨Á£¨Á´üÁ´∂ÁµÖÁ∂ìËÄïËÄøËÑõËéñË≠¶ËºïÈÄïÈè°È†ÉÈ†∏È©öÈØ®‰øÇÂïìÂ†∫Â•ëÂ≠£Â±ÜÊÇ∏ÊàíÊ°ÇÊ¢∞ÔøΩ".split("");
    for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) {
        e[D[204][j]] = 52224 + j;
        d[52224 + j] = D[204][j];
    };
    D[205] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ£®Ê∫™ÁïåÁô∏Á£éÁ®ΩÁ≥ªÁπ´ÁπºË®àË™°Ë∞øÈöéÈ∑ÑÂè§Âè©ÂëäÂë±Âõ∫ÂßëÂ≠§Â∞ªÂ∫´Êã∑Êî∑ÊïÖÊï≤Êö†ÊûØÊßÅÊ≤ΩÁóºÁöêÁùæÁ®øÁæîËÄÉËÇ°ËÜèËã¶ËãΩËè∞ËóÅË†±Ë¢¥Ë™•Ô§ÉËæúÈåÆÈõáÈ°ßÈ´òÈºìÂì≠ÊñõÊõ≤Ê¢èÁ©ÄË∞∑Èµ†Âõ∞Âù§Â¥ëÊòÜÊ¢±Ê£çÊªæÁê®Ë¢ûÈØ§Ê±®Ô§ÑÈ™®‰æõÂÖ¨ÂÖ±ÂäüÂ≠îÂ∑•ÊÅêÊÅ≠Êã±ÊéßÊîªÁèôÁ©∫Ëö£Ë≤¢Èûè‰∏≤ÂØ°ÊààÊûúÁìúÔøΩ".split("");
    for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) {
        e[D[205][j]] = 52480 + j;
        d[52480 + j] = D[205][j];
    };
    D[206] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁßëËèìË™áË™≤Ë∑®ÈÅéÈçãÈ°ÜÂªìÊß®ËóøÈÉ≠Ô§ÖÂÜ†ÂÆòÂØ¨ÊÖ£Ê£∫Ê¨æÁÅåÁêØÁìòÁÆ°ÁΩêËèÖËßÄË≤´ÈóúÈ§®ÂàÆÊÅùÊã¨ÈÄÇ‰æäÂÖâÂå°Â£ôÂª£Êõ†Ê¥∏ÁÇöÁãÇÁèñÁ≠êËÉ±ÈëõÂç¶ÊéõÁΩ´‰πñÂÇÄÂ°äÂ£ûÊÄ™ÊÑßÊãêÊßêÈ≠ÅÂÆèÁ¥òËÇ±ËΩü‰∫§ÂÉëÂí¨Âñ¨Â¨åÂ∂†Â∑ßÊî™ÊïéÊ†°Ê©ãÁã°ÁöéÁüØÁµûÁøπËÜ†ËïéËõüËºÉËΩéÈÉäÈ§ÉÈ©ïÈÆ´‰∏ò‰πÖ‰πù‰ªá‰ø±ÂÖ∑ÂãæÔøΩ".split("");
    for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) {
        e[D[206][j]] = 52736 + j;
        d[52736 + j] = D[206][j];
    };
    D[207] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂçÄÂè£Âè•ÂíéÂòîÂùµÂû¢ÂØáÂ∂áÂªêÊáºÊãòÊïëÊû∏Êü©ÊßãÊ≠êÊØÜÊØ¨Ê±ÇÊ∫ùÁÅ∏ÁãóÁéñÁêÉÁûøÁü©Á©∂ÁµøËÄâËáºËàÖËàäËãüË°¢Ë¨≥Ë≥ºËªÄÈÄëÈÇ±Èâ§Èä∂ÈßíÈ©ÖÈ≥©È∑óÈæúÂúãÂ±ÄËèäÈû†Èû´È∫¥ÂêõÁ™òÁæ§Ë£ôËªçÈÉ°Â†ÄÂ±àÊéòÁ™üÂÆÆÂºìÁ©πÁ™ÆËäéË∫¨ÂÄ¶Âà∏Âã∏Âç∑ÂúàÊã≥Êç≤Ê¨äÊ∑ÉÁú∑Âé•ÁçóËï®Ëπ∂ÈóïÊú∫Ê´ÉÊΩ∞Ë©≠ËªåÈ•ãÔ§ÜÊô∑Ê≠∏Ë≤¥ÔøΩ".split("");
    for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) {
        e[D[207][j]] = 52992 + j;
        d[52992 + j] = D[207][j];
    };
    D[208] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ¨ºÔ§áÂè´Âú≠Â•éÊèÜÊßªÁè™Á°ÖÁ™∫Á´ÖÁ≥æËëµË¶èËµ≥ÈÄµÈñ®ÂãªÂùáÁïáÁ≠†ËèåÈàûÔ§àÊ©òÂÖãÂâãÂäáÊàüÊ£òÊ•µÈöôÂÉÖÂä§Âã§ÊáÉÊñ§Ê†πÊßøÁëæÁ≠ãËäπËè´Ë¶≤Ë¨πËøëÈ•âÔ§â‰ªäÂ¶óÊìíÊòëÊ™éÁê¥Á¶ÅÁ¶ΩËä©Ë°æË°øË•üÔ§äÈå¶‰ºãÂèäÊÄ•Êâ±Ê±≤Á¥öÁµ¶‰∫òÂÖ¢ÁüúËÇØ‰ºÅ‰ºéÂÖ∂ÂÜÄÂóúÂô®ÂúªÂü∫ÂüºÂ§îÂ•áÂ¶ìÂØÑÂ≤êÂ¥éÂ∑±ÂπæÂøåÊäÄÊóóÊó£ÔøΩ".split("");
    for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) {
        e[D[208][j]] = 53248 + j;
        d[53248 + j] = D[208][j];
    };
    D[209] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊúûÊúüÊùûÊ£ãÊ£ÑÊ©üÊ¨∫Ê∞£Ê±ΩÊ≤ÇÊ∑áÁéòÁê¶Áê™ÁíÇÁí£Áï∏ÁïøÁ¢ÅÁ£ØÁ•ÅÁ•áÁ•àÁ•∫ÁÆïÁ¥ÄÁ∂∫ÁæàËÄÜËÄ≠ËÇåË®òË≠èË±àËµ∑Èå°Èå§È£¢È•ëÈ®éÈ®èÈ©•È∫íÁ∑ä‰Ω∂ÂêâÊãÆÊ°îÈáëÂñ´ÂÑ∫Ô§ãÔ§åÂ®úÊá¶Ô§çÊãèÊãøÔ§éÔ§èÔ§êÔ§ëÔ§íÔ§ìÈÇ£Ô§îÔ§ïÔ§ñÔ§óÔ§òË´æÔ§ôÔ§öÔ§õÔ§úÊöñÔ§ùÁÖñÔ§ûÔ§üÈõ£Ô§†ÊçèÊç∫ÂçóÔ§°ÊûèÊ•†Êπ≥Ô§¢Áî∑Ô§£Ô§§Ô§•ÔøΩ".split("");
    for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) {
        e[D[209][j]] = 53504 + j;
        d[53504 + j] = D[209][j];
    };
    D[210] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¥çÔ§¶Ô§ßË°≤ÂõäÂ®òÔ§®Ô§©Ô§™Ô§´Ô§¨‰πÉÔ§≠ÂÖßÂ•àÊü∞ËÄêÔ§ÆÂ•≥Âπ¥ÊíöÁßäÂøµÊÅ¨ÊãàÊçªÂØßÂØóÂä™Ô§ØÂ•¥Âº©ÊÄíÔ§∞Ô§±Ô§≤ÁëôÔ§≥Ô§¥Ô§µÔ§∂Ô§∑Ô§∏ÈßëÔ§πÔ§∫Ô§ªÔ§ºÔ§ΩÔ§æÔ§øÔ•ÄÔ•ÅÔ•ÇÔ•ÉÊøÉÔ•ÑÔ•ÖËÜøËæ≤ÊÉ±Ô•ÜÔ•áËÖ¶Ô•àÔ•âÂ∞øÔ•äÔ•ãÔ•åÔ•çÔ•éÔ•èÔ•êÔ•ëÂ´©Ë®•ÊùªÁ¥êÔ•íÔ•ìÔ•îÔ•ïÔ•ñÔ•óËÉΩÔ•òÔ•ôÂ∞ºÊ≥•ÂåøÊ∫∫Â§öËå∂ÔøΩ".split("");
    for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) {
        e[D[210][j]] = 53760 + j;
        d[53760 + j] = D[210][j];
    };
    D[211] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰∏π‰∫∂‰ΩÜÂñÆÂúòÂ£áÂΩñÊñ∑Êó¶Ê™ÄÊÆµÊπçÁü≠Á´ØÁ∞ûÁ∑ûËõãË¢íÈÑ≤ÈçõÊíªÊææÁç∫Áñ∏ÈÅîÂïñÂùçÊÜ∫ÊìîÊõáÊ∑°ÊπõÊΩ≠ÊæπÁó∞ËÅÉËÜΩËïÅË¶ÉË´áË≠öÈåüÊ≤ìÁïìÁ≠îË∏èÈÅùÂîêÂ†ÇÂ°òÂπ¢ÊàáÊíûÊ£†Áï∂Á≥ñËû≥Èª®‰ª£ÂûàÂùÆÂ§ßÂ∞çÂ≤±Â∏∂ÂæÖÊà¥Êì°Áé≥Ëá∫Ë¢ãË≤∏ÈöäÈªõÂÆÖÂæ∑ÊÇ≥ÂÄíÂàÄÂà∞ÂúñÂ†µÂ°óÂ∞éÂ±†Â≥∂Â∂ãÂ∫¶ÂæíÊÇºÊåëÊéâÊêóÊ°ÉÔøΩ".split("");
    for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) {
        e[D[211][j]] = 54016 + j;
        d[54016 + j] = D[211][j];
    };
    D[212] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ£πÊ´ÇÊ∑òÊ∏°ÊªîÊø§ÁáæÁõúÁùπÁ¶±Á®ªËêÑË¶©Ë≥≠Ë∑≥ËπàÈÄÉÈÄîÈÅìÈÉΩÈççÈô∂ÈüúÊØíÁÄÜÁâòÁä¢Áç®Áù£Á¶øÁØ§Á∫õËÆÄÂ¢©ÊÉáÊï¶ÊóΩÊöæÊ≤åÁÑûÁáâË±öÈ†ì‰π≠Á™Å‰ªùÂÜ¨ÂáçÂãïÂêåÊÜßÊù±Ê°êÊ£üÊ¥ûÊΩºÁñºÁû≥Á´•ËÉ¥Ëë£ÈäÖÂÖúÊñóÊùúÊûìÁóòÁ´áËç≥Ô•öË±ÜÈÄóÈ†≠Â±ØËáÄËäöÈÅÅÈÅØÈàçÂæóÂ∂ùÊ©ôÁáàÁôªÁ≠âËó§Ë¨ÑÈÑßÈ®∞ÂñáÊá∂Ô•õÁô©ÁæÖÔøΩ".split("");
    for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) {
        e[D[212][j]] = 54272 + j;
        d[54272 + j] = D[212][j];
    };
    D[213] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËòøËû∫Ë£∏ÈÇèÔ•úÊ¥õÁÉôÁèûÁµ°ËêΩÔ•ùÈÖ™Èß±Ô•û‰∫ÇÂçµÊ¨ÑÊ¨íÁÄæÁàõËò≠È∏ûÂâåËæ£ÂµêÊì•Êî¨Ê¨ñÊø´Á±ÉÁ∫úËóçË•§Ë¶ΩÊãâËáòË†üÂªäÊúóÊµ™ÁãºÁêÖÁëØËûÇÈÉû‰æÜÂ¥çÂæ†ËêäÂÜ∑Êé†Áï•‰∫ÆÂÄÜÂÖ©ÂáâÊ¢ÅÊ®ëÁ≤ÆÁ≤±Á≥ßËâØË´íËºõÈáè‰æ∂ÂÑ∑ÂãµÂëÇÂª¨ÊÖÆÊàæÊóÖÊ´öÊøæÁ§™ËóúË†£Èñ≠È©¢È©™È∫óÈªéÂäõÊõÜÊ≠∑ÁÄùÁ§´ËΩ¢ÈùÇÊÜêÊàÄÊî£Êº£ÔøΩ".split("");
    for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) {
        e[D[213][j]] = 54528 + j;
        d[54528 + j] = D[213][j];
    };
    D[214] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁÖâÁíâÁ∑¥ËÅØËìÆËº¶ÈÄ£ÈçäÂÜΩÂàóÂä£Ê¥åÁÉàË£ÇÂªâÊñÇÊÆÆÊøÇÁ∞æÁçµ‰ª§‰º∂ÂõπÔ•üÂ≤∫Â∂∫ÊÄúÁé≤Á¨≠ÁæöÁøéËÅÜÈÄûÈà¥Èõ∂ÈùàÈ†òÈΩ°‰æãÊæßÁ¶ÆÈÜ¥Èö∑ÂãûÔ•†ÊíàÊìÑÊ´ìÊΩûÁÄòÁàêÁõßËÄÅËòÜËôúË∑ØËºÖÈú≤È≠ØÈ∑∫ÈπµÁ¢åÁ•øÁ∂†ËèâÈåÑÈπøÈ∫ìË´ñÂ£üÂºÑÊúßÁÄßÁìèÁ±†ËÅæÂÑ°ÁÄ®Áâ¢Á£äË≥ÇË≥öË≥¥Èõ∑‰∫ÜÂÉöÂØÆÂªñÊñôÁáéÁôÇÁû≠ËÅäËìºÔøΩ".split("");
    for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) {
        e[D[214][j]] = 54784 + j;
        d[54784 + j] = D[214][j];
    };
    D[215] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÅºÈ¨ßÈæçÂ£òÂ©ÅÂ±¢Ê®ìÊ∑öÊºèÁòªÁ¥ØÁ∏∑ËîûË§∏Èè§ÈôãÂäâÊóíÊü≥Ê¶¥ÊµÅÊ∫úÁÄèÁêâÁë†ÁïôÁò§Á°´Ë¨¨È°ûÂÖ≠ÊàÆÈô∏‰æñÂÄ´Â¥ôÊ∑™Á∂∏Ëº™ÂæãÊÖÑÊ†óÔ•°ÈöÜÂãíËÇãÂáúÂáåÊ•ûÁ®úÁ∂æËè±Èôµ‰øöÂà©ÂéòÂêèÂîéÂ±•ÊÇßÊùéÊ¢®Êµ¨ÁäÅÁã∏ÁêÜÁíÉÔ•¢Áó¢Á±¨ÁΩπÁæ∏ËéâË£èË£°ÈáåÈáêÈõ¢ÈØâÂêùÊΩæÁáêÁíòËó∫Ë∫™Èö£È±óÈ∫üÊûóÊ∑ãÁê≥Ëá®ÈúñÁ†¨ÔøΩ".split("");
    for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) {
        e[D[215][j]] = 55040 + j;
        d[55040 + j] = D[215][j];
    };
    D[216] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ´ãÁ¨†Á≤íÊë©Áë™Áó≤Á¢ºÁ£®È¶¨È≠îÈ∫ªÂØûÂπïÊº†ËÜúËé´ÈÇà‰∏áÂççÂ®©Â∑íÂΩéÊÖ¢ÊåΩÊô©ÊõºÊªøÊº´ÁÅ£ÁûûËê¨ËîìË†ªËºìÈ•ÖÈ∞ªÂîúÊäπÊú´Ê≤´ËåâË•™Èù∫‰∫°Â¶ÑÂøòÂøôÊúõÁ∂≤ÁΩîËäíËå´ËéΩËºûÈÇôÂüãÂ¶πÂ™íÂØêÊòßÊûöÊ¢ÖÊØèÁÖ§ÁΩµË≤∑Ë≥£ÈÇÅÈ≠ÖËÑàË≤äÈôåÈ©ÄÈ∫•Â≠üÊ∞ìÁåõÁõ≤ÁõüËêåÂÜ™Ë¶ìÂÖçÂÜïÂãâÊ£âÊ≤îÁúÑÁú†Á∂øÁ∑¨Èù¢È∫µÊªÖÔøΩ".split("");
    for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) {
        e[D[216][j]] = 55296 + j;
        d[55296 + j] = D[216][j];
    };
    D[217] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËîëÂÜ•ÂêçÂëΩÊòéÊöùÊ§ßÊ∫üÁöøÁûëËåóËìÇËûüÈÖ©ÈäòÈ≥¥Ë¢Ç‰æÆÂÜíÂãüÂßÜÂ∏ΩÊÖïÊë∏ÊëπÊöÆÊüêÊ®°ÊØçÊØõÁâüÁâ°ÁëÅÁú∏ÁüõËÄóËäºËåÖË¨ÄË¨®Ë≤åÊú®Ê≤êÁâßÁõÆÁù¶Á©ÜÈ∂©Ê≠øÊ≤íÂ§¢Êú¶ËíôÂçØÂ¢ìÂ¶ôÂªüÊèèÊò¥Êù≥Ê∏∫Áå´Á´óËãóÈå®ÂãôÂ∑´ÊÜÆÊáãÊàäÊãáÊí´Êó†Ê•ôÊ≠¶ÊØãÁÑ°Áè∑ÁïùÁπÜËàûËåÇËï™Ë™£Ë≤øÈúßÈµ°Â¢®ÈªòÂÄëÂàéÂêªÂïèÊñáÔøΩ".split("");
    for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) {
        e[D[217][j]] = 55552 + j;
        d[55552 + j] = D[217][j];
    };
    D[218] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ±∂Á¥äÁ¥ãËÅûËöäÈñÄÈõØÂãøÊ≤ïÁâ©Âë≥Â™öÂ∞æÂµãÂΩåÂæÆÊú™Ê¢∂Ê•£Ê∏ºÊπÑÁúâÁ±≥ÁæéËñáË¨éËø∑Èù°Èª¥Â≤∑ÊÇ∂ÊÑçÊÜ´ÊïèÊóªÊóºÊ∞ëÊ≥ØÁéüÁèâÁ∑°ÈñîÂØÜËúúË¨êÂâùÂçöÊãçÊêèÊí≤Êú¥Ê®∏Ê≥äÁèÄÁíûÁÆîÁ≤ïÁ∏õËÜäËà∂ËñÑËø´ÈõπÈßÅ‰º¥ÂçäÂèçÂèõÊãåÊê¨ÊîÄÊñëÊßÉÊ≥ÆÊΩòÁè≠ÁïîÁò¢Áõ§ÁõºÁ£êÁ£ªÁ§¨ÁµÜËà¨Ëü†ËøîÈ†íÈ£ØÂãÉÊãîÊí•Ê∏§ÊΩëÔøΩ".split("");
    for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) {
        e[D[218][j]] = 55808 + j;
        d[55808 + j] = D[218][j];
    };
    D[219] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁôºË∑ãÈÜ±Èâ¢È´ÆÈ≠ÉÂÄ£ÂÇçÂùäÂ¶®Â∞®ÂπáÂΩ∑ÊàøÊîæÊñπÊóÅÊòâÊûãÊ¶úÊªÇÁ£ÖÁ¥°ËÇ™ËÜÄËà´Ëä≥Ëí°ËöåË®™Ë¨óÈÇ¶Èò≤ÈæêÂÄç‰ø≥Ô•£ÂüπÂæòÊãúÊéíÊùØÊπÉÁÑôÁõÉËÉåËÉöË£¥Ë£µË§ôË≥†Ëº©ÈÖçÈô™‰ºØ‰Ω∞Â∏õÊüèÊ†¢ÁôΩÁôæÈ≠ÑÂπ°Ê®äÁÖ©ÁáîÁï™Ô•§ÁπÅËïÉËó©È£ú‰ºêÁ≠èÁΩ∞Èñ•Âá°Â∏ÜÊ¢µÊ∞æÊ±éÊ≥õÁäØÁØÑËåÉÊ≥ïÁê∫ÂÉªÂäàÂ£ÅÊìòÊ™óÁíßÁôñÔøΩ".split("");
    for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) {
        e[D[219][j]] = 56064 + j;
        d[56064 + j] = D[219][j];
    };
    D[220] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¢ßËòóÈó¢ÈúπÔ••ÂçûÂºÅËÆäËæ®ËæØÈÇäÂà•Áû•È±âÈºà‰∏ôÂÄÇÂÖµÂ±õÂπ∑ÊòûÊò∫ÊüÑÊ£ÖÁÇ≥ÁîÅÁóÖÁßâÁ´ùËºßÈ§†È®à‰øùÂ†°Â†±ÂØ∂ÊôÆÊ≠•Ê¥ëÊπ∫ÊΩΩÁè§Áî´Ëè©Ë£úË§ìË≠úËºî‰ºèÂÉïÂåêÂçúÂÆìÂæ©ÊúçÁ¶èËÖπËåØËîîË§áË¶ÜËºπËºªÈ¶•È∞íÊú¨‰π∂‰ø∏Â•âÂ∞ÅÂ≥ØÂ≥∞ÊçßÊ£íÁÉΩÁÜ¢Áê´Á∏´Ëì¨ËúÇÈÄ¢ÈãíÈ≥≥‰∏ç‰ªò‰øØÂÇÖÂâñÂâØÂê¶ÂíêÂü†Â§´Â©¶ÔøΩ".split("");
    for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) {
        e[D[220][j]] = 56320 + j;
        d[56320 + j] = D[220][j];
    };
    D[221] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ≠öÂ≠µÂØåÂ∫úÔ•¶Êâ∂Êï∑ÊñßÊµÆÊ∫•Áà∂Á¨¶Á∞øÁº∂ËÖêËÖëËÜöËâÄËäôËé©Ë®ÉË≤†Ë≥¶Ë≥ªËµ¥Ë∂∫ÈÉ®ÈáúÈòúÈôÑÈßôÈ≥ßÂåóÂàÜÂê©Âô¥Â¢≥Â•îÂ•ÆÂøøÊÜ§ÊâÆÊòêÊ±æÁÑöÁõÜÁ≤âÁ≥ûÁ¥õËä¨Ë≥ÅÈõ∞Ô•ß‰ΩõÂºóÂΩøÊãÇÂ¥©ÊúãÊ£öÁ°ºÁπÉÈµ¨‰∏ïÂÇôÂåïÂå™ÂçëÂ¶ÉÂ©¢Â∫áÊÇ≤ÊÜäÊââÊâπÊñêÊûáÊ¶ßÊØîÊØñÊØóÊØòÊ≤∏Ô•®ÁêµÁó∫Á†íÁ¢ëÁßïÁßòÁ≤ÉÁ∑ãÁø°ËÇ•ÔøΩ".split("");
    for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) {
        e[D[221][j]] = 56576 + j;
        d[56576 + j] = D[221][j];
    };
    D[222] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÑæËáÇËè≤ËúöË£®Ë™πË≠¨Ë≤ªÈÑôÈùûÈ£õÈºªÂö¨Â¨™ÂΩ¨ÊñåÊ™≥ÊÆØÊµúÊø±ÁÄïÁâùÁé≠Ë≤ßË≥ìÈ†ªÊÜëÊ∞∑ËÅòÈ®Å‰πç‰∫ã‰∫õ‰ªï‰º∫‰ºº‰Ωø‰øüÂÉøÂè≤Âè∏ÂîÜÂó£ÂõõÂ£´Â•¢Â®ëÂØ´ÂØ∫Â∞ÑÂ∑≥Â∏´ÂæôÊÄùÊç®ÊñúÊñØÊü∂ÊüªÊ¢≠Ê≠ªÊ≤ôÊ≥óÊ∏£ÁÄâÁçÖÁ†ÇÁ§æÁ•ÄÁ•†ÁßÅÁØ©Á¥óÁµ≤ËÇÜËàçËééËìëËõáË£üË©êË©ûË¨ùË≥úËµ¶Ëæ≠ÈÇ™È£ºÈßüÈ∫ùÂâäÔ•©ÊúîÔ•™ÔøΩ".split("");
    for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) {
        e[D[222][j]] = 56832 + j;
        d[56832 + j] = D[222][j];
    };
    D[223] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂÇòÂà™Â±±Êï£Ê±ïÁèäÁî£ÁñùÁÆóËíúÈÖ∏Èú∞‰π∑ÊííÊÆ∫ÁÖûËñ©‰∏âÔ•´ÊùâÊ£ÆÊ∏óËäüËîòË°´Êè∑ÊæÅÈàíÈ¢Ø‰∏äÂÇ∑ÂÉèÂÑüÂïÜÂñ™ÂòóÂ≠ÄÂ∞ôÂ≥†Â∏∏Â∫äÂ∫†ÂªÇÊÉ≥Ê°ëÊ©°ÊπòÁàΩÁâÄÁãÄÁõ∏Á••ÁÆ±ÁøîË£≥Ëß¥Ë©≥Ë±°Ë≥ûÈúúÂ°ûÁíΩË≥ΩÂóáÔ•¨Á©°Á¥¢Ëâ≤Áâ≤ÁîüÁî•Ô•≠Á¨ôÂ¢ÖÂ£ªÂ∂ºÂ∫èÂ∫∂ÂæêÊÅïÊäíÊçøÊïçÊöëÊõôÊõ∏Ê†ñÊ£≤ÁäÄÁëûÁ≠ÆÁµÆÁ∑ñÁΩ≤ÔøΩ".split("");
    for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) {
        e[D[223][j]] = 57088 + j;
        d[57088 + j] = D[223][j];
    };
    D[224] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÉ•ËàíËñØË•øË™ìÈÄùÈã§ÈªçÈº†Â§ïÂ•≠Â∏≠ÊÉúÊòîÊô≥ÊûêÊ±êÊ∑ÖÊΩüÁü≥Á¢©ËìÜÈáãÈå´‰ªôÂÉäÂÖàÂñÑÂ¨ãÂÆ£ÊâáÊïæÊóãÊ∏≤ÁÖΩÁêÅÁëÑÁíáÁíøÁô¨Á¶™Á∑öÁπïÁæ®ËÖ∫ËÜ≥ËàπËòöËü¨Ë©µË∑£ÈÅ∏ÈäëÈê•È•çÈÆÆÂç®Â±ëÊ•îÊ≥ÑÊ¥©Ê∏´ËàåËñõË§ªË®≠Ë™™Èõ™ÈΩßÂâ°ÊöπÊÆ≤Á∫ñËüæË¥çÈñÉÈôùÊîùÊ∂âÁáÆÔ•ÆÂüéÂßìÂÆ¨ÊÄßÊÉ∫ÊàêÊòüÊôüÁå©ÁèπÁõõÁúÅÁ≠¨ÔøΩ".split("");
    for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) {
        e[D[224][j]] = 57344 + j;
        d[57344 + j] = D[224][j];
    };
    D[225] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÅñËÅ≤ËÖ•Ë™†ÈÜí‰∏ñÂã¢Ê≠≤Ê¥óÁ®ÖÁ¨πÁ¥∞Ô•ØË≤∞Âè¨ÂòØÂ°ëÂÆµÂ∞èÂ∞ëÂ∑¢ÊâÄÊéÉÊêîÊò≠Ê¢≥Ê≤ºÊ∂àÊ∫ØÁÄüÁÇ§ÁáíÁî¶ÁñèÁñéÁòôÁ¨ëÁØ†Á∞´Á¥†Á¥πËî¨Ëï≠ËòáË®¥ÈÄçÈÅ°ÈÇµÈä∑Èü∂È®∑‰øóÂ±¨ÊùüÊ∂ëÁ≤üÁ∫åË¨ñË¥ñÈÄüÂ≠´Â∑ΩÊêçËìÄÈÅúÈ£°ÁéáÂÆãÊÇöÊùæÊ∑ûË®üË™¶ÈÄÅÈ†åÂà∑Ô•∞ÁÅëÁ¢éÈéñË°∞Èáó‰øÆÂèóÂóΩÂõöÂûÇÂ£ΩÂ´ÇÂÆàÂ≤´Â≥ÄÂ∏•ÊÑÅÔøΩ".split("");
    for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) {
        e[D[225][j]] = 57600 + j;
        d[57600 + j] = D[225][j];
    };
    D[226] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊàçÊâãÊéàÊêúÊî∂Êï∏Ê®πÊÆäÊ∞¥Ê¥ôÊº±ÁáßÁã©Áç∏ÁêáÁí≤Áò¶Áù°ÁßÄÁ©óÁ´™Á≤πÁ∂èÁ∂¨Áπ°ÁæûËÑ©Ëå±ËíêËìöËó™Ë¢ñË™∞ËÆêËº∏ÈÅÇÈÇÉÈÖ¨ÈäñÈäπÈöãÈößÈö®ÈõñÈúÄÈ†àÈ¶ñÈ´ìÈ¨öÂèîÂ°æÂ§ôÂ≠∞ÂÆøÊ∑ëÊΩöÁÜüÁê°ÁíπËÇÖËèΩÂ∑°ÂæáÂæ™ÊÅÇÊó¨Ê†íÊ•ØÊ©ìÊÆâÊ¥µÊ∑≥Áè£ÁõæÁû¨Á≠çÁ¥îËÑ£ËàúËçÄËì¥Ëï£Ë©¢Ë´ÑÈÜáÈåûÈ†ÜÈ¶¥ÊàåË°ìËø∞Èâ•Â¥áÂ¥ßÔøΩ".split("");
    for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) {
        e[D[226][j]] = 57856 + j;
        d[57856 + j] = D[226][j];
    };
    D[227] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂµ©ÁëüËÜùËù®ÊøïÊãæÁøíË§∂Ë•≤‰∏û‰πòÂÉßÂãùÂçáÊâøÊòáÁπ©Ë†ÖÈôû‰æçÂåôÂò∂ÂßãÂ™§Â∞∏Â±éÂ±çÂ∏ÇÂºëÊÅÉÊñΩÊòØÊôÇÊûæÊü¥ÁåúÁü¢Á§∫ÁøÖËíîËìçË¶ñË©¶Ë©©Ë´°Ë±ïË±∫Âü¥ÂØîÂºèÊÅØÊã≠Ê§çÊÆñÊπúÁÜÑÁØíËùïË≠òËªæÈ£üÈ£æ‰º∏‰æÅ‰ø°ÂëªÂ®†ÂÆ∏ÊÑºÊñ∞Êô®ÁáºÁî≥Á•ûÁ¥≥ËÖéËá£ËéòËñ™ËóéËúÉË®äË∫´ËæõÔ•±ËøÖÂ§±ÂÆ§ÂØ¶ÊÇâÂØ©Â∞ãÂøÉÊ≤ÅÔøΩ".split("");
    for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) {
        e[D[227][j]] = 58112 + j;
        d[58112 + j] = D[227][j];
    };
    D[228] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ•≤Ê∑±ÁÄãÁîöËäØË´∂‰ªÄÂçÅÔ•≥ÈõôÊ∞è‰∫û‰øÑÂÖíÂïûÂ®•Â≥®ÊàëÁâôËäΩËé™ËõæË°ôË®ùÈòøÈõÖÈ§ìÈ¥âÈµùÂ†äÂ≤≥Â∂ΩÂπÑÊÉ°ÊÑïÊè°Ê®ÇÊ∏•ÈÑÇÈçîÈ°éÈ∞êÈΩ∑ÂÆâÂ≤∏ÊåâÊôèÊ°àÁúºÈõÅÈûçÈ°îÈÆüÊñ°Ë¨ÅËªãÈñºÂîµÂ≤©Â∑ñÂ∫µÊöóÁôåËè¥ÈóáÂ£ìÊäºÁãéÈ¥®‰ª∞Â§ÆÊÄèÊòªÊÆÉÁßßÈ¥¶ÂéìÂìÄÂüÉÂ¥ñÊÑõÊõñÊ∂ØÁ¢çËâæÈöòÈùÑÂéÑÊâºÊéñÊ∂≤Á∏äËÖãÈ°çÔøΩ".split("");
    for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) {
        e[D[228][j]] = 58368 + j;
        d[58368 + j] = D[228][j];
    };
    D[229] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ´ªÁΩåÈ∂ØÈ∏ö‰πüÂÄªÂÜ∂Â§úÊÉπÊè∂Ê§∞Áà∫ËÄ∂Ô•¥ÈáéÂº±Ô•µÔ•∂Á¥ÑËã•ËëØËíªËó•Ë∫çÔ•∑‰ΩØÔ•∏Ô•πÂ£§Â≠ÉÊÅôÊèöÊîòÊï≠ÊöòÔ•∫Ê•äÊ®£Ê¥ãÁÄÅÁÖ¨ÁóíÁòçÁ¶≥Á©∞Ô•ªÁæäÔ•ºË•ÑÔ•ΩËÆìÈáÄÈôΩÔ•æÈ§äÂúÑÂæ°ÊñºÊºÅÁòÄÁ¶¶Ë™ûÈ¶≠È≠öÈΩ¨ÂÑÑÊÜ∂ÊäëÊ™çËáÜÂÅÉÂ†∞ÂΩ¶ÁÑâË®ÄË´∫Â≠ºËòñ‰ø∫ÂÑºÂö¥Â•ÑÊé©Ê∑πÂ∂™Ê•≠ÂÜÜ‰∫à‰ΩôÔ•øÔ¶ÄÔ¶ÅÂ¶ÇÔ¶ÇÔøΩ".split("");
    for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) {
        e[D[229][j]] = 58624 + j;
        d[58624 + j] = D[229][j];
    };
    D[230] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ¶ÉÊ≠üÊ±ùÔ¶ÑÁíµÁ§ñÔ¶ÖËàáËâÖËåπËºøËΩùÔ¶ÜÈ§òÔ¶áÔ¶àÔ¶â‰∫¶Ô¶äÂüüÂΩπÊòìÔ¶ãÔ¶åÁñ´ÁππË≠ØÔ¶çÈÄÜÈ©õÂö•Â†ßÂß∏Â®üÂÆ¥Ô¶éÂª∂Ô¶èÔ¶êÊçêÊåªÔ¶ëÊ§ΩÊ≤áÊ≤øÊ∂éÊ∂ìÊ∑µÊºîÔ¶íÁÉüÁÑ∂ÁÖôÔ¶ìÁáÉÁáïÔ¶îÁ°èÁ°ØÔ¶ïÁ≠µÁ∑£Ô¶ñÁ∏ØÔ¶óË°çËªüÔ¶òÔ¶ôÔ¶öÈâõÔ¶õÈ≥∂Ô¶úÔ¶ùÔ¶ûÊÇÖÊ∂ÖÔ¶üÁÜ±Ô¶†Ô¶°Èñ±Âé≠Ô¶¢Ô¶£Ô¶§ÊüìÔ¶•ÁÇéÁÑ∞Áê∞Ëâ∂ËãíÔøΩ".split("");
    for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) {
        e[D[230][j]] = 58880 + j;
        d[58880 + j] = D[230][j];
    };
    D[231] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ¶¶ÈñªÈ´•ÈπΩÊõÑÔ¶ßÁáÅËëâÔ¶®Ô¶©Â°ãÔ¶™Ô¶´Â∂∏ÂΩ±Ô¶¨Êò†ÊöéÊ•πÊ¶ÆÊ∞∏Ê≥≥Ê∏∂ÊΩÅÊøöÁÄõÁÄØÁÖêÁáüÁç∞Ô¶≠ÁëõÔ¶ÆÁìîÁõàÁ©éÁ∫ìÔ¶ØÔ¶∞Ëã±Ë©†ËøéÔ¶±ÈçàÔ¶≤ÈúôÔ¶≥Ô¶¥‰πÇÂÄ™Ô¶µÂààÂè°Êõ≥Ê±≠ÊøäÁåäÁùøÁ©¢ËäÆËóùËòÇÔ¶∂Ë£îË©£Ë≠ΩË±´Ô¶∑Èä≥Ô¶∏ÈúìÈ†ê‰∫î‰ºç‰øâÂÇ≤ÂçàÂêæÂê≥ÂóöÂ°¢Â¢∫Â•ßÂ®õÂØ§ÊÇüÔ¶πÊáäÊïñÊóøÊô§Ê¢ßÊ±öÊæ≥ÔøΩ".split("");
    for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) {
        e[D[231][j]] = 59136 + j;
        d[59136 + j] = D[231][j];
    };
    D[232] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁÉèÁÜ¨ÁçíÁ≠ΩËúàË™§È∞≤ÈºáÂ±ãÊ≤ÉÁçÑÁéâÈà∫Ê∫´Áë•ÁòüÁ©©Á∏ïËòäÂÖÄÂ£ÖÊìÅÁìÆÁîïÁô∞ÁøÅÈÇïÈõçÈ•îÊ∏¶Áì¶Á™©Á™™Ëá•ËõôËù∏Ë®õÂ©âÂÆåÂÆõÊ¢°Ê§ÄÊµ£Áé©ÁêìÁê¨Á¢óÁ∑©Áø´ËÑòËÖïËéûË±åÈòÆÈ†ëÊõ∞ÂæÄÊó∫ÊûâÊ±™ÁéãÂÄ≠Â®ÉÊ≠™ÁüÆÂ§ñÂµ¨Â∑çÁå•ÁïèÔ¶∫Ô¶ªÂÉ•ÂáπÂ†ØÂ§≠Â¶ñÂßöÂØ•Ô¶ºÔ¶ΩÂ∂¢ÊãóÊêñÊíìÊìæÔ¶æÊõúÔ¶øÊ©àÔßÄÁáøÁë§ÔßÅÔøΩ".split("");
    for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) {
        e[D[232][j]] = 59392 + j;
        d[59392 + j] = D[232][j];
    };
    D[233] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ™àÁ™ØÁπáÁπûËÄÄËÖ∞ÔßÇËüØË¶ÅË¨†ÈÅôÔßÉÈÇÄÈ•íÊÖæÊ¨≤Êµ¥Á∏üË§•Ëæ±‰øëÂÇ≠ÂÜóÂãáÂüáÂ¢âÂÆπÂ∫∏ÊÖÇÊ¶ïÊ∂åÊπßÊ∫∂ÁÜîÁë¢Áî®Áî¨ËÅ≥Ëå∏ËìâË∏äÈéîÈèûÔßÑ‰∫é‰ΩëÂÅ∂ÂÑ™ÂèàÂèãÂè≥ÂÆáÂØìÂ∞§ÊÑöÊÜÇÊó¥ÁâõÁéóÁëÄÁõÇÁ•êÁ¶ëÁ¶πÁ¥ÜÁæΩËäãËóïËôûËøÇÈÅáÈÉµÈá™ÈöÖÈõ®Èõ©ÂãñÂΩßÊó≠Êò±Ê†ØÁÖúÁ®∂ÈÉÅÈ†ä‰∫ëÔßÖÊ©íÊÆûÊæêÁÜâËÄòËä∏ËïìÔøΩ".split("");
    for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) {
        e[D[233][j]] = 59648 + j;
        d[59648 + j] = D[233][j];
    };
    D[234] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÅãÈöïÈõ≤ÈüªËîöÈ¨±‰∫êÁÜäÈõÑÂÖÉÂéüÂì°ÂúìÂúíÂû£Â™õÂ´ÑÂØÉÊÄ®ÊÑøÊè¥Ê≤ÖÊ¥πÊπ≤Ê∫êÁà∞ÁåøÁëóËãëË¢ÅËΩÖÈÅ†ÔßÜÈô¢È°òÈ¥õÊúàË∂äÈâû‰ΩçÂÅâÂÉûÂç±ÂúçÂßîÂ®ÅÂ∞âÊÖ∞ÊöêÊ∏≠Áà≤ÁëãÁ∑ØËÉÉËêéËë¶ËîøËùüË°õË§òË¨ÇÈÅïÈüãÈ≠è‰π≥‰æëÂÑíÂÖ™ÔßáÂîØÂñ©Â≠∫ÂÆ•ÂπºÂπΩÂ∫æÊÇ†ÊÉüÊÑàÊÑâÊèÑÊî∏ÊúâÔßàÊüîÊüöÔßâÊ•°Ê•¢Ê≤πÊ¥ßÔßäÊ∏∏ÔßãÔøΩ".split("");
    for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) {
        e[D[234][j]] = 59904 + j;
        d[59904 + j] = D[234][j];
    };
    D[235] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊø°Áå∂Áå∑ÔßåÁëúÁî±ÔßçÁôíÔßéÔßèÁ∂≠ËáæËê∏Ë£ïË™òË´õË´≠Ë∏∞ËπÇÈÅäÈÄæÈÅ∫ÈÖâÈáâÈçÆÔßêÔßëÂ†âÔßíÊØìËÇâËÇ≤ÔßìÔßîÂÖÅÂ•´Â∞πÔßïÔßñÊΩ§ÁéßËÉ§Ë¥áÔßóÈàóÈñèÔßòÔßôÔßöÔßõËÅøÊàéÁÄúÁµ®ËûçÔßúÂû†ÊÅ©ÊÖáÊÆ∑Ë™æÈäÄÈö±‰πôÂêüÊ∑´Ëî≠Èô∞Èü≥È£ÆÊèñÊ≥£ÈÇëÂáùÊáâËÜ∫È∑π‰æùÂÄöÂÑÄÂÆúÊÑèÊáøÊì¨Ê§ÖÊØÖÁñëÁü£Áæ©Ëâ§ËñèËüªË°£Ë™ºÔøΩ".split("");
    for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) {
        e[D[235][j]] = 60160 + j;
        d[60160 + j] = D[235][j];
    };
    D[236] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË≠∞ÈÜ´‰∫å‰ª•‰ºäÔßùÔßûÂ§∑Âß®ÔßüÂ∑≤ÂºõÂΩõÊÄ°Ôß†Ôß°Ôß¢Ôß£ÁàæÁè•Ôß§Áï∞ÁóçÔß•ÁßªÔß¶ËÄåËÄ≥ËÇÑËã°ËçëÔßßÔß®Ë≤ΩË≤≥ÈÇáÔß©Ôß™È£¥È§åÔß´Ôß¨ÁÄ∑ÁõäÁøäÁøåÁøºË¨ö‰∫∫‰ªÅÂàÉÂç∞Ôß≠ÂíΩÂõ†ÂßªÂØÖÂºïÂøçÊπÆÔßÆÔßØÁµ™ËåµÔß∞ËöìË™çÔß±Èù≠Èù∑Ôß≤Ôß≥‰∏Ä‰Ωö‰ΩæÂ£πÊó•Ê∫¢ÈÄ∏Èé∞È¶π‰ªªÂ£¨Â¶äÂßôÊÅÅÔß¥ÔßµÁ®îÔß∂ËçèË≥ÉÂÖ•ÂçÑÔøΩ".split("");
    for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) {
        e[D[236][j]] = 60416 + j;
        d[60416 + j] = D[236][j];
    };
    D[237] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔß∑Ôß∏Ôßπ‰ªçÂâ©Â≠ïËäø‰ªîÂà∫Âí®ÂßâÂßøÂ≠êÂ≠óÂ≠úÊÅ£ÊÖàÊªãÁÇôÁÖÆÁéÜÁì∑ÁñµÁ£ÅÁ¥´ËÄÖËá™Ëå®ËîóËóâË´ÆË≥áÈõå‰ΩúÂã∫ÂöºÊñ´Êò®ÁÅºÁÇ∏ÁàµÁ∂ΩËäçÈÖåÈõÄÈµ≤Â≠±Ê£ßÊÆòÊΩ∫ÁõûÂ≤ëÊö´ÊΩõÁÆ¥Á∞™Ë†∂Èõú‰∏à‰ªóÂå†Â†¥Â¢ªÂ£ØÂ•¨Â∞áÂ∏≥Â∫ÑÂºµÊéåÊö≤ÊùñÊ®üÊ™£Ê¨åÊºøÁâÜÔß∫ÁçêÁíãÁ´†Á≤ßËÖ∏ËáüËáßËéäËë¨Ëî£ËñîËóèË£ùË¥ìÈÜ¨Èï∑ÔøΩ".split("");
    for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) {
        e[D[237][j]] = 60672 + j;
        d[60672 + j] = D[237][j];
    };
    D[238] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈöúÂÜçÂìâÂú®ÂÆ∞ÊâçÊùêÊ†ΩÊ¢ìÊ∏ΩÊªìÁÅΩÁ∏°Ë£ÅË≤°ËºâÈΩãÈΩéÁà≠ÁÆèË´çÈåö‰Ωá‰ΩéÂÑ≤ÂíÄÂßêÂ∫ïÊäµÊùµÊ•ÆÊ®óÊ≤ÆÊ∏öÁãôÁå™ÁñΩÁÆ∏Á¥µËãßËèπËëóËó∑Ë©õË≤ØË∫áÈÄôÈÇ∏ÈõéÈΩüÂã£ÂêäÂ´°ÂØÇÊëòÊïµÊª¥ÁãÑÔßªÁöÑÁ©çÁ¨õÁ±çÁ∏æÁøüËçªË¨´Ë≥äËµ§Ë∑°ËπüËø™ËøπÈÅ©Èèë‰ΩÉ‰Ω∫ÂÇ≥ÂÖ®ÂÖ∏ÂâçÂâ™Â°°Â°ºÂ•†Â∞àÂ±ïÂªõÊÇõÊà∞Ê†ìÊÆøÊ∞àÊæ±ÔøΩ".split("");
    for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) {
        e[D[238][j]] = 60928 + j;
        d[60928 + j] = D[238][j];
    };
    D[239] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁÖéÁê†Áî∞Áî∏ÁïëÁô≤Á≠åÁÆãÁÆ≠ÁØÜÁ∫èË©ÆËºæËΩâÈàøÈäìÈå¢Èê´ÈõªÈ°öÈ°´È§ûÂàáÊà™ÊäòÊµôÁô§Á´äÁØÄÁµ∂Âç†Â≤æÂ∫óÊº∏ÁÇπÁ≤òÈúëÈÆéÈªûÊé•Êë∫Ëù∂‰∏Å‰∫ï‰∫≠ÂÅúÂÅµÂëàÂßÉÂÆöÂπÄÂ∫≠Âª∑ÂæÅÊÉÖÊå∫ÊîøÊï¥ÊóåÊô∂Êô∏ÊüæÊ•®Ê™âÊ≠£Ê±ÄÊ∑ÄÊ∑®Ê∏üÊπûÁÄûÁÇ°ÁééÁèΩÁî∫ÁùõÁ¢áÁ¶éÁ®ãÁ©ΩÁ≤æÁ∂éËâáË®ÇË´™Ë≤ûÈÑ≠ÈÖäÈáòÈâ¶ÈãåÈå†ÈúÜÈùñÔøΩ".split("");
    for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) {
        e[D[239][j]] = 61184 + j;
        d[61184 + j] = D[239][j];
    };
    D[240] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈùúÈ†ÇÈºéÂà∂ÂäëÂïºÂ†§Â∏ùÂºüÊÇåÊèêÊ¢ØÊøüÁ•≠Á¨¨ËáçËñ∫Ë£ΩË´∏ËπÑÈÜçÈô§ÈöõÈúΩÈ°åÈΩä‰øéÂÖÜÂáãÂä©Âò≤ÂºîÂΩ´Êé™ÊìçÊó©ÊôÅÊõ∫ÊõπÊúùÊ¢ùÊ£óÊßΩÊºïÊΩÆÁÖßÁá•Áà™Áí™Áú∫Á•ñÁ•öÁßüÁ®†Á™ïÁ≤óÁ≥üÁµÑÁπ∞ËÇáËóªËö§Ë©îË™øË∂ôË∫ÅÈÄ†ÈÅ≠Èá£ÈòªÈõïÈ≥•ÊóèÁ∞áË∂≥ÈèÉÂ≠òÂ∞äÂçíÊãôÁåùÂÄßÂÆóÂæûÊÇ∞ÊÖ´Ê£ïÊ∑ôÁêÆÁ®ÆÁµÇÁ∂úÁ∏±ËÖ´ÔøΩ".split("");
    for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) {
        e[D[240][j]] = 61440 + j;
        d[61440 + j] = D[240][j];
    };
    D[241] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË∏™Ë∏µÈçæÈêò‰ΩêÂùêÂ∑¶Â∫ßÊå´ÁΩ™‰∏ª‰Ωè‰æèÂÅöÂßùËÉÑÂë™Âë®ÂóæÂ•èÂÆôÂ∑ûÂªöÊôùÊú±Êü±Ê†™Ê≥®Ê¥≤ÊπäÊæçÁÇ∑Áè†ÁñáÁ±åÁ¥ÇÁ¥¨Á∂¢ËàüËõõË®ªË™ÖËµ∞Ë∫äËº≥ÈÄ±ÈÖéÈÖíÈëÑÈßêÁ´πÁ≤•‰øäÂÑÅÂáÜÂüàÂØØÂ≥ªÊôôÊ®ΩÊµöÊ∫ñÊø¨ÁÑåÁïØÁ´£Ë†¢ÈÄ°ÈÅµÈõãÈßøËåÅ‰∏≠‰ª≤Ë°ÜÈáçÂçΩÊ´õÊ•´Ê±ÅËë∫Â¢ûÊÜéÊõæÊãØÁÉùÁîëÁóáÁπíËí∏Ë≠âË¥à‰πãÂè™ÔøΩ".split("");
    for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) {
        e[D[241][j]] = 61696 + j;
        d[61696 + j] = D[241][j];
    };
    D[242] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂí´Âú∞ÂùÄÂøóÊåÅÊåáÊëØÊîØÊó®Êô∫ÊûùÊû≥Ê≠¢Ê±†Ê≤öÊº¨Áü•Á†•Á•âÁ•óÁ¥ôËÇ¢ËÑÇËá≥ËäùËä∑ËúòË™åÔßºË¥ÑË∂æÈÅ≤Áõ¥Á®ôÁ®∑ÁπîËÅ∑ÂîáÂóîÂ°µÊåØÊê¢ÊôâÊôãÊ°≠Ê¶õÊÆÑÊ¥•Ê∫±ÁèçÁë®Áí°ÁïõÁñπÁõ°ÁúûÁûãÁß¶Á∏âÁ∏ùËáªËîØË¢óË®∫Ë≥ëËª´Ëæ∞ÈÄ≤Èé≠Èô£Èô≥Èúá‰æÑÂè±Âß™Â´âÂ∏ôÊ°éÁìÜÁñæÁß©Á™íËÜ£Ëõ≠Ë≥™Ë∑åËø≠ÊñüÊúïÔßΩÂü∑ÊΩóÁ∑ùËºØÔøΩ".split("");
    for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) {
        e[D[242][j]] = 61952 + j;
        d[61952 + j] = D[242][j];
    };
    D[243] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈè∂ÈõÜÂæµÊá≤ÊæÑ‰∏î‰æòÂÄüÂèâÂóüÂµØÂ∑ÆÊ¨°Ê≠§Á£ãÁÆöÔßæËπâËªäÈÅÆÊçâÊêæÁùÄÁ™ÑÈåØÈëøÈΩ™Êí∞ÊæØÁá¶Áí®ÁìöÁ´ÑÁ∞íÁ∫ÇÁ≤≤Á∫òËÆöË¥äÈëΩÈ§êÈ•åÂàπÂØüÊì¶Êú≠Á¥ÆÂÉ≠ÂèÉÂ°πÊÖòÊÖôÊá∫Êñ¨Á´ôËÆíËÆñÂÄâÂÄ°ÂâµÂî±Â®ºÂª†ÂΩ∞ÊÑ¥ÊïûÊòåÊò∂Êö¢ÊßçÊªÑÊº≤ÁåñÁò°Á™ìËÑπËâôËèñËíºÂÇµÂü∞ÂØÄÂØ®ÂΩ©Êé°Á†¶Á∂µËèúËî°ÈááÈáµÂÜäÊüµÁ≠ñÔøΩ".split("");
    for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) {
        e[D[243][j]] = 62208 + j;
        d[62208 + j] = D[243][j];
    };
    D[244] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË≤¨ÂáÑÂ¶ªÊÇΩËôïÂÄúÔßøÂâîÂ∞∫ÊÖΩÊàöÊãìÊì≤Êñ•ÊªåÁò†ËÑäËπ†ÈôüÈöª‰ªüÂçÉÂñòÂ§©Â∑ùÊìÖÊ≥âÊ∑∫ÁéîÁ©øËàõËñ¶Ë≥§Ë∏êÈÅ∑ÈáßÈó°Èò°ÈüÜÂá∏Âì≤ÂñÜÂæπÊí§ÊæàÁ∂¥ËºüËΩçÈêµÂÉâÂ∞ñÊ≤æÊ∑ªÁîõÁûªÁ∞ΩÁ±§Ë©πË´ÇÂ†ûÂ¶æÂ∏ñÊç∑ÁâíÁñäÁù´Ë´úË≤ºËºíÂª≥Êô¥Ê∑∏ËÅΩËèÅË´ãÈùëÈØñÔ®ÄÂâÉÊõøÊ∂ïÊªØÁ∑†Ë´¶ÈÄÆÈÅûÈ´îÂàùÂâøÂì®ÊÜîÊäÑÊãõÊ¢¢ÔøΩ".split("");
    for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) {
        e[D[244][j]] = 62464 + j;
        d[62464 + j] = D[244][j];
    };
    D[245] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ§íÊ•öÊ®µÁÇíÁÑ¶Á°ùÁ§ÅÁ§éÁßíÁ®çËÇñËâ∏ËãïËçâËïâË≤ÇË∂ÖÈÖ¢ÈÜãÈÜÆ‰øÉÂõëÁá≠ÁüóËúÄËß∏ÂØ∏ÂøñÊùëÈÇ®Âè¢Â°öÂØµÊÇ§ÊÜÅÊë†Á∏ΩËÅ∞Ëî•ÈäÉÊíÆÂÇ¨Â¥îÊúÄÂ¢úÊäΩÊé®Ê§éÊ•∏Ê®ûÊπ´Áö∫ÁßãËäªËê©Ë´èË∂®ËøΩÈÑíÈÖãÈÜúÈåêÈåòÈéöÈõõÈ®∂È∞ç‰∏ëÁïúÁ•ùÁ´∫Á≠ëÁØâÁ∏ÆËìÑËπôËπ¥Ëª∏ÈÄêÊò•Ê§øÁëÉÂá∫ÊúÆÈªúÂÖÖÂø†Ê≤ñËü≤Ë°ùË°∑ÊÇ¥ËÜµËêÉÔøΩ".split("");
    for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) {
        e[D[245][j]] = 62720 + j;
        d[62720 + j] = D[245][j];
    };
    D[246] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË¥ÖÂèñÂêπÂò¥Â®∂Â∞±ÁÇäÁø†ËÅöËÑÜËá≠Ë∂£ÈÜâÈ©üÈ∑≤ÂÅ¥‰ªÑÂé†ÊÉªÊ∏¨Â±§‰æàÂÄ§Âó§Â≥ôÂπüÊÅ•Ê¢îÊ≤ªÊ∑ÑÁÜæÁóîÁó¥Áô°Á®öÁ©âÁ∑áÁ∑ªÁΩÆËá¥Ëö©ËºúÈõâÈ¶≥ÈΩíÂâáÂãÖÈ£≠Ë¶™‰∏ÉÊüíÊºÜ‰æµÂØ¢ÊûïÊ≤àÊµ∏ÁêõÁ†ßÈáùÈçºËüÑÁß§Á®±Âø´‰ªñÂí§ÂîæÂ¢ÆÂ¶•ÊÉ∞ÊâìÊãñÊú∂Ê•ïËàµÈôÄÈ¶±ÈßùÂÄ¨ÂçìÂïÑÂùºÔ®ÅÊâòÔ®ÇÊì¢Êô´ÊüùÊøÅÊøØÁê¢Áê∏Ë®óÔøΩ".split("");
    for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) {
        e[D[246][j]] = 62976 + j;
        d[62976 + j] = D[246][j];
    };
    D[247] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈê∏ÂëëÂòÜÂù¶ÂΩàÊÜöÊ≠éÁÅòÁÇ≠Á∂ªË™ïÂ•™ËÑ´Êé¢ÁúàËÄΩË≤™Â°îÊê≠Ê¶ªÂÆïÂ∏ëÊπØÔ®ÉËï©ÂÖåÂè∞Â§™ÊÄ†ÊÖãÊÆÜÊ±∞Ê≥∞Á¨ûËÉéËãîË∑ÜÈÇ∞È¢±Ô®ÑÊìáÊæ§ÊíëÊîÑÂÖéÂêêÂúüË®éÊÖüÊ°∂Ô®ÖÁóõÁ≠íÁµ±ÈÄöÂ†ÜÊßåËÖøË§™ÈÄÄÈ†πÂÅ∏Â•óÂ¶¨ÊäïÈÄèÈ¨™ÊÖùÁâπÈóñÂù°Â©ÜÂ∑¥ÊääÊí≠Êì∫Êù∑Ê≥¢Ê¥æÁà¨Áê∂Á†¥ÁΩ∑Ëä≠Ë∑õÈ†óÂà§ÂùÇÊùøÁâàÁì£Ë≤©Ëæ¶ÈàëÔøΩ".split("");
    for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) {
        e[D[247][j]] = 63232 + j;
        d[63232 + j] = D[247][j];
    };
    D[248] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈò™ÂÖ´Âè≠Êçå‰Ω©ÂîÑÊÇñÊïóÊ≤õÊµøÁâåÁãΩÁ®óË¶áË≤ùÂΩ≠ÊæéÁÉπËÜ®ÊÑé‰æøÂÅèÊâÅÁâáÁØáÁ∑®Áø©ÈÅçÈû≠È®ôË≤∂Âù™Âπ≥Êû∞ËêçË©ïÂê†Â¨ñÂπ£Âª¢ÂºäÊñÉËÇ∫ËîΩÈñâÈôõ‰ΩàÂåÖÂåçÂåèÂíÜÂì∫ÂúÉÂ∏ÉÊÄñÊäõÊä±ÊçïÔ®ÜÊ≥°Êµ¶Áñ±Á†≤ËÉûËÑØËãûËë°Ëí≤Ë¢çË§íÈÄãÈã™È£ΩÈÆëÂπÖÊö¥ÊõùÁÄëÁàÜÔ®á‰øµÂâΩÂΩ™ÊÖìÊùìÊ®ôÊºÇÁì¢Á•®Ë°®Ë±πÈ£áÈ£ÑÈ©ÉÔøΩ".split("");
    for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 65533) {
        e[D[248][j]] = 63488 + j;
        d[63488 + j] = D[248][j];
    };
    D[249] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂìÅÁ®üÊ•ìË´∑Ë±äÈ¢®È¶ÆÂΩºÊä´Áñ≤ÁöÆË¢´ÈÅøÈôÇÂåπÂººÂøÖÊ≥åÁèåÁï¢ÁñãÁ≠ÜËãæÈ¶ù‰πèÈÄº‰∏ã‰ΩïÂé¶Â§èÂªàÊò∞Ê≤≥ÁëïËç∑Ëù¶Ë≥ÄÈÅêÈúûÈ∞ïÂ£ëÂ≠∏ËôêË¨îÈ∂¥ÂØíÊÅ®ÊÇçÊó±Ê±óÊº¢Êæ£ÁÄöÁΩïÁø∞ÈñëÈñíÈôêÈüìÂâ≤ËΩÑÂáΩÂê´Âí∏Âï£ÂñäÊ™ªÊ∂µÁ∑òËâ¶ÈäúÈô∑ÈππÂêàÂìàÁõíËõ§Èñ§ÈóîÈôú‰∫¢‰ºâÂßÆÂ´¶Â∑∑ÊÅíÊäóÊù≠Ê°ÅÊ≤ÜÊ∏ØÁº∏ËÇõËà™ÔøΩ".split("");
    for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 65533) {
        e[D[249][j]] = 63744 + j;
        d[63744 + j] = D[249][j];
    };
    D[250] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ®àÔ®âÈ†Ö‰∫•ÂÅïÂí≥ÂûìÂ•öÂ≠©ÂÆ≥ÊáàÊ•∑Êµ∑ÁÄ£ËüπËß£Ë©≤Ë´ßÈÇÇÈß≠È™∏ÂäæÊ†∏ÂÄñÂπ∏ÊùèËçáË°å‰∫´ÂêëÂöÆÁè¶ÈÑïÈüøÈ§âÈ•óÈ¶ôÂôìÂ¢üËôõË®±ÊÜ≤Ê´∂ÁçªËªíÊ≠áÈö™È©óÂ•ïÁàÄËµ´Èù©‰øîÂ≥¥Âº¶Êá∏ÊôõÊ≥´ÁÇ´ÁéÑÁéπÁèæÁú©ÁùçÁµÉÁµ¢Á∏£Ëà∑Ë°íÔ®äË≥¢ÈââÈ°ØÂ≠ëÁ©¥Ë°ÄÈ†ÅÂ´å‰ø†ÂçîÂ§æÂ≥ΩÊåæÊµπÁãπËÑÖËÑáËé¢ÈãèÈ†∞‰∫®ÂÖÑÂàëÂûãÔøΩ".split("");
    for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 65533) {
        e[D[250][j]] = 64000 + j;
        d[64000 + j] = D[250][j];
    };
    D[251] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂΩ¢Ê≥ÇÊªéÁÄÖÁÅêÁÇØÁÜíÁè©Áë©ËçäËû¢Ë°°ÈÄàÈÇ¢Èé£È¶®ÂÖÆÂΩóÊÉ†ÊÖßÊö≥ËïôËπäÈÜØÈûã‰πé‰∫íÂëºÂ£ïÂ£∫Â•ΩÂ≤µÂºßÊà∂ÊâàÊòäÊôßÊØ´Êµ©Ê∑èÊπñÊª∏ÊæîÊø†Êø©ÁÅùÁãêÁê•ÁëöÁì†ÁöìÁ•úÁ≥äÁ∏ûËÉ°Ëä¶Ëë´ËíøËôéËôüËù¥Ë≠∑Ë±™Èé¨È†ÄÈ°•ÊÉëÊàñÈÖ∑Â©öÊòèÊ∑∑Ê∏æÁêøÈ≠ÇÂøΩÊÉöÁ¨èÂìÑÂºòÊ±ûÊ≥ìÊ¥™ÁÉòÁ¥ÖËôπË®åÈ¥ªÂåñÂíåÂ¨ÖÊ®∫ÁÅ´ÁïµÔøΩ".split("");
    for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 65533) {
        e[D[251][j]] = 64256 + j;
        d[64256 + j] = D[251][j];
    };
    D[252] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¶çÁ¶æËä±ËèØË©±Ë≠ÅË≤®Èù¥Ô®ãÊì¥Êî´Á¢∫Á¢ªÁ©´‰∏∏ÂñöÂ•êÂÆ¶ÂπªÊÇ£ÊèõÊ≠°Êô•Ê°ìÊ∏ôÁÖ•Áí∞Á¥àÈÇÑÈ©©È∞•Ê¥ªÊªëÁåæË±ÅÈóäÂá∞ÂπåÂæ®ÊÅçÊÉ∂ÊÑ∞ÊÖåÊôÉÊôÑÊ¶•Ê≥ÅÊπüÊªâÊΩ¢ÁÖåÁíúÁöáÁØÅÁ∞ßËçíËùóÈÅëÈöçÈªÉÂåØÂõûÂªªÂæäÊÅ¢ÊÇîÊá∑Êô¶ÊúÉÊ™úÊ∑ÆÊæÆÁÅ∞Áç™Áπ™ËÜæËå¥ËõîË™®Ë≥ÑÂäÉÁç≤ÂÆñÊ©´ÈêÑÂìÆÂöÜÂ≠ùÊïàÊñÖÊõâÊ¢üÊ∂çÊ∑ÜÔøΩ".split("");
    for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 65533) {
        e[D[252][j]] = 64512 + j;
        d[64512 + j] = D[252][j];
    };
    D[253] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁàªËÇ¥ÈÖµÈ©ç‰æØÂÄôÂéöÂêéÂêºÂñâÂóÖÂ∏øÂæåÊúΩÁÖ¶ÁèùÈÄÖÂãõÂã≥Â°§Â£éÁÑÑÁÜèÁáªËñ∞Ë®ìÊöàËñ®ÂñßÊöÑÁÖäËê±ÂçâÂñôÊØÅÂΩôÂæΩÊèÆÊöâÁÖáË´±ËºùÈ∫æ‰ºëÊê∫ÁÉãÁï¶ËôßÊÅ§Ë≠éÈ∑∏ÂÖáÂá∂ÂåàÊ¥∂ËÉ∏ÈªëÊòïÊ¨£ÁÇòÁóïÂêÉÂ±πÁ¥áË®ñÊ¨†Ê¨ΩÊ≠ÜÂê∏ÊÅ∞Ê¥ΩÁøïËààÂÉñÂáûÂñúÂô´ÂõçÂß¨Â¨âÂ∏åÊÜôÊÜòÊà±ÊôûÊõ¶ÁÜôÁÜπÁÜ∫ÁäßÁ¶ßÁ®ÄÁæ≤Ë©∞ÔøΩ".split("");
    for (j = 0; j != D[253].length; ++j) if (D[253][j].charCodeAt(0) !== 65533) {
        e[D[253][j]] = 64768 + j;
        d[64768 + j] = D[253][j];
    };
    return {
        "enc": e,
        "dec": d
    };
})();
cptable[950] = (function() {
    var d = [],
        e = {},
        D = [],
        j;
    D[0] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) {
        e[D[0][j]] = 0 + j;
        d[0 + j] = D[0][j];
    };
    D[161] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ\u3000Ôºå„ÄÅ„ÄÇÔºé\u2027ÔºõÔºöÔºüÔºÅÔ∏∞\u2026\u2025ÔπêÔπëÔπí¬∑ÔπîÔπïÔπñÔπóÔΩú\u2013Ô∏±\u2014Ô∏≥‚ï¥Ô∏¥ÔπèÔºàÔºâÔ∏µÔ∏∂ÔΩõÔΩùÔ∏∑Ô∏∏„Äî„ÄïÔ∏πÔ∏∫„Äê„ÄëÔ∏ªÔ∏º„Ää„ÄãÔ∏ΩÔ∏æ„Äà„ÄâÔ∏øÔπÄ„Äå„ÄçÔπÅÔπÇ„Äé„ÄèÔπÉÔπÑÔπôÔπöÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔπõÔπúÔπùÔπû\u2018\u2019\u201c\u201d„Äù„Äû\u2035\u2032ÔºÉÔºÜÔºä\u203b¬ß„ÄÉ‚óã‚óè‚ñ≥‚ñ≤‚óé‚òÜ‚òÖ‚óá‚óÜ‚ñ°‚ñ†‚ñΩ‚ñº„ä£‚ÑÖ¬ØÔø£ÔºøÀçÔπâÔπäÔπçÔπéÔπãÔπåÔπüÔπ†Ôπ°ÔºãÔºç√ó√∑¬±‚àöÔºúÔºûÔºù‚â¶‚âß‚â†‚àû‚âí‚â°Ôπ¢Ôπ£Ôπ§Ôπ•Ôπ¶ÔΩû‚à©‚à™‚ä•‚à†‚àü‚äø„èí„èë‚à´‚àÆ‚àµ‚à¥‚ôÄ‚ôÇ‚äï‚äô‚Üë‚Üì‚Üê‚Üí‚Üñ‚Üó‚Üô‚Üò‚à•‚à£ÔºèÔøΩ".split("");
    for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) {
        e[D[161][j]] = 41216 + j;
        d[41216 + j] = D[161][j];
    };
    D[162] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔºº‚àïÔπ®ÔºÑÔø•„ÄíÔø†Ôø°ÔºÖÔº†‚ÑÉ‚ÑâÔπ©Ôπ™Ôπ´„èï„éú„éù„éû„èé„é°„éé„éè„èÑ¬∞ÂÖôÂÖõÂÖûÂÖùÂÖ°ÂÖ£ÂóßÁì©Á≥é‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà‚ñè‚ñé‚ñç‚ñå‚ñã‚ñä‚ñâ‚îº‚î¥‚î¨‚î§‚îú‚ñî‚îÄ‚îÇ‚ñï‚îå‚îê‚îî‚îò‚ï≠ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚ïÆ‚ï∞‚ïØ‚ïê‚ïû‚ï™‚ï°‚ó¢‚ó£‚ó•‚ó§‚ï±‚ï≤‚ï≥ÔºêÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºô‚Ö†‚Ö°‚Ö¢‚Ö£‚Ö§‚Ö•‚Ö¶‚Öß‚Ö®‚Ö©„Ä°„Ä¢„Ä£„Ä§„Ä•„Ä¶„Äß„Ä®„Ä©ÂçÅÂçÑÂçÖÔº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫ÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔøΩ".split("");
    for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) {
        e[D[162][j]] = 41472 + j;
        d[41472 + j] = D[162][j];
    };
    D[163] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔΩóÔΩòÔΩôÔΩöŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÑœÖœÜœáœàœâ„ÑÖ„ÑÜ„Ñá„Ñà„Ñâ„Ñä„Ñã„Ñå„Ñç„Ñé„ÑèÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ„Ñê„Ñë„Ñí„Ñì„Ñî„Ñï„Ññ„Ñó„Ñò„Ñô„Ñö„Ñõ„Ñú„Ñù„Ñû„Ñü„Ñ†„Ñ°„Ñ¢„Ñ£„Ñ§„Ñ•„Ñ¶„Ñß„Ñ®„Ñ©ÀôÀâÀäÀáÀãÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‚Ç¨ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) {
        e[D[163][j]] = 41728 + j;
        d[41728 + j] = D[163][j];
    };
    D[164] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰∏Ä‰πô‰∏Å‰∏É‰πÉ‰πù‰∫Ü‰∫å‰∫∫ÂÑøÂÖ•ÂÖ´Âá†ÂàÄÂàÅÂäõÂåïÂçÅÂçúÂèà‰∏â‰∏ã‰∏à‰∏ä‰∏´‰∏∏Âá°‰πÖ‰πà‰πü‰πû‰∫é‰∫°ÂÖÄÂàÉÂã∫ÂçÉÂèâÂè£ÂúüÂ£´Â§ïÂ§ßÂ•≥Â≠êÂ≠ëÂ≠ìÂØ∏Â∞èÂ∞¢Â∞∏Â±±Â∑ùÂ∑•Â∑±Â∑≤Â∑≥Â∑æÂπ≤ÂªæÂºãÂºìÊâçÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰∏ë‰∏ê‰∏ç‰∏≠‰∏∞‰∏π‰πãÂ∞π‰∫à‰∫ë‰∫ï‰∫í‰∫î‰∫¢‰ªÅ‰ªÄ‰ªÉ‰ªÜ‰ªá‰ªç‰ªä‰ªã‰ªÑÂÖÉÂÖÅÂÖßÂÖ≠ÂÖÆÂÖ¨ÂÜóÂá∂ÂàÜÂàáÂààÂãªÂãæÂãøÂåñÂåπÂçàÂçáÂçÖÂçûÂéÑÂèãÂèäÂèçÂ£¨Â§©Â§´Â§™Â§≠Â≠îÂ∞ëÂ∞§Â∞∫Â±ØÂ∑¥ÂπªÂªøÂºîÂºïÂøÉÊààÊà∂ÊâãÊâéÊîØÊñáÊñóÊñ§ÊñπÊó•Êõ∞ÊúàÊú®Ê¨†Ê≠¢Ê≠πÊØãÊØîÊØõÊ∞èÊ∞¥ÁÅ´Áà™Áà∂ÁàªÁâáÁâôÁâõÁä¨Áéã‰∏ôÔøΩ".split("");
    for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) {
        e[D[164][j]] = 41984 + j;
        d[41984 + j] = D[164][j];
    };
    D[165] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰∏ñ‰∏ï‰∏î‰∏ò‰∏ª‰πç‰πè‰πé‰ª•‰ªò‰ªî‰ªï‰ªñ‰ªó‰ª£‰ª§‰ªô‰ªûÂÖÖÂÖÑÂÜâÂÜäÂÜ¨ÂáπÂá∫Âá∏ÂàäÂä†ÂäüÂåÖÂåÜÂåóÂåù‰ªüÂçäÂçâÂç°Âç†ÂçØÂçÆÂéªÂèØÂè§Âè≥Âè¨ÂèÆÂè©Âè®ÂèºÂè∏ÂèµÂè´Âè¶Âè™Âè≤Âè±Âè∞Âè•Âè≠ÂèªÂõõÂõöÂ§ñÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ§ÆÂ§±Â•¥Â•∂Â≠ïÂÆÉÂ∞ºÂ∑®Â∑ßÂ∑¶Â∏ÇÂ∏ÉÂπ≥ÂπºÂºÅÂºòÂºóÂøÖÊàäÊâìÊâîÊâíÊâëÊñ•Êó¶ÊúÆÊú¨Êú™Êú´Êú≠Ê≠£ÊØçÊ∞ëÊ∞êÊ∞∏Ê±ÅÊ±ÄÊ∞æÁäØÁéÑÁéâÁìúÁì¶ÁîòÁîüÁî®Áî©Áî∞Áî±Áî≤Áî≥ÁñãÁôΩÁöÆÁöøÁõÆÁüõÁü¢Áü≥Á§∫Á¶æÁ©¥Á´ã‰∏û‰∏ü‰πí‰πì‰π©‰∫ô‰∫§‰∫¶‰∫•‰ªø‰ºâ‰ºô‰ºä‰ºï‰ºç‰ºê‰ºë‰ºè‰ª≤‰ª∂‰ªª‰ª∞‰ª≥‰ªΩ‰ºÅ‰ºãÂÖâÂÖáÂÖÜÂÖàÂÖ®ÔøΩ".split("");
    for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) {
        e[D[165][j]] = 42240 + j;
        d[42240 + j] = D[165][j];
    };
    D[166] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂÖ±ÂÜçÂÜ∞ÂàóÂàëÂàíÂàéÂàñÂä£ÂåàÂå°Âå†Âç∞Âç±ÂêâÂêèÂêåÂêäÂêêÂêÅÂêãÂêÑÂêëÂêçÂêàÂêÉÂêéÂêÜÂêíÂõ†ÂõûÂõùÂú≥Âú∞Âú®Âú≠Âú¨ÂúØÂú©Â§ôÂ§öÂ§∑Â§∏Â¶ÑÂ•∏Â¶ÉÂ•ΩÂ•πÂ¶ÇÂ¶ÅÂ≠óÂ≠òÂÆáÂÆàÂÆÖÂÆâÂØ∫Â∞ñÂ±πÂ∑ûÂ∏ÜÂπ∂Âπ¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂºèÂºõÂøôÂøñÊàéÊàåÊàçÊàêÊâ£ÊâõÊâòÊî∂Êó©Êó®Êó¨Êó≠Êõ≤Êõ≥ÊúâÊúΩÊú¥Êú±ÊúµÊ¨°Ê≠§Ê≠ªÊ∞ñÊ±ùÊ±óÊ±ôÊ±üÊ±†Ê±êÊ±ïÊ±°Ê±õÊ±çÊ±éÁÅ∞ÁâüÁâùÁôæÁ´πÁ±≥Á≥∏Áº∂ÁæäÁæΩËÄÅËÄÉËÄåËÄíËÄ≥ËÅøËÇâËÇãËÇåËá£Ëá™Ëá≥ËáºËàåËàõËàüËâÆËâ≤ËâæËô´Ë°ÄË°åË°£Ë•øÈò°‰∏≤‰∫®‰Ωç‰Ωè‰Ωá‰Ωó‰Ωû‰º¥‰Ωõ‰Ωï‰º∞‰Ωê‰Ωë‰ºΩ‰º∫‰º∏‰ΩÉ‰Ωî‰ºº‰ΩÜ‰Ω£ÔøΩ".split("");
    for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) {
        e[D[166][j]] = 42496 + j;
        d[42496 + j] = D[166][j];
    };
    D[167] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰Ωú‰Ω†‰ºØ‰Ωé‰º∂‰Ωô‰Ωù‰Ωà‰ΩöÂÖåÂÖãÂÖçÂÖµÂÜ∂ÂÜ∑Âà•Âà§Âà©Âà™Âà®Âä´Âä©Âä™Âä¨Âå£Âç≥ÂçµÂêùÂê≠ÂêûÂêæÂê¶ÂëéÂêßÂëÜÂëÉÂê≥ÂëàÂëÇÂêõÂê©ÂëäÂêπÂêªÂê∏ÂêÆÂêµÂê∂Âê†ÂêºÂëÄÂê±Âê´ÂêüÂê¨Âõ™Âõ∞Âõ§Âõ´ÂùäÂùëÂùÄÂùçÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂùáÂùéÂúæÂùêÂùèÂúªÂ£ØÂ§æÂ¶ùÂ¶íÂ¶®Â¶ûÂ¶£Â¶ôÂ¶ñÂ¶çÂ¶§Â¶ìÂ¶äÂ¶•Â≠ùÂ≠úÂ≠öÂ≠õÂÆåÂÆãÂÆèÂ∞¨Â±ÄÂ±ÅÂ∞øÂ∞æÂ≤êÂ≤ëÂ≤îÂ≤åÂ∑´Â∏åÂ∫èÂ∫áÂ∫äÂª∑ÂºÑÂºüÂΩ§ÂΩ¢ÂΩ∑ÂΩπÂøòÂøåÂøóÂøçÂø±Âø´Âø∏Âø™ÊàíÊàëÊäÑÊäóÊäñÊäÄÊâ∂ÊäâÊâ≠ÊääÊâºÊâæÊâπÊâ≥ÊäíÊâØÊäòÊâÆÊäïÊäìÊäëÊäÜÊîπÊîªÊî∏Êó±Êõ¥ÊùüÊùéÊùèÊùêÊùëÊùúÊùñÊùûÊùâÊùÜÊù†ÔøΩ".split("");
    for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) {
        e[D[167][j]] = 42752 + j;
        d[42752 + j] = D[167][j];
    };
    D[168] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊùìÊùóÊ≠•ÊØèÊ±ÇÊ±ûÊ≤ôÊ≤ÅÊ≤àÊ≤âÊ≤ÖÊ≤õÊ±™Ê±∫Ê≤êÊ±∞Ê≤åÊ±®Ê≤ñÊ≤íÊ±ΩÊ≤ÉÊ±≤Ê±æÊ±¥Ê≤ÜÊ±∂Ê≤çÊ≤îÊ≤òÊ≤ÇÁÅ∂ÁÅºÁÅΩÁÅ∏Áâ¢Áâ°Áâ†ÁãÑÁãÇÁéñÁî¨Áî´Áî∑Áî∏ÁöÇÁõØÁü£ÁßÅÁßÄÁ¶øÁ©∂Á≥ªÁΩïËÇñËÇìËÇùËÇòËÇõËÇöËÇ≤ËâØËäíÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËäãËäçË¶ãËßíË®ÄË∞∑Ë±ÜË±ïË≤ùËµ§Ëµ∞Ë∂≥Ë∫´ËªäËæõËæ∞ËøÇËøÜËøÖËøÑÂ∑°ÈÇëÈÇ¢ÈÇ™ÈÇ¶ÈÇ£ÈÖâÈáÜÈáåÈò≤ÈòÆÈò±Èò™Èò¨‰∏¶‰πñ‰π≥‰∫ã‰∫õ‰∫û‰∫´‰∫¨‰ΩØ‰æù‰æç‰Ω≥‰Ωø‰Ω¨‰æõ‰æã‰æÜ‰æÉ‰Ω∞‰Ωµ‰æà‰Ω©‰Ωª‰æñ‰Ωæ‰æè‰æë‰Ω∫ÂÖîÂÖíÂÖïÂÖ©ÂÖ∑ÂÖ∂ÂÖ∏ÂÜΩÂáΩÂàªÂà∏Âà∑Âà∫Âà∞ÂàÆÂà∂ÂâÅÂäæÂäªÂçíÂçîÂçìÂçëÂç¶Âç∑Âç∏ÂçπÂèñÂèîÂèóÂë≥ÂëµÔøΩ".split("");
    for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) {
        e[D[168][j]] = 43008 + j;
        d[43008 + j] = D[168][j];
    };
    D[169] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂíñÂë∏ÂíïÂíÄÂëªÂë∑ÂíÑÂííÂíÜÂëºÂíêÂë±Âë∂ÂíåÂíöÂë¢Âë®ÂíãÂëΩÂíéÂõ∫ÂûÉÂù∑Âù™Âù©Âù°Âù¶Âù§ÂùºÂ§úÂ•âÂ•áÂ•àÂ•ÑÂ•îÂ¶æÂ¶ªÂßîÂ¶πÂ¶ÆÂßëÂßÜÂßêÂßçÂßãÂßìÂßäÂ¶ØÂ¶≥ÂßíÂßÖÂ≠üÂ≠§Â≠£ÂÆóÂÆöÂÆòÂÆúÂÆôÂÆõÂ∞öÂ±àÂ±ÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ±ÜÂ≤∑Â≤°Â≤∏Â≤©Â≤´Â≤±Â≤≥Â∏òÂ∏öÂ∏ñÂ∏ïÂ∏õÂ∏ëÂπ∏Â∫öÂ∫óÂ∫úÂ∫ïÂ∫ñÂª∂Âº¶ÂºßÂº©ÂæÄÂæÅÂΩøÂΩºÂøùÂø†ÂøΩÂøµÂøøÊÄèÊÄîÊÄØÊÄµÊÄñÊÄ™ÊÄïÊÄ°ÊÄßÊÄ©ÊÄ´ÊÄõÊàñÊàïÊàøÊàæÊâÄÊâøÊãâÊãåÊãÑÊäøÊãÇÊäπÊãíÊãõÊä´ÊãìÊãîÊããÊãàÊä®ÊäΩÊäºÊãêÊãôÊãáÊãçÊäµÊãöÊä±ÊãòÊãñÊãóÊãÜÊä¨ÊãéÊîæÊñßÊñºÊó∫ÊòîÊòìÊòåÊòÜÊòÇÊòéÊòÄÊòèÊòïÊòäÔøΩ".split("");
    for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) {
        e[D[169][j]] = 43264 + j;
        d[43264 + j] = D[169][j];
    };
    D[170] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊòáÊúçÊúãÊù≠ÊûãÊûïÊù±ÊûúÊù≥Êù∑ÊûáÊûùÊûóÊùØÊù∞ÊùøÊûâÊùæÊûêÊùµÊûöÊûìÊùºÊù™Êù≤Ê¨£Ê≠¶Ê≠ßÊ≠øÊ∞ìÊ∞õÊ≥£Ê≥®Ê≥≥Ê≤±Ê≥åÊ≥•Ê≤≥Ê≤ΩÊ≤æÊ≤ºÊ≥¢Ê≤´Ê≥ïÊ≥ìÊ≤∏Ê≥ÑÊ≤πÊ≥ÅÊ≤ÆÊ≥óÊ≥ÖÊ≥±Ê≤øÊ≤ªÊ≥°Ê≥õÊ≥äÊ≤¨Ê≥ØÊ≥úÊ≥ñÊ≥†ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁÇïÁÇéÁÇíÁÇäÁÇôÁà¨Áà≠Áà∏ÁâàÁâßÁâ©ÁãÄÁãéÁãôÁãóÁãêÁé©Áé®ÁéüÁé´Áé•ÁîΩÁñùÁñôÁñöÁöÑÁõÇÁõ≤Áõ¥Áü•ÁüΩÁ§æÁ•ÄÁ•ÅÁßâÁßàÁ©∫Á©πÁ´∫Á≥æÁΩîÁæåÁæãËÄÖËÇ∫ËÇ•ËÇ¢ËÇ±ËÇ°ËÇ´ËÇ©ËÇ¥ËÇ™ËÇØËá•ËáæËàçËä≥ËäùËäôËä≠ËäΩËäüËäπËä±Ëä¨Ëä•ËäØËä∏Ëä£Ëä∞ËäæËä∑ËôéËô±ÂàùË°®ËªãËøéËøîËøëÈÇµÈÇ∏ÈÇ±ÈÇ∂ÈááÈáëÈï∑ÈñÄÈòúÈôÄÈòøÈòªÈôÑÔøΩ".split("");
    for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 65533) {
        e[D[170][j]] = 43520 + j;
        d[43520 + j] = D[170][j];
    };
    D[171] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈôÇÈöπÈõ®ÈùíÈùû‰∫ü‰∫≠‰∫Æ‰ø°‰æµ‰æØ‰æø‰ø†‰øë‰øè‰øù‰øÉ‰æ∂‰øò‰øü‰øä‰øó‰æÆ‰øê‰øÑ‰øÇ‰øö‰øé‰øû‰æ∑ÂÖóÂÜíÂÜëÂÜ†ÂâéÂâÉÂâäÂâçÂâåÂâãÂâáÂãáÂãâÂãÉÂãÅÂåçÂçóÂçªÂéöÂèõÂí¨ÂìÄÂí®ÂìéÂìâÂí∏Âí¶Âí≥ÂìáÂìÇÂíΩÂí™ÂìÅÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂìÑÂìàÂíØÂí´Âí±ÂíªÂí©ÂíßÂíøÂõøÂûÇÂûãÂû†Âû£Âû¢ÂüéÂûÆÂûìÂ•ïÂ•ëÂ•èÂ•éÂ•êÂßúÂßòÂßøÂß£Âß®Â®ÉÂß•Âß™ÂßöÂß¶Â®ÅÂßªÂ≠©ÂÆ£ÂÆ¶ÂÆ§ÂÆ¢ÂÆ•Â∞ÅÂ±éÂ±èÂ±çÂ±ãÂ≥ôÂ≥íÂ∑∑Â∏ùÂ∏•Â∏üÂπΩÂ∫†Â∫¶Âª∫ÂºàÂº≠ÂΩ•ÂæàÂæÖÂæäÂæãÂæáÂæåÂæâÊÄíÊÄùÊÄ†ÊÄ•ÊÄéÊÄ®ÊÅçÊÅ∞ÊÅ®ÊÅ¢ÊÅÜÊÅÉÊÅ¨ÊÅ´ÊÅ™ÊÅ§ÊâÅÊãúÊåñÊåâÊãºÊã≠ÊåÅÊãÆÊãΩÊåáÊã±Êã∑ÔøΩ".split("");
    for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 65533) {
        e[D[171][j]] = 43776 + j;
        d[43776 + j] = D[171][j];
    };
    D[172] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊãØÊã¨ÊãæÊã¥ÊåëÊåÇÊîøÊïÖÊñ´ÊñΩÊó¢Êò•Êò≠Êò†ÊòßÊòØÊòüÊò®Êò±Êò§Êõ∑ÊüøÊüìÊü±ÊüîÊüêÊü¨Êû∂ÊûØÊüµÊü©ÊüØÊüÑÊüëÊû¥ÊüöÊü•Êû∏ÊüèÊüûÊü≥Êû∞ÊüôÊü¢ÊüùÊüíÊ≠™ÊÆÉÊÆÜÊÆµÊØíÊØóÊ∞üÊ≥âÊ¥ãÊ¥≤Ê¥™ÊµÅÊ¥•Ê¥åÊ¥±Ê¥ûÊ¥óÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ¥ªÊ¥ΩÊ¥æÊ¥∂Ê¥õÊ≥µÊ¥πÊ¥ßÊ¥∏Ê¥©Ê¥ÆÊ¥µÊ¥éÊ¥´ÁÇ´ÁÇ∫ÁÇ≥ÁÇ¨ÁÇØÁÇ≠ÁÇ∏ÁÇÆÁÇ§Áà∞Áâ≤ÁâØÁâ¥Áã©Áã†Áã°Áé∑ÁèäÁéªÁé≤ÁèçÁèÄÁé≥ÁîöÁî≠ÁïèÁïåÁïéÁïãÁñ´Áñ§Áñ•Áñ¢Áñ£Áô∏ÁöÜÁöáÁöàÁõàÁõÜÁõÉÁõÖÁúÅÁõπÁõ∏ÁúâÁúãÁõæÁõºÁúáÁüúÁ†ÇÁ†îÁ†åÁ†çÁ•ÜÁ•âÁ•àÁ•áÁ¶πÁ¶∫ÁßëÁßíÁßãÁ©øÁ™ÅÁ´øÁ´ΩÁ±ΩÁ¥ÇÁ¥ÖÁ¥ÄÁ¥âÁ¥áÁ¥ÑÁ¥ÜÁº∏ÁæéÁæøËÄÑÔøΩ".split("");
    for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 65533) {
        e[D[172][j]] = 44032 + j;
        d[44032 + j] = D[172][j];
    };
    D[173] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÄêËÄçËÄëËÄ∂ËÉñËÉ•ËÉöËÉÉËÉÑËÉåËÉ°ËÉõËÉéËÉûËÉ§ËÉùËá¥Ëà¢ËãßËåÉËåÖËã£ËãõËã¶ËåÑËã•ËåÇËåâËãíËãóËã±ËåÅËãúËãîËãëËãûËãìËãüËãØËåÜËôêËôπËôªËô∫Ë°çË°´Ë¶ÅËßîË®àË®ÇË®ÉË≤ûË≤†Ëµ¥Ëµ≥Ë∂¥ËªçËªåËø∞Ëø¶Ëø¢Ëø™Ëø•ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËø≠Ëø´Ëø§Ëø®ÈÉäÈÉéÈÉÅÈÉÉÈÖãÈÖäÈáçÈñÇÈôêÈôãÈôåÈôçÈù¢Èù©ÈüãÈü≠Èü≥È†ÅÈ¢®È£õÈ£üÈ¶ñÈ¶ô‰πò‰∫≥ÂÄåÂÄçÂÄ£‰øØÂÄ¶ÂÄ•‰ø∏ÂÄ©ÂÄñÂÄÜÂÄºÂÄüÂÄöÂÄíÂÄë‰ø∫ÂÄÄÂÄîÂÄ®‰ø±ÂÄ°ÂÄãÂÄôÂÄò‰ø≥‰øÆÂÄ≠ÂÄ™‰øæÂÄ´ÂÄâÂÖºÂÜ§ÂÜ•ÂÜ¢ÂáçÂáåÂáÜÂáãÂâñÂâúÂâîÂâõÂâùÂå™ÂçøÂéüÂéùÂèüÂì®ÂîêÂîÅÂî∑ÂìºÂì•Âì≤ÂîÜÂì∫ÂîîÂì©Âì≠Âì°ÂîâÂìÆÂì™ÔøΩ".split("");
    for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 65533) {
        e[D[173][j]] = 44288 + j;
        d[44288 + j] = D[173][j];
    };
    D[174] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂì¶ÂîßÂîáÂìΩÂîèÂúÉÂúÑÂüÇÂüîÂüãÂüÉÂ†âÂ§èÂ•óÂ•òÂ•öÂ®ëÂ®òÂ®úÂ®üÂ®õÂ®ìÂß¨Â®†Â®£Â®©Â®•Â®åÂ®âÂ≠´Â±òÂÆ∞ÂÆ≥ÂÆ∂ÂÆ¥ÂÆÆÂÆµÂÆπÂÆ∏Â∞ÑÂ±ëÂ±ïÂ±êÂ≥≠Â≥ΩÂ≥ªÂ≥™Â≥®Â≥∞Â≥∂Â¥ÅÂ≥¥Â∑ÆÂ∏≠Â∏´Â∫´Â∫≠Â∫ßÂº±ÂæíÂæëÂæêÊÅôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÅ£ÊÅ•ÊÅêÊÅïÊÅ≠ÊÅ©ÊÅØÊÇÑÊÇüÊÇöÊÇçÊÇîÊÇåÊÇÖÊÇñÊâáÊã≥ÊåàÊãøÊçéÊåæÊåØÊçïÊçÇÊçÜÊçèÊçâÊå∫ÊçêÊåΩÊå™Êå´Êå®ÊççÊçåÊïàÊïâÊñôÊóÅÊóÖÊôÇÊôâÊôèÊôÉÊôíÊôåÊôÖÊôÅÊõ∏ÊúîÊúïÊúóÊ†°Ê†∏Ê°àÊ°ÜÊ°ìÊ†πÊ°ÇÊ°îÊ†©Ê¢≥Ê†óÊ°åÊ°ëÊ†ΩÊü¥Ê°êÊ°ÄÊ†ºÊ°ÉÊ†™Ê°ÖÊ†ìÊ†òÊ°ÅÊÆäÊÆâÊÆ∑Ê∞£Ê∞ßÊ∞®Ê∞¶Ê∞§Ê≥∞Êµ™Ê∂ïÊ∂àÊ∂áÊµ¶Êµ∏Êµ∑ÊµôÊ∂ìÔøΩ".split("");
    for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 65533) {
        e[D[174][j]] = 44544 + j;
        d[44544 + j] = D[174][j];
    };
    D[175] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊµ¨Ê∂âÊµÆÊµöÊµ¥Êµ©Ê∂åÊ∂äÊµπÊ∂ÖÊµ•Ê∂îÁÉäÁÉòÁÉ§ÁÉôÁÉàÁÉèÁàπÁâπÁãºÁãπÁãΩÁã∏Áã∑ÁéÜÁè≠ÁêâÁèÆÁè†Áè™ÁèûÁïîÁïùÁïúÁïöÁïôÁñæÁóÖÁóáÁñ≤Áñ≥ÁñΩÁñºÁñπÁóÇÁñ∏ÁöãÁö∞ÁõäÁõçÁõéÁú©ÁúüÁú†Áú®Áü©Á†∞Á†ßÁ†∏Á†ùÁ†¥Á†∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ†•Á†≠Á††Á†üÁ†≤Á•ïÁ•êÁ•†Á•üÁ•ñÁ•ûÁ•ùÁ•óÁ•öÁß§Áß£ÁßßÁßüÁß¶Áß©ÁßòÁ™ÑÁ™àÁ´ôÁ¨ÜÁ¨ëÁ≤âÁ¥°Á¥óÁ¥ãÁ¥äÁ¥†Á¥¢Á¥îÁ¥êÁ¥ïÁ¥öÁ¥úÁ¥çÁ¥ôÁ¥õÁº∫ÁΩüÁæîÁøÖÁøÅËÄÜËÄòËÄïËÄôËÄóËÄΩËÄøËÉ±ËÑÇËÉ∞ËÑÖËÉ≠ËÉ¥ËÑÜËÉ∏ËÉ≥ËÑàËÉΩËÑäËÉºËÉØËá≠Ëá¨ËàÄËàêËà™Ëà´Ëà®Ëà¨ËäªËå´ËçíËçîËçäËå∏ËçêËçâËåµËå¥ËçèËå≤ËåπËå∂ËåóËçÄËå±Ëå®ËçÉÔøΩ".split("");
    for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 65533) {
        e[D[175][j]] = 44800 + j;
        d[44800 + j] = D[175][j];
    };
    D[176] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËôîËöäËö™ËöìËö§Ëö©ËöåËö£ËöúË°∞Ë°∑Ë¢ÅË¢ÇË°ΩË°πË®òË®êË®éË®åË®ïË®äË®óË®ìË®ñË®èË®ëË±àË±∫Ë±πË≤°Ë≤¢Ëµ∑Ë∫¨ËªíËªîËªèËæ±ÈÄÅÈÄÜËø∑ÈÄÄËø∫Ëø¥ÈÄÉËøΩÈÄÖËø∏ÈÇïÈÉ°ÈÉùÈÉ¢ÈÖíÈÖçÈÖåÈáòÈáùÈáóÈáúÈáôÈñÉÈô¢Èô£Èô°ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈôõÈôùÈô§ÈôòÈôûÈöªÈ£¢È¶¨È™®È´òÈ¨•È¨≤È¨º‰πæÂÅ∫ÂÅΩÂÅúÂÅáÂÅÉÂÅåÂÅöÂÅâÂÅ•ÂÅ∂ÂÅéÂÅïÂÅµÂÅ¥ÂÅ∑ÂÅèÂÄèÂÅØÂÅ≠ÂÖúÂÜïÂá∞Ââ™ÂâØÂãíÂãôÂãòÂãïÂåêÂåèÂåôÂåøÂçÄÂåæÂèÉÊõºÂïÜÂï™Âï¶ÂïÑÂïûÂï°ÂïÉÂïäÂî±ÂïñÂïèÂïïÂîØÂï§Âî∏ÂîÆÂïúÂî¨Âï£Âî≥ÂïÅÂïóÂúàÂúãÂúâÂüüÂ†ÖÂ†äÂ†ÜÂü†Âü§Âü∫Â†ÇÂ†µÂü∑ÂüπÂ§†Â•¢Â®∂Â©ÅÂ©âÂ©¶Â©™Â©ÄÔøΩ".split("");
    for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) {
        e[D[176][j]] = 45056 + j;
        d[45056 + j] = D[176][j];
    };
    D[177] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ®ºÂ©¢Â©öÂ©ÜÂ©äÂ≠∞ÂØáÂØÖÂØÑÂØÇÂÆøÂØÜÂ∞âÂ∞àÂ∞áÂ±†Â±úÂ±ùÂ¥áÂ¥ÜÂ¥éÂ¥õÂ¥ñÂ¥¢Â¥ëÂ¥©Â¥îÂ¥ôÂ¥§Â¥ßÂ¥óÂ∑¢Â∏∏Â∏∂Â∏≥Â∏∑Â∫∑Â∫∏Â∫∂Â∫µÂ∫æÂºµÂº∑ÂΩóÂΩ¨ÂΩ©ÂΩ´ÂæóÂæôÂæûÂæòÂæ°Âæ†ÂæúÊÅøÊÇ£ÊÇâÊÇ†ÊÇ®ÊÉãÊÇ¥ÊÉ¶ÊÇΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÉÖÊÇªÊÇµÊÉúÊÇºÊÉòÊÉïÊÉÜÊÉüÊÇ∏ÊÉöÊÉáÊàöÊàõÊâàÊé†ÊéßÊç≤ÊéñÊé¢Êé•Êç∑ÊçßÊéòÊé™Êç±Êé©ÊéâÊéÉÊéõÊç´Êé®ÊéÑÊéàÊéôÊé°Êé¨ÊéíÊéèÊéÄÊçªÊç©Êç®Êç∫ÊïùÊïñÊïëÊïôÊïóÂïüÊïèÊïòÊïïÊïîÊñúÊñõÊñ¨ÊóèÊóãÊóåÊóéÊôùÊôöÊô§Êô®Êô¶ÊôûÊõπÂãóÊúõÊ¢ÅÊ¢ØÊ¢¢Ê¢ìÊ¢µÊ°øÊ°∂Ê¢±Ê¢ßÊ¢óÊ¢∞Ê¢ÉÊ£ÑÊ¢≠Ê¢ÜÊ¢ÖÊ¢îÊ¢ùÊ¢®Ê¢üÊ¢°Ê¢ÇÊ¨≤ÊÆ∫ÔøΩ".split("");
    for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) {
        e[D[177][j]] = 45312 + j;
        d[45312 + j] = D[177][j];
    };
    D[178] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊØ´ÊØ¨Ê∞´Ê∂éÊ∂ºÊ∑≥Ê∑ôÊ∂≤Ê∑°Ê∑åÊ∑§Ê∑ªÊ∑∫Ê∏ÖÊ∑áÊ∑ãÊ∂ØÊ∑ëÊ∂ÆÊ∑ûÊ∑πÊ∂∏Ê∑∑Ê∑µÊ∑ÖÊ∑íÊ∏öÊ∂µÊ∑öÊ∑´Ê∑òÊ∑™Ê∑±Ê∑ÆÊ∑®Ê∑ÜÊ∑ÑÊ∂™Ê∑¨Ê∂øÊ∑¶ÁÉπÁÑâÁÑäÁÉΩÁÉØÁàΩÁâΩÁäÅÁåúÁåõÁåñÁåìÁåôÁéáÁêÖÁêäÁêÉÁêÜÁèæÁêçÁì†Áì∂ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁì∑ÁîúÁî¢Áï•Áï¶Áï¢Áï∞ÁñèÁóîÁóïÁñµÁóäÁóçÁöéÁõîÁõíÁõõÁú∑ÁúæÁúºÁú∂Áú∏Áú∫Á°´Á°ÉÁ°éÁ••Á•®Á•≠ÁßªÁ™íÁ™ïÁ¨†Á¨®Á¨õÁ¨¨Á¨¶Á¨ôÁ¨ûÁ¨ÆÁ≤íÁ≤óÁ≤ïÁµÜÁµÉÁµ±Á¥ÆÁ¥πÁ¥ºÁµÄÁ¥∞Á¥≥ÁµÑÁ¥ØÁµÇÁ¥≤Á¥±ÁºΩÁæûÁæöÁøåÁøéÁøíËÄúËÅäËÅÜËÑØËÑñËÑ£ËÑ´ËÑ©ËÑ∞ËÑ§ËàÇËàµËà∑Ëà∂ËàπËééËéûËéòËç∏Ëé¢ËéñËéΩËé´ËéíËéäËéìËéâËé†Ëç∑ËçªËçºÔøΩ".split("");
    for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) {
        e[D[178][j]] = 45568 + j;
        d[45568 + j] = D[178][j];
    };
    D[179] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËéÜËéßËôïÂΩ™ËõáËõÄËö∂ËõÑËöµËõÜËõãËö±ËöØËõâË°ìË¢ûË¢àË¢´Ë¢íË¢ñË¢çË¢ãË¶ìË¶èË®™Ë®ùË®£Ë®•Ë®±Ë®≠Ë®üË®õË®¢Ë±âË±öË≤©Ë≤¨Ë≤´Ë≤®Ë≤™Ë≤ßËµßËµ¶Ë∂æË∂∫ËªõËªüÈÄôÈÄçÈÄöÈÄóÈÄ£ÈÄüÈÄùÈÄêÈÄïÈÄûÈÄ†ÈÄèÈÄ¢ÈÄñÈÄõÈÄîÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÉ®ÈÉ≠ÈÉΩÈÖóÈáéÈáµÈá¶Èá£ÈáßÈá≠Èá©ÈñâÈô™ÈôµÈô≥Èô∏Èô∞Èô¥Èô∂Èô∑Èô¨ÈõÄÈõ™Èõ©Á´†Á´üÈ†ÇÈ†ÉÈ≠öÈ≥•ÈπµÈπøÈ∫•È∫ªÂÇ¢ÂÇçÂÇÖÂÇôÂÇëÂÇÄÂÇñÂÇòÂÇöÊúÄÂá±Ââ≤Ââ¥ÂâµÂâ©ÂãûÂãùÂãõÂçöÂé•ÂïªÂñÄÂñßÂïºÂñäÂñùÂñòÂñÇÂñúÂñ™ÂñîÂñáÂñãÂñÉÂñ≥ÂñÆÂñüÂîæÂñ≤ÂñöÂñªÂñ¨Âñ±ÂïæÂñâÂñ´ÂñôÂúçÂ†ØÂ†™Â†¥Â†§Â†∞Â†±Â†°Â†ùÂ††Â£πÂ£∫Â•†ÔøΩ".split("");
    for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) {
        e[D[179][j]] = 45824 + j;
        d[45824 + j] = D[179][j];
    };
    D[180] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ©∑Â™öÂ©øÂ™íÂ™õÂ™ßÂ≠≥Â≠±ÂØíÂØåÂØìÂØêÂ∞äÂ∞ãÂ∞±ÂµåÂµêÂ¥¥ÂµáÂ∑ΩÂπÖÂ∏ΩÂπÄÂπÉÂπæÂªäÂªÅÂªÇÂªÑÂººÂΩ≠Âæ©Âæ™Âæ®ÊÉëÊÉ°ÊÇ≤ÊÇ∂ÊÉ†ÊÑúÊÑ£ÊÉ∫ÊÑïÊÉ∞ÊÉªÊÉ¥ÊÖ®ÊÉ±ÊÑéÊÉ∂ÊÑâÊÑÄÊÑíÊàüÊââÊé£ÊéåÊèèÊèÄÊè©ÊèâÊèÜÊèçÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊèíÊè£ÊèêÊè°ÊèñÊè≠ÊèÆÊç∂Êè¥Êè™ÊèõÊëíÊèöÊèπÊïûÊï¶Êï¢Êï£ÊñëÊñêÊñØÊôÆÊô∞Êô¥Êô∂ÊôØÊöëÊô∫ÊôæÊô∑ÊõæÊõøÊúüÊúùÊ£∫Ê£ïÊ£†Ê£òÊ£óÊ§ÖÊ£üÊ£µÊ£ÆÊ£ßÊ£πÊ£íÊ£≤Ê££Ê£ãÊ£çÊ§çÊ§íÊ§éÊ£âÊ£öÊ•ÆÊ£ªÊ¨æÊ¨∫Ê¨ΩÊÆòÊÆñÊÆºÊØØÊ∞ÆÊ∞ØÊ∞¨Ê∏ØÊ∏∏ÊπîÊ∏°Ê∏≤ÊπßÊπäÊ∏†Ê∏•Ê∏£Ê∏õÊπõÊπòÊ∏§ÊπñÊπÆÊ∏≠Ê∏¶ÊπØÊ∏¥ÊπçÊ∏∫Ê∏¨ÊπÉÊ∏ùÊ∏æÊªãÔøΩ".split("");
    for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) {
        e[D[180][j]] = 46080 + j;
        d[46080 + j] = D[180][j];
    };
    D[181] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ∫âÊ∏ôÊπéÊπ£ÊπÑÊπ≤Êπ©ÊπüÁÑôÁÑöÁÑ¶ÁÑ∞ÁÑ°ÁÑ∂ÁÖÆÁÑúÁâåÁäÑÁäÄÁå∂Áå•Áå¥Áå©Áê∫Áê™Áê≥Áê¢Áê•ÁêµÁê∂Áê¥ÁêØÁêõÁê¶Áê®Áî•Áî¶Áï´Áï™Áó¢ÁóõÁó£ÁóôÁóòÁóûÁó†ÁôªÁôºÁöñÁöìÁö¥ÁõúÁùèÁü≠Á°ùÁ°¨Á°ØÁ®çÁ®àÁ®ãÁ®ÖÁ®ÄÁ™òÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ™óÁ™ñÁ´•Á´£Á≠âÁ≠ñÁ≠ÜÁ≠êÁ≠íÁ≠îÁ≠çÁ≠ãÁ≠èÁ≠ëÁ≤üÁ≤•ÁµûÁµêÁµ®ÁµïÁ¥´ÁµÆÁµ≤Áµ°Áµ¶Áµ¢Áµ∞Áµ≥ÂñÑÁøîÁøïËÄãËÅíËÇÖËÖïËÖîËÖãËÖëËÖéËÑπËÖÜËÑæËÖåËÖìËÖ¥ËàíËàúËè©ËêÉËè∏ËêçËè†ËèÖËêãËèÅËèØËè±Ëè¥ËëóËêäËè∞ËêåËèåËèΩËè≤ËèäËê∏ËêéËêÑËèúËêáËèîËèüËôõËõüËõôËõ≠ËõîËõõËõ§ËõêËõûË°óË£ÅË£ÇË¢±Ë¶ÉË¶ñË®ªË©†Ë©ïË©ûË®ºË©ÅÔøΩ".split("");
    for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) {
        e[D[181][j]] = 46336 + j;
        d[46336 + j] = D[181][j];
    };
    D[182] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË©îË©õË©êË©ÜË®¥Ë®∫Ë®∂Ë©ñË±°Ë≤ÇË≤ØË≤ºË≤≥Ë≤ΩË≥ÅË≤ªË≥ÄË≤¥Ë≤∑Ë≤∂Ë≤øË≤∏Ë∂äË∂ÖË∂ÅË∑éË∑ùË∑ãË∑öË∑ëË∑åË∑õË∑ÜËªªËª∏ËªºËæúÈÄÆÈÄµÈÄ±ÈÄ∏ÈÄ≤ÈÄ∂ÈÑÇÈÉµÈÑâÈÉæÈÖ£ÈÖ•ÈáèÈàîÈàïÈà£ÈàâÈàûÈàçÈàêÈàáÈàëÈñîÈñèÈñãÈñëÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈñìÈñíÈñéÈöäÈöéÈöãÈôΩÈöÖÈöÜÈöçÈô≤ÈöÑÈõÅÈõÖÈõÑÈõÜÈõáÈõØÈõ≤ÈüåÈ†ÖÈ†ÜÈ†àÈ£ßÈ£™È£ØÈ£©È£≤È£≠È¶ÆÈ¶≠ÈªÉÈªçÈªë‰∫ÇÂÇ≠ÂÇµÂÇ≤ÂÇ≥ÂÉÖÂÇæÂÇ¨ÂÇ∑ÂÇªÂÇØÂÉáÂâøÂâ∑ÂâΩÂãüÂã¶Âã§Âã¢Âã£ÂåØÂóüÂó®ÂóìÂó¶ÂóéÂóúÂóáÂóëÂó£Âó§ÂóØÂóöÂó°ÂóÖÂóÜÂó•ÂóâÂúíÂúìÂ°ûÂ°ëÂ°òÂ°óÂ°öÂ°îÂ°´Â°åÂ°≠Â°äÂ°¢Â°íÂ°ãÂ•ßÂ´ÅÂ´âÂ´åÂ™æÂ™ΩÂ™ºÔøΩ".split("");
    for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) {
        e[D[182][j]] = 46592 + j;
        d[46592 + j] = D[182][j];
    };
    D[183] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ™≥Â´ÇÂ™≤Âµ©ÂµØÂπåÂππÂªâÂªàÂºíÂΩôÂæ¨ÂæÆÊÑöÊÑèÊÖàÊÑüÊÉ≥ÊÑõÊÉπÊÑÅÊÑàÊÖéÊÖåÊÖÑÊÖçÊÑæÊÑ¥ÊÑßÊÑçÊÑÜÊÑ∑Êà°Êà¢ÊêìÊêæÊêûÊê™Êê≠ÊêΩÊê¨ÊêèÊêúÊêîÊêçÊê∂ÊêñÊêóÊêÜÊï¨ÊñüÊñ∞ÊöóÊöâÊöáÊöàÊöñÊöÑÊöòÊöçÊúÉÊ¶îÊ•≠ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ•öÊ•∑Ê•†Ê•îÊ•µÊ§∞Ê¶ÇÊ•äÊ•®Ê•´Ê•ûÊ•ìÊ•πÊ¶ÜÊ•ùÊ•£Ê•õÊ≠áÊ≠≤ÊØÄÊÆøÊØìÊØΩÊ∫¢Ê∫ØÊªìÊ∫∂ÊªÇÊ∫êÊ∫ùÊªáÊªÖÊ∫•Ê∫òÊ∫ºÊ∫∫Ê∫´ÊªëÊ∫ñÊ∫úÊªÑÊªîÊ∫™Ê∫ßÊ∫¥ÁÖéÁÖôÁÖ©ÁÖ§ÁÖâÁÖßÁÖúÁÖ¨ÁÖ¶ÁÖåÁÖ•ÁÖûÁÖÜÁÖ®ÁÖñÁà∫ÁâíÁå∑ÁçÖÁåøÁåæÁëØÁëöÁëïÁëüÁëûÁëÅÁêøÁëôÁëõÁëúÁï∂Áï∏ÁòÄÁó∞ÁòÅÁó≤Áó±Áó∫ÁóøÁó¥Áó≥ÁõûÁõüÁùõÁù´Áù¶ÁùûÁù£ÔøΩ".split("");
    for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) {
        e[D[183][j]] = 46848 + j;
        d[46848 + j] = D[183][j];
    };
    D[184] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁùπÁù™Áù¨ÁùúÁù•Áù®Áù¢ÁüÆÁ¢éÁ¢∞Á¢óÁ¢òÁ¢åÁ¢âÁ°ºÁ¢ëÁ¢ìÁ°øÁ•∫Á•øÁ¶ÅËê¨Á¶ΩÁ®úÁ®öÁ®†Á®îÁ®üÁ®ûÁ™üÁ™†Á≠∑ÁØÄÁ≠†Á≠ÆÁ≠ßÁ≤±Á≤≥Á≤µÁ∂ìÁµπÁ∂ëÁ∂ÅÁ∂èÁµõÁΩÆÁΩ©ÁΩ™ÁΩ≤Áæ©Áæ®Áæ§ËÅñËÅòËÇÜËÇÑËÖ±ËÖ∞ËÖ∏ËÖ•ËÖÆËÖ≥ËÖ´ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÖπËÖ∫ËÖ¶ËàÖËâáËíÇËë∑ËêΩËê±ËëµËë¶Ëë´ËëâËë¨ËëõËêºËêµËë°Ëë£Ëë©Ëë≠ËëÜËôûËôúËôüËõπËúìËúàËúáËúÄËõæËõªËúÇËúÉËúÜËúäË°ôË£üË£îË£ôË£úË£òË£ùË£°Ë£äË£ïË£íË¶úËß£Ë©´Ë©≤Ë©≥Ë©¶Ë©©Ë©∞Ë™áË©ºË©£Ë™†Ë©±Ë™ÖË©≠Ë©¢Ë©ÆË©¨Ë©πË©ªË®æË©®Ë±¢Ë≤äË≤âË≥äË≥áË≥àË≥ÑË≤≤Ë≥ÉË≥ÇË≥ÖË∑°Ë∑üË∑®Ë∑ØË∑≥Ë∑∫Ë∑™Ë∑§Ë∑¶Ë∫≤ËºÉËºâËªæËºäÔøΩ".split("");
    for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) {
        e[D[184][j]] = 47104 + j;
        d[47104 + j] = D[184][j];
    };
    D[185] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËæüËæ≤ÈÅãÈÅäÈÅìÈÅÇÈÅîÈÄºÈÅïÈÅêÈÅáÈÅèÈÅéÈÅçÈÅëÈÄæÈÅÅÈÑíÈÑóÈÖ¨ÈÖ™ÈÖ©ÈáâÈà∑ÈâóÈà∏ÈàΩÈâÄÈàæÈâõÈâãÈâ§ÈâëÈà¥ÈââÈâçÈâÖÈàπÈàøÈâöÈñòÈöòÈöîÈöïÈõçÈõãÈõâÈõäÈõ∑ÈõªÈõπÈõ∂ÈùñÈù¥Èù∂È†êÈ†ëÈ†ìÈ†äÈ†íÈ†åÈ£ºÈ£¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ£ΩÈ£æÈ¶≥È¶±È¶¥È´°È≥©È∫ÇÈºéÈºìÈº†ÂÉßÂÉÆÂÉ•ÂÉñÂÉ≠ÂÉöÂÉïÂÉèÂÉëÂÉ±ÂÉéÂÉ©ÂÖ¢Âá≥ÂäÉÂäÇÂå±Âé≠ÂóæÂòÄÂòõÂòóÂóΩÂòîÂòÜÂòâÂòçÂòéÂó∑ÂòñÂòüÂòàÂòêÂó∂ÂúòÂúñÂ°µÂ°æÂ¢ÉÂ¢ìÂ¢äÂ°πÂ¢ÖÂ°ΩÂ£ΩÂ§•Â§¢Â§§Â•™Â•©Â´°Â´¶Â´©Â´óÂ´ñÂ´òÂ´£Â≠µÂØûÂØßÂØ°ÂØ•ÂØ¶ÂØ®ÂØ¢ÂØ§ÂØüÂ∞çÂ±¢Â∂ÑÂ∂áÂπõÂπ£ÂπïÂπóÂπîÂªìÂªñÂºäÂΩÜÂΩ∞ÂæπÊÖáÔøΩ".split("");
    for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) {
        e[D[185][j]] = 47360 + j;
        d[47360 + j] = D[185][j];
    };
    D[186] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÑøÊÖãÊÖ∑ÊÖ¢ÊÖ£ÊÖüÊÖöÊÖòÊÖµÊà™ÊíáÊëòÊëîÊí§Êë∏ÊëüÊë∫ÊëëÊëßÊê¥Êë≠ÊëªÊï≤Êñ°ÊóóÊóñÊö¢Êö®ÊöùÊ¶úÊ¶®Ê¶ïÊßÅÊ¶ÆÊßìÊßãÊ¶õÊ¶∑Ê¶ªÊ¶´Ê¶¥ÊßêÊßçÊ¶≠ÊßåÊ¶¶ÊßÉÊ¶£Ê≠âÊ≠åÊ∞≥Êº≥ÊºîÊªæÊºìÊª¥Êº©ÊºæÊº†Êº¨ÊºèÊºÇÊº¢ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊªøÊªØÊºÜÊº±Êº∏Êº≤Êº£ÊºïÊº´ÊºØÊæàÊº™Êª¨ÊºÅÊª≤ÊªåÊª∑ÁÜîÁÜôÁÖΩÁÜäÁÜÑÁÜíÁàæÁäíÁäñÁçÑÁçêÁë§Áë£Áë™Áë∞Áë≠ÁîÑÁñëÁòßÁòçÁòãÁòâÁòìÁõ°Áõ£ÁûÑÁùΩÁùøÁù°Á£ÅÁ¢üÁ¢ßÁ¢≥Á¢©Á¢£Á¶éÁ¶èÁ¶çÁ®ÆÁ®±Á™™Á™©Á´≠Á´ØÁÆ°ÁÆïÁÆãÁ≠µÁÆóÁÆùÁÆîÁÆèÁÆ∏ÁÆáÁÆÑÁ≤πÁ≤ΩÁ≤æÁ∂ªÁ∂∞Á∂úÁ∂ΩÁ∂æÁ∂†Á∑äÁ∂¥Á∂≤Á∂±Á∂∫Á∂¢Á∂øÁ∂µÁ∂∏Á∂≠Á∑íÁ∑áÁ∂¨ÔøΩ".split("");
    for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) {
        e[D[186][j]] = 47616 + j;
        d[47616 + j] = D[186][j];
    };
    D[187] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁΩ∞Áø†Áø°ÁøüËÅûËÅöËÇáËÖêËÜÄËÜèËÜàËÜäËÖøËÜÇËáßËá∫ËàáËàîËàûËâãËìâËíøËìÜËìÑËíôËíûËí≤ËíúËìãËí∏ËìÄËììËíêËíºËìëËìäËúøËúúËúªËú¢Ëú•Ëú¥ËúòËùïËú∑Ëú©Ë£≥Ë§ÇË£¥Ë£πË£∏Ë£ΩË£®Ë§öË£ØË™¶Ë™åË™ûË™£Ë™çË™°Ë™ìË™§ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË™™Ë™•Ë™®Ë™òË™ëË™öË™ßË±™Ë≤çË≤åË≥ìË≥ëË≥íËµ´Ë∂ôË∂ïË∑ºËºîËºíËºïËºìËæ£ÈÅ†ÈÅòÈÅúÈÅ£ÈÅôÈÅûÈÅ¢ÈÅùÈÅõÈÑôÈÑòÈÑûÈÖµÈÖ∏ÈÖ∑ÈÖ¥Èâ∏ÈäÄÈäÖÈäòÈäñÈâªÈäìÈäúÈä®ÈâºÈäëÈñ°Èñ®Èñ©Èñ£Èñ•Èñ§ÈöôÈöúÈöõÈõåÈõíÈúÄÈùºÈûÖÈü∂È†óÈ†òÈ¢ØÈ¢±È§ÉÈ§ÖÈ§åÈ§âÈßÅÈ™ØÈ™∞È´¶È≠ÅÈ≠ÇÈ≥¥È≥∂È≥≥È∫ºÈºªÈΩäÂÑÑÂÑÄÂÉªÂÉµÂÉπÂÑÇÂÑàÂÑâÂÑÖÂáúÔøΩ".split("");
    for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) {
        e[D[187][j]] = 47872 + j;
        d[47872 + j] = D[187][j];
    };
    D[188] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂäáÂäàÂäâÂäçÂääÂã∞Âé≤ÂòÆÂòªÂòπÂò≤ÂòøÂò¥Âò©ÂôìÂôéÂôóÂô¥Âò∂ÂòØÂò∞Â¢ÄÂ¢üÂ¢ûÂ¢≥Â¢úÂ¢ÆÂ¢©Â¢¶Â•≠Â¨âÂ´ªÂ¨ãÂ´µÂ¨åÂ¨àÂØÆÂØ¨ÂØ©ÂØ´Â±§Â±•Â∂ùÂ∂îÂπ¢ÂπüÂπ°Âª¢ÂªöÂªüÂªùÂª£Âª†ÂΩàÂΩ±Âæ∑ÂæµÊÖ∂ÊÖßÊÖÆÊÖùÊÖïÊÜÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÖºÊÖ∞ÊÖ´ÊÖæÊÜßÊÜêÊÜ´ÊÜéÊÜ¨ÊÜöÊÜ§ÊÜîÊÜÆÊàÆÊë©ÊëØÊëπÊíûÊí≤ÊíàÊíêÊí∞Êí•ÊíìÊíïÊí©ÊííÊíÆÊí≠Êí´ÊíöÊí¨ÊíôÊí¢Êí≥ÊïµÊï∑Êï∏ÊöÆÊö´Êö¥Êö±Ê®£Ê®üÊß®Ê®ÅÊ®ûÊ®ôÊßΩÊ®°Ê®ìÊ®äÊß≥Ê®ÇÊ®ÖÊß≠Ê®ëÊ≠êÊ≠éÊÆ§ÊØÖÊØÜÊºøÊΩºÊæÑÊΩëÊΩ¶ÊΩîÊæÜÊΩ≠ÊΩõÊΩ∏ÊΩÆÊæéÊΩ∫ÊΩ∞ÊΩ§ÊæóÊΩòÊªïÊΩØÊΩ†ÊΩüÁÜüÁÜ¨ÁÜ±ÁÜ®ÁâñÁäõÁçéÁçóÁë©ÁíãÁíÉÔøΩ".split("");
    for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) {
        e[D[188][j]] = 48128 + j;
        d[48128 + j] = D[188][j];
    };
    D[189] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁëæÁíÄÁïøÁò†Áò©ÁòüÁò§Áò¶Áò°Áò¢ÁööÁö∫Áõ§ÁûéÁûáÁûåÁûëÁûãÁ£ãÁ£ÖÁ¢∫Á£äÁ¢æÁ£ïÁ¢ºÁ£êÁ®øÁ®ºÁ©ÄÁ®ΩÁ®∑Á®ªÁ™ØÁ™ÆÁÆ≠ÁÆ±ÁØÑÁÆ¥ÁØÜÁØáÁØÅÁÆ†ÁØåÁ≥äÁ∑†Á∑¥Á∑ØÁ∑ªÁ∑òÁ∑¨Á∑ùÁ∑®Á∑£Á∑öÁ∑ûÁ∑©Á∂ûÁ∑ôÁ∑≤Á∑πÁΩµÁΩ∑ÁæØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁø©ËÄ¶ËÜõËÜúËÜùËÜ†ËÜöËÜòËîóËîΩËîöËìÆËî¨Ëî≠ËîìËîëËî£Ëî°ËîîËì¨Ëî•ËìøËîÜËûÇËù¥Ëù∂Ëù†Ëù¶Ëù∏Ëù®ËùôËùóËùåËùìË°õË°ùË§êË§áË§íË§ìË§ïË§äË™ºË´íË´áË´ÑË™ïË´ãË´∏Ë™≤Ë´âË´ÇË™øË™∞Ë´ñË´çË™∂Ë™πË´õË±åË±éË±¨Ë≥†Ë≥ûË≥¶Ë≥§Ë≥¨Ë≥≠Ë≥¢Ë≥£Ë≥úË≥™Ë≥°Ëµ≠Ë∂üË∂£Ë∏´Ë∏êË∏ùË∏¢Ë∏èË∏©Ë∏üË∏°Ë∏ûË∫∫ËºùËºõËºüËº©Ëº¶Ëº™ËºúËºûÔøΩ".split("");
    for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) {
        e[D[189][j]] = 48384 + j;
        d[48384 + j] = D[189][j];
    };
    D[190] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËº•ÈÅ©ÈÅÆÈÅ®ÈÅ≠ÈÅ∑ÈÑ∞ÈÑ≠ÈÑßÈÑ±ÈÜáÈÜâÈÜãÈÜÉÈãÖÈäªÈä∑Èã™Èä¨Èã§ÈãÅÈä≥ÈäºÈãíÈãáÈã∞Èä≤Èñ≠Èñ±ÈúÑÈúÜÈúáÈúâÈù†ÈûçÈûãÈûèÈ†°È†´È†úÈ¢≥È§äÈ§ìÈ§íÈ§òÈßùÈßêÈßüÈßõÈßëÈßïÈßíÈßôÈ™∑È´ÆÈ´ØÈ¨ßÈ≠ÖÈ≠ÑÈ≠∑È≠ØÈ¥ÜÈ¥âÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ¥ÉÈ∫©È∫æÈªéÂ¢®ÈΩíÂÑíÂÑòÂÑîÂÑêÂÑïÂÜÄÂÜ™ÂáùÂäëÂäìÂã≥ÂôôÂô´ÂôπÂô©Âô§Âô∏Âô™Âô®Âô•Âô±ÂôØÂô¨Âô¢Âô∂Â£ÅÂ¢æÂ£áÂ£ÖÂ•ÆÂ¨ùÂ¨¥Â≠∏ÂØ∞Â∞éÂΩäÊÜ≤ÊÜëÊÜ©ÊÜäÊáçÊÜ∂ÊÜæÊáäÊáàÊà∞ÊìÖÊìÅÊìãÊíªÊíºÊìöÊìÑÊìáÊìÇÊìçÊíøÊìíÊìîÊíæÊï¥ÊõÜÊõâÊöπÊõÑÊõáÊö∏Ê®ΩÊ®∏Ê®∫Ê©ôÊ©´Ê©òÊ®πÊ©ÑÊ©¢Ê©°Ê©ãÊ©áÊ®µÊ©üÊ©àÊ≠ôÊ≠∑Ê∞ÖÊøÇÊæ±Êæ°ÔøΩ".split("");
    for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) {
        e[D[190][j]] = 48640 + j;
        d[48640 + j] = D[190][j];
    };
    D[191] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊøÉÊæ§ÊøÅÊæßÊæ≥ÊøÄÊæπÊæ∂Êæ¶Êæ†Êæ¥ÁÜæÁáâÁáêÁáíÁáàÁáïÁÜπÁáéÁáôÁáúÁáÉÁáÑÁç®ÁíúÁí£ÁíòÁíüÁíûÁì¢ÁîåÁîçÁò¥Áò∏Áò∫ÁõßÁõ•Áû†ÁûûÁûüÁû•Á£®Á£öÁ£¨Á£ßÁ¶¶Á©çÁ©éÁ©ÜÁ©åÁ©ãÁ™∫ÁØôÁ∞ëÁØâÁØ§ÁØõÁØ°ÁØ©ÁØ¶Á≥ïÁ≥ñÁ∏äÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ∏ëÁ∏àÁ∏õÁ∏£Á∏ûÁ∏ùÁ∏âÁ∏êÁΩπÁæ≤Áø∞Áø±ÁøÆËÄ®ËÜ≥ËÜ©ËÜ®ËáªËààËâòËâôËïäËïôËïàËï®Ëï©ËïÉËïâËï≠Ëï™ËïûËûÉËûüËûûËû¢ËûçË°°Ë§™Ë§≤Ë§•Ë§´Ë§°Ë¶™Ë¶¶Ë´¶Ë´∫Ë´´Ë´±Ë¨ÄË´úË´ßË´ÆË´æË¨ÅË¨ÇË´∑Ë´≠Ë´≥Ë´∂Ë´ºË±´Ë±≠Ë≤ìË≥¥ËπÑË∏±Ë∏¥ËπÇË∏πË∏µËºªËºØËº∏Ëº≥Ëæ®Ëæ¶ÈÅµÈÅ¥ÈÅ∏ÈÅ≤ÈÅºÈÅ∫ÈÑ¥ÈÜíÈå†Èå∂Èã∏Èå≥ÈåØÈå¢ÈãºÈå´ÈåÑÈåöÔøΩ".split("");
    for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) {
        e[D[191][j]] = 48896 + j;
        d[48896 + j] = D[191][j];
    };
    D[192] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈåêÈå¶Èå°ÈåïÈåÆÈåôÈñªÈößÈö®Èö™ÈõïÈúéÈúëÈúñÈúçÈúìÈúèÈùõÈùúÈù¶ÈûòÈ†∞È†∏È†ªÈ†∑È†≠È†πÈ†§È§êÈ§®È§ûÈ§õÈ§°È§öÈß≠Èß¢Èß±È™∏È™ºÈ´ªÈ´≠È¨®ÈÆëÈ¥ïÈ¥£È¥¶È¥®È¥íÈ¥õÈªòÈªîÈæçÈæúÂÑ™ÂÑüÂÑ°ÂÑ≤ÂãµÂöéÂöÄÂöêÂöÖÂöáÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂöèÂ£ïÂ£ìÂ£ëÂ£éÂ¨∞Â¨™Â¨§Â≠∫Â∞∑Â±®Â∂ºÂ∂∫Â∂ΩÂ∂∏Âπ´ÂΩåÂæΩÊáâÊáÇÊááÊá¶ÊáãÊà≤Êà¥ÊìéÊìäÊìòÊì†Êì∞Êì¶Êì¨Êì±Êì¢Êì≠ÊñÇÊñÉÊõôÊõñÊ™ÄÊ™îÊ™ÑÊ™¢Ê™úÊ´õÊ™£Ê©æÊ™óÊ™êÊ™†Ê≠úÊÆÆÊØöÊ∞àÊøòÊø±ÊøüÊø†ÊøõÊø§Êø´ÊøØÊæÄÊø¨Êø°Êø©ÊøïÊøÆÊø∞ÁáßÁáüÁáÆÁá¶Áá•Áá≠Áá¨Áá¥Áá†ÁàµÁâÜÁç∞Áç≤Áí©Áí∞Áí¶Áí®ÁôÜÁôÇÁôåÁõ™Áû≥Áû™Áû∞Áû¨ÔøΩ".split("");
    for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) {
        e[D[192][j]] = 49152 + j;
        d[49152 + j] = D[192][j];
    };
    D[193] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁûßÁû≠ÁüØÁ£∑Á£∫Á£¥Á£ØÁ§ÅÁ¶ßÁ¶™Á©óÁ™øÁ∞áÁ∞çÁØæÁØ∑Á∞åÁØ†Á≥†Á≥úÁ≥ûÁ≥¢Á≥üÁ≥ôÁ≥ùÁ∏ÆÁ∏æÁπÜÁ∏∑Á∏≤ÁπÉÁ∏´Á∏ΩÁ∏±ÁπÖÁπÅÁ∏¥Á∏πÁπàÁ∏µÁ∏øÁ∏ØÁΩÑÁø≥ÁøºËÅ±ËÅ≤ËÅ∞ËÅØËÅ≥ËáÜËáÉËÜ∫ËáÇËáÄËÜøËÜΩËáâËÜæËá®ËàâËâ±Ëñ™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËñÑËïæËñúËñëËñîËñØËñõËñáËñ®ËñäËôßËüÄËüëËû≥ËüíËüÜËû´ËûªËû∫ËüàËüãË§ªË§∂Ë•ÑË§∏Ë§ΩË¶¨Ë¨éË¨óË¨ôË¨õË¨äË¨†Ë¨ùË¨ÑË¨êË±ÅË∞øË±≥Ë≥∫Ë≥ΩË≥ºË≥∏Ë≥ªË∂®ËπâËπãËπàËπäËΩÑËºæËΩÇËΩÖËºøÈÅøÈÅΩÈÇÑÈÇÅÈÇÇÈÇÄÈÑπÈÜ£ÈÜûÈÜúÈççÈéÇÈå®ÈçµÈçäÈç•ÈçãÈåòÈçæÈç¨ÈçõÈç∞ÈçöÈçîÈóäÈóãÈóåÈóàÈóÜÈö±Èö∏ÈõñÈúúÈúûÈû†ÈüìÈ°ÜÈ¢∂È§µÈ®ÅÔøΩ".split("");
    for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) {
        e[D[193][j]] = 49408 + j;
        d[49408 + j] = D[193][j];
    };
    D[194] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈßøÈÆÆÈÆ´ÈÆ™ÈÆ≠È¥ªÈ¥øÈ∫ãÈªèÈªûÈªúÈªùÈªõÈºæÈΩãÂè¢ÂöïÂöÆÂ£ôÂ£òÂ¨∏ÂΩùÊá£Êà≥Êì¥Êì≤ÊìæÊîÜÊì∫ÊìªÊì∑Êñ∑ÊõúÊú¶Ê™≥Ê™¨Ê´ÉÊ™ªÊ™∏Ê´ÇÊ™ÆÊ™ØÊ≠üÊ≠∏ÊÆØÁÄâÁÄãÊøæÁÄÜÊø∫ÁÄëÁÄèÁáªÁáºÁáæÁá∏Áç∑ÁçµÁíßÁíøÁîïÁôñÁôòÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁôíÁûΩÁûøÁûªÁûºÁ§éÁ¶ÆÁ©°Á©¢Á©†Á´ÑÁ´ÖÁ∞´Á∞ßÁ∞™Á∞ûÁ∞£Á∞°Á≥ßÁπîÁπïÁπûÁπöÁπ°ÁπíÁπôÁΩàÁøπÁøªËÅ∑ËÅ∂ËáçËáèËàäËóèËñ©ËóçËóêËóâËñ∞Ëñ∫ËñπËñ¶ËüØËü¨Ëü≤Ëü†Ë¶ÜË¶≤Ëß¥Ë¨®Ë¨πË¨¨Ë¨´Ë±êË¥ÖËπôËπ£Ëπ¶Ëπ§ËπüËπïËªÄËΩâËΩçÈÇáÈÇÉÈÇàÈÜ´ÈÜ¨ÈáêÈéîÈéäÈéñÈé¢Èé≥ÈéÆÈé¨Èé∞ÈéòÈéöÈéóÈóîÈóñÈóêÈóïÈõ¢ÈõúÈõôÈõõÈõûÈú§Èû£Èû¶ÔøΩ".split("");
    for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) {
        e[D[194][j]] = 49664 + j;
        d[49664 + j] = D[194][j];
    };
    D[195] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈû≠ÈüπÈ°çÈ°èÈ°åÈ°éÈ°ìÈ¢∫È§æÈ§øÈ§ΩÈ§ÆÈ¶•È®éÈ´ÅÈ¨ÉÈ¨ÜÈ≠èÈ≠éÈ≠çÈØäÈØâÈØΩÈØàÈØÄÈµëÈµùÈµ†Èª†ÈºïÈº¨ÂÑ≥Âö•Â£ûÂ£üÂ£¢ÂØµÈæêÂª¨Êá≤Êá∑Êá∂ÊáµÊîÄÊîèÊõ†ÊõùÊ´•Ê´ùÊ´öÊ´ìÁÄõÁÄüÁÄ®ÁÄöÁÄùÁÄïÁÄòÁàÜÁàçÁâòÁä¢Áç∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁç∫ÁíΩÁìäÁì£ÁñáÁñÜÁôüÁô°ÁüáÁ§ôÁ¶±Á©´Á©©Á∞æÁ∞øÁ∞∏Á∞ΩÁ∞∑Á±ÄÁπ´Áπ≠ÁππÁπ©Áπ™ÁæÖÁπ≥Áæ∂ÁæπÁæ∏ËáòËó©ËóùËó™ËóïËó§Ëó•Ëó∑ËüªË†ÖË†çËüπËüæË•†Ë•üË•ñË•ûË≠ÅË≠úË≠òË≠âË≠öË≠éË≠èË≠ÜË≠ôË¥àË¥äËπºËπ≤Ë∫áËπ∂Ëπ¨Ëπ∫Ëπ¥ËΩîËΩéËæ≠ÈÇäÈÇãÈÜ±ÈÜÆÈè°ÈèëÈèüÈèÉÈèàÈèúÈèùÈèñÈè¢ÈèçÈèòÈè§ÈèóÈè®ÈóúÈö¥Èõ£Èú™ÈúßÈù°ÈüúÈüªÈ°ûÔøΩ".split("");
    for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) {
        e[D[195][j]] = 49920 + j;
        d[49920 + j] = D[195][j];
    };
    D[196] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ°òÈ°õÈ¢ºÈ•ÖÈ•âÈ®ñÈ®ôÈ¨çÈØ®ÈØßÈØñÈØõÈ∂âÈµ°Èµ≤Èµ™Èµ¨È∫íÈ∫óÈ∫ìÈ∫¥Âã∏Âö®Âö∑Âö∂Âö¥ÂöºÂ£§Â≠ÄÂ≠ÉÂ≠ΩÂØ∂Â∑âÊá∏Êá∫ÊîòÊîîÊîôÊõ¶ÊúßÊ´¨ÁÄæÁÄ∞ÁÄ≤ÁàêÁçªÁìèÁô¢Áô•Á§¶Á§™Á§¨Á§´Á´áÁ´∂Á±åÁ±ÉÁ±çÁ≥ØÁ≥∞ËæÆÁπΩÁπºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ∫ÇÁΩåËÄÄËáöËâ¶ËóªËóπËòëËó∫ËòÜËòãËòáËòäË†îË†ïË•§Ë¶∫Ëß∏Ë≠∞Ë≠¨Ë≠¶Ë≠ØË≠üË≠´Ë¥èË¥çË∫âË∫ÅË∫ÖË∫ÇÈÜ¥ÈáãÈêòÈêÉÈèΩÈó°Èú∞È£ÑÈ•íÈ•ëÈ¶®È®´È®∞È®∑È®µÈ∞ìÈ∞çÈππÈ∫µÈª®ÈºØÈΩüÈΩ£ÈΩ°ÂÑ∑ÂÑ∏ÂõÅÂõÄÂõÇÂ§îÂ±¨Â∑çÊáºÊáæÊîùÊîúÊñïÊõ©Ê´ªÊ¨ÑÊ´∫ÊÆ≤ÁÅåÁàõÁäßÁìñÁìîÁô©ÁüìÁ±êÁ∫èÁ∫åÁæºËòóËò≠ËòöË†£Ë†¢Ë†°Ë†üË•™Ë•¨Ë¶ΩË≠¥ÔøΩ".split("");
    for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) {
        e[D[196][j]] = 50176 + j;
        d[50176 + j] = D[196][j];
    };
    D[197] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË≠∑Ë≠ΩË¥ìË∫äË∫çË∫ãËΩüËæØÈÜ∫ÈêÆÈê≥ÈêµÈê∫Èê∏Èê≤Èê´Èó¢Èú∏ÈúπÈú≤ÈüøÈ°ßÈ°•È•óÈ©ÖÈ©ÉÈ©ÄÈ®æÈ´èÈ≠îÈ≠ëÈ∞≠È∞•È∂ØÈ∂¥È∑ÇÈ∂∏È∫ùÈªØÈºôÈΩúÈΩ¶ÈΩßÂÑºÂÑªÂõàÂõäÂõâÂ≠øÂ∑îÂ∑íÂΩéÊáøÊî§Ê¨äÊ≠°ÁÅëÁÅòÁéÄÁì§ÁñäÁôÆÁô¨ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¶≥Á±†Á±üËÅæËÅΩËáüË•≤Ë•ØËßºËÆÄË¥ñË¥óË∫ëË∫ìËΩ°ÈÖàÈëÑÈëëÈëíÈúΩÈúæÈüÉÈüÅÈ°´È•ïÈ©ïÈ©çÈ´íÈ¨öÈ±âÈ∞±È∞æÈ∞ªÈ∑ìÈ∑óÈº¥ÈΩ¨ÈΩ™ÈæîÂõåÂ∑ñÊàÄÊî£Êî´Êî™Êõ¨Ê¨êÁìöÁ´äÁ±§Á±£Á±•Á∫ìÁ∫ñÁ∫îËá¢Ëò∏ËòøË†±ËÆäÈÇêÈÇèÈë£Èë†Èë§Èù®È°ØÈ•úÈ©öÈ©õÈ©óÈ´ìÈ´îÈ´ëÈ±îÈ±óÈ±ñÈ∑•È∫üÈª¥ÂõëÂ£©Êî¨ÁÅûÁô±Áô≤ÁüóÁΩêÁæàË†∂Ë†πË°¢ËÆìËÆíÔøΩ".split("");
    for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) {
        e[D[197][j]] = 50432 + j;
        d[50432 + j] = D[197][j];
    };
    D[198] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÆñËâ∑Ë¥õÈáÄÈë™ÈùÇÈùàÈùÑÈüÜÈ°∞È©üÈ¨¢È≠òÈ±üÈ∑πÈ∑∫ÈπºÈπΩÈºáÈΩ∑ÈΩ≤Âª≥Ê¨ñÁÅ£Á±¨Á±ÆË†ªËßÄË∫°ÈáÅÈë≤Èë∞È°±È•ûÈ´ñÈ¨£ÈªåÁÅ§ÁüöËÆöÈë∑ÈüâÈ©¢È©•Á∫úËÆúË∫™ÈáÖÈëΩÈëæÈëºÈ±∑È±∏Èª∑Ë±îÈëøÈ∏öÁà®È©™È¨±È∏õÈ∏ûÁ±≤ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".split("");
    for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) {
        e[D[198][j]] = 50688 + j;
        d[50688 + j] = D[198][j];
    };
    D[201] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ‰πÇ‰πúÂáµÂåöÂéÇ‰∏á‰∏å‰πá‰∫çÂõóÔ®åÂ±ÆÂΩ≥‰∏èÂÜá‰∏é‰∏Æ‰∫ì‰ªÇ‰ªâ‰ªàÂÜòÂãºÂç¨ÂéπÂú†Â§ÉÂ§¨Â∞êÂ∑øÊó°ÊÆ≥ÊØåÊ∞îÁàø‰∏±‰∏º‰ª®‰ªú‰ª©‰ª°‰ªù‰ªöÂàåÂåúÂçåÂú¢Âú£Â§óÂ§ØÂÆÅÂÆÑÂ∞íÂ∞ªÂ±¥Â±≥Â∏ÑÂ∫ÄÂ∫ÇÂøâÊàâÊâêÊ∞ïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ∞∂Ê±ÉÊ∞øÊ∞ªÁäÆÁä∞ÁéäÁ¶∏ËÇäÈòû‰ºé‰ºò‰º¨‰ªµ‰ºî‰ª±‰ºÄ‰ª∑‰ºà‰ºù‰ºÇ‰ºÖ‰º¢‰ºì‰ºÑ‰ª¥‰ºíÂÜ±ÂàìÂàâÂàêÂä¶Âå¢ÂåüÂççÂéäÂêáÂõ°ÂõüÂúÆÂú™Âú¥Â§ºÂ¶ÄÂ•ºÂ¶ÖÂ•ªÂ•æÂ•∑Â•øÂ≠ñÂ∞ïÂ∞•Â±ºÂ±∫Â±ªÂ±æÂ∑üÂπµÂ∫ÑÂºÇÂºöÂΩ¥ÂøïÂøîÂøèÊâúÊâûÊâ§Êâ°Êâ¶Êâ¢ÊâôÊâ†ÊâöÊâ•ÊóØÊóÆÊúæÊúπÊú∏ÊúªÊú∫ÊúøÊúºÊú≥Ê∞òÊ±ÜÊ±íÊ±úÊ±èÊ±äÊ±îÊ±ãÔøΩ".split("");
    for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 65533) {
        e[D[201][j]] = 51456 + j;
        d[51456 + j] = D[201][j];
    };
    D[202] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ±åÁÅ±ÁâûÁä¥ÁäµÁééÁî™ÁôøÁ©µÁΩëËâ∏ËâºËäÄËâΩËâøËôçË•æÈÇôÈÇóÈÇòÈÇõÈÇîÈò¢Èò§Èò†Èò£‰Ωñ‰ºª‰Ω¢‰Ωâ‰Ωì‰Ω§‰ºæ‰Ωß‰Ωí‰Ωü‰ΩÅ‰Ωò‰º≠‰º≥‰ºø‰Ω°ÂÜèÂÜπÂàúÂàûÂà°Âä≠ÂäÆÂåâÂç£Âç≤ÂééÂéèÂê∞Âê∑Âê™ÂëîÂëÖÂêôÂêúÂê•ÂêòÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂêΩÂëèÂëÅÂê®Âê§ÂëáÂõÆÂõßÂõ•ÂùÅÂùÖÂùåÂùâÂùãÂùíÂ§ÜÂ•ÄÂ¶¶Â¶òÂ¶†Â¶óÂ¶éÂ¶¢Â¶êÂ¶èÂ¶ßÂ¶°ÂÆéÂÆíÂ∞®Â∞™Â≤çÂ≤èÂ≤àÂ≤ãÂ≤âÂ≤íÂ≤äÂ≤ÜÂ≤ìÂ≤ïÂ∑†Â∏äÂ∏éÂ∫ãÂ∫âÂ∫åÂ∫àÂ∫çÂºÖÂºùÂΩ∏ÂΩ∂ÂøíÂøëÂøêÂø≠Âø®ÂøÆÂø≥Âø°Âø§Âø£Âø∫ÂøØÂø∑ÂøªÊÄÄÂø¥Êà∫ÊäÉÊäåÊäéÊäèÊäîÊäáÊâ±ÊâªÊâ∫Êâ∞ÊäÅÊäàÊâ∑ÊâΩÊâ≤Êâ¥Êî∑Êó∞Êó¥Êó≥Êó≤ÊóµÊùÖÊùáÔøΩ".split("");
    for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) {
        e[D[202][j]] = 51712 + j;
        d[51712 + j] = D[202][j];
    };
    D[203] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊùôÊùïÊùåÊùàÊùùÊùçÊùöÊùãÊØêÊ∞ôÊ∞öÊ±∏Ê±ßÊ±´Ê≤ÑÊ≤ãÊ≤èÊ±±Ê±ØÊ±©Ê≤öÊ±≠Ê≤áÊ≤ïÊ≤úÊ±¶Ê±≥Ê±•Ê±ªÊ≤éÁÅ¥ÁÅ∫Áâ£ÁäøÁäΩÁãÉÁãÜÁãÅÁä∫ÁãÖÁéïÁéóÁéìÁéîÁéíÁî∫ÁîπÁñîÁñïÁöÅÁ§ΩËÄ¥ËÇïËÇôËÇêËÇíËÇúËäêËäèËäÖËäéËäëËäìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËääËäÉËäÑË±∏ËøâËæøÈÇüÈÇ°ÈÇ•ÈÇûÈÇßÈÇ†Èò∞Èò®ÈòØÈò≠‰∏≥‰æò‰Ωº‰æÖ‰ΩΩ‰æÄ‰æá‰Ω∂‰Ω¥‰æâ‰æÑ‰Ω∑‰Ωå‰æó‰Ω™‰æö‰Ωπ‰æÅ‰Ω∏‰æê‰æú‰æî‰æû‰æí‰æÇ‰æï‰Ω´‰ΩÆÂÜûÂÜºÂÜæÂàµÂà≤Âà≥ÂâÜÂà±ÂäºÂåäÂåãÂåºÂéíÂéîÂíáÂëøÂíÅÂíëÂíÇÂíàÂë´Âë∫ÂëæÂë•Âë¨Âë¥Âë¶ÂíçÂëØÂë°Âë†ÂíòÂë£ÂëßÂë§Âõ∑ÂõπÂùØÂù≤Âù≠Âù´Âù±Âù∞Âù∂ÂûÄÂùµÂùªÂù≥Âù¥Âù¢ÔøΩ".split("");
    for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) {
        e[D[203][j]] = 51968 + j;
        d[51968 + j] = D[203][j];
    };
    D[204] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂù®ÂùΩÂ§åÂ•ÖÂ¶µÂ¶∫ÂßèÂßéÂ¶≤ÂßåÂßÅÂ¶∂Â¶ºÂßÉÂßñÂ¶±Â¶ΩÂßÄÂßàÂ¶¥ÂßáÂ≠¢Â≠•ÂÆìÂÆïÂ±ÑÂ±áÂ≤ÆÂ≤§Â≤†Â≤µÂ≤ØÂ≤®Â≤¨Â≤üÂ≤£Â≤≠Â≤¢Â≤™Â≤ßÂ≤ùÂ≤•Â≤∂Â≤∞Â≤¶Â∏óÂ∏îÂ∏ôÂº®Âº¢Âº£Âº§ÂΩîÂæÇÂΩæÂΩΩÂøûÂø•ÊÄ≠ÊÄ¶ÊÄôÊÄ≤ÊÄãÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÄ¥ÊÄäÊÄóÊÄ≥ÊÄöÊÄûÊÄ¨ÊÄ¢ÊÄçÊÄêÊÄÆÊÄìÊÄëÊÄåÊÄâÊÄúÊàîÊàΩÊä≠Êä¥ÊãëÊäæÊä™Êä∂ÊãäÊäÆÊä≥ÊäØÊäªÊä©Êä∞Êä∏ÊîΩÊñ®ÊñªÊòâÊóºÊòÑÊòíÊòàÊóªÊòÉÊòãÊòçÊòÖÊóΩÊòëÊòêÊõ∂ÊúäÊûÖÊù¨ÊûéÊûíÊù∂ÊùªÊûòÊûÜÊûÑÊù¥ÊûçÊûåÊù∫ÊûüÊûëÊûôÊûÉÊùΩÊûÅÊù∏ÊùπÊûîÊ¨•ÊÆÄÊ≠æÊØûÊ∞ùÊ≤ìÊ≥¨Ê≥´Ê≥ÆÊ≥ôÊ≤∂Ê≥îÊ≤≠Ê≥ßÊ≤∑Ê≥êÊ≥ÇÊ≤∫Ê≥ÉÊ≥ÜÊ≥≠Ê≥≤ÔøΩ".split("");
    for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) {
        e[D[204][j]] = 52224 + j;
        d[52224 + j] = D[204][j];
    };
    D[205] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ≥íÊ≥ùÊ≤¥Ê≤äÊ≤ùÊ≤ÄÊ≥ûÊ≥ÄÊ¥∞Ê≥çÊ≥áÊ≤∞Ê≥πÊ≥èÊ≥©Ê≥ëÁÇîÁÇòÁÇÖÁÇìÁÇÜÁÇÑÁÇëÁÇñÁÇÇÁÇöÁÇÉÁâ™ÁãñÁããÁãòÁãâÁãúÁãíÁãîÁãöÁãåÁãëÁé§Áé°Áé≠Áé¶Áé¢Áé†Áé¨ÁéùÁìùÁì®ÁîøÁïÄÁîæÁñåÁñòÁöØÁõ≥Áõ±Áõ∞ÁõµÁü∏ÁüºÁüπÁüªÁü∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁü∑Á•ÇÁ§øÁßÖÁ©∏Á©ªÁ´ªÁ±µÁ≥ΩËÄµËÇèËÇÆËÇ£ËÇ∏ËÇµËÇ≠Ëà†Ëä†ËãÄËä´ËäöËäòËäõËäµËäßËäÆËäºËäûËä∫Ëä¥Ëä®Ëä°Ëä©ËãÇËä§ËãÉËä∂Ëä¢Ëô∞ËôØËô≠ËôÆË±ñËøíËøãËøìËøçËøñËøïËøóÈÇ≤ÈÇ¥ÈÇØÈÇ≥ÈÇ∞ÈòπÈòΩÈòºÈò∫ÈôÉ‰øç‰øÖ‰øì‰æ≤‰øâ‰øã‰øÅ‰øî‰øú‰øô‰æª‰æ≥‰øõ‰øá‰øñ‰æ∫‰øÄ‰æπ‰ø¨ÂâÑÂââÂãÄÂãÇÂåΩÂçºÂéóÂéñÂéôÂéòÂí∫Âí°Âí≠Âí•ÂìèÔøΩ".split("");
    for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) {
        e[D[205][j]] = 52480 + j;
        d[52480 + j] = D[205][j];
    };
    D[206] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂìÉËåçÂí∑ÂíÆÂìñÂí∂ÂìÖÂìÜÂí†Âë∞ÂíºÂí¢ÂíæÂë≤ÂìûÂí∞ÂûµÂûûÂûüÂû§ÂûåÂûóÂûùÂûõÂûîÂûòÂûèÂûôÂû•ÂûöÂûïÂ£¥Â§çÂ•ìÂß°ÂßûÂßÆÂ®ÄÂß±ÂßùÂß∫ÂßΩÂßºÂß∂Âß§Âß≤Âß∑ÂßõÂß©Âß≥ÂßµÂß†ÂßæÂß¥Âß≠ÂÆ®Â±åÂ≥êÂ≥òÂ≥åÂ≥óÂ≥ãÂ≥õÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ≥ûÂ≥öÂ≥âÂ≥áÂ≥äÂ≥ñÂ≥ìÂ≥îÂ≥èÂ≥àÂ≥ÜÂ≥éÂ≥üÂ≥∏Â∑πÂ∏°Â∏¢Â∏£Â∏†Â∏§Â∫∞Â∫§Â∫¢Â∫õÂ∫£Â∫•ÂºáÂºÆÂΩñÂæÜÊÄ∑ÊÄπÊÅîÊÅ≤ÊÅûÊÅÖÊÅìÊÅáÊÅâÊÅõÊÅåÊÅÄÊÅÇÊÅüÊÄ§ÊÅÑÊÅòÊÅ¶ÊÅÆÊâÇÊâÉÊãèÊåçÊåãÊãµÊåéÊåÉÊã´ÊãπÊåèÊååÊã∏Êã∂ÊåÄÊåìÊåîÊã∫ÊåïÊãªÊã∞ÊïÅÊïÉÊñ™ÊñøÊò∂Êò°Êò≤ÊòµÊòúÊò¶Êò¢Êò≥Êò´Êò∫ÊòùÊò¥ÊòπÊòÆÊúèÊúêÊüÅÊü≤ÊüàÊû∫ÔøΩ".split("");
    for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) {
        e[D[206][j]] = 52736 + j;
        d[52736 + j] = D[206][j];
    };
    D[207] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊüúÊûªÊü∏ÊüòÊüÄÊû∑ÊüÖÊü´Êü§ÊüüÊûµÊüçÊû≥Êü∑Êü∂ÊüÆÊü£ÊüÇÊûπÊüéÊüßÊü∞Êû≤ÊüºÊüÜÊü≠ÊüåÊûÆÊü¶ÊüõÊü∫ÊüâÊüäÊüÉÊü™ÊüãÊ¨®ÊÆÇÊÆÑÊÆ∂ÊØñÊØòÊØ†Ê∞†Ê∞°Ê¥®Ê¥¥Ê¥≠Ê¥üÊ¥ºÊ¥øÊ¥íÊ¥äÊ≥öÊ¥≥Ê¥ÑÊ¥ôÊ¥∫Ê¥öÊ¥ëÊ¥ÄÊ¥ùÊµÇÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ¥ÅÊ¥òÊ¥∑Ê¥ÉÊ¥èÊµÄÊ¥áÊ¥†Ê¥¨Ê¥àÊ¥¢Ê¥âÊ¥êÁÇ∑ÁÇüÁÇæÁÇ±ÁÇ∞ÁÇ°ÁÇ¥ÁÇµÁÇ©ÁâÅÁââÁâäÁâ¨Áâ∞Áâ≥ÁâÆÁãäÁã§Áã®Áã´ÁãüÁã™Áã¶Áã£ÁéÖÁèåÁèÇÁèàÁèÖÁéπÁé∂ÁéµÁé¥Áè´ÁéøÁèáÁéæÁèÉÁèÜÁé∏ÁèãÁì¨ÁìÆÁîÆÁïáÁïàÁñßÁñ™ÁôπÁõÑÁúàÁúÉÁúÑÁúÖÁúäÁõ∑ÁõªÁõ∫ÁüßÁü®Á†ÜÁ†ëÁ†íÁ†ÖÁ†êÁ†èÁ†éÁ†âÁ†ÉÁ†ìÁ•äÁ•åÁ•ãÁ•ÖÁ•ÑÁßïÁßçÁßèÁßñÁßéÁ™ÄÔøΩ".split("");
    for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) {
        e[D[207][j]] = 52992 + j;
        d[52992 + j] = D[207][j];
    };
    D[208] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ©æÁ´ëÁ¨ÄÁ¨ÅÁ±∫Á±∏Á±πÁ±øÁ≤ÄÁ≤ÅÁ¥ÉÁ¥àÁ¥ÅÁΩòÁæëÁæçÁææËÄáËÄéËÄèËÄîËÄ∑ËÉòËÉáËÉ†ËÉëËÉàËÉÇËÉêËÉÖËÉ£ËÉôËÉúËÉäËÉïËÉâËÉèËÉóËÉ¶ËÉçËáøËà°ËäîËãôËãæËãπËåáËã®ËåÄËãïËå∫Ëã´ËãñËã¥Ëã¨Ëã°Ëã≤ËãµËååËãªËã∂Ëã∞Ëã™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËã§Ëã†Ëã∫Ëã≥Ëã≠Ëô∑Ëô¥ËôºËô≥Ë°ÅË°éË°ßË°™Ë°©ËßìË®ÑË®áËµ≤Ëø£Ëø°ËøÆËø†ÈÉ±ÈÇΩÈÇøÈÉïÈÉÖÈÇæÈÉáÈÉãÈÉàÈáîÈáìÈôîÈôèÈôëÈôìÈôäÈôéÂÄûÂÄÖÂÄáÂÄìÂÄ¢ÂÄ∞ÂÄõ‰øµ‰ø¥ÂÄ≥ÂÄ∑ÂÄ¨‰ø∂‰ø∑ÂÄóÂÄúÂÄ†ÂÄßÂÄµÂÄØÂÄ±ÂÄéÂÖöÂÜîÂÜìÂáäÂáÑÂáÖÂáàÂáéÂâ°ÂâöÂâíÂâûÂâüÂâïÂâ¢ÂãçÂåéÂéûÂî¶Âì¢ÂîóÂîíÂìßÂì≥Âì§ÂîöÂìøÂîÑÂîàÂì´ÂîëÂîÖÂì±ÔøΩ".split("");
    for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) {
        e[D[208][j]] = 53248 + j;
        d[53248 + j] = D[208][j];
    };
    D[209] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂîäÂìªÂì∑Âì∏Âì†ÂîéÂîÉÂîãÂúÅÂúÇÂüåÂ†≤ÂüïÂüíÂû∫ÂüÜÂûΩÂûºÂû∏Âû∂ÂûøÂüáÂüêÂûπÂüÅÂ§éÂ•äÂ®ôÂ®ñÂ®≠Â®ÆÂ®ïÂ®èÂ®óÂ®äÂ®ûÂ®≥Â≠¨ÂÆßÂÆ≠ÂÆ¨Â∞ÉÂ±ñÂ±îÂ≥¨Â≥øÂ≥ÆÂ≥±Â≥∑Â¥ÄÂ≥πÂ∏©Â∏®Â∫®Â∫ÆÂ∫™Â∫¨Âº≥Âº∞ÂΩßÊÅùÊÅöÊÅßÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÅÅÊÇ¢ÊÇàÊÇÄÊÇíÊÇÅÊÇùÊÇÉÊÇïÊÇõÊÇóÊÇáÊÇúÊÇéÊàôÊâÜÊã≤ÊåêÊçñÊå¨ÊçÑÊçÖÊå∂ÊçÉÊè§ÊåπÊçãÊçäÊåºÊå©ÊçÅÊå¥ÊçòÊçîÊçôÊå≠ÊçáÊå≥ÊçöÊçëÊå∏ÊçóÊçÄÊçàÊïäÊïÜÊóÜÊóÉÊóÑÊóÇÊôäÊôüÊôáÊôëÊúíÊúìÊ†üÊ†öÊ°âÊ†≤Ê†≥Ê†ªÊ°ãÊ°èÊ†ñÊ†±Ê†úÊ†µÊ†´Ê†≠Ê†ØÊ°éÊ°ÑÊ†¥Ê†ùÊ†íÊ†îÊ†¶Ê†®Ê†ÆÊ°çÊ†∫Ê†•Ê††Ê¨¨Ê¨ØÊ¨≠Ê¨±Ê¨¥Ê≠≠ËÇÇÊÆàÊØ¶ÊØ§ÔøΩ".split("");
    for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) {
        e[D[209][j]] = 53504 + j;
        d[53504 + j] = D[209][j];
    };
    D[210] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊØ®ÊØ£ÊØ¢ÊØßÊ∞•Êµ∫Êµ£Êµ§Êµ∂Ê¥çÊµ°Ê∂íÊµòÊµ¢Êµ≠ÊµØÊ∂ëÊ∂çÊ∑ØÊµøÊ∂ÜÊµûÊµßÊµ†Ê∂óÊµ∞ÊµºÊµüÊ∂ÇÊ∂òÊ¥ØÊµ®Ê∂ãÊµæÊ∂ÄÊ∂ÑÊ¥ñÊ∂ÉÊµªÊµΩÊµµÊ∂êÁÉúÁÉìÁÉëÁÉùÁÉãÁºπÁÉ¢ÁÉóÁÉíÁÉûÁÉ†ÁÉîÁÉçÁÉÖÁÉÜÁÉáÁÉöÁÉéÁÉ°ÁâÇÁâ∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁâ∑Áâ∂ÁåÄÁã∫Áã¥ÁãæÁã∂Áã≥ÁãªÁåÅÁèìÁèôÁè•ÁèñÁéºÁèßÁè£Áè©ÁèúÁèíÁèõÁèîÁèùÁèöÁèóÁèòÁè®ÁìûÁìüÁì¥ÁìµÁî°ÁïõÁïüÁñ∞ÁóÅÁñªÁóÑÁóÄÁñøÁñ∂Áñ∫ÁöäÁõâÁúùÁúõÁúêÁúìÁúíÁú£ÁúëÁúïÁúôÁúöÁú¢ÁúßÁ†£Á†¨Á†¢Á†µÁ†ØÁ†®Á†ÆÁ†´Á†°Á†©Á†≥Á†™Á†±Á•îÁ•õÁ•èÁ•úÁ•ìÁ•íÁ•ëÁß´Áß¨Áß†ÁßÆÁß≠Áß™ÁßúÁßûÁßùÁ™ÜÁ™âÁ™ÖÁ™ãÁ™åÁ™äÁ™áÁ´òÁ¨êÔøΩ".split("");
    for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) {
        e[D[210][j]] = 53760 + j;
        d[53760 + j] = D[210][j];
    };
    D[211] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¨ÑÁ¨ìÁ¨ÖÁ¨èÁ¨àÁ¨äÁ¨éÁ¨âÁ¨íÁ≤ÑÁ≤ëÁ≤äÁ≤åÁ≤àÁ≤çÁ≤ÖÁ¥ûÁ¥ùÁ¥ëÁ¥éÁ¥òÁ¥ñÁ¥ìÁ¥üÁ¥íÁ¥èÁ¥åÁΩúÁΩ°ÁΩûÁΩ†ÁΩùÁΩõÁæñÁæíÁøÉÁøÇÁøÄËÄñËÄæËÄπËÉ∫ËÉ≤ËÉπËÉµËÑÅËÉªËÑÄËàÅËàØËà•Ëå≥Ëå≠ËçÑËåôËçëËå•ËçñËåøËçÅËå¶ËåúËå¢ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËçÇËçéËåõËå™ËåàËåºËççËåñËå§Ëå†Ëå∑ËåØËå©ËçáËçÖËçåËçìËåûËå¨ËçãËåßËçàËôìËôíËö¢Ëö®ËöñËöçËöëËöûËöáËöóËöÜËöãËööËöÖËö•ËöôËö°ËößËöïËöòËöéËöùËöêËöîË°ÉË°ÑË°≠Ë°µË°∂Ë°≤Ë¢ÄË°±Ë°øË°ØË¢ÉË°æË°¥Ë°ºË®íË±áË±óË±ªË≤§Ë≤£Ëµ∂Ëµ∏Ë∂µË∂∑Ë∂∂ËªëËªìËøæËøµÈÄÇËøøËøªÈÄÑËøºËø∂ÈÉñÈÉ†ÈÉôÈÉöÈÉ£ÈÉüÈÉ•ÈÉòÈÉõÈÉóÈÉúÈÉ§ÈÖêÔøΩ".split("");
    for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) {
        e[D[211][j]] = 54016 + j;
        d[54016 + j] = D[211][j];
    };
    D[212] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÖéÈÖèÈáïÈá¢ÈáöÈôúÈôüÈöºÈ££È´üÈ¨Ø‰πøÂÅ∞ÂÅ™ÂÅ°ÂÅûÂÅ†ÂÅìÂÅãÂÅùÂÅ≤ÂÅàÂÅçÂÅÅÂÅõÂÅäÂÅ¢ÂÄïÂÅÖÂÅüÂÅ©ÂÅ´ÂÅ£ÂÅ§ÂÅÜÂÅÄÂÅÆÂÅ≥ÂÅóÂÅëÂáêÂâ´Ââ≠Ââ¨ÂâÆÂãñÂãìÂå≠ÂéúÂïµÂï∂ÂîºÂïçÂïêÂî¥Âî™ÂïëÂï¢Âî∂ÂîµÂî∞ÂïíÂïÖÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂîåÂî≤Âï•ÂïéÂîπÂïàÂî≠ÂîªÂïÄÂïãÂúäÂúáÂüªÂ†îÂü¢Âü∂ÂüúÂü¥Â†ÄÂü≠ÂüΩÂ†àÂü∏Â†ãÂü≥ÂüèÂ†áÂüÆÂü£Âü≤Âü•Âü¨Âü°Â†éÂüºÂ†êÂüßÂ†ÅÂ†åÂü±Âü©Âü∞Â†çÂ†ÑÂ•úÂ©†Â©òÂ©ïÂ©ßÂ©ûÂ®∏Â®µÂ©≠Â©êÂ©üÂ©•Â©¨Â©ìÂ©§Â©óÂ©ÉÂ©ùÂ©íÂ©ÑÂ©õÂ©àÂ™éÂ®æÂ©çÂ®πÂ©åÂ©∞Â©©Â©áÂ©ëÂ©ñÂ©ÇÂ©úÂ≠≤Â≠ÆÂØÅÂØÄÂ±ôÂ¥ûÂ¥ãÂ¥ùÂ¥öÂ¥†Â¥åÂ¥®Â¥çÂ¥¶Â¥•Â¥èÔøΩ".split("");
    for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) {
        e[D[212][j]] = 54272 + j;
        d[54272 + j] = D[212][j];
    };
    D[213] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ¥∞Â¥íÂ¥£Â¥üÂ¥ÆÂ∏æÂ∏¥Â∫±Â∫¥Â∫πÂ∫≤Â∫≥Âº∂Âº∏ÂæõÂæñÂæüÊÇäÊÇêÊÇÜÊÇæÊÇ∞ÊÇ∫ÊÉìÊÉîÊÉèÊÉ§ÊÉôÊÉùÊÉàÊÇ±ÊÉõÊÇ∑ÊÉäÊÇøÊÉÉÊÉçÊÉÄÊå≤Êç•ÊéäÊéÇÊçΩÊéΩÊéûÊé≠ÊéùÊéóÊé´ÊééÊçØÊéáÊéêÊçÆÊéØÊçµÊéúÊç≠ÊéÆÊçºÊé§ÊåªÊéüÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊç∏ÊéÖÊéÅÊéëÊéçÊç∞ÊïìÊóçÊô•Êô°ÊôõÊôôÊôúÊô¢ÊúòÊ°πÊ¢áÊ¢êÊ¢úÊ°≠Ê°ÆÊ¢ÆÊ¢´Ê•ñÊ°ØÊ¢£Ê¢¨Ê¢©Ê°µÊ°¥Ê¢≤Ê¢èÊ°∑Ê¢íÊ°ºÊ°´Ê°≤Ê¢™Ê¢ÄÊ°±Ê°æÊ¢õÊ¢ñÊ¢ãÊ¢†Ê¢âÊ¢§Ê°∏Ê°ªÊ¢ëÊ¢åÊ¢äÊ°ΩÊ¨∂Ê¨≥Ê¨∑Ê¨∏ÊÆëÊÆèÊÆçÊÆéÊÆåÊ∞™Ê∑ÄÊ∂´Ê∂¥Ê∂≥Êπ¥Ê∂¨Ê∑©Ê∑¢Ê∂∑Ê∑∂Ê∑îÊ∏ÄÊ∑àÊ∑†Ê∑üÊ∑ñÊ∂æÊ∑•Ê∑úÊ∑ùÊ∑õÊ∑¥Ê∑äÊ∂ΩÊ∑≠Ê∑∞Ê∂∫Ê∑ïÊ∑ÇÊ∑èÊ∑âÔøΩ".split("");
    for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) {
        e[D[213][j]] = 54528 + j;
        d[54528 + j] = D[213][j];
    };
    D[214] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ∑êÊ∑≤Ê∑ìÊ∑ΩÊ∑óÊ∑çÊ∑£Ê∂ªÁÉ∫ÁÑçÁÉ∑ÁÑóÁÉ¥ÁÑåÁÉ∞ÁÑÑÁÉ≥ÁÑêÁÉºÁÉøÁÑÜÁÑìÁÑÄÁÉ∏ÁÉ∂ÁÑãÁÑÇÁÑéÁâæÁâªÁâºÁâøÁåùÁåóÁåáÁåëÁåòÁåäÁåàÁãøÁåèÁåûÁéàÁè∂Áè∏ÁèµÁêÑÁêÅÁèΩÁêáÁêÄÁè∫ÁèºÁèøÁêåÁêãÁè¥ÁêàÁï§Áï£ÁóéÁóíÁóèÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁóãÁóåÁóëÁóêÁöèÁöâÁõìÁúπÁúØÁú≠Áú±Áú≤Áú¥Áú≥ÁúΩÁú•ÁúªÁúµÁ°àÁ°íÁ°âÁ°çÁ°äÁ°åÁ†¶Á°ÖÁ°êÁ•§Á•ßÁ•©Á•™Á•£Á•´Á•°Á¶ªÁß∫Áß∏Áß∂Áß∑Á™èÁ™îÁ™êÁ¨µÁ≠áÁ¨¥Á¨•Á¨∞Á¨¢Á¨§Á¨≥Á¨òÁ¨™Á¨ùÁ¨±Á¨´Á¨≠Á¨ØÁ¨≤Á¨∏Á¨öÁ¨£Á≤îÁ≤òÁ≤ñÁ≤£Á¥µÁ¥ΩÁ¥∏Á¥∂Á¥∫ÁµÖÁ¥¨Á¥©ÁµÅÁµáÁ¥æÁ¥øÁµäÁ¥ªÁ¥®ÁΩ£ÁæïÁæúÁæùÁæõÁøäÁøãÁøçÁøêÁøëÁøáÁøèÁøâËÄüÔøΩ".split("");
    for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) {
        e[D[214][j]] = 54784 + j;
        d[54784 + j] = D[214][j];
    };
    D[215] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÄûËÄõËÅáËÅÉËÅàËÑòËÑ•ËÑôËÑõËÑ≠ËÑüËÑ¨ËÑûËÑ°ËÑïËÑßËÑùËÑ¢ËàëËà∏Ëà≥Ëà∫Ëà¥Ëà≤Ëâ¥ËéêËé£Ëé®ËéçËç∫Ëç≥Ëé§Ëç¥ËéèËéÅËéïËéôËçµËéîËé©ËçΩËéÉËéåËéùËéõËé™ËéãËçæËé•ËéØËéàËéóËé∞ËçøËé¶ËéáËéÆËç∂ËéöËôôËôñËöøËö∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËõÇËõÅËõÖËö∫Ëö∞ËõàËöπËö≥Ëö∏ËõåËö¥ËöªËöºËõÉËöΩËöæË°íË¢âË¢ïË¢®Ë¢¢Ë¢™Ë¢öË¢ëË¢°Ë¢üË¢òË¢ßË¢ôË¢õË¢óË¢§Ë¢¨Ë¢åË¢ìË¢éË¶ÇËßñËßôËßïË®∞Ë®ßË®¨Ë®ûË∞πË∞ªË±úË±ùË±ΩË≤•ËµΩËµªËµπË∂ºË∑ÇË∂πË∂øË∑ÅËªòËªûËªùËªúËªóËª†Ëª°ÈÄ§ÈÄãÈÄëÈÄúÈÄåÈÄ°ÈÉØÈÉ™ÈÉ∞ÈÉ¥ÈÉ≤ÈÉ≥ÈÉîÈÉ´ÈÉ¨ÈÉ©ÈÖñÈÖòÈÖöÈÖìÈÖïÈá¨Èá¥Èá±Èá≥Èá∏Èá§ÈáπÈá™ÔøΩ".split("");
    for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) {
        e[D[215][j]] = 55040 + j;
        d[55040 + j] = D[215][j];
    };
    D[216] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈá´Èá∑Èá®ÈáÆÈï∫ÈñÜÈñàÈôºÈô≠Èô´Èô±ÈôØÈöøÈù™È†ÑÈ£•È¶óÂÇõÂÇïÂÇîÂÇûÂÇãÂÇ£ÂÇÉÂÇåÂÇéÂÇùÂÅ®ÂÇúÂÇíÂÇÇÂÇáÂÖüÂáîÂåíÂåëÂé§ÂéßÂñëÂñ®Âñ•Âñ≠Âï∑ÂôÖÂñ¢ÂñìÂñàÂñèÂñµÂñÅÂñ£ÂñíÂñ§ÂïΩÂñåÂñ¶ÂïøÂñïÂñ°ÂñéÂúåÂ†©Â†∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ†ôÂ†ûÂ†ßÂ†£Â†®ÂüµÂ°àÂ†•Â†úÂ†õÂ†≥Â†øÂ†∂Â†ÆÂ†πÂ†∏Â†≠Â†¨Â†ªÂ•°Â™ØÂ™îÂ™üÂ©∫Â™¢Â™ûÂ©∏Â™¶Â©ºÂ™•Â™¨Â™ïÂ™ÆÂ®∑Â™ÑÂ™äÂ™óÂ™ÉÂ™ãÂ™©Â©ªÂ©ΩÂ™åÂ™úÂ™èÂ™ìÂ™ùÂØ™ÂØçÂØãÂØîÂØëÂØäÂØéÂ∞åÂ∞∞Â¥∑ÂµÉÂµ´ÂµÅÂµãÂ¥øÂ¥µÂµëÂµéÂµïÂ¥≥Â¥∫ÂµíÂ¥ΩÂ¥±ÂµôÂµÇÂ¥πÂµâÂ¥∏Â¥ºÂ¥≤Â¥∂ÂµÄÂµÖÂπÑÂπÅÂΩòÂæ¶Âæ•Âæ´ÊÉâÊÇπÊÉåÊÉ¢ÊÉéÊÉÑÊÑîÔøΩ".split("");
    for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) {
        e[D[216][j]] = 55296 + j;
        d[55296 + j] = D[216][j];
    };
    D[217] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÉ≤ÊÑäÊÑñÊÑÖÊÉµÊÑìÊÉ∏ÊÉºÊÉæÊÉÅÊÑÉÊÑòÊÑùÊÑêÊÉøÊÑÑÊÑãÊâäÊéîÊé±Êé∞ÊèéÊè•Êè®ÊèØÊèÉÊíùÊè≥ÊèäÊè†Êè∂ÊèïÊè≤ÊèµÊë°ÊèüÊéæÊèùÊèúÊèÑÊèòÊèìÊèÇÊèáÊèåÊèãÊèàÊè∞ÊèóÊèôÊî≤ÊïßÊï™Êï§ÊïúÊï®Êï•ÊñåÊñùÊñûÊñÆÊóêÊóíÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊôºÊô¨ÊôªÊöÄÊô±ÊôπÊô™Êô≤ÊúÅÊ§åÊ£ìÊ§ÑÊ£úÊ§™Ê£¨Ê£™Ê£±Ê§èÊ£ñÊ£∑Ê£´Ê£§Ê£∂Ê§ìÊ§êÊ£≥Ê£°Ê§áÊ£åÊ§àÊ•∞Ê¢¥Ê§ëÊ£ØÊ£ÜÊ§îÊ£∏Ê£êÊ£ΩÊ£ºÊ£®Ê§ãÊ§äÊ§óÊ£éÊ£àÊ£ùÊ£ûÊ£¶Ê£¥Ê£ëÊ§ÜÊ£îÊ£©Ê§ïÊ§•Ê£áÊ¨πÊ¨ªÊ¨øÊ¨ºÊÆîÊÆóÊÆôÊÆïÊÆΩÊØ∞ÊØ≤ÊØ≥Ê∞∞Ê∑ºÊπÜÊπáÊ∏üÊπâÊ∫àÊ∏ºÊ∏ΩÊπÖÊπ¢Ê∏´Ê∏øÊπÅÊπùÊπ≥Ê∏úÊ∏≥ÊπãÊπÄÊπëÊ∏ªÊ∏ÉÊ∏ÆÊπûÔøΩ".split("");
    for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) {
        e[D[217][j]] = 55552 + j;
        d[55552 + j] = D[217][j];
    };
    D[218] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊπ®ÊπúÊπ°Ê∏±Ê∏®Êπ†Êπ±Êπ´Ê∏πÊ∏¢Ê∏∞ÊπìÊπ•Ê∏ßÊπ∏Êπ§Êπ∑ÊπïÊππÊπíÊπ¶Ê∏µÊ∏∂ÊπöÁÑ†ÁÑûÁÑØÁÉªÁÑÆÁÑ±ÁÑ£ÁÑ•ÁÑ¢ÁÑ≤ÁÑüÁÑ®ÁÑ∫ÁÑõÁâãÁâöÁäàÁäâÁäÜÁäÖÁäãÁåíÁåãÁå∞Áå¢Áå±Áå≥ÁåßÁå≤Áå≠Áå¶Áå£ÁåµÁååÁêÆÁê¨Áê∞Áê´ÁêñÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁêöÁê°Áê≠Áê±Áê§Áê£ÁêùÁê©Áê†Áê≤ÁìªÁîØÁïØÁï¨ÁóßÁóöÁó°Áó¶ÁóùÁóüÁó§ÁóóÁöïÁöíÁõöÁùÜÁùáÁùÑÁùçÁùÖÁùäÁùéÁùãÁùåÁüûÁü¨Á°†Á°§Á°•Á°úÁ°≠Á°±Á°™Á°ÆÁ°∞Á°©Á°®Á°ûÁ°¢Á•¥Á•≥Á•≤Á•∞Á®ÇÁ®äÁ®ÉÁ®åÁ®ÑÁ™ôÁ´¶Á´§Á≠äÁ¨ªÁ≠ÑÁ≠àÁ≠åÁ≠éÁ≠ÄÁ≠òÁ≠ÖÁ≤¢Á≤ûÁ≤®Á≤°ÁµòÁµØÁµ£ÁµìÁµñÁµßÁµ™ÁµèÁµ≠ÁµúÁµ´ÁµíÁµîÁµ©ÁµëÁµüÁµéÁºæÁºøÁΩ•ÔøΩ".split("");
    for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) {
        e[D[218][j]] = 55808 + j;
        d[55808 + j] = D[218][j];
    };
    D[219] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁΩ¶Áæ¢Áæ†Áæ°ÁøóËÅëËÅèËÅêËÉæËÉîËÖÉËÖäËÖíËÖèËÖáËÑΩËÖçËÑ∫Ëá¶ËáÆËá∑Ëá∏ËáπËàÑËàºËàΩËàøËâµËåªËèèËèπËê£ËèÄËè®ËêíËèßËè§ËèºËè∂ËêêËèÜËèàËè´Ëè£ËéøËêÅËèùËè•ËèòËèøËè°ËèãËèéËèñËèµËèâËêâËêèËèûËêëËêÜËèÇËè≥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËèïËè∫ËèáËèëËè™ËêìËèÉËè¨ËèÆËèÑËèªËèóËè¢ËêõËèõËèæËõòËõ¢Ëõ¶ËõìËõ£ËõöËõ™ËõùËõ´ËõúËõ¨Ëõ©ËõóËõ®ËõëË°àË°ñË°ïË¢∫Ë£óË¢πË¢∏Ë£ÄË¢æË¢∂Ë¢ºË¢∑Ë¢ΩË¢≤Ë§ÅË£âË¶ïË¶òË¶óËßùËßöËßõË©éË©çË®πË©ôË©ÄË©óË©òË©ÑË©ÖË©íË©àË©ëË©äË©åË©èË±üË≤ÅË≤ÄË≤∫Ë≤æË≤∞Ë≤πË≤µË∂ÑË∂ÄË∂âË∑òË∑ìË∑çË∑áË∑ñË∑úË∑èË∑ïË∑ôË∑àË∑óË∑ÖËªØËª∑Ëª∫ÔøΩ".split("");
    for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) {
        e[D[219][j]] = 56064 + j;
        d[56064 + j] = D[219][j];
    };
    D[220] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËªπËª¶ËªÆËª•ËªµËªßËª®Ëª∂Ëª´Ëª±Ëª¨Ëª¥Ëª©ÈÄ≠ÈÄ¥ÈÄØÈÑÜÈÑ¨ÈÑÑÈÉøÈÉºÈÑàÈÉπÈÉªÈÑÅÈÑÄÈÑáÈÑÖÈÑÉÈÖ°ÈÖ§ÈÖüÈÖ¢ÈÖ†ÈàÅÈàäÈà•ÈàÉÈàöÈà¶ÈàèÈàåÈàÄÈàíÈáøÈáΩÈàÜÈàÑÈàßÈàÇÈàúÈà§ÈàôÈàóÈàÖÈàñÈïªÈñçÈñåÈñêÈöáÈôæÈöàÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈöâÈöÉÈöÄÈõÇÈõàÈõÉÈõ±Èõ∞Èù¨Èù∞ÈùÆÈ†áÈ¢©È£´È≥¶Èªπ‰∫É‰∫Ñ‰∫∂ÂÇΩÂÇøÂÉÜÂÇÆÂÉÑÂÉäÂÇ¥ÂÉàÂÉÇÂÇ∞ÂÉÅÂÇ∫ÂÇ±ÂÉãÂÉâÂÇ∂ÂÇ∏ÂáóÂâ∫Ââ∏ÂâªÂâºÂóÉÂóõÂóåÂóêÂóãÂóäÂóùÂóÄÂóîÂóÑÂó©ÂñøÂóíÂñçÂóèÂóïÂó¢ÂóñÂóàÂó≤ÂóçÂóôÂóÇÂúîÂ°ìÂ°®Â°§Â°èÂ°çÂ°âÂ°ØÂ°ïÂ°éÂ°ùÂ°ôÂ°•Â°õÂ†ΩÂ°£Â°±Â£ºÂ´áÂ´ÑÂ´ãÂ™∫Â™∏Â™±Â™µÂ™∞Â™øÂ´àÂ™ªÂ´ÜÔøΩ".split("");
    for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) {
        e[D[220][j]] = 56320 + j;
        d[56320 + j] = D[220][j];
    };
    D[221] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂ™∑Â´ÄÂ´äÂ™¥Â™∂Â´çÂ™πÂ™êÂØñÂØòÂØôÂ∞üÂ∞≥Âµ±Âµ£ÂµäÂµ•Âµ≤Âµ¨ÂµûÂµ®ÂµßÂµ¢Â∑∞ÂπèÂπéÂπäÂπçÂπãÂªÖÂªåÂªÜÂªãÂªáÂΩÄÂæØÂæ≠ÊÉ∑ÊÖâÊÖäÊÑ´ÊÖÖÊÑ∂ÊÑ≤ÊÑÆÊÖÜÊÑØÊÖèÊÑ©ÊÖÄÊà†ÈÖ®Êà£Êà•Êà§ÊèÖÊè±Êè´ÊêêÊêíÊêâÊê†Êê§ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊê≥ÊëÉÊêüÊêïÊêòÊêπÊê∑Êê¢Êê£ÊêåÊê¶Êê∞Êê®ÊëÅÊêµÊêØÊêäÊêöÊëÄÊê•ÊêßÊêãÊèßÊêõÊêÆÊê°ÊêéÊïØÊñíÊóìÊöÜÊöåÊöïÊöêÊöãÊöäÊöôÊöîÊô∏Êú†Ê•¶Ê•üÊ§∏Ê•éÊ•¢Ê•±Ê§øÊ•ÖÊ•™Ê§πÊ•ÇÊ•óÊ•ôÊ•∫Ê•àÊ•âÊ§µÊ•¨Ê§≥Ê§ΩÊ••Ê£∞Ê•∏Ê§¥Ê•©Ê•ÄÊ•ØÊ•ÑÊ•∂Ê•òÊ•ÅÊ•¥Ê•åÊ§ªÊ•ãÊ§∑Ê•úÊ•èÊ•ëÊ§≤Ê•íÊ§ØÊ•ªÊ§ºÊ≠ÜÊ≠ÖÊ≠ÉÊ≠ÇÊ≠àÊ≠ÅÊÆõÔ®çÊØªÊØºÔøΩ".split("");
    for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) {
        e[D[221][j]] = 56576 + j;
        d[56576 + j] = D[221][j];
    };
    D[222] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊØπÊØ∑ÊØ∏Ê∫õÊªñÊªàÊ∫èÊªÄÊ∫üÊ∫ìÊ∫îÊ∫†Ê∫±Ê∫πÊªÜÊªíÊ∫ΩÊªÅÊ∫ûÊªâÊ∫∑Ê∫∞ÊªçÊ∫¶ÊªèÊ∫≤Ê∫æÊªÉÊªúÊªòÊ∫ôÊ∫íÊ∫éÊ∫çÊ∫§Ê∫°Ê∫øÊ∫≥ÊªêÊªäÊ∫óÊ∫ÆÊ∫£ÁÖáÁÖîÁÖíÁÖ£ÁÖ†ÁÖÅÁÖùÁÖ¢ÁÖ≤ÁÖ∏ÁÖ™ÁÖ°ÁÖÇÁÖòÁÖÉÁÖãÁÖ∞ÁÖüÁÖêÁÖìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁÖÑÁÖçÁÖöÁâèÁäçÁäåÁäëÁäêÁäéÁåºÁçÇÁåªÁå∫ÁçÄÁçäÁçâÁëÑÁëäÁëãÁëíÁëëÁëóÁëÄÁëèÁëêÁëéÁëÇÁëÜÁëçÁëîÁì°ÁìøÁìæÁìΩÁîùÁïπÁï∑Ê¶ÉÁóØÁòèÁòÉÁó∑ÁóæÁóºÁóπÁó∏ÁòêÁóªÁó∂Áó≠ÁóµÁóΩÁöôÁöµÁõùÁùïÁùüÁù†ÁùíÁùñÁùöÁù©ÁùßÁùîÁùôÁù≠Áü†Á¢áÁ¢öÁ¢îÁ¢èÁ¢ÑÁ¢ïÁ¢ÖÁ¢ÜÁ¢°Á¢ÉÁ°πÁ¢ôÁ¢ÄÁ¢ñÁ°ªÁ•ºÁ¶ÇÁ•ΩÁ•πÁ®ëÁ®òÁ®ôÁ®íÁ®óÁ®ïÁ®¢Á®ìÔøΩ".split("");
    for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) {
        e[D[222][j]] = 56832 + j;
        d[56832 + j] = D[222][j];
    };
    D[223] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ®õÁ®êÁ™£Á™¢Á™ûÁ´´Á≠¶Á≠§Á≠≠Á≠¥Á≠©Á≠≤Á≠•Á≠≥Á≠±Á≠∞Á≠°Á≠∏Á≠∂Á≠£Á≤≤Á≤¥Á≤ØÁ∂àÁ∂ÜÁ∂ÄÁ∂çÁµøÁ∂ÖÁµ∫Á∂éÁµªÁ∂ÉÁµºÁ∂åÁ∂îÁ∂ÑÁµΩÁ∂íÁΩ≠ÁΩ´ÁΩßÁΩ®ÁΩ¨Áæ¶Áæ•ÁæßÁøõÁøúËÄ°ËÖ§ËÖ†ËÖ∑ËÖúËÖ©ËÖõËÖ¢ËÖ≤Êú°ËÖûËÖ∂ËÖßËÖØÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÖÑËÖ°ËàùËââËâÑËâÄËâÇËâÖËì±ËêøËëñËë∂ËëπËíèËíçËë•ËëëËëÄËíÜËëßËê∞ËëçËëΩËëöËëôËë¥Ëë≥ËëùËîáËëûËê∑Ëê∫Ëê¥Ëë∫ËëÉËë∏Ëê≤ËëÖËê©ËèôËëãËêØËëÇËê≠ËëüËë∞ËêπËëéËëåËëíËëØËìÖËíéËêªËëáËê∂Ëê≥Ëë®ËëæËëÑËê´Ëë†ËëîËëÆËëêËúãËúÑËõ∑ËúåËõ∫ËõñËõµËùçËõ∏ËúéËúâËúÅËõ∂ËúçËúÖË£ñË£ãË£çË£éË£ûË£õË£öË£åË£êË¶ÖË¶õËßüËß•Ëß§ÔøΩ".split("");
    for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) {
        e[D[223][j]] = 57088 + j;
        d[57088 + j] = D[223][j];
    };
    D[224] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËß°Ëß†Ëß¢ËßúËß¶Ë©∂Ë™ÜË©øË©°Ë®øË©∑Ë™ÇË™ÑË©µË™ÉË™ÅË©¥Ë©∫Ë∞ºË±ãË±äË±•Ë±§Ë±¶Ë≤ÜË≤ÑË≤ÖË≥åËµ®Ëµ©Ë∂ëË∂åË∂éË∂èË∂çË∂ìË∂îË∂êË∂íË∑∞Ë∑†Ë∑¨Ë∑±Ë∑ÆË∑êË∑©Ë∑£Ë∑¢Ë∑ßË∑≤Ë∑´Ë∑¥ËºÜËªøËºÅËºÄËºÖËºáËºàËºÇËºãÈÅíÈÄøÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈÅÑÈÅâÈÄΩÈÑêÈÑçÈÑèÈÑëÈÑñÈÑîÈÑãÈÑéÈÖÆÈÖØÈâàÈâíÈà∞Èà∫Èâ¶Èà≥Èâ•ÈâûÈäÉÈàÆÈâäÈâÜÈâ≠Èâ¨ÈâèÈâ†ÈâßÈâØÈà∂Èâ°Èâ∞Èà±ÈâîÈâ£ÈâêÈâ≤ÈâéÈâìÈâåÈâñÈà≤ÈñüÈñúÈñûÈñõÈöíÈöìÈöëÈöóÈõéÈõ∫ÈõΩÈõ∏ÈõµÈù≥Èù∑Èù∏Èù≤È†èÈ†çÈ†éÈ¢¨È£∂È£πÈ¶ØÈ¶≤È¶∞È¶µÈ™≠È™´È≠õÈ≥™È≥≠È≥ßÈ∫ÄÈªΩÂÉ¶ÂÉîÂÉóÂÉ®ÂÉ≥ÂÉõÂÉ™ÂÉùÂÉ§ÂÉìÂÉ¨ÂÉ∞ÂÉØÂÉ£ÂÉ†ÔøΩ".split("");
    for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) {
        e[D[224][j]] = 57344 + j;
        d[57344 + j] = D[224][j];
    };
    D[225] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂáòÂäÄÂäÅÂã©Âã´Âå∞Âé¨ÂòßÂòïÂòåÂòíÂóºÂòèÂòúÂòÅÂòìÂòÇÂó∫ÂòùÂòÑÂóøÂóπÂ¢âÂ°ºÂ¢êÂ¢òÂ¢ÜÂ¢ÅÂ°øÂ°¥Â¢ãÂ°∫Â¢áÂ¢ëÂ¢éÂ°∂Â¢ÇÂ¢àÂ°ªÂ¢îÂ¢èÂ£æÂ•´Â´úÂ´ÆÂ´•Â´ïÂ´™Â´öÂ´≠Â´´Â´≥Â´¢Â´†Â´õÂ´¨Â´ûÂ´ùÂ´ôÂ´®Â´üÂ≠∑ÂØ†ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂØ£Â±£Â∂ÇÂ∂ÄÂµΩÂ∂ÜÂµ∫Â∂ÅÂµ∑Â∂äÂ∂âÂ∂àÂµæÂµºÂ∂çÂµπÂµøÂπòÂπôÂπìÂªòÂªëÂªóÂªéÂªúÂªïÂªôÂªíÂªîÂΩÑÂΩÉÂΩØÂæ∂ÊÑ¨ÊÑ®ÊÖÅÊÖûÊÖ±ÊÖ≥ÊÖíÊÖìÊÖ≤ÊÖ¨ÊÜÄÊÖ¥ÊÖîÊÖ∫ÊÖõÊÖ•ÊÑªÊÖ™ÊÖ°ÊÖñÊà©ÊàßÊà´Êê´ÊëçÊëõÊëùÊë¥Êë∂Êë≤Êë≥ÊëΩÊëµÊë¶Êí¶ÊëéÊíÇÊëûÊëúÊëãÊëìÊë†ÊëêÊëøÊêøÊë¨Êë´ÊëôÊë•Êë∑Êï≥Êñ†Êö°Êö†ÊöüÊúÖÊúÑÊú¢Ê¶±Ê¶∂ÊßâÔøΩ".split("");
    for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) {
        e[D[225][j]] = 57600 + j;
        d[57600 + j] = D[225][j];
    };
    D[226] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ¶†ÊßéÊ¶ñÊ¶∞Ê¶¨Ê¶ºÊ¶ëÊ¶ôÊ¶éÊ¶ßÊ¶çÊ¶©Ê¶æÊ¶ØÊ¶øÊßÑÊ¶ΩÊ¶§ÊßîÊ¶πÊßäÊ¶öÊßèÊ¶≥Ê¶ìÊ¶™Ê¶°Ê¶ûÊßôÊ¶óÊ¶êÊßÇÊ¶µÊ¶•ÊßÜÊ≠äÊ≠çÊ≠ãÊÆûÊÆüÊÆ†ÊØÉÊØÑÊØæÊªéÊªµÊª±ÊºÉÊº•Êª∏Êº∑ÊªªÊºÆÊºâÊΩéÊºôÊºöÊºßÊºòÊºªÊºíÊª≠ÊºäÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊº∂ÊΩ≥ÊªπÊªÆÊº≠ÊΩÄÊº∞ÊººÊºµÊª´ÊºáÊºéÊΩÉÊºÖÊªΩÊª∂ÊºπÊºúÊªºÊº∫ÊºüÊºçÊºûÊºàÊº°ÁÜáÁÜêÁÜâÁÜÄÁÜÖÁÜÇÁÜèÁÖªÁÜÜÁÜÅÁÜóÁâÑÁâìÁäóÁäïÁäìÁçÉÁççÁçëÁçåÁë¢Áë≥Áë±ÁëµÁë≤ÁëßÁëÆÁîÄÁîÇÁîÉÁïΩÁñêÁòñÁòàÁòåÁòïÁòëÁòäÁòîÁö∏ÁûÅÁùºÁûÖÁûÇÁùÆÁûÄÁùØÁùæÁûÉÁ¢≤Á¢™Á¢¥Á¢≠Á¢®Á°æÁ¢´Á¢ûÁ¢•Á¢†Á¢¨Á¢¢Á¢§Á¶òÁ¶äÁ¶ãÁ¶ñÁ¶ïÁ¶îÁ¶ìÔøΩ".split("");
    for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) {
        e[D[226][j]] = 57856 + j;
        d[57856 + j] = D[226][j];
    };
    D[227] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¶óÁ¶àÁ¶íÁ¶êÁ®´Á©äÁ®∞Á®ØÁ®®Á®¶Á™®Á™´Á™¨Á´ÆÁÆàÁÆúÁÆäÁÆëÁÆêÁÆñÁÆçÁÆåÁÆõÁÆéÁÆÖÁÆòÂäÑÁÆôÁÆ§ÁÆÇÁ≤ªÁ≤øÁ≤ºÁ≤∫Á∂ßÁ∂∑Á∑ÇÁ∂£Á∂™Á∑ÅÁ∑ÄÁ∑ÖÁ∂ùÁ∑éÁ∑ÑÁ∑ÜÁ∑ãÁ∑åÁ∂ØÁ∂πÁ∂ñÁ∂ºÁ∂üÁ∂¶Á∂ÆÁ∂©Á∂°Á∑âÁΩ≥Áø¢Áø£Áø•ÁøûÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÄ§ËÅùËÅúËÜâËÜÜËÜÉËÜáËÜçËÜåËÜãËàïËíóËí§Ëí°ËíüËí∫ËìéËìÇËí¨ËíÆËí´ËíπËí¥ËìÅËìçËí™ËíöËí±ËìêËíùËíßËíªËí¢ËíîËìáËìåËíõËí©ËíØËí®ËìñËíòËí∂ËìèËí†ËìóËìîËìíËìõËí∞ËíëËô°Ëú≥Ëú£Ëú®Ëù´ËùÄËúÆËúûËú°ËúôËúõËùÉËú¨ËùÅËúæËùÜËú†Ëú≤Ëú™Ëú≠ËúºËúíËú∫Ëú±ËúµËùÇËú¶ËúßËú∏Ëú§ËúöËú∞ËúëË£∑Ë£ßË£±Ë£≤Ë£∫Ë£æË£ÆË£ºË£∂Ë£ªÔøΩ".split("");
    for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) {
        e[D[227][j]] = 58112 + j;
        d[58112 + j] = D[227][j];
    };
    D[228] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË£∞Ë£¨Ë£´Ë¶ùË¶°Ë¶üË¶ûËß©Ëß´Ëß®Ë™´Ë™ôË™ãË™íË™èË™ñË∞ΩË±®Ë±©Ë≥ïË≥èË≥óË∂ñË∏âË∏ÇË∑øË∏çË∑ΩË∏äË∏ÉË∏áË∏ÜË∏ÖË∑æË∏ÄË∏ÑËºêËºëËºéËºçÈÑ£ÈÑúÈÑ†ÈÑ¢ÈÑüÈÑùÈÑöÈÑ§ÈÑ°ÈÑõÈÖ∫ÈÖ≤ÈÖπÈÖ≥Èä•Èä§Èâ∂ÈäõÈâ∫Èä†ÈäîÈä™ÈäçÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈä¶ÈäöÈä´ÈâπÈäóÈâøÈä£ÈãÆÈäéÈäÇÈäïÈä¢ÈâΩÈäàÈä°ÈääÈäÜÈäåÈäôÈäßÈâæÈäáÈä©ÈäùÈäãÈà≠ÈöûÈö°ÈõøÈùòÈùΩÈù∫ÈùæÈûÉÈûÄÈûÇÈùªÈûÑÈûÅÈùøÈüéÈüçÈ†ñÈ¢≠È¢ÆÈ§ÇÈ§ÄÈ§áÈ¶ùÈ¶úÈßÉÈ¶πÈ¶ªÈ¶∫ÈßÇÈ¶ΩÈßáÈ™±È´£È´ßÈ¨æÈ¨øÈ≠†È≠°È≠üÈ≥±È≥≤È≥µÈ∫ßÂÉøÂÑÉÂÑ∞ÂÉ∏ÂÑÜÂÑáÂÉ∂ÂÉæÂÑãÂÑåÂÉΩÂÑäÂäãÂäåÂã±ÂãØÂôàÂôÇÂôåÂòµÂôÅÂôäÂôâÂôÜÂôòÔøΩ".split("");
    for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) {
        e[D[228][j]] = 58368 + j;
        d[58368 + j] = D[228][j];
    };
    D[229] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂôöÂôÄÂò≥ÂòΩÂò¨ÂòæÂò∏Âò™Âò∫ÂúöÂ¢´Â¢ùÂ¢±Â¢†Â¢£Â¢ØÂ¢¨Â¢•Â¢°Â£øÂ´øÂ´¥Â´ΩÂ´∑Â´∂Â¨ÉÂ´∏Â¨ÇÂ´πÂ¨ÅÂ¨áÂ¨ÖÂ¨èÂ±ßÂ∂ôÂ∂óÂ∂üÂ∂íÂ∂¢Â∂ìÂ∂ïÂ∂†Â∂úÂ∂°Â∂öÂ∂ûÂπ©ÂπùÂπ†ÂπúÁ∑≥ÂªõÂªûÂª°ÂΩâÂæ≤ÊÜãÊÜÉÊÖπÊÜ±ÊÜ∞ÊÜ¢ÊÜâÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÜõÊÜìÊÜØÊÜ≠ÊÜüÊÜíÊÜ™ÊÜ°ÊÜçÊÖ¶ÊÜ≥Êà≠ÊëÆÊë∞ÊíñÊí†ÊíÖÊíóÊíúÊíèÊíãÊíäÊíåÊí£ÊíüÊë®Êí±ÊíòÊï∂Êï∫ÊïπÊïªÊñ≤Êñ≥ÊöµÊö∞Êö©Êö≤Êö∑Êö™ÊöØÊ®ÄÊ®ÜÊ®óÊß•Êß∏Ê®ïÊß±Êß§Ê®†ÊßøÊß¨Êß¢Ê®õÊ®ùÊßæÊ®ßÊß≤ÊßÆÊ®îÊß∑ÊßßÊ©ÄÊ®àÊß¶ÊßªÊ®çÊßºÊß´Ê®âÊ®ÑÊ®òÊ®•Ê®èÊß∂Ê®¶Ê®áÊß¥Ê®ñÊ≠ëÊÆ•ÊÆ£ÊÆ¢ÊÆ¶Ê∞ÅÊ∞ÄÊØøÊ∞ÇÊΩÅÊº¶ÊΩæÊæáÊøÜÊæíÔøΩ".split("");
    for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) {
        e[D[229][j]] = 58624 + j;
        d[58624 + j] = D[229][j];
    };
    D[230] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊæçÊæâÊæåÊΩ¢ÊΩèÊæÖÊΩöÊæñÊΩ∂ÊΩ¨ÊæÇÊΩïÊΩ≤ÊΩíÊΩêÊΩóÊæîÊæìÊΩùÊºÄÊΩ°ÊΩ´ÊΩΩÊΩßÊæêÊΩìÊæãÊΩ©ÊΩøÊæïÊΩ£ÊΩ∑ÊΩ™ÊΩªÁÜ≤ÁÜØÁÜõÁÜ∞ÁÜ†ÁÜöÁÜ©ÁÜµÁÜùÁÜ•ÁÜûÁÜ§ÁÜ°ÁÜ™ÁÜúÁÜßÁÜ≥ÁäòÁäöÁçòÁçíÁçûÁçüÁç†ÁçùÁçõÁç°ÁçöÁçôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁç¢ÁíáÁíâÁíäÁíÜÁíÅÁëΩÁíÖÁíàÁëºÁëπÁîàÁîáÁïæÁò•ÁòûÁòôÁòùÁòúÁò£ÁòöÁò®ÁòõÁöúÁöùÁöûÁöõÁûçÁûèÁûâÁûàÁ£çÁ¢ªÁ£èÁ£åÁ£ëÁ£éÁ£îÁ£àÁ£ÉÁ£ÑÁ£âÁ¶öÁ¶°Á¶†Á¶úÁ¶¢Á¶õÊ≠∂Á®πÁ™≤Á™¥Á™≥ÁÆ∑ÁØãÁÆæÁÆ¨ÁØéÁÆØÁÆπÁØäÁÆµÁ≥ÖÁ≥àÁ≥åÁ≥ãÁ∑∑Á∑õÁ∑™Á∑ßÁ∑óÁ∑°Á∏ÉÁ∑∫Á∑¶Á∑∂Á∑±Á∑∞Á∑ÆÁ∑üÁΩ∂Áæ¨Áæ∞Áæ≠Áø≠Áø´Áø™Áø¨Áø¶Áø®ËÅ§ËÅßËÜ£ËÜüÔøΩ".split("");
    for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) {
        e[D[230][j]] = 58880 + j;
        d[58880 + j] = D[230][j];
    };
    D[231] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÜûËÜïËÜ¢ËÜôËÜóËàñËâèËâìËâíËâêËâéËâëËî§ËîªËîèËîÄËî©ËîéËîâËîçËîüËîäËîßËîúËìªËî´Ëì∫ËîàËîåËì¥Ëî™Ëì≤ËîïËì∑Ëì´Ëì≥ËìºËîíËì™Ëì©ËîñËìæËî®ËîùËîÆËîÇËìΩËîûËì∂Ëî±Ëî¶ËìßËì®Ëì∞ËìØËìπËîòËî†Ëî∞ËîãËîôËîØËô¢ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËùñËù£Ëù§Ëù∑Ëü°Ëù≥ËùòËùîËùõËùíËù°ËùöËùëËùûËù≠Ëù™ËùêËùéËùüËùùËùØËù¨Ëù∫ËùÆËùúËù•ËùèËùªËùµËù¢ËùßËù©Ë°öË§ÖË§åË§îË§ãË§óË§òË§ôË§ÜË§ñË§ëË§éË§âË¶¢Ë¶§Ë¶£Ëß≠Ëß∞Ëß¨Ë´èË´ÜË™∏Ë´ìË´ëË´îË´ïË™ªË´óË™æË´ÄË´ÖË´òË´ÉË™∫Ë™ΩË´ôË∞æË±çË≤èË≥•Ë≥üË≥ôË≥®Ë≥öË≥ùË≥ßË∂†Ë∂úË∂°Ë∂õË∏†Ë∏£Ë∏•Ë∏§Ë∏ÆË∏ïË∏õË∏ñË∏ëË∏ôË∏¶Ë∏ßÔøΩ".split("");
    for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) {
        e[D[231][j]] = 59136 + j;
        d[59136 + j] = D[231][j];
    };
    D[232] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË∏îË∏íË∏òË∏ìË∏úË∏óË∏öËº¨Ëº§ËºòËºöËº†Ëº£ËºñËºóÈÅ≥ÈÅ∞ÈÅØÈÅßÈÅ´ÈÑØÈÑ´ÈÑ©ÈÑ™ÈÑ≤ÈÑ¶ÈÑÆÈÜÖÈÜÜÈÜäÈÜÅÈÜÇÈÜÑÈÜÄÈãêÈãÉÈãÑÈãÄÈãôÈä∂ÈãèÈã±ÈãüÈãòÈã©ÈãóÈãùÈãåÈãØÈãÇÈã®ÈãäÈãàÈãéÈã¶ÈãçÈãïÈãâÈã†ÈãûÈãßÈãëÈãìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈäµÈã°ÈãÜÈä¥ÈïºÈñ¨Èñ´ÈñÆÈñ∞Èö§Èö¢ÈõìÈúÖÈúàÈúÇÈùöÈûäÈûéÈûàÈüêÈüèÈ†ûÈ†ùÈ†¶È†©È†®È††È†õÈ†ßÈ¢≤È§àÈ£∫È§ëÈ§îÈ§ñÈ§óÈ§ïÈßúÈßçÈßèÈßìÈßîÈßéÈßâÈßñÈßòÈßãÈßóÈßåÈ™≥È´¨È´´È´≥È´≤È´±È≠ÜÈ≠ÉÈ≠ßÈ≠¥È≠±È≠¶È≠∂È≠µÈ≠∞È≠®È≠§È≠¨È≥ºÈ≥∫È≥ΩÈ≥øÈ≥∑È¥áÈ¥ÄÈ≥πÈ≥ªÈ¥àÈ¥ÖÈ¥ÑÈ∫ÉÈªìÈºèÈºêÂÑúÂÑìÂÑóÂÑöÂÑëÂáûÂå¥Âè°Âô∞Âô†ÂôÆÔøΩ".split("");
    for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) {
        e[D[232][j]] = 59392 + j;
        d[59392 + j] = D[232][j];
    };
    D[233] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂô≥Âô¶Âô£Âô≠Âô≤ÂôûÂô∑ÂúúÂúõÂ£àÂ¢ΩÂ£âÂ¢øÂ¢∫Â£ÇÂ¢ºÂ£ÜÂ¨óÂ¨ôÂ¨õÂ¨°Â¨îÂ¨ìÂ¨êÂ¨ñÂ¨®Â¨öÂ¨†Â¨ûÂØØÂ∂¨Â∂±Â∂©Â∂ßÂ∂µÂ∂∞Â∂ÆÂ∂™Â∂®Â∂≤Â∂≠Â∂ØÂ∂¥ÂπßÂπ®Âπ¶ÂπØÂª©ÂªßÂª¶Âª®Âª•ÂΩãÂæºÊÜùÊÜ®ÊÜñÊáÖÊÜ¥ÊáÜÊáÅÊáåÊÜ∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊÜøÊÜ∏ÊÜåÊìóÊìñÊìêÊìèÊìâÊíΩÊíâÊìÉÊìõÊì≥ÊìôÊî≥ÊïøÊïºÊñ¢ÊõàÊöæÊõÄÊõäÊõãÊõèÊöΩÊöªÊö∫ÊõåÊú£Ê®¥Ê©¶Ê©âÊ©ßÊ®≤Ê©®Ê®æÊ©ùÊ©≠Ê©∂Ê©õÊ©ëÊ®®Ê©öÊ®ªÊ®øÊ©ÅÊ©™Ê©§Ê©êÊ©èÊ©îÊ©ØÊ©©Ê©†Ê®ºÊ©ûÊ©ñÊ©ïÊ©çÊ©éÊ©ÜÊ≠ïÊ≠îÊ≠ñÊÆßÊÆ™ÊÆ´ÊØàÊØáÊ∞ÑÊ∞ÉÊ∞ÜÊæ≠ÊøãÊæ£ÊøáÊæºÊøéÊøàÊΩûÊøÑÊæΩÊæûÊøäÊæ®ÁÄÑÊæ•ÊæÆÊæ∫Êæ¨Êæ™ÊøèÊæøÊæ∏ÔøΩ".split("");
    for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) {
        e[D[233][j]] = 59648 + j;
        d[59648 + j] = D[233][j];
    };
    D[234] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊæ¢ÊøâÊæ´ÊøçÊæØÊæ≤Êæ∞ÁáÖÁáÇÁÜøÁÜ∏ÁáñÁáÄÁáÅÁáãÁáîÁáäÁááÁáèÁÜΩÁáòÁÜºÁáÜÁáöÁáõÁäùÁäûÁç©Áç¶ÁçßÁç¨Áç•Áç´Áç™ÁëøÁíöÁí†ÁíîÁííÁíïÁí°ÁîãÁñÄÁòØÁò≠Áò±ÁòΩÁò≥ÁòºÁòµÁò≤Áò∞ÁöªÁõ¶ÁûöÁûùÁû°ÁûúÁûõÁû¢Áû£ÁûïÁûôÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁûóÁ£ùÁ£©Á£•Á£™Á£ûÁ££Á£õÁ£°Á£¢Á£≠Á£üÁ£†Á¶§Á©ÑÁ©àÁ©áÁ™∂Á™∏Á™µÁ™±Á™∑ÁØûÁØ£ÁØßÁØùÁØïÁØ•ÁØöÁØ®ÁØπÁØîÁØ™ÁØ¢ÁØúÁØ´ÁØòÁØüÁ≥íÁ≥îÁ≥óÁ≥êÁ≥ëÁ∏íÁ∏°Á∏óÁ∏åÁ∏üÁ∏†Á∏ìÁ∏éÁ∏úÁ∏ïÁ∏öÁ∏¢Á∏ãÁ∏èÁ∏ñÁ∏çÁ∏îÁ∏•Á∏§ÁΩÉÁΩªÁΩºÁΩ∫Áæ±ÁøØËÄ™ËÄ©ËÅ¨ËÜ±ËÜ¶ËÜÆËÜπËÜµËÜ´ËÜ∞ËÜ¨ËÜ¥ËÜ≤ËÜ∑ËÜßËá≤ËâïËâñËâóËïñËïÖËï´ËïçËïìËï°ËïòÔøΩ".split("");
    for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) {
        e[D[234][j]] = 59904 + j;
        d[59904 + j] = D[234][j];
    };
    D[235] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËïÄËïÜËï§ËïÅËï¢ËïÑËïëËïáËï£ËîæËïõËï±ËïéËïÆËïµËïïËïßËï†ËñåËï¶ËïùËïîËï•Ëï¨Ëô£Ëô•Ëô§ËûõËûèËûóËûìËûíËûàËûÅËûñËûòËùπËûáËû£ËûÖËûêËûëËûùËûÑËûîËûúËûöËûâË§ûË§¶Ë§∞Ë§≠Ë§ÆË§ßË§±Ë§¢Ë§©Ë§£Ë§ØË§¨Ë§üËß±Ë´†ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË´¢Ë´≤Ë´¥Ë´µË´ùË¨îË´§Ë´üË´∞Ë´àË´ûË´°Ë´®Ë´øË´ØË´ªË≤ëË≤íË≤êË≥µË≥ÆË≥±Ë≥∞Ë≥≥Ëµ¨ËµÆË∂•Ë∂ßË∏≥Ë∏æË∏∏ËπÄËπÖË∏∂Ë∏ºË∏ΩËπÅË∏∞Ë∏øË∫ΩËº∂ËºÆËºµËº≤ËºπËº∑Ëº¥ÈÅ∂ÈÅπÈÅªÈÇÜÈÉ∫ÈÑ≥ÈÑµÈÑ∂ÈÜìÈÜêÈÜëÈÜçÈÜèÈåßÈåûÈåàÈåüÈåÜÈåèÈç∫Èå∏ÈåºÈåõÈå£ÈåíÈåÅÈçÜÈå≠ÈåéÈåçÈããÈåùÈã∫Èå•ÈåìÈãπÈã∑Èå¥ÈåÇÈå§ÈãøÈå©ÈåπÈåµÈå™ÈåîÈååÔøΩ".split("");
    for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) {
        e[D[235][j]] = 60160 + j;
        d[60160 + j] = D[235][j];
    };
    D[236] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈåãÈãæÈåâÈåÄÈãªÈåñÈñºÈóçÈñæÈñπÈñ∫Èñ∂ÈñøÈñµÈñΩÈö©ÈõîÈúãÈúíÈúêÈûôÈûóÈûîÈü∞Èü∏È†µÈ†ØÈ†≤È§§È§üÈ§ßÈ§©È¶ûÈßÆÈß¨Èß•Èß§Èß∞Èß£Èß™Èß©ÈßßÈ™πÈ™øÈ™¥È™ªÈ´∂È´∫È´πÈ´∑È¨≥ÈÆÄÈÆÖÈÆáÈ≠ºÈ≠æÈ≠ªÈÆÇÈÆìÈÆíÈÆêÈ≠∫ÈÆïÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ≠ΩÈÆàÈ¥•È¥óÈ¥†È¥ûÈ¥îÈ¥©È¥ùÈ¥òÈ¥¢È¥êÈ¥ôÈ¥üÈ∫àÈ∫ÜÈ∫áÈ∫ÆÈ∫≠ÈªïÈªñÈª∫ÈºíÈºΩÂÑ¶ÂÑ•ÂÑ¢ÂÑ§ÂÑ†ÂÑ©Âã¥ÂöìÂöåÂöçÂöÜÂöÑÂöÉÂôæÂöÇÂôøÂöÅÂ£ñÂ£îÂ£èÂ£íÂ¨≠Â¨•Â¨≤Â¨£Â¨¨Â¨ßÂ¨¶Â¨ØÂ¨ÆÂ≠ªÂØ±ÂØ≤Â∂∑Âπ¨Âπ™ÂææÂæªÊáÉÊÜµÊÜºÊáßÊá†Êá•Êá§Êá®ÊáûÊìØÊì©Êì£Êì´Êì§Êì®ÊñÅÊñÄÊñ∂ÊóöÊõíÊ™çÊ™ñÊ™ÅÊ™•Ê™âÊ™üÊ™õÊ™°Ê™ûÊ™áÊ™ìÊ™éÔøΩ".split("");
    for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) {
        e[D[236][j]] = 60416 + j;
        d[60416 + j] = D[236][j];
    };
    D[237] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÊ™ïÊ™ÉÊ™®Ê™§Ê™ëÊ©øÊ™¶Ê™öÊ™ÖÊ™åÊ™íÊ≠õÊÆ≠Ê∞âÊøåÊæ©Êø¥ÊøîÊø£ÊøúÊø≠ÊøßÊø¶ÊøûÊø≤ÊøùÊø¢Êø®Áá°Áá±Áá®Áá≤Áá§Áá∞Áá¢Áç≥ÁçÆÁçØÁíóÁí≤Áí´ÁíêÁí™Áí≠Áí±Áí•ÁíØÁîêÁîëÁîíÁîèÁñÑÁôÉÁôàÁôâÁôáÁö§Áõ©ÁûµÁû´Áû≤Áû∑Áû∂ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁû¥Áû±Áû®Áü∞Á£≥Á£ΩÁ§ÇÁ£ªÁ£ºÁ£≤Á§ÖÁ£πÁ£æÁ§ÑÁ¶´Á¶®Á©úÁ©õÁ©ñÁ©òÁ©îÁ©öÁ™æÁ´ÄÁ´ÅÁ∞ÖÁ∞èÁØ≤Á∞ÄÁØøÁØªÁ∞éÁØ¥Á∞ãÁØ≥Á∞ÇÁ∞âÁ∞ÉÁ∞ÅÁØ∏ÁØΩÁ∞ÜÁØ∞ÁØ±Á∞êÁ∞äÁ≥®Á∏≠Á∏ºÁπÇÁ∏≥È°àÁ∏∏Á∏™ÁπâÁπÄÁπáÁ∏©ÁπåÁ∏∞Á∏ªÁ∏∂ÁπÑÁ∏∫ÁΩÖÁΩøÁΩæÁΩΩÁø¥Áø≤ËÄ¨ËÜªËáÑËáåËáäËáÖËááËÜºËá©ËâõËâöËâúËñÉËñÄËñèËñßËñïËñ†ËñãËñ£ËïªËñ§ËñöËñûÔøΩ".split("");
    for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) {
        e[D[237][j]] = 60672 + j;
        d[60672 + j] = D[237][j];
    };
    D[238] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËï∑ËïºËñâËñ°Ëï∫Ëï∏ËïóËñéËññËñÜËñçËñôËñùËñÅËñ¢ËñÇËñàËñÖËïπËï∂ËñòËñêËñüËô®ËûæËû™Ëû≠ËüÖËû∞Ëû¨ËûπËûµËûºËûÆËüâËüÉËüÇËüåËû∑ËûØËüÑËüäËû¥Ëû∂ËûøËû∏ËûΩËüûËû≤Ë§µË§≥Ë§ºË§æË•ÅË•íË§∑Ë•ÇË¶≠Ë¶ØË¶ÆËß≤Ëß≥Ë¨ûÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË¨òË¨ñË¨ëË¨ÖË¨ãË¨¢Ë¨èË¨íË¨ïË¨áË¨çË¨àË¨ÜË¨úË¨ìË¨öË±èË±∞Ë±≤Ë±±Ë±ØË≤ïË≤îË≥πËµØËπéËπçËπìËπêËπåËπáËΩÉËΩÄÈÇÖÈÅæÈÑ∏ÈÜöÈÜ¢ÈÜõÈÜôÈÜüÈÜ°ÈÜùÈÜ†Èé°ÈéÉÈéØÈç§ÈçñÈçáÈçºÈçòÈçúÈç∂ÈçâÈçêÈçëÈç†Èç≠ÈéèÈçåÈç™ÈçπÈçóÈçïÈçíÈçèÈç±Èç∑ÈçªÈç°ÈçûÈç£ÈçßÈéÄÈçéÈçôÈóáÈóÄÈóâÈóÉÈóÖÈñ∑ÈöÆÈö∞Èö¨Èú†ÈúüÈúòÈúùÈúôÈûöÈû°ÈûúÔøΩ".split("");
    for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) {
        e[D[238][j]] = 60928 + j;
        d[60928 + j] = D[238][j];
    };
    D[239] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈûûÈûùÈüïÈüîÈü±È°ÅÈ°ÑÈ°äÈ°âÈ°ÖÈ°ÉÈ§•È§´È§¨È§™È§≥È§≤È§ØÈ§≠È§±È§∞È¶òÈ¶£È¶°È®ÇÈß∫Èß¥Èß∑ÈßπÈß∏Èß∂ÈßªÈßΩÈßæÈßºÈ®ÉÈ™æÈ´æÈ´ΩÈ¨ÅÈ´ºÈ≠àÈÆöÈÆ®ÈÆûÈÆõÈÆ¶ÈÆ°ÈÆ•ÈÆ§ÈÆÜÈÆ¢ÈÆ†ÈÆØÈ¥≥ÈµÅÈµßÈ¥∂È¥ÆÈ¥ØÈ¥±È¥∏È¥∞ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈµÖÈµÇÈµÉÈ¥æÈ¥∑ÈµÄÈ¥ΩÁøµÈ¥≠È∫äÈ∫âÈ∫çÈ∫∞ÈªàÈªöÈªªÈªøÈº§Èº£Èº¢ÈΩîÈæ†ÂÑ±ÂÑ≠ÂÑÆÂöòÂöúÂöóÂööÂöùÂöôÂ•∞Â¨ºÂ±©Â±™Â∑ÄÂπ≠ÂπÆÊáòÊáüÊá≠ÊáÆÊá±Êá™Êá∞Êá´ÊáñÊá©ÊìøÊîÑÊìΩÊì∏ÊîÅÊîÉÊìºÊñîÊóõÊõöÊõõÊõòÊ´ÖÊ™πÊ™ΩÊ´°Ê´ÜÊ™∫Ê™∂Ê™∑Ê´áÊ™¥Ê™≠Ê≠ûÊØâÊ∞ãÁÄáÁÄåÁÄçÁÄÅÁÄÖÁÄîÁÄéÊøøÁÄÄÊøªÁÄ¶ÊøºÊø∑ÁÄäÁàÅÁáøÁáπÁàÉÁáΩÁç∂ÔøΩ".split("");
    for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) {
        e[D[239][j]] = 61184 + j;
        d[61184 + j] = D[239][j];
    };
    D[240] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁí∏ÁìÄÁíµÁìÅÁíæÁí∂ÁíªÁìÇÁîîÁîìÁôúÁô§ÁôôÁôêÁôìÁôóÁôöÁö¶ÁöΩÁõ¨ÁüÇÁû∫Á£øÁ§åÁ§ìÁ§îÁ§âÁ§êÁ§íÁ§ëÁ¶≠Á¶¨Á©üÁ∞úÁ∞©Á∞ôÁ∞†Á∞üÁ∞≠Á∞ùÁ∞¶Á∞®Á∞¢Á∞•Á∞∞ÁπúÁπêÁπñÁπ£ÁπòÁπ¢ÁπüÁπëÁπ†ÁπóÁπìÁæµÁæ≥Áø∑Áø∏ËÅµËáëËáíÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËáêËâüËâûËñ¥ËóÜËóÄËóÉËóÇËñ≥ËñµËñΩËóáËóÑËñøËóãËóéËóàËóÖËñ±Ëñ∂ËóíËò§Ëñ∏Ëñ∑ËñæËô©ËüßËü¶Ëü¢ËüõËü´Ëü™Ëü•ËüüËü≥Ëü§ËüîËüúËüìËü≠ËüòËü£Ëû§ËüóËüôË†ÅËü¥Ëü®ËüùË•ìË•ãË•èË•åË•ÜË•êË•ëË•âË¨™Ë¨ßË¨£Ë¨≥Ë¨∞Ë¨µË≠áË¨ØË¨ºË¨æË¨±Ë¨•Ë¨∑Ë¨¶Ë¨∂Ë¨ÆË¨§Ë¨ªË¨ΩË¨∫Ë±ÇË±µË≤ôË≤òË≤óË≥æË¥ÑË¥ÇË¥ÄËπúËπ¢Ëπ†ËπóËπñËπûËπ•ËπßÔøΩ".split("");
    for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) {
        e[D[240][j]] = 61440 + j;
        d[61440 + j] = D[240][j];
    };
    D[241] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËπõËπöËπ°ËπùËπ©ËπîËΩÜËΩáËΩàËΩãÈÑ®ÈÑ∫ÈÑªÈÑæÈÜ®ÈÜ•ÈÜßÈÜØÈÜ™ÈéµÈéåÈéíÈé∑ÈéõÈéùÈéâÈéßÈééÈé™ÈéûÈé¶ÈéïÈéàÈéôÈéüÈéçÈé±ÈéëÈé≤Èé§Èé®Èé¥Èé£Èé•ÈóíÈóìÈóëÈö≥ÈõóÈõöÂ∑ÇÈõüÈõòÈõùÈú£Èú¢Èú•Èû¨ÈûÆÈû®Èû´Èû§Èû™ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈû¢Èû•ÈüóÈüôÈüñÈüòÈü∫È°êÈ°ëÈ°íÈ¢∏È•ÅÈ§ºÈ§∫È®èÈ®ãÈ®âÈ®çÈ®ÑÈ®ëÈ®äÈ®ÖÈ®áÈ®ÜÈ´ÄÈ´úÈ¨àÈ¨ÑÈ¨ÖÈ¨©È¨µÈ≠äÈ≠åÈ≠ãÈØáÈØÜÈØÉÈÆøÈØÅÈÆµÈÆ∏ÈØìÈÆ∂ÈØÑÈÆπÈÆΩÈµúÈµìÈµèÈµäÈµõÈµãÈµôÈµñÈµåÈµóÈµíÈµîÈµüÈµòÈµöÈ∫éÈ∫åÈªüÈºÅÈºÄÈºñÈº•Èº´Èº™Èº©Èº®ÈΩåÈΩïÂÑ¥ÂÑµÂäñÂã∑Âé¥Âö´Âö≠Âö¶ÂößÂö™Âö¨Â£öÂ£ùÂ£õÂ§íÂ¨ΩÂ¨æÂ¨øÂ∑ÉÂπ∞ÔøΩ".split("");
    for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) {
        e[D[241][j]] = 61696 + j;
        d[61696 + j] = D[241][j];
    };
    D[242] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂæøÊáªÊîáÊîêÊîçÊîâÊîåÊîéÊñÑÊóûÊóùÊõûÊ´ßÊ´†Ê´åÊ´ëÊ´ôÊ´ãÊ´üÊ´úÊ´êÊ´´Ê´èÊ´çÊ´ûÊ≠†ÊÆ∞Ê∞åÁÄôÁÄßÁÄ†ÁÄñÁÄ´ÁÄ°ÁÄ¢ÁÄ£ÁÄ©ÁÄóÁÄ§ÁÄúÁÄ™ÁàåÁàäÁàáÁàÇÁàÖÁä•Áä¶Áä§Áä£Áä°ÁìãÁìÖÁí∑ÁìÉÁîñÁô†ÁüâÁüäÁüÑÁü±Á§ùÁ§õÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ§°Á§úÁ§óÁ§ûÁ¶∞Á©ßÁ©®Á∞≥Á∞ºÁ∞πÁ∞¨Á∞ªÁ≥¨Á≥™Áπ∂ÁπµÁπ∏Áπ∞Áπ∑ÁπØÁπ∫Áπ≤Áπ¥Áπ®ÁΩãÁΩäÁæÉÁæÜÁæ∑ÁøΩÁøæËÅ∏ËáóËáïËâ§Ëâ°Ëâ£Ëó´Ëó±Ëó≠ËóôËó°Ëó®ËóöËóóËó¨Ëó≤Ëó∏ËóòËóüËó£ËóúËóëËó∞Ëó¶ËóØËóûËó¢Ë†ÄËü∫Ë†ÉËü∂Ëü∑Ë†âË†åË†ãË†ÜËüºË†àËüøË†äË†ÇË•¢Ë•öË•õË•óË•°Ë•úË•òË•ùË•ôË¶àË¶∑Ë¶∂Ëß∂Ë≠êË≠àË≠äË≠ÄË≠ìË≠ñË≠îË≠ãË≠ïÔøΩ".split("");
    for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) {
        e[D[242][j]] = 61952 + j;
        d[61952 + j] = D[242][j];
    };
    D[243] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË≠ëË≠ÇË≠íË≠óË±ÉË±∑Ë±∂Ë≤öË¥ÜË¥áË¥âË∂¨Ë∂™Ë∂≠Ë∂´Ëπ≠Ëπ∏Ëπ≥Ëπ™ËπØËπªËªÇËΩíËΩëËΩèËΩêËΩìËæ¥ÈÖÄÈÑøÈÜ∞ÈÜ≠ÈèûÈèáÈèèÈèÇÈèöÈèêÈèπÈè¨ÈèåÈèôÈé©Èè¶ÈèäÈèîÈèÆÈè£ÈèïÈèÑÈèéÈèÄÈèíÈèßÈïΩÈóöÈóõÈõ°Èú©Èú´Èú¨Èú®Èú¶ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈû≥Èû∑Èû∂ÈüùÈüûÈüüÈ°úÈ°ôÈ°ùÈ°óÈ¢øÈ¢ΩÈ¢ªÈ¢æÈ•àÈ•áÈ•ÉÈ¶¶È¶ßÈ®öÈ®ïÈ®•È®ùÈ®§È®õÈ®¢È®†È®ßÈ®£È®ûÈ®úÈ®îÈ´ÇÈ¨ãÈ¨äÈ¨éÈ¨åÈ¨∑ÈØ™ÈØ´ÈØ†ÈØûÈØ§ÈØ¶ÈØ¢ÈØ∞ÈØîÈØóÈØ¨ÈØúÈØôÈØ•ÈØïÈØ°ÈØöÈµ∑È∂ÅÈ∂äÈ∂ÑÈ∂àÈµ±È∂ÄÈµ∏È∂ÜÈ∂ãÈ∂åÈµΩÈµ´Èµ¥ÈµµÈµ∞Èµ©È∂ÖÈµ≥ÈµªÈ∂ÇÈµØÈµπÈµøÈ∂áÈµ®È∫îÈ∫ëÈªÄÈªºÈº≠ÈΩÄÈΩÅÈΩçÈΩñÈΩóÈΩòÂå∑Âö≤ÔøΩ".split("");
    for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) {
        e[D[243][j]] = 62208 + j;
        d[62208 + j] = D[243][j];
    };
    D[244] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂöµÂö≥Â££Â≠ÖÂ∑ÜÂ∑áÂªÆÂªØÂøÄÂøÅÊáπÊîóÊîñÊîïÊîìÊóüÊõ®Êõ£Êõ§Ê´≥Ê´∞Ê´™Ê´®Ê´πÊ´±Ê´ÆÊ´ØÁÄºÁÄµÁÄØÁÄ∑ÁÄ¥ÁÄ±ÁÅÇÁÄ∏ÁÄøÁÄ∫ÁÄπÁÅÄÁÄªÁÄ≥ÁÅÅÁàìÁàîÁä®ÁçΩÁçºÁí∫Áö´Áö™ÁöæÁõ≠ÁüåÁüéÁüèÁüçÁü≤Á§•Á§£Á§ßÁ§®Á§§Á§©ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ¶≤Á©ÆÁ©¨Á©≠Á´∑Á±âÁ±àÁ±äÁ±áÁ±ÖÁ≥ÆÁπªÁπæÁ∫ÅÁ∫ÄÁæ∫ÁøøËÅπËáõËáôËàãËâ®Ëâ©Ëò¢ËóøËòÅËóæËòõËòÄËó∂ËòÑËòâËòÖËòåËóΩË†ôË†êË†ëË†óË†ìË†ñË•£Ë•¶Ë¶πËß∑Ë≠†Ë≠™Ë≠ùË≠®Ë≠£Ë≠•Ë≠ßË≠≠Ë∂ÆË∫ÜË∫àË∫ÑËΩôËΩñËΩóËΩïËΩòËΩöÈÇçÈÖÉÈÖÅÈÜ∑ÈÜµÈÜ≤ÈÜ≥ÈêãÈêìÈèªÈê†ÈêèÈêîÈèæÈêïÈêêÈê®ÈêôÈêçÈèµÈêÄÈè∑ÈêáÈêéÈêñÈêíÈè∫ÈêâÈè∏ÈêäÈèøÔøΩ".split("");
    for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) {
        e[D[244][j]] = 62464 + j;
        d[62464 + j] = D[244][j];
    };
    D[245] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈèºÈêåÈè∂ÈêëÈêÜÈóûÈó†ÈóüÈúÆÈúØÈûπÈûªÈüΩÈüæÈ°†È°¢È°£È°üÈ£ÅÈ£ÇÈ•êÈ•éÈ•ôÈ•åÈ•ãÈ•ìÈ®≤È®¥È®±È®¨È®™È®∂È®©È®ÆÈ®∏È®≠È´áÈ´äÈ´ÜÈ¨êÈ¨íÈ¨ëÈ∞ãÈ∞àÈØ∑È∞ÖÈ∞íÈØ∏È±ÄÈ∞áÈ∞éÈ∞ÜÈ∞óÈ∞îÈ∞âÈ∂üÈ∂ôÈ∂§È∂ùÈ∂íÈ∂òÈ∂êÈ∂õÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ∂†È∂îÈ∂úÈ∂™È∂óÈ∂°È∂öÈ∂¢È∂®È∂ûÈ∂£È∂øÈ∂©È∂ñÈ∂¶È∂ßÈ∫ôÈ∫õÈ∫öÈª•Èª§ÈªßÈª¶Èº∞ÈºÆÈΩõÈΩ†ÈΩûÈΩùÈΩôÈæëÂÑ∫ÂÑπÂäòÂäóÂõÉÂöΩÂöæÂ≠àÂ≠áÂ∑ãÂ∑èÂª±ÊáΩÊîõÊ¨ÇÊ´ºÊ¨ÉÊ´∏Ê¨ÄÁÅÉÁÅÑÁÅäÁÅàÁÅâÁÅÖÁÅÜÁàùÁàöÁàôÁçæÁîóÁô™ÁüêÁ§≠Á§±Á§ØÁ±îÁ±ìÁ≥≤Á∫äÁ∫áÁ∫àÁ∫ãÁ∫ÜÁ∫çÁΩçÁæªËÄ∞ËáùËòòËò™Ëò¶ËòüËò£ËòúËòôËòßËòÆËò°Ëò†Ëò©ËòûËò•ÔøΩ".split("");
    for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) {
        e[D[245][j]] = 62720 + j;
        d[62720 + j] = D[245][j];
    };
    D[246] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩË†©Ë†ùË†õË††Ë†§Ë†úË†´Ë°äË•≠Ë•©Ë•ÆË•´Ëß∫Ë≠πË≠∏Ë≠ÖË≠∫Ë≠ªË¥êË¥îË∂ØË∫éË∫åËΩûËΩõËΩùÈÖÜÈÖÑÈÖÖÈÜπÈêøÈêªÈê∂Èê©ÈêΩÈêºÈê∞ÈêπÈê™Èê∑Èê¨ÈëÄÈê±Èó•Èó§Èó£ÈúµÈú∫ÈûøÈü°È°§È£âÈ£ÜÈ£ÄÈ•òÈ•ñÈ®πÈ®ΩÈ©ÜÈ©ÑÈ©ÇÈ©ÅÈ®∫ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ®øÈ´çÈ¨ïÈ¨óÈ¨òÈ¨ñÈ¨∫È≠íÈ∞´È∞ùÈ∞úÈ∞¨È∞£È∞®È∞©È∞§È∞°È∂∑È∂∂È∂ºÈ∑ÅÈ∑áÈ∑äÈ∑èÈ∂æÈ∑ÖÈ∑ÉÈ∂ªÈ∂µÈ∑éÈ∂πÈ∂∫È∂¨È∑àÈ∂±È∂≠È∑åÈ∂≥È∑çÈ∂≤Èπ∫È∫úÈª´ÈªÆÈª≠ÈºõÈºòÈºöÈº±ÈΩéÈΩ•ÈΩ§Èæí‰∫πÂõÜÂõÖÂõãÂ•±Â≠ãÂ≠åÂ∑ïÂ∑ëÂª≤Êî°Êî†Êî¶Êî¢Ê¨ãÊ¨àÊ¨âÊ∞çÁÅïÁÅñÁÅóÁÅíÁàûÁàüÁä©ÁçøÁìòÁìïÁìôÁìóÁô≠Áö≠Á§µÁ¶¥Á©∞Á©±Á±óÁ±úÁ±ôÁ±õÁ±öÔøΩ".split("");
    for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) {
        e[D[246][j]] = 62976 + j;
        d[62976 + j] = D[246][j];
    };
    D[247] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ≥¥Á≥±Á∫ëÁΩèÁæáËáûËâ´Ëò¥ËòµËò≥Ëò¨Ëò≤Ëò∂Ë†¨Ë†®Ë†¶Ë†™Ë†•Ë•±Ë¶øË¶æËßªË≠æËÆÑËÆÇËÆÜËÆÖË≠øË¥ïË∫ïË∫îË∫öË∫íË∫êË∫ñË∫óËΩ†ËΩ¢ÈÖáÈëåÈëêÈëäÈëãÈëèÈëáÈëÖÈëàÈëâÈëÜÈúøÈü£È°™È°©È£ãÈ•îÈ•õÈ©éÈ©ìÈ©îÈ©åÈ©èÈ©àÈ©äÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈ©âÈ©íÈ©êÈ´êÈ¨ôÈ¨´È¨ªÈ≠ñÈ≠ïÈ±ÜÈ±àÈ∞øÈ±ÑÈ∞πÈ∞≥È±ÅÈ∞ºÈ∞∑È∞¥È∞≤È∞ΩÈ∞∂È∑õÈ∑íÈ∑ûÈ∑öÈ∑ãÈ∑êÈ∑úÈ∑ëÈ∑üÈ∑©È∑ôÈ∑òÈ∑ñÈ∑µÈ∑ïÈ∑ùÈ∫∂Èª∞ÈºµÈº≥Èº≤ÈΩÇÈΩ´ÈæïÈæ¢ÂÑΩÂäôÂ£®Â£ßÂ•≤Â≠çÂ∑òË†ØÂΩèÊàÅÊàÉÊàÑÊî©Êî•ÊññÊõ´Ê¨ëÊ¨íÊ¨èÊØäÁÅõÁÅöÁà¢ÁéÇÁéÅÁéÉÁô∞ÁüîÁ±ßÁ±¶Á∫ïËâ¨Ëò∫ËôÄËòπËòºËò±ËòªËòæË†∞Ë†≤Ë†ÆË†≥Ë•∂Ë•¥Ë•≥ËßæÔøΩ".split("");
    for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) {
        e[D[247][j]] = 63232 + j;
        d[63232 + j] = D[247][j];
    };
    D[248] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩËÆåËÆéËÆãËÆàË±ÖË¥ôË∫òËΩ§ËΩ£ÈÜºÈë¢ÈëïÈëùÈëóÈëûÈüÑÈüÖÈ†ÄÈ©ñÈ©ôÈ¨ûÈ¨üÈ¨†È±íÈ±òÈ±êÈ±äÈ±çÈ±ãÈ±ïÈ±ôÈ±åÈ±éÈ∑ªÈ∑∑È∑ØÈ∑£È∑´È∑∏È∑§È∑∂È∑°È∑ÆÈ∑¶È∑≤È∑∞È∑¢È∑¨È∑¥È∑≥È∑®È∑≠ÈªÇÈªêÈª≤Èª≥ÈºÜÈºúÈº∏Èº∑Èº∂ÈΩÉÈΩèÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈΩ±ÈΩ∞ÈΩÆÈΩØÂõìÂõçÂ≠éÂ±≠Êî≠Êõ≠ÊõÆÊ¨ìÁÅüÁÅ°ÁÅùÁÅ†Áà£ÁìõÁì•ÁüïÁ§∏Á¶∑Á¶∂Á±™Á∫óÁæâËâ≠ËôÉË†∏Ë†∑Ë†µË°ãËÆîËÆïË∫ûË∫üË∫†Ë∫ùÈÜæÈÜΩÈáÇÈë´Èë®Èë©Èõ•ÈùÜÈùÉÈùáÈüáÈü•È©ûÈ´ïÈ≠ôÈ±£È±ßÈ±¶È±¢È±ûÈ±†È∏ÇÈ∑æÈ∏áÈ∏ÉÈ∏ÜÈ∏ÖÈ∏ÄÈ∏ÅÈ∏âÈ∑øÈ∑ΩÈ∏ÑÈ∫†ÈºûÈΩÜÈΩ¥ÈΩµÈΩ∂ÂõîÊîÆÊñ∏Ê¨òÊ¨ôÊ¨óÊ¨öÁÅ¢Áà¶Áä™ÁüòÁüôÁ§πÁ±©Á±´Á≥∂Á∫öÔøΩ".split("");
    for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 65533) {
        e[D[248][j]] = 63488 + j;
        d[63488 + j] = D[248][j];
    };
    D[249] = "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÁ∫òÁ∫õÁ∫ôËá†Ëá°ËôÜËôáËôàË•πË•∫Ë•ºË•ªËßøËÆòËÆôË∫•Ë∫§Ë∫£ÈëÆÈë≠ÈëØÈë±Èë≥ÈùâÈ°≤È•üÈ±®È±ÆÈ±≠È∏ãÈ∏çÈ∏êÈ∏èÈ∏íÈ∏ëÈ∫°ÈªµÈºâÈΩáÈΩ∏ÈΩªÈΩ∫ÈΩπÂúûÁÅ¶Á±ØË†ºË∂≤Ë∫¶ÈáÉÈë¥Èë∏Èë∂ÈëµÈ©†È±¥È±≥È±±È±µÈ∏îÈ∏ìÈª∂ÈºäÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÈæ§ÁÅ®ÁÅ•Á≥∑Ëô™Ë†æË†ΩË†øËÆûË≤úË∫©ËªâÈùãÈ°≥È°¥È£åÈ•°È¶´È©§È©¶È©ßÈ¨§È∏ïÈ∏óÈΩàÊàáÊ¨ûÁàßËôåË∫®ÈíÇÈíÄÈíÅÈ©©È©®È¨ÆÈ∏ôÁà©ËôãËÆüÈíÉÈ±πÈ∫∑ÁôµÈ©´È±∫È∏ùÁÅ©ÁÅ™È∫§ÈΩæÈΩâÈæòÁ¢ÅÈäπË£èÂ¢ªÊÅíÁ≤ßÂ´∫‚ïî‚ï¶‚ïó‚ï†‚ï¨‚ï£‚ïö‚ï©‚ïù‚ïí‚ï§‚ïï‚ïû‚ï™‚ï°‚ïò‚ïß‚ïõ‚ïì‚ï•‚ïñ‚ïü‚ï´‚ï¢‚ïô‚ï®‚ïú‚ïë‚ïê‚ï≠‚ïÆ‚ï∞‚ïØ‚ñìÔøΩ".split("");
    for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 65533) {
        e[D[249][j]] = 63744 + j;
        d[63744 + j] = D[249][j];
    };
    return {
        "enc": e,
        "dec": d
    };
})();
cptable[1250] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201aÔøΩ\u201e\u2026\u2020\u2021ÔøΩ\u2030≈†\u2039≈ö≈§≈Ω≈πÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014ÔøΩ‚Ñ¢≈°\u203a≈õ≈•≈æ≈∫\xa0ÀáÀò≈Å¬§ƒÑ¬¶¬ß¬®¬©≈û¬´¬¨¬≠¬Æ≈ª¬∞¬±Àõ≈Ç¬¥¬µ¬∂¬∑¬∏ƒÖ≈ü¬ªƒΩÀùƒæ≈º≈î√Å√ÇƒÇ√ÑƒπƒÜ√áƒå√âƒò√ãƒö√ç√éƒéƒê≈É≈á√ì√î≈ê√ñ√ó≈ò≈Æ√ö≈∞√ú√ù≈¢√ü≈ï√°√¢ƒÉ√§ƒ∫ƒá√ßƒç√©ƒô√´ƒõ√≠√Æƒèƒë≈Ñ≈à√≥√¥≈ë√∂√∑≈ô≈Ø√∫≈±√º√Ω≈£Àô",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1251] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~–Ç–É\u201a—ì\u201e\u2026\u2020\u2021‚Ç¨\u2030–â\u2039–ä–å–ã–è—í\u2018\u2019\u201c\u201d\u2022\u2013\u2014ÔøΩ‚Ñ¢—ô\u203a—ö—ú—õ—ü\xa0–é—û–à¬§“ê¬¶¬ß–Å¬©–Ñ¬´¬¨¬≠¬Æ–á¬∞¬±–Ü—ñ“ë¬µ¬∂¬∑—ë‚Ññ—î¬ª—ò–Ö—ï—ó–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1252] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201a∆í\u201e\u2026\u2020\u2021ÀÜ\u2030≈†\u2039≈íÔøΩ≈ΩÔøΩÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014Àú‚Ñ¢≈°\u203a≈ìÔøΩ≈æ≈∏\xa0¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú√ù√û√ü√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1253] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201a∆í\u201e\u2026\u2020\u2021ÔøΩ\u2030ÔøΩ\u2039ÔøΩÔøΩÔøΩÔøΩÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014ÔøΩ‚Ñ¢ÔøΩ\u203aÔøΩÔøΩÔøΩÔøΩ\xa0ŒÖŒÜ¬£¬§¬•¬¶¬ß¬®¬©ÔøΩ¬´¬¨¬≠¬Æ\u2015¬∞¬±¬≤¬≥ŒÑ¬µ¬∂¬∑ŒàŒâŒä¬ªŒå¬ΩŒéŒèŒêŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°ÔøΩŒ£Œ§Œ•Œ¶ŒßŒ®Œ©Œ™Œ´Œ¨Œ≠ŒÆŒØŒ∞Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâœäœãœåœçœéÔøΩ",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1254] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201a∆í\u201e\u2026\u2020\u2021ÀÜ\u2030≈†\u2039≈íÔøΩÔøΩÔøΩÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014Àú‚Ñ¢≈°\u203a≈ìÔøΩÔøΩ≈∏\xa0¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√èƒû√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√úƒ∞≈û√ü√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Øƒü√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√ºƒ±≈ü√ø",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1255] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201a∆í\u201e\u2026\u2020\u2021ÀÜ\u2030ÔøΩ\u2039ÔøΩÔøΩÔøΩÔøΩÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014Àú‚Ñ¢ÔøΩ\u203aÔøΩÔøΩÔøΩÔøΩ\xa0¬°¬¢¬£‚Ç™¬•¬¶¬ß¬®¬©√ó¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π√∑¬ª¬º¬Ω¬æ¬ø÷∞÷±÷≤÷≥÷¥÷µ÷∂÷∑÷∏÷πÔøΩ÷ª÷º÷Ω÷æ÷ø◊Ä◊Å◊Ç◊É◊∞◊±◊≤◊≥◊¥ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ◊ê◊ë◊í◊ì◊î◊ï◊ñ◊ó◊ò◊ô◊ö◊õ◊ú◊ù◊û◊ü◊†◊°◊¢◊£◊§◊•◊¶◊ß◊®◊©◊™ÔøΩÔøΩ\u200e\u200fÔøΩ",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1256] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨Ÿæ\u201a∆í\u201e\u2026\u2020\u2021ÀÜ\u2030Ÿπ\u2039≈í⁄Ü⁄ò⁄à⁄Ø\u2018\u2019\u201c\u201d\u2022\u2013\u2014⁄©‚Ñ¢⁄ë\u203a≈ì\u200c\u200d⁄∫\xa0ÿå¬¢¬£¬§¬•¬¶¬ß¬®¬©⁄æ¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬πÿõ¬ª¬º¬Ω¬æÿü€Åÿ°ÿ¢ÿ£ÿ§ÿ•ÿ¶ÿßÿ®ÿ©ÿ™ÿ´ÿ¨ÿ≠ÿÆÿØÿ∞ÿ±ÿ≤ÿ≥ÿ¥ÿµÿ∂√óÿ∑ÿ∏ÿπÿ∫ŸÄŸÅŸÇŸÉ√†ŸÑ√¢ŸÖŸÜŸáŸà√ß√®√©√™√´ŸâŸä√Æ√ØŸãŸåŸçŸé√¥ŸèŸê√∑Ÿë√πŸí√ª√º\u200e\u200f€í",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1257] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201aÔøΩ\u201e\u2026\u2020\u2021ÔøΩ\u2030ÔøΩ\u2039ÔøΩ¬®Àá¬∏ÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014ÔøΩ‚Ñ¢ÔøΩ\u203aÔøΩ¬ØÀõÔøΩ\xa0ÔøΩ¬¢¬£¬§ÔøΩ¬¶¬ß√ò¬©≈ñ¬´¬¨¬≠¬Æ√Ü¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑√∏¬π≈ó¬ª¬º¬Ω¬æ√¶ƒÑƒÆƒÄƒÜ√Ñ√Öƒòƒíƒå√â≈πƒñƒ¢ƒ∂ƒ™ƒª≈†≈É≈Ö√ì≈å√ï√ñ√ó≈≤≈Å≈ö≈™√ú≈ª≈Ω√üƒÖƒØƒÅƒá√§√•ƒôƒìƒç√©≈∫ƒóƒ£ƒ∑ƒ´ƒº≈°≈Ñ≈Ü√≥≈ç√µ√∂√∑≈≥≈Ç≈õ≈´√º≈º≈æÀô",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[1258] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~‚Ç¨ÔøΩ\u201a∆í\u201e\u2026\u2020\u2021ÀÜ\u2030ÔøΩ\u2039≈íÔøΩÔøΩÔøΩÔøΩ\u2018\u2019\u201c\u201d\u2022\u2013\u2014Àú‚Ñ¢ÔøΩ\u203a≈ìÔøΩÔøΩ≈∏\xa0¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√ÇƒÇ√Ñ√Ö√Ü√á√à√â√ä√ãÃÄ√ç√é√èƒê√ëÃâ√ì√î∆†√ñ√ó√ò√ô√ö√õ√ú∆ØÃÉ√ü√†√°√¢ƒÉ√§√•√¶√ß√®√©√™√´ÃÅ√≠√Æ√Øƒë√±Ã£√≥√¥∆°√∂√∑√∏√π√∫√ª√º∆∞‚Ç´√ø",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[10000] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~√Ñ√Ö√á√â√ë√ñ√ú√°√†√¢√§√£√•√ß√©√®√™√´√≠√¨√Æ√Ø√±√≥√≤√¥√∂√µ√∫√π√ª√º\u2020¬∞¬¢¬£¬ß\u2022¬∂√ü¬Æ¬©‚Ñ¢¬¥¬®‚â†√Ü√ò‚àû¬±‚â§‚â•¬•¬µ‚àÇ‚àë‚àèœÄ‚à´¬™¬∫‚Ñ¶√¶√∏¬ø¬°¬¨‚àö∆í‚âà‚àÜ¬´¬ª\u2026\xa0√Ä√É√ï≈í≈ì\u2013\u2014\u201c\u201d\u2018\u2019√∑‚óä√ø≈∏\u2044¬§\u2039\u203aÔ¨ÅÔ¨Ç\u2021¬∑\u201a\u201e\u2030√Ç√ä√Å√ã√à√ç√é√è√å√ì√îÔøΩ√í√ö√õ√ôƒ±ÀÜÀú¬ØÀòÀôÀö¬∏ÀùÀõÀá",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[10006] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~√Ñ¬π¬≤√â¬≥√ñ√úŒÖ√†√¢√§ŒÑ¬®√ß√©√®√™√´¬£‚Ñ¢√Æ√Ø\u2022¬Ω\u2030√¥√∂¬¶¬≠√π√ª√º\u2020ŒìŒîŒòŒõŒûŒ†√ü¬Æ¬©Œ£Œ™¬ß‚â†¬∞ŒáŒë¬±‚â§‚â•¬•ŒíŒïŒñŒóŒôŒöŒúŒ¶Œ´Œ®Œ©Œ¨Œù¬¨ŒüŒ°‚âàŒ§¬´¬ª\u2026\xa0Œ•ŒßŒÜŒà≈ì\u2013\u2015\u201c\u201d\u2018\u2019√∑ŒâŒäŒåŒéŒ≠ŒÆŒØœåŒèœçŒ±Œ≤œàŒ¥ŒµœÜŒ≥Œ∑ŒπŒæŒ∫ŒªŒºŒΩŒøœÄœéœÅœÉœÑŒ∏œâœÇœáœÖŒ∂œäœãŒêŒ∞ÔøΩ",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[10007] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø\u2020¬∞¬¢¬£¬ß\u2022¬∂–Ü¬Æ¬©‚Ñ¢–Ç—í‚â†–É—ì‚àû¬±‚â§‚â•—ñ¬µ‚àÇ–à–Ñ—î–á—ó–â—ô–ä—ö—ò–Ö¬¨‚àö∆í‚âà‚àÜ¬´¬ª\u2026\xa0–ã—õ–å—ú—ï\u2013\u2014\u201c\u201d\u2018\u2019√∑\u201e–é—û–è—ü‚Ññ–Å—ë—è–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é¬§",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[10029] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~√ÑƒÄƒÅ√âƒÑ√ñ√ú√°ƒÖƒå√§ƒçƒÜƒá√©≈π≈∫ƒé√≠ƒèƒíƒìƒñ√≥ƒó√¥√∂√µ√∫ƒöƒõ√º\u2020¬∞ƒò¬£¬ß\u2022¬∂√ü¬Æ¬©‚Ñ¢ƒô¬®‚â†ƒ£ƒÆƒØƒ™‚â§‚â•ƒ´ƒ∂‚àÇ‚àë≈ÇƒªƒºƒΩƒæƒπƒ∫≈Ö≈Ü≈É¬¨‚àö≈Ñ≈á‚àÜ¬´¬ª\u2026\xa0≈à≈ê√ï≈ë≈å\u2013\u2014\u201c\u201d\u2018\u2019√∑‚óä≈ç≈î≈ï≈ò\u2039\u203a≈ô≈ñ≈ó≈†\u201a\u201e≈°≈ö≈õ√Å≈§≈•√ç≈Ω≈æ≈™√ì√î≈´≈Æ√ö≈Ø≈∞≈±≈≤≈≥√ù√Ωƒ∑≈ª≈Å≈ºƒ¢Àá",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[10079] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~√Ñ√Ö√á√â√ë√ñ√ú√°√†√¢√§√£√•√ß√©√®√™√´√≠√¨√Æ√Ø√±√≥√≤√¥√∂√µ√∫√π√ª√º√ù¬∞¬¢¬£¬ß\u2022¬∂√ü¬Æ¬©‚Ñ¢¬¥¬®‚â†√Ü√ò‚àû¬±‚â§‚â•¬•¬µ‚àÇ‚àë‚àèœÄ‚à´¬™¬∫‚Ñ¶√¶√∏¬ø¬°¬¨‚àö∆í‚âà‚àÜ¬´¬ª\u2026\xa0√Ä√É√ï≈í≈ì\u2013\u2014\u201c\u201d\u2018\u2019√∑‚óä√ø≈∏\u2044¬§√ê√∞√û√æ√Ω¬∑\u201a\u201e\u2030√Ç√ä√Å√ã√à√ç√é√è√å√ì√îÔøΩ√í√ö√õ√ôƒ±ÀÜÀú¬ØÀòÀôÀö¬∏ÀùÀõÀá",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
cptable[10081] = (function() {
    var d = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\n\v\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~√Ñ√Ö√á√â√ë√ñ√ú√°√†√¢√§√£√•√ß√©√®√™√´√≠√¨√Æ√Ø√±√≥√≤√¥√∂√µ√∫√π√ª√º\u2020¬∞¬¢¬£¬ß\u2022¬∂√ü¬Æ¬©‚Ñ¢¬¥¬®‚â†√Ü√ò‚àû¬±‚â§‚â•¬•¬µ‚àÇ‚àë‚àèœÄ‚à´¬™¬∫‚Ñ¶√¶√∏¬ø¬°¬¨‚àö∆í‚âà‚àÜ¬´¬ª\u2026\xa0√Ä√É√ï≈í≈ì\u2013\u2014\u201c\u201d\u2018\u2019√∑‚óä√ø≈∏ƒûƒüƒ∞ƒ±≈û≈ü\u2021¬∑\u201a\u201e\u2030√Ç√ä√Å√ã√à√ç√é√è√å√ì√îÔøΩ√í√ö√õ√ôÔøΩÀÜÀú¬ØÀòÀôÀö¬∏ÀùÀõÀá",
        D = [],
        e = {};
    for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)  {
            e[d[i]] = i;
        }
        
        D[i] = d.charAt(i);
    }
    return {
        "enc": e,
        "dec": D
    };
})();
if (typeof module !== 'undefined' && module.exports)  {
    module.exports = cptable;
}

/* cputils.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
/*jshint newcap: false */
(function(root, factory) {
    "use strict";
    if (typeof cptable === "undefined") {
        if (typeof require !== "undefined") {
            var cpt = require('./cpt' + 'able');
            if (typeof module !== 'undefined' && module.exports)  {
                module.exports = factory(cpt);
            }
            else  {
                root.cptable = factory(cpt);
            }
            
        } else  {
            throw new Error("cptable not found");
        }
        
    } else  {
        cptable = factory(cptable);
    }
    
}(this, function(cpt) {
    "use strict";
    var magic = {
            "1200": "utf16le",
            "1201": "utf16be",
            "12000": "utf32le",
            "12001": "utf32be",
            "16969": "utf64le",
            "20127": "ascii",
            "65000": "utf7",
            "65001": "utf8"
        };
    var sbcs_cache = [
            874,
            1250,
            1251,
            1252,
            1253,
            1254,
            1255,
            1256,
            10000
        ];
    var dbcs_cache = [
            932,
            936,
            949,
            950
        ];
    var magic_cache = [
            65001
        ];
    var magic_decode = {};
    var magic_encode = {};
    var cpecache = {};
    var cpdcache = {};
    var sfcc = function sfcc(x) {
            return String.fromCharCode(x);
        };
    var cca = function cca(x) {
            return x.charCodeAt(0);
        };
    if (typeof Buffer !== 'undefined') {
        var mdl = 1024,
            mdb = new Buffer(mdl);
        var make_EE = function make_EE(E) {
                var EE = new Buffer(65536);
                for (var i = 0; i < 65536; ++i) EE[i] = 0;
                var keys = Object.keys(E),
                    len = keys.length;
                for (var ee = 0,
                    e = keys[ee]; ee < len; ++ee) {
                    if (!(e = keys[ee]))  {
                        
                        continue;
                    }
                    
                    EE[e.charCodeAt(0)] = E[e];
                }
                return EE;
            };
        var sbcs_encode = function make_sbcs_encode(cp) {
                var EE = make_EE(cpt[cp].enc);
                return function sbcs_e(data, ofmt) {
                    var len = data.length;
                    var out, i, j, D, w;
                    if (typeof data === 'string') {
                        out = Buffer(len);
                        for (i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)];
                    } else if (Buffer.isBuffer(data)) {
                        out = Buffer(2 * len);
                        j = 0;
                        for (i = 0; i < len; ++i) {
                            D = data[i];
                            if (D < 128)  {
                                out[j++] = EE[D];
                            }
                            else if (D < 224) {
                                out[j++] = EE[((D & 31) << 6) + (data[i + 1] & 63)];
                                ++i;
                            } else if (D < 240) {
                                out[j++] = EE[((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63)];
                                i += 2;
                            } else {
                                w = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63);
                                i += 3;
                                if (w < 65536)  {
                                    out[j++] = EE[w];
                                }
                                else {
                                    w -= 65536;
                                    out[j++] = EE[55296 + ((w >> 10) & 1023)];
                                    out[j++] = EE[56320 + (w & 1023)];
                                }
                            }
                        }
                        out.length = j;
                    } else {
                        out = Buffer(len);
                        for (i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)];
                    }
                    if (ofmt === undefined || ofmt === 'buf')  {
                        return out;
                    }
                    
                    if (ofmt !== 'arr')  {
                        return out.toString('binary');
                    }
                    
                    return [].slice.call(out);
                };
            };
        var sbcs_decode = function make_sbcs_decode(cp) {
                var D = cpt[cp].dec;
                var DD = new Buffer(131072),
                    d = 0,
                    c;
                for (d = 0; d < D.length; ++d) {
                    if (!(c = D[d]))  {
                        
                        continue;
                    }
                    
                    var w = c.charCodeAt(0);
                    DD[2 * d] = w & 255;
                    DD[2 * d + 1] = w >> 8;
                }
                return function sbcs_d(data) {
                    var len = data.length,
                        i = 0,
                        j;
                    if (2 * len > mdl) {
                        mdl = 2 * len;
                        mdb = new Buffer(mdl);
                    }
                    if (Buffer.isBuffer(data)) {
                        for (i = 0; i < len; i++) {
                            j = 2 * data[i];
                            mdb[2 * i] = DD[j];
                            mdb[2 * i + 1] = DD[j + 1];
                        }
                    } else if (typeof data === "string") {
                        for (i = 0; i < len; i++) {
                            j = 2 * data.charCodeAt(i);
                            mdb[2 * i] = DD[j];
                            mdb[2 * i + 1] = DD[j + 1];
                        }
                    } else {
                        for (i = 0; i < len; i++) {
                            j = 2 * data[i];
                            mdb[2 * i] = DD[j];
                            mdb[2 * i + 1] = DD[j + 1];
                        }
                    }
                    mdb.length = 2 * len;
                    return mdb.toString('ucs2');
                };
            };
        var dbcs_encode = function make_dbcs_encode(cp) {
                var E = cpt[cp].enc;
                var EE = new Buffer(131072);
                for (var i = 0; i < 131072; ++i) EE[i] = 0;
                var keys = Object.keys(E);
                for (var ee = 0,
                    e = keys[ee]; ee < keys.length; ++ee) {
                    if (!(e = keys[ee]))  {
                        
                        continue;
                    }
                    
                    var f = e.charCodeAt(0);
                    EE[2 * f] = E[e] & 255;
                    EE[2 * f + 1] = E[e] >> 8;
                }
                return function dbcs_e(data, ofmt) {
                    var len = data.length,
                        out = new Buffer(2 * len),
                        i, j, jj, k, D;
                    if (typeof data === 'string') {
                        for (i = k = 0; i < len; ++i) {
                            j = data.charCodeAt(i) * 2;
                            out[k++] = EE[j + 1] || EE[j];
                            if (EE[j + 1] > 0)  {
                                out[k++] = EE[j];
                            }
                            
                        }
                        out.length = k;
                    } else if (Buffer.isBuffer(data)) {
                        for (i = k = 0; i < len; ++i) {
                            D = data[i];
                            if (D < 128)  {
                                j = D;
                            }
                            else if (D < 224) {
                                j = ((D & 31) << 6) + (data[i + 1] & 63);
                                ++i;
                            } else if (D < 240) {
                                j = ((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63);
                                i += 2;
                            } else {
                                j = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63);
                                i += 3;
                            }
                            if (j < 65536) {
                                j *= 2;
                                out[k++] = EE[j + 1] || EE[j];
                                if (EE[j + 1] > 0)  {
                                    out[k++] = EE[j];
                                }
                                
                            } else {
                                jj = j - 65536;
                                j = 2 * (55296 + ((jj >> 10) & 1023));
                                out[k++] = EE[j + 1] || EE[j];
                                if (EE[j + 1] > 0)  {
                                    out[k++] = EE[j];
                                }
                                
                                j = 2 * (56320 + (jj & 1023));
                                out[k++] = EE[j + 1] || EE[j];
                                if (EE[j + 1] > 0)  {
                                    out[k++] = EE[j];
                                }
                                
                            }
                        }
                        out.length = k;
                    } else {
                        for (i = k = 0; i < len; i++) {
                            j = data[i].charCodeAt(0) * 2;
                            out[k++] = EE[j + 1] || EE[j];
                            if (EE[j + 1] > 0)  {
                                out[k++] = EE[j];
                            }
                            
                        }
                    }
                    if (ofmt === undefined || ofmt === 'buf')  {
                        return out;
                    }
                    
                    if (ofmt !== 'arr')  {
                        return out.toString('binary');
                    }
                    
                    return [].slice.call(out);
                };
            };
        var dbcs_decode = function make_dbcs_decode(cp) {
                var D = cpt[cp].dec;
                var DD = new Buffer(131072),
                    d = 0,
                    c,
                    w = 0,
                    j = 0,
                    i = 0;
                for (i = 0; i < 65536; ++i) {
                    DD[2 * i] = 255;
                    DD[2 * i + 1] = 253;
                }
                for (d = 0; d < D.length; ++d) {
                    if (!(c = D[d]))  {
                        
                        continue;
                    }
                    
                    w = c.charCodeAt(0);
                    j = 2 * d;
                    DD[j] = w & 255;
                    DD[j + 1] = w >> 8;
                }
                return function dbcs_d(data) {
                    var len = data.length,
                        out = new Buffer(2 * len),
                        i, j,
                        k = 0;
                    if (Buffer.isBuffer(data)) {
                        for (i = 0; i < len; i++) {
                            j = 2 * data[i];
                            if (DD[j] === 255 && DD[j + 1] === 253) {
                                j = 2 * ((data[i] << 8) + data[i + 1]);
                                ++i;
                            }
                            out[k++] = DD[j];
                            out[k++] = DD[j + 1];
                        }
                    } else if (typeof data === "string") {
                        for (i = 0; i < len; i++) {
                            j = 2 * data.charCodeAt(i);
                            if (DD[j] === 255 && DD[j + 1] === 253) {
                                j = 2 * ((data.charCodeAt(i) << 8) + data.charCodeAt(i + 1));
                                ++i;
                            }
                            out[k++] = DD[j];
                            out[k++] = DD[j + 1];
                        }
                    } else {
                        for (i = 0; i < len; i++) {
                            j = 2 * data[i];
                            if (DD[j] === 255 && DD[j + 1] === 253) {
                                j = 2 * ((data[i] << 8) + data[i + 1]);
                                ++i;
                            }
                            out[k++] = DD[j];
                            out[k++] = DD[j + 1];
                        }
                    }
                    out.length = k;
                    return out.toString('ucs2');
                };
            };
        magic_decode[65001] = function utf8_d(data) {
            var len = data.length,
                w = 0,
                ww = 0;
            if (4 * len > mdl) {
                mdl = 4 * len;
                mdb = new Buffer(mdl);
            }
            mdb.length = 0;
            var i = 0;
            if (len >= 3 && data[0] == 239)  {
                if (data[1] == 187 && data[2] == 191)  {
                    i = 3;
                }
                ;
            }
            
            for (var j = 1,
                k = 0,
                D = 0; i < len; i += j) {
                j = 1;
                D = data[i];
                if (D < 128)  {
                    w = D;
                }
                else if (D < 224) {
                    w = (D & 31) * 64 + (data[i + 1] & 63);
                    j = 2;
                } else if (D < 240) {
                    w = ((D & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
                    j = 3;
                } else {
                    w = (D & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
                    j = 4;
                }
                if (w < 65536) {
                    mdb[k++] = w & 255;
                    mdb[k++] = w >> 8;
                } else {
                    w -= 65536;
                    ww = 55296 + ((w >> 10) & 1023);
                    w = 56320 + (w & 1023);
                    mdb[k++] = ww & 255;
                    mdb[k++] = ww >>> 8;
                    mdb[k++] = w & 255;
                    mdb[k++] = (w >>> 8) & 255;
                }
            }
            mdb.length = k;
            return mdb.toString('ucs2');
        };
        magic_encode[65001] = function utf8_e(data, ofmt) {
            var len = data.length,
                w = 0,
                ww = 0,
                j = 0;
            var direct = typeof data === "string";
            if (4 * len > mdl) {
                mdl = 4 * len;
                mdb = new Buffer(mdl);
            }
            for (var i = 0; i < len; ++i) {
                w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w <= 127)  {
                    mdb[j++] = w;
                }
                else if (w <= 2047) {
                    mdb[j++] = 192 + (w >> 6);
                    mdb[j++] = 128 + (w & 63);
                } else if (w >= 55296 && w <= 57343) {
                    w -= 55296;
                    ++i;
                    ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 56320 + (w << 10);
                    mdb[j++] = 240 + ((ww >>> 18) & 7);
                    mdb[j++] = 144 + ((ww >>> 12) & 63);
                    mdb[j++] = 128 + ((ww >>> 6) & 63);
                    mdb[j++] = 128 + (ww & 63);
                } else {
                    mdb[j++] = 224 + (w >> 12);
                    mdb[j++] = 128 + ((w >> 6) & 63);
                    mdb[j++] = 128 + (w & 63);
                }
            }
            mdb.length = j;
            if (ofmt === undefined || ofmt === 'buf')  {
                return mdb;
            }
            
            if (ofmt !== 'arr')  {
                return mdb.toString('binary');
            }
            
            return [].slice.call(mdb);
        };
    }
    var encache = function encache() {
            if (typeof Buffer !== 'undefined') {
                if (cpdcache[sbcs_cache[0]])  {
                    return;
                }
                
                var i, s;
                for (i = 0; i < sbcs_cache.length; ++i) {
                    s = sbcs_cache[i];
                    if (cpt[s]) {
                        cpdcache[s] = sbcs_decode(s);
                        cpecache[s] = sbcs_encode(s);
                    }
                }
                for (i = 0; i < dbcs_cache.length; ++i) {
                    s = dbcs_cache[i];
                    if (cpt[s]) {
                        cpdcache[s] = dbcs_decode(s);
                        cpecache[s] = dbcs_encode(s);
                    }
                }
                for (i = 0; i < magic_cache.length; ++i) {
                    s = magic_cache[i];
                    if (magic_decode[s])  {
                        cpdcache[s] = magic_decode[s];
                    }
                    
                    if (magic_encode[s])  {
                        cpecache[s] = magic_encode[s];
                    }
                    
                }
            }
        };
    var cp_decache = function cp_decache(cp) {
            cpdcache[cp] = cpecache[cp] = undefined;
        };
    var decache = function decache() {
            if (typeof Buffer !== 'undefined') {
                if (!cpdcache[sbcs_cache[0]])  {
                    return;
                }
                
                sbcs_cache.forEach(cp_decache);
                dbcs_cache.forEach(cp_decache);
                magic_cache.forEach(cp_decache);
            }
            last_enc = last_cp = undefined;
        };
    var cache = {
            encache: encache,
            decache: decache,
            sbcs: sbcs_cache,
            dbcs: dbcs_cache
        };
    encache();
    var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
    var last_enc, last_cp;
    var encode = function encode(cp, data, ofmt) {
            if (cp === last_cp) {
                return last_enc(data, ofmt);
            }
            if (cpecache[cp] !== undefined) {
                last_enc = cpecache[last_cp = cp];
                return last_enc(data, ofmt);
            }
            if (typeof Buffer !== 'undefined' && Buffer.isBuffer(data))  {
                data = data.toString('utf8');
            }
            
            var len = data.length;
            var out = typeof Buffer !== 'undefined' ? new Buffer(4 * len) : [],
                w, i,
                j = 0,
                c, tt, ww;
            var C = cpt[cp],
                E, M;
            if (C && (E = C.enc))  {
                for (i = 0; i < len; ++i , ++j) {
                    w = E[data[i]];
                    out[j] = w & 255;
                    if (w > 255) {
                        out[j] = w >> 8;
                        out[++j] = w & 255;
                    }
                };
            }
            else if ((M = magic[cp]))  {
                switch (M) {
                    case "utf8":
                        if (typeof Buffer !== 'undefined' && typeof data === "string") {
                            out = new Buffer(data, M);
                            j = out.length;
                            break;
                        };
                        for (i = 0; i < len; ++i , ++j) {
                            w = data[i].charCodeAt(0);
                            if (w <= 127)  {
                                out[j] = w;
                            }
                            else if (w <= 2047) {
                                out[j] = 192 + (w >> 6);
                                out[++j] = 128 + (w & 63);
                            } else if (w >= 55296 && w <= 57343) {
                                w -= 55296;
                                ww = data[++i].charCodeAt(0) - 56320 + (w << 10);
                                out[j] = 240 + ((ww >>> 18) & 7);
                                out[++j] = 144 + ((ww >>> 12) & 63);
                                out[++j] = 128 + ((ww >>> 6) & 63);
                                out[++j] = 128 + (ww & 63);
                            } else {
                                out[j] = 224 + (w >> 12);
                                out[++j] = 128 + ((w >> 6) & 63);
                                out[++j] = 128 + (w & 63);
                            }
                        };
                        break;
                    case "ascii":
                        if (typeof Buffer !== 'undefined' && typeof data === "string") {
                            out = new Buffer(data, M);
                            j = out.length;
                            break;
                        };
                        for (i = 0; i < len; ++i , ++j) {
                            w = data[i].charCodeAt(0);
                            if (w <= 127)  {
                                out[j] = w;
                            }
                            else  {
                                throw new Error("bad ascii " + w);
                            }
                            
                        };
                        break;
                    case "utf16le":
                        if (typeof Buffer !== 'undefined' && typeof data === "string") {
                            out = new Buffer(data, M);
                            j = out.length;
                            break;
                        };
                        for (i = 0; i < len; ++i) {
                            w = data[i].charCodeAt(0);
                            out[j++] = w & 255;
                            out[j++] = w >> 8;
                        };
                        break;
                    case "utf16be":
                        for (i = 0; i < len; ++i) {
                            w = data[i].charCodeAt(0);
                            out[j++] = w >> 8;
                            out[j++] = w & 255;
                        };
                        break;
                    case "utf32le":
                        for (i = 0; i < len; ++i) {
                            w = data[i].charCodeAt(0);
                            if (w >= 55296 && w <= 57343)  {
                                w = 65536 + ((w - 55296) << 10) + (data[++i].charCodeAt(0) - 56320);
                            }
                            
                            out[j++] = w & 255;
                            w >>= 8;
                            out[j++] = w & 255;
                            w >>= 8;
                            out[j++] = w & 255;
                            w >>= 8;
                            out[j++] = w & 255;
                        };
                        break;
                    case "utf32be":
                        for (i = 0; i < len; ++i) {
                            w = data[i].charCodeAt(0);
                            if (w >= 55296 && w <= 57343)  {
                                w = 65536 + ((w - 55296) << 10) + (data[++i].charCodeAt(0) - 56320);
                            }
                            
                            out[j + 3] = w & 255;
                            w >>= 8;
                            out[j + 2] = w & 255;
                            w >>= 8;
                            out[j + 1] = w & 255;
                            w >>= 8;
                            out[j] = w & 255;
                            w >>= 8;
                            j += 4;
                        };
                        break;
                    case "utf7":
                        for (i = 0; i < len; i++) {
                            c = data[i];
                            if (c === "+") {
                                out[j++] = 43;
                                out[j++] = 45;
                                
                                continue;
                            }
                            if (SetD.indexOf(c) > -1) {
                                out[j++] = c.charCodeAt(0);
                                
                                continue;
                            }
                            tt = encode(1201, c);
                            out[j++] = 43;
                            out[j++] = BM.charCodeAt(tt[0] >> 2);
                            out[j++] = BM.charCodeAt(((tt[0] & 3) << 4) + ((tt[1] || 0) >> 4));
                            out[j++] = BM.charCodeAt(((tt[1] & 15) << 2) + ((tt[2] || 0) >> 6));
                            out[j++] = 45;
                        };
                        break;
                    default:
                        throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
                };
            }
            else  {
                throw new Error("Unrecognized CP: " + cp);
            }
            
            out.length = j;
            if (typeof Buffer === 'undefined')  {
                return (ofmt == 'str') ? out.map(sfcc).join("") : out;
            }
            
            if (ofmt === undefined || ofmt === 'buf')  {
                return out;
            }
            
            if (ofmt !== 'arr')  {
                return out.toString('binary');
            }
            
            return [].slice.call(out);
        };
    var decode = function decode(cp, data) {
            var F;
            if ((F = cpdcache[cp]))  {
                return F(data);
            }
            
            var len = data.length,
                out = new Array(len),
                w, i,
                j = 1,
                k = 0,
                ww;
            var C = cpt[cp],
                D, M;
            if (C && (D = C.dec)) {
                if (typeof data === "string")  {
                    data = data.split("").map(cca);
                }
                
                for (i = 0; i < len; i += j) {
                    j = 2;
                    w = D[(data[i] << 8) + data[i + 1]];
                    if (!w) {
                        j = 1;
                        w = D[data[i]];
                    }
                    if (!w)  {
                        throw new Error('Unrecognized code: ' + data[i] + ' ' + data[i + j - 1] + ' ' + i + ' ' + j + ' ' + D[data[i]]);
                    }
                    
                    out[k++] = w;
                }
            } else if ((M = magic[cp]))  {
                switch (M) {
                    case "utf8":
                        i = 0;
                        if (len >= 3 && data[0] == 239)  {
                            if (data[1] == 187 && data[2] == 191)  {
                                i = 3;
                            }
                            ;
                        }
                        ;
                        for (; i < len; i += j) {
                            j = 1;
                            if (data[i] < 128)  {
                                w = data[i];
                            }
                            else if (data[i] < 224) {
                                w = (data[i] & 31) * 64 + (data[i + 1] & 63);
                                j = 2;
                            } else if (data[i] < 240) {
                                w = ((data[i] & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
                                j = 3;
                            } else {
                                w = (data[i] & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
                                j = 4;
                            }
                            if (w < 65536) {
                                out[k++] = String.fromCharCode(w);
                            } else {
                                w -= 65536;
                                ww = 55296 + ((w >> 10) & 1023);
                                w = 56320 + (w & 1023);
                                out[k++] = String.fromCharCode(ww);
                                out[k++] = String.fromCharCode(w);
                            }
                        };
                        break;
                    case "ascii":
                        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(data))  {
                            return data.toString(M);
                        }
                        ;
                        for (i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]);
                        k = len;
                        break;
                    case "utf16le":
                        i = 0;
                        if (len >= 2 && data[0] == 255)  {
                            if (data[1] == 254)  {
                                i = 2;
                            }
                            ;
                        }
                        ;
                        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(data))  {
                            return data.toString(M);
                        }
                        ;
                        j = 2;
                        for (; i < len; i += j) {
                            out[k++] = String.fromCharCode((data[i + 1] << 8) + data[i]);
                        };
                        break;
                    case "utf16be":
                        i = 0;
                        if (len >= 2 && data[0] == 254)  {
                            if (data[1] == 255)  {
                                i = 2;
                            }
                            ;
                        }
                        ;
                        j = 2;
                        for (; i < len; i += j) {
                            out[k++] = String.fromCharCode((data[i] << 8) + data[i + 1]);
                        };
                        break;
                    case "utf32le":
                        i = 0;
                        if (len >= 4 && data[0] == 255)  {
                            if (data[1] == 254 && data[2] == 0 && data[3] == 0)  {
                                i = 4;
                            }
                            ;
                        }
                        ;
                        j = 4;
                        for (; i < len; i += j) {
                            w = (data[i + 3] << 24) + (data[i + 2] << 16) + (data[i + 1] << 8) + (data[i]);
                            if (w > 65535) {
                                w -= 65536;
                                out[k++] = String.fromCharCode(55296 + ((w >> 10) & 1023));
                                out[k++] = String.fromCharCode(56320 + (w & 1023));
                            } else  {
                                out[k++] = String.fromCharCode(w);
                            }
                            
                        };
                        break;
                    case "utf32be":
                        i = 0;
                        if (len >= 4 && data[3] == 255)  {
                            if (data[2] == 254 && data[1] == 0 && data[0] == 0)  {
                                i = 4;
                            }
                            ;
                        }
                        ;
                        j = 4;
                        for (; i < len; i += j) {
                            w = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + (data[i + 3]);
                            if (w > 65535) {
                                w -= 65536;
                                out[k++] = String.fromCharCode(55296 + ((w >> 10) & 1023));
                                out[k++] = String.fromCharCode(56320 + (w & 1023));
                            } else  {
                                out[k++] = String.fromCharCode(w);
                            }
                            
                        };
                        break;
                    case "utf7":
                        i = 0;
                        if (len >= 4 && data[0] == 43 && data[1] == 47 && data[2] == 118) {
                            if (len >= 5 && data[3] == 56 && data[4] == 45)  {
                                i = 5;
                            }
                            else if (data[3] == 56 || data[3] == 57 || data[3] == 43 || data[3] == 47)  {
                                i = 4;
                            }
                            
                        };
                        for (; i < len; i += j) {
                            if (data[i] !== 43) {
                                j = 1;
                                out[k++] = String.fromCharCode(data[i]);
                                
                                continue;
                            }
                            j = 1;
                            if (data[i + 1] === 45) {
                                j = 2;
                                out[k++] = "+";
                                
                                continue;
                            }
                            while (String.fromCharCode(data[i + j]).match(/[A-Za-z0-9+\/]/)) j++;
                            var dash = 0;
                            if (data[i + j] === 45) {
                                ++j;
                                dash = 1;
                            }
                            var tt = [];
                            var o64;
                            var c1, c2, c3;
                            var e1, e2, e3, e4;
                            for (var l = 1; l < j - dash; ) {
                                e1 = BM.indexOf(String.fromCharCode(data[i + l++]));
                                e2 = BM.indexOf(String.fromCharCode(data[i + l++]));
                                c1 = e1 << 2 | e2 >> 4;
                                tt.push(c1);
                                e3 = BM.indexOf(String.fromCharCode(data[i + l++]));
                                if (e3 === -1)  {
                                    break;
                                }
                                
                                c2 = (e2 & 15) << 4 | e3 >> 2;
                                tt.push(c2);
                                e4 = BM.indexOf(String.fromCharCode(data[i + l++]));
                                if (e4 === -1)  {
                                    break;
                                }
                                
                                c3 = (e3 & 3) << 6 | e4;
                                if (e4 < 64)  {
                                    tt.push(c3);
                                }
                                
                            }
                            if ((tt.length & 1) === 1)  {
                                tt.length--;
                            }
                            
                            o64 = decode(1201, tt);
                            for (l = 0; l < o64.length; ++l) out[k++] = o64[l];
                        };
                        break;
                    default:
                        throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
                };
            }
            else  {
                throw new Error("Unrecognized CP: " + cp);
            }
            
            out.length = k;
            return out.join("");
        };
    var hascp = function hascp(cp) {
            return cpt[cp] || magic[cp];
        };
    cpt.utils = {
        decode: decode,
        encode: encode,
        hascp: hascp,
        magic: magic,
        cache: cache
    };
    return cpt;
}));

(function() {
    'use strict';
    var ESCAPE_DELIMITERS = [
            '|',
            '^'
        ],
        CELL_DELIMITERS = [
            ',',
            ';',
            '\t',
            '|',
            '^'
        ],
        LINE_DELIMITERS = [
            '\r\n',
            '\r',
            '\n'
        ];
    function isObject(object) {
        var type = typeof object;
        return type === 'function' || type === 'object' && !!object;
    }
    var isArray = Array.isArray || function(object) {
            return toString.call(object) === '[object Array]';
        };
    function isString(object) {
        return typeof object === 'string';
    }
    function isNumber(object) {
        return !isNaN(Number(object));
    }
    function isBoolean(value) {
        return value == false || value == true;
    }
    function isNull(value) {
        return value == null;
    }
    function isPresent(value) {
        return value != null;
    }
    function fallback(value, fallback) {
        return isPresent(value) ? value : fallback;
    }
    function forEach(collection, iterator) {
        for (var _i = 0,
            _len = collection.length; _i < _len; _i += 1) {
            if (iterator(collection[_i], _i) === false)  {
                break;
            }
            
        }
    }
    function buildCell(index) {
        return 'attrs[' + index + ']';
    }
    function castCell(value, index) {
        if (isNumber(value)) {
            return 'Number(' + buildCell(index) + ')';
        } else if (isBoolean(value)) {
            return 'Boolean(' + buildCell(index) + ' == true)';
        } else {
            return 'String(' + buildCell(index) + ')';
        }
    }
    function buildConstructor(cast, values, attrs) {
        var definition = [];
        if (arguments.length == 2) {
            if (cast) {
                if (isArray(cast)) {
                    forEach(values, function(value, index) {
                        definition.push(cast[index] + '(' + buildCell(index) + ')');
                    });
                } else {
                    forEach(values, function(value, index) {
                        definition.push(castCell(value, index));
                    });
                }
            } else {
                forEach(values, function(value, index) {
                    definition.push(buildCell(index));
                });
            }
            definition = 'return [' + definition.join(',') + ']';
        } else {
            if (cast) {
                if (isArray(cast)) {
                    forEach(values, function(value, index) {
                        definition.push('"' + attrs[index] + '": ' + cast[index] + '(' + buildCell(index) + ')');
                    });
                } else {
                    forEach(values, function(value, index) {
                        definition.push('"' + attrs[index] + '": ' + castCell(value, index));
                    });
                }
            } else {
                forEach(values, function(value, index) {
                    definition.push('"' + attrs[index] + '": ' + buildCell(index));
                });
            }
            definition = 'return {' + definition.join(',') + '}';
        }
        return new Function('attrs', definition);
    }
    function detectDelimiter(string, delimiters) {
        var count = 0,
            detected;
        forEach(delimiters, function(delimiter) {
            var needle = delimiter,
                matches;
            if (ESCAPE_DELIMITERS.indexOf(delimiter) != -1) {
                needle = '\\' + needle;
            }
            matches = string.match(new RegExp(needle, 'g'));
            if (matches && matches.length > count) {
                count = matches.length;
                detected = delimiter;
            }
        });
        return (detected || delimiters[0]);
    }
    var CSV = (function() {
            function CSV(data, options) {
                if (!options)  {
                    options = {};
                }
                
                if (isArray(data)) {
                    this.mode = 'encode';
                } else if (isString(data)) {
                    this.mode = 'parse';
                } else {
                    throw new Error("Incompatible format!");
                }
                this.data = data;
                this.options = {
                    header: fallback(options.header, false),
                    cast: fallback(options.cast, true)
                };
                var lineDelimiter = options.lineDelimiter || options.line,
                    cellDelimiter = options.cellDelimiter || options.delimiter;
                if (this.isParser()) {
                    this.options.lineDelimiter = lineDelimiter || detectDelimiter(this.data, LINE_DELIMITERS);
                    this.options.cellDelimiter = cellDelimiter || detectDelimiter(this.data, CELL_DELIMITERS);
                    this.data = normalizeCSV(this.data, this.options.lineDelimiter);
                } else if (this.isEncoder()) {
                    this.options.lineDelimiter = lineDelimiter || '\r\n';
                    this.options.cellDelimiter = cellDelimiter || ',';
                }
            }
            function invoke(method, constructor, attributes) {
                method(new constructor(attributes));
            }
            function normalizeCSV(text, lineDelimiter) {
                if (text.slice(-lineDelimiter.length) != lineDelimiter)  {
                    text += lineDelimiter;
                }
                
                return text;
            }
            CSV.prototype.set = function(setting, value) {
                return this.options[setting] = value;
            };
            CSV.prototype.isParser = function() {
                return this.mode == 'parse';
            };
            CSV.prototype.isEncoder = function() {
                return this.mode == 'encode';
            };
            CSV.prototype.parse = function(callback) {
                if (this.mode != 'parse')  {
                    return;
                }
                
                if (this.data.trim().length === 0)  {
                    return [];
                }
                
                var data = this.data,
                    options = this.options,
                    header = options.header,
                    current = {
                        cell: '',
                        line: []
                    },
                    flag, record, response;
                if (!callback) {
                    response = [];
                    callback = function(record) {
                        response.push(record);
                    };
                }
                function resetFlags() {
                    flag = {
                        escaped: false,
                        quote: false,
                        cell: true
                    };
                }
                function resetCell() {
                    current.cell = '';
                }
                function resetLine() {
                    current.line = [];
                }
                function saveCell(cell) {
                    current.line.push(flag.escaped ? cell.slice(1, -1).replace(/""/g, '"') : cell);
                    resetCell();
                    resetFlags();
                }
                function saveLastCell(cell) {
                    saveCell(cell.slice(0, 1 - options.lineDelimiter.length));
                }
                function saveLine() {
                    if (header) {
                        if (isArray(header)) {
                            record = buildConstructor(options.cast, current.line, header);
                            saveLine = function() {
                                invoke(callback, record, current.line);
                            };
                            saveLine();
                        } else {
                            header = current.line;
                        }
                    } else {
                        if (!record) {
                            record = buildConstructor(options.cast, current.line);
                        }
                        saveLine = function() {
                            invoke(callback, record, current.line);
                        };
                        saveLine();
                    }
                }
                if (options.lineDelimiter.length == 1)  {
                    saveLastCell = saveCell;
                }
                
                var dataLength = data.length,
                    cellDelimiter = options.cellDelimiter.charCodeAt(0),
                    lineDelimiter = options.lineDelimiter.charCodeAt(options.lineDelimiter.length - 1),
                    _i, _c, _ch;
                resetFlags();
                for (_i = 0 , _c = 0; _i < dataLength; _i++) {
                    _ch = data.charCodeAt(_i);
                    if (flag.cell) {
                        flag.cell = false;
                        if (_ch == 34) {
                            flag.escaped = true;
                            
                            continue;
                        }
                    }
                    if (flag.escaped && _ch == 34) {
                        flag.quote = !flag.quote;
                        
                        continue;
                    }
                    if ((flag.escaped && flag.quote) || !flag.escaped) {
                        if (_ch == cellDelimiter) {
                            saveCell(current.cell + data.slice(_c, _i));
                            _c = _i + 1;
                        } else if (_ch == lineDelimiter) {
                            saveLastCell(current.cell + data.slice(_c, _i));
                            _c = _i + 1;
                            saveLine();
                            resetLine();
                        }
                    }
                }
                if (response) {
                    return response;
                } else {
                    return this;
                }
            };
            function serializeType(object) {
                if (isArray(object)) {
                    return 'array';
                } else if (isObject(object)) {
                    return 'object';
                } else if (isString(object)) {
                    return 'string';
                } else if (isNull(object)) {
                    return 'null';
                } else {
                    return 'primitive';
                }
            }
            CSV.prototype.serialize = {
                "object": function(object) {
                    var that = this,
                        attributes = Object.keys(object),
                        serialized = Array(attributes.length);
                    forEach(attributes, function(attr, index) {
                        serialized[index] = that[serializeType(object[attr])](object[attr]);
                    });
                    return serialized;
                },
                "array": function(array) {
                    var that = this,
                        serialized = Array(array.length);
                    forEach(array, function(value, index) {
                        serialized[index] = that[serializeType(value)](value);
                    });
                    return serialized;
                },
                "string": function(string) {
                    return '"' + String(string).replace(/"/g, '""') + '"';
                },
                "null": function(value) {
                    return '';
                },
                "primitive": function(value) {
                    return value;
                }
            };
            CSV.prototype.encode = function(callback) {
                if (this.mode != 'encode')  {
                    return;
                }
                
                if (this.data.length == 0)  {
                    return '';
                }
                
                var data = this.data,
                    options = this.options,
                    header = options.header,
                    sample = data[0],
                    serialize = this.serialize,
                    offset = 0,
                    attributes, response;
                if (!callback) {
                    response = Array(data.length);
                    callback = function(record, index) {
                        response[index + offset] = record;
                    };
                }
                function serializeLine(record) {
                    return record.join(options.cellDelimiter);
                }
                if (header) {
                    if (!isArray(header)) {
                        attributes = Object.keys(sample);
                        header = attributes;
                    }
                    callback(serializeLine(serialize.array(header)), 0);
                    offset = 1;
                }
                var recordType = serializeType(sample),
                    map;
                if (recordType == 'array') {
                    if (isArray(options.cast)) {
                        map = Array(options.cast.length);
                        forEach(options.cast, function(type, index) {
                            map[index] = type.toLowerCase();
                        });
                    } else {
                        map = Array(sample.length);
                        forEach(sample, function(value, index) {
                            map[index] = serializeType(value);
                        });
                    }
                    forEach(data, function(record, recordIndex) {
                        var serializedRecord = Array(map.length);
                        forEach(record, function(value, valueIndex) {
                            serializedRecord[valueIndex] = serialize[map[valueIndex]](value);
                        });
                        callback(serializeLine(serializedRecord), recordIndex);
                    });
                } else if (recordType == 'object') {
                    attributes = Object.keys(sample);
                    if (isArray(options.cast)) {
                        map = Array(options.cast.length);
                        forEach(options.cast, function(type, index) {
                            map[index] = type.toLowerCase();
                        });
                    } else {
                        map = Array(attributes.length);
                        forEach(attributes, function(attr, index) {
                            map[index] = serializeType(sample[attr]);
                        });
                    }
                    forEach(data, function(record, recordIndex) {
                        var serializedRecord = Array(attributes.length);
                        forEach(attributes, function(attr, attrIndex) {
                            serializedRecord[attrIndex] = serialize[map[attrIndex]](record[attr]);
                        });
                        callback(serializeLine(serializedRecord), recordIndex);
                    });
                }
                if (response) {
                    return response.join(options.lineDelimiter);
                } else {
                    return this;
                }
            };
            CSV.prototype.forEach = function(callback) {
                return this[this.mode](callback);
            };
            return CSV;
        })();
    CSV.parse = function(data, options) {
        return new CSV(data, options).parse();
    };
    CSV.encode = function(data, options) {
        return new CSV(data, options).encode();
    };
    CSV.forEach = function(data, options, callback) {
        if (arguments.length == 2) {
            callback = options;
        }
        return new CSV(data, options).forEach(callback);
    };
    if (typeof define === "function" && define.amd) {
        define('CSV', [], function() {
            return CSV;
        });
    } else if (typeof module === "object" && module.exports) {
        module.exports = CSV;
    } else if (window) {
        window.CSV = CSV;
    }
})();

(function() {
    var FuzzySet = function(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {
            var fuzzyset = {
                    version: '0.0.1'
                };
            // default options
            arr = arr || [];
            fuzzyset.gramSizeLower = gramSizeLower || 2;
            fuzzyset.gramSizeUpper = gramSizeUpper || 3;
            fuzzyset.useLevenshtein = useLevenshtein || true;
            // define all the object functions and attributes
            fuzzyset.exactSet = {};
            fuzzyset.matchDict = {};
            fuzzyset.items = {};
            // helper functions
            var levenshtein = function(str1, str2) {
                    var current = [],
                        prev, value;
                    for (var i = 0; i <= str2.length; i++) for (var j = 0; j <= str1.length; j++) {
                        if (i && j)  {
                            if (str1.charAt(j - 1) === str2.charAt(i - 1))  {
                                value = prev;
                            }
                            else  {
                                value = Math.min(current[j], current[j - 1], prev) + 1;
                            }
                            ;
                        }
                        else  {
                            value = i + j;
                        }
                        
                        prev = current[j];
                        current[j] = value;
                    }
                    return current.pop();
                };
            // return an edit distance from 0 to 1
            var _distance = function(str1, str2) {
                    if (str1 === null && str2 === null)  {
                        throw 'Trying to compare two null values';
                    }
                    
                    if (str1 === null || str2 === null)  {
                        return 0;
                    }
                    
                    str1 = String(str1);
                    str2 = String(str2);
                    var distance = levenshtein(str1, str2);
                    if (str1.length > str2.length) {
                        return 1 - distance / str1.length;
                    } else {
                        return 1 - distance / str2.length;
                    }
                };
            var _nonWordRe = /[^\w, ]+/;
            var _iterateGrams = function(value, gramSize) {
                    gramSize = gramSize || 2;
                    var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',
                        lenDiff = gramSize - simplified.length,
                        results = [];
                    if (lenDiff > 0) {
                        for (var i = 0; i < lenDiff; ++i) {
                            value += '-';
                        }
                    }
                    for (var i = 0; i < simplified.length - gramSize + 1; ++i) {
                        results.push(simplified.slice(i, i + gramSize));
                    }
                    return results;
                };
            var _gramCounter = function(value, gramSize) {
                    // return an object where key=gram, value=number of occurrences
                    gramSize = gramSize || 2;
                    var result = {},
                        grams = _iterateGrams(value, gramSize),
                        i = 0;
                    for (i; i < grams.length; ++i) {
                        if (grams[i] in result) {
                            result[grams[i]] += 1;
                        } else {
                            result[grams[i]] = 1;
                        }
                    }
                    return result;
                };
            // the main functions
            fuzzyset.get = function(value, defaultValue) {
                // check for value in set, returning defaultValue or null if none found
                var result = this._get(value);
                if (!result && defaultValue) {
                    return defaultValue;
                }
                return result;
            };
            fuzzyset._get = function(value) {
                var normalizedValue = this._normalizeStr(value),
                    result = this.exactSet[normalizedValue];
                if (result) {
                    return [
                        [
                            1,
                            result
                        ]
                    ];
                }
                var results = [];
                // start with high gram size and if there are no results, go to lower gram sizes
                for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {
                    results = this.__get(value, gramSize);
                    if (results) {
                        return results;
                    }
                }
                return null;
            };
            fuzzyset.__get = function(value, gramSize) {
                var normalizedValue = this._normalizeStr(value),
                    matches = {},
                    gramCounts = _gramCounter(normalizedValue, gramSize),
                    items = this.items[gramSize],
                    sumOfSquareGramCounts = 0,
                    gram, gramCount, i, index, otherGramCount;
                for (gram in gramCounts) {
                    gramCount = gramCounts[gram];
                    sumOfSquareGramCounts += Math.pow(gramCount, 2);
                    if (gram in this.matchDict) {
                        for (i = 0; i < this.matchDict[gram].length; ++i) {
                            index = this.matchDict[gram][i][0];
                            otherGramCount = this.matchDict[gram][i][1];
                            if (index in matches) {
                                matches[index] += gramCount * otherGramCount;
                            } else {
                                matches[index] = gramCount * otherGramCount;
                            }
                        }
                    }
                }
                function isEmptyObject(obj) {
                    for (var prop in obj) {
                        if (obj.hasOwnProperty(prop))  {
                            return false;
                        }
                        
                    }
                    return true;
                }
                if (isEmptyObject(matches)) {
                    return null;
                }
                var vectorNormal = Math.sqrt(sumOfSquareGramCounts),
                    results = [],
                    matchScore;
                // build a results list of [score, str]
                for (var matchIndex in matches) {
                    matchScore = matches[matchIndex];
                    results.push([
                        matchScore / (vectorNormal * items[matchIndex][0]),
                        items[matchIndex][1]
                    ]);
                }
                var sortDescending = function(a, b) {
                        if (a[0] < b[0]) {
                            return 1;
                        } else if (a[0] > b[0]) {
                            return -1;
                        } else {
                            return 0;
                        }
                    };
                results.sort(sortDescending);
                if (this.useLevenshtein) {
                    var newResults = [],
                        endIndex = Math.min(50, results.length);
                    // truncate somewhat arbitrarily to 50
                    for (var i = 0; i < endIndex; ++i) {
                        newResults.push([
                            _distance(results[i][1], normalizedValue),
                            results[i][1]
                        ]);
                    }
                    results = newResults;
                    results.sort(sortDescending);
                }
                var newResults = [];
                for (var i = 0; i < results.length; ++i) {
                    if (results[i][0] == results[0][0]) {
                        newResults.push([
                            results[i][0],
                            this.exactSet[results[i][1]]
                        ]);
                    }
                }
                return newResults;
            };
            fuzzyset.add = function(value) {
                var normalizedValue = this._normalizeStr(value);
                if (normalizedValue in this.exactSet) {
                    return false;
                }
                var i = this.gramSizeLower;
                for (i; i < this.gramSizeUpper + 1; ++i) {
                    this._add(value, i);
                }
            };
            fuzzyset._add = function(value, gramSize) {
                var normalizedValue = this._normalizeStr(value),
                    items = this.items[gramSize] || [],
                    index = items.length;
                items.push(0);
                var gramCounts = _gramCounter(normalizedValue, gramSize),
                    sumOfSquareGramCounts = 0,
                    gram, gramCount;
                for (gram in gramCounts) {
                    gramCount = gramCounts[gram];
                    sumOfSquareGramCounts += Math.pow(gramCount, 2);
                    if (gram in this.matchDict) {
                        this.matchDict[gram].push([
                            index,
                            gramCount
                        ]);
                    } else {
                        this.matchDict[gram] = [
                            [
                                index,
                                gramCount
                            ]
                        ];
                    }
                }
                var vectorNormal = Math.sqrt(sumOfSquareGramCounts);
                items[index] = [
                    vectorNormal,
                    normalizedValue
                ];
                this.items[gramSize] = items;
                this.exactSet[normalizedValue] = value;
            };
            fuzzyset._normalizeStr = function(str) {
                if (Object.prototype.toString.call(str) !== '[object String]')  {
                    throw 'Must use a string as argument to FuzzySet functions';
                }
                
                return str.toLowerCase();
            };
            // return length of items in set
            fuzzyset.length = function() {
                var count = 0,
                    prop;
                for (prop in this.exactSet) {
                    if (this.exactSet.hasOwnProperty(prop)) {
                        count += 1;
                    }
                }
                return count;
            };
            // return is set is empty
            fuzzyset.isEmpty = function() {
                for (var prop in this.exactSet) {
                    if (this.exactSet.hasOwnProperty(prop)) {
                        return false;
                    }
                }
                return true;
            };
            // return list of values loaded into set
            fuzzyset.values = function() {
                var values = [],
                    prop;
                for (prop in this.exactSet) {
                    if (this.exactSet.hasOwnProperty(prop)) {
                        values.push(this.exactSet[prop]);
                    }
                }
                return values;
            };
            // initialization
            var i = fuzzyset.gramSizeLower;
            for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {
                fuzzyset.items[i] = [];
            }
            // add all the items to the set
            for (i = 0; i < arr.length; ++i) {
                fuzzyset.add(arr[i]);
            }
            return fuzzyset;
        };
    var root = this;
    // Export the fuzzyset object for **CommonJS**, with backwards-compatibility
    // for the old `require()` API. If we're not in CommonJS, add `_` to the
    // global object.
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = FuzzySet;
        root.FuzzySet = FuzzySet;
    } else {
        root.FuzzySet = FuzzySet;
    }
})();

/**

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2012 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See LICENSE.markdown.

Usage:
   zip = new JSZip();
   zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
   zip.folder("images").file("smile.gif", base64Data, {base64: true});
   zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
   zip.remove("tempfile");

   base64zip = zip.generate();

**/
// We use strict, but it should not be placed outside of a function because
// the environment is shared inside the browser.
// "use strict";
/**
 * Representation a of zip file in js
 * @constructor
 * @param {String=|ArrayBuffer=|Uint8Array=|Buffer=} data the data to load, if any (optional).
 * @param {Object=} options the options for creating this objects (optional).
 */
var JSZip = function(data, options) {
        // object containing the files :
        // {
        //   "folder/" : {...},
        //   "folder/data.txt" : {...}
        // }
        this.files = {};
        // Where we are in the hierarchy
        this.root = "";
        if (data) {
            this.load(data, options);
        }
    };
JSZip.signature = {
    LOCAL_FILE_HEADER: "PK\x03\x04",
    CENTRAL_FILE_HEADER: "PK\x01\x02",
    CENTRAL_DIRECTORY_END: "PK\x05\x06",
    ZIP64_CENTRAL_DIRECTORY_LOCATOR: "PK\x06\x07",
    ZIP64_CENTRAL_DIRECTORY_END: "PK\x06\x06",
    DATA_DESCRIPTOR: "PK\x07\b"
};
// Default properties for a new file
JSZip.defaults = {
    base64: false,
    binary: false,
    dir: false,
    date: null,
    compression: null
};
/*
 * List features that require a modern browser, and if the current browser support them.
 */
JSZip.support = {
    // contains true if JSZip can read/generate ArrayBuffer, false otherwise.
    arraybuffer: (function() {
        return typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
    })(),
    // contains true if JSZip can read/generate nodejs Buffer, false otherwise.
    nodebuffer: (function() {
        return typeof Buffer !== "undefined";
    })(),
    // contains true if JSZip can read/generate Uint8Array, false otherwise.
    uint8array: (function() {
        return typeof Uint8Array !== "undefined";
    })(),
    // contains true if JSZip can read/generate Blob, false otherwise.
    blob: (function() {
        // the spec started with BlobBuilder then replaced it with a construtor for Blob.
        // Result : we have browsers that :
        // * know the BlobBuilder (but with prefix)
        // * know the Blob constructor
        // * know about Blob but not about how to build them
        // About the "=== 0" test : if given the wrong type, it may be converted to a string.
        // Instead of an empty content, we will get "[object Uint8Array]" for example.
        if (typeof ArrayBuffer === "undefined") {
            return false;
        }
        var buffer = new ArrayBuffer(0);
        try {
            return new Blob([
                buffer
            ], {
                type: "application/zip"
            }).size === 0;
        } catch (e) {}
        try {
            var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new BlobBuilder();
            builder.append(buffer);
            return builder.getBlob('application/zip').size === 0;
        } catch (e) {}
        return false;
    })()
};
JSZip.prototype = (function() {
    var textEncoder, textDecoder;
    if (JSZip.support.uint8array && typeof TextEncoder === "function" && typeof TextDecoder === "function") {
        textEncoder = new TextEncoder("utf-8");
        textDecoder = new TextDecoder("utf-8");
    }
    /**
    * Returns the raw data of a ZipObject, decompress the content if necessary.
    * @param {ZipObject} file the file to use.
    * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
    */
    var getRawData = function(file) {
            if (file._data instanceof JSZip.CompressedObject) {
                file._data = file._data.getContent();
                file.options.binary = true;
                file.options.base64 = false;
                if (JSZip.utils.getTypeOf(file._data) === "uint8array") {
                    var copy = file._data;
                    // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
                    // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
                    file._data = new Uint8Array(copy.length);
                    // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
                    if (copy.length !== 0) {
                        file._data.set(copy, 0);
                    }
                }
            }
            return file._data;
        };
    /**
    * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
    * @param {ZipObject} file the file to use.
    * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
    */
    var getBinaryData = function(file) {
            var result = getRawData(file),
                type = JSZip.utils.getTypeOf(result);
            if (type === "string") {
                if (!file.options.binary) {
                    // unicode text !
                    // unicode string => binary string is a painful process, check if we can avoid it.
                    if (textEncoder) {
                        return textEncoder.encode(result);
                    }
                    if (JSZip.support.nodebuffer) {
                        return new Buffer(result, "utf-8");
                    }
                }
                return file.asBinary();
            }
            return result;
        };
    /**
    * Transform this._data into a string.
    * @param {function} filter a function String -> String, applied if not null on the result.
    * @return {String} the string representing this._data.
    */
    var dataToString = function(asUTF8) {
            var result = getRawData(this);
            if (result === null || typeof result === "undefined") {
                return "";
            }
            // if the data is a base64 string, we decode it before checking the encoding !
            if (this.options.base64) {
                result = JSZip.base64.decode(result);
            }
            if (asUTF8 && this.options.binary) {
                // JSZip.prototype.utf8decode supports arrays as input
                // skip to array => string step, utf8decode will do it.
                result = JSZip.prototype.utf8decode(result);
            } else {
                // no utf8 transformation, do the array => string step.
                result = JSZip.utils.transformTo("string", result);
            }
            if (!asUTF8 && !this.options.binary) {
                result = JSZip.prototype.utf8encode(result);
            }
            return result;
        };
    /**
    * A simple object representing a file in the zip file.
    * @constructor
    * @param {string} name the name of the file
    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
    * @param {Object} options the options of the file
    */
    var ZipObject = function(name, data, options) {
            this.name = name;
            this._data = data;
            this.options = options;
        };
    ZipObject.prototype = {
        /**
       * Return the content as UTF8 string.
       * @return {string} the UTF8 string.
       */
        asText: function() {
            return dataToString.call(this, true);
        },
        /**
       * Returns the binary content.
       * @return {string} the content as binary.
       */
        asBinary: function() {
            return dataToString.call(this, false);
        },
        /**
       * Returns the content as a nodejs Buffer.
       * @return {Buffer} the content as a Buffer.
       */
        asNodeBuffer: function() {
            var result = getBinaryData(this);
            return JSZip.utils.transformTo("nodebuffer", result);
        },
        /**
       * Returns the content as an Uint8Array.
       * @return {Uint8Array} the content as an Uint8Array.
       */
        asUint8Array: function() {
            var result = getBinaryData(this);
            return JSZip.utils.transformTo("uint8array", result);
        },
        /**
       * Returns the content as an ArrayBuffer.
       * @return {ArrayBuffer} the content as an ArrayBufer.
       */
        asArrayBuffer: function() {
            return this.asUint8Array().buffer;
        }
    };
    /**
    * Transform an integer into a string in hexadecimal.
    * @private
    * @param {number} dec the number to convert.
    * @param {number} bytes the number of bytes to generate.
    * @returns {string} the result.
    */
    var decToHex = function(dec, bytes) {
            var hex = "",
                i;
            for (i = 0; i < bytes; i++) {
                hex += String.fromCharCode(dec & 255);
                dec = dec >>> 8;
            }
            return hex;
        };
    /**
    * Merge the objects passed as parameters into a new one.
    * @private
    * @param {...Object} var_args All objects to merge.
    * @return {Object} a new object with the data of the others.
    */
    var extend = function() {
            var result = {},
                i, attr;
            for (i = 0; i < arguments.length; i++) {
                // arguments is not enumerable in some browsers
                for (attr in arguments[i]) {
                    if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                        result[attr] = arguments[i][attr];
                    }
                }
            }
            return result;
        };
    /**
    * Transforms the (incomplete) options from the user into the complete
    * set of options to create a file.
    * @private
    * @param {Object} o the options from the user.
    * @return {Object} the complete set of options.
    */
    var prepareFileAttrs = function(o) {
            o = o || {};
            /*jshint -W041 */
            if (o.base64 === true && o.binary == null) {
                o.binary = true;
            }
            /*jshint +W041 */
            o = extend(o, JSZip.defaults);
            o.date = o.date || new Date();
            if (o.compression !== null)  {
                o.compression = o.compression.toUpperCase();
            }
            
            return o;
        };
    /**
    * Add a file in the current folder.
    * @private
    * @param {string} name the name of the file
    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
    * @param {Object} o the options of the file
    * @return {Object} the new file.
    */
    var fileAdd = function(name, data, o) {
            // be sure sub folders exist
            var parent = parentFolder(name),
                dataType = JSZip.utils.getTypeOf(data);
            if (parent) {
                folderAdd.call(this, parent);
            }
            o = prepareFileAttrs(o);
            if (o.dir || data === null || typeof data === "undefined") {
                o.base64 = false;
                o.binary = false;
                data = null;
            } else if (dataType === "string") {
                if (o.binary && !o.base64) {
                    // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
                    if (o.optimizedBinaryString !== true) {
                        // this is a string, not in a base64 format.
                        // Be sure that this is a correct "binary string"
                        data = JSZip.utils.string2binary(data);
                    }
                }
            } else {
                // arraybuffer, uint8array, ...
                o.base64 = false;
                o.binary = true;
                if (!dataType && !(data instanceof JSZip.CompressedObject)) {
                    throw new Error("The data of '" + name + "' is in an unsupported format !");
                }
                // special case : it's way easier to work with Uint8Array than with ArrayBuffer
                if (dataType === "arraybuffer") {
                    data = JSZip.utils.transformTo("uint8array", data);
                }
            }
            var object = new ZipObject(name, data, o);
            this.files[name] = object;
            return object;
        };
    /**
    * Find the parent folder of the path.
    * @private
    * @param {string} path the path to use
    * @return {string} the parent folder, or ""
    */
    var parentFolder = function(path) {
            if (path.slice(-1) == '/') {
                path = path.substring(0, path.length - 1);
            }
            var lastSlash = path.lastIndexOf('/');
            return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
        };
    /**
    * Add a (sub) folder in the current folder.
    * @private
    * @param {string} name the folder's name
    * @return {Object} the new folder.
    */
    var folderAdd = function(name) {
            // Check the name ends with a /
            if (name.slice(-1) != "/") {
                name += "/";
            }
            // IE doesn't like substr(-1)
            // Does this folder already exist?
            if (!this.files[name]) {
                fileAdd.call(this, name, null, {
                    dir: true
                });
            }
            return this.files[name];
        };
    /**
    * Generate a JSZip.CompressedObject for a given zipOject.
    * @param {ZipObject} file the object to read.
    * @param {JSZip.compression} compression the compression to use.
    * @return {JSZip.CompressedObject} the compressed result.
    */
    var generateCompressedObjectFrom = function(file, compression) {
            var result = new JSZip.CompressedObject(),
                content;
            // the data has not been decompressed, we might reuse things !
            if (file._data instanceof JSZip.CompressedObject) {
                result.uncompressedSize = file._data.uncompressedSize;
                result.crc32 = file._data.crc32;
                if (result.uncompressedSize === 0 || file.options.dir) {
                    compression = JSZip.compressions['STORE'];
                    result.compressedContent = "";
                    result.crc32 = 0;
                } else if (file._data.compressionMethod === compression.magic) {
                    result.compressedContent = file._data.getCompressedContent();
                } else {
                    content = file._data.getContent();
                    // need to decompress / recompress
                    result.compressedContent = compression.compress(JSZip.utils.transformTo(compression.compressInputType, content));
                }
            } else {
                // have uncompressed data
                content = getBinaryData(file);
                if (!content || content.length === 0 || file.options.dir) {
                    compression = JSZip.compressions['STORE'];
                    content = "";
                }
                result.uncompressedSize = content.length;
                result.crc32 = this.crc32(content);
                result.compressedContent = compression.compress(JSZip.utils.transformTo(compression.compressInputType, content));
            }
            result.compressedSize = result.compressedContent.length;
            result.compressionMethod = compression.magic;
            return result;
        };
    /**
    * Generate the various parts used in the construction of the final zip file.
    * @param {string} name the file name.
    * @param {ZipObject} file the file content.
    * @param {JSZip.CompressedObject} compressedObject the compressed object.
    * @param {number} offset the current offset from the start of the zip file.
    * @return {object} the zip parts.
    */
    var generateZipParts = function(name, file, compressedObject, offset) {
            var data = compressedObject.compressedContent,
                utfEncodedFileName = this.utf8encode(file.name),
                useUTF8 = utfEncodedFileName !== file.name,
                o = file.options,
                dosTime, dosDate;
            // date
            // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
            // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
            // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html
            dosTime = o.date.getHours();
            dosTime = dosTime << 6;
            dosTime = dosTime | o.date.getMinutes();
            dosTime = dosTime << 5;
            dosTime = dosTime | o.date.getSeconds() / 2;
            dosDate = o.date.getFullYear() - 1980;
            dosDate = dosDate << 4;
            dosDate = dosDate | (o.date.getMonth() + 1);
            dosDate = dosDate << 5;
            dosDate = dosDate | o.date.getDate();
            var header = "";
            // version needed to extract
            header += "\n\x00";
            // general purpose bit flag
            // set bit 11 if utf8
            header += useUTF8 ? "\x00\b" : "\x00\x00";
            // compression method
            header += compressedObject.compressionMethod;
            // last mod file time
            header += decToHex(dosTime, 2);
            // last mod file date
            header += decToHex(dosDate, 2);
            // crc-32
            header += decToHex(compressedObject.crc32, 4);
            // compressed size
            header += decToHex(compressedObject.compressedSize, 4);
            // uncompressed size
            header += decToHex(compressedObject.uncompressedSize, 4);
            // file name length
            header += decToHex(utfEncodedFileName.length, 2);
            // extra field length
            header += "\x00\x00";
            var fileRecord = JSZip.signature.LOCAL_FILE_HEADER + header + utfEncodedFileName;
            var dirRecord = JSZip.signature.CENTRAL_FILE_HEADER + // version made by (00: DOS)
                "\x14\x00" + // file header (common to file and central directory)
                header + // file comment length
                "\x00\x00" + // disk number start
                "\x00\x00" + // internal file attributes TODO
                "\x00\x00" + // external file attributes
                (file.options.dir === true ? "\x10\x00\x00\x00" : "\x00\x00\x00\x00") + // relative offset of local header
                decToHex(offset, 4) + // file name
                utfEncodedFileName;
            return {
                fileRecord: fileRecord,
                dirRecord: dirRecord,
                compressedObject: compressedObject
            };
        };
    /**
    * An object to write any content to a string.
    * @constructor
    */
    var StringWriter = function() {
            this.data = [];
        };
    StringWriter.prototype = {
        /**
       * Append any content to the current string.
       * @param {Object} input the content to add.
       */
        append: function(input) {
            input = JSZip.utils.transformTo("string", input);
            this.data.push(input);
        },
        /**
       * Finalize the construction an return the result.
       * @return {string} the generated string.
       */
        finalize: function() {
            return this.data.join("");
        }
    };
    /**
    * An object to write any content to an Uint8Array.
    * @constructor
    * @param {number} length The length of the array.
    */
    var Uint8ArrayWriter = function(length) {
            this.data = new Uint8Array(length);
            this.index = 0;
        };
    Uint8ArrayWriter.prototype = {
        /**
       * Append any content to the current array.
       * @param {Object} input the content to add.
       */
        append: function(input) {
            if (input.length !== 0) {
                // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
                input = JSZip.utils.transformTo("uint8array", input);
                this.data.set(input, this.index);
                this.index += input.length;
            }
        },
        /**
       * Finalize the construction an return the result.
       * @return {Uint8Array} the generated array.
       */
        finalize: function() {
            return this.data;
        }
    };
    // return the actual prototype of JSZip
    return {
        /**
       * Read an existing zip and merge the data in the current JSZip object.
       * The implementation is in jszip-load.js, don't forget to include it.
       * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
       * @param {Object} options Options for loading the stream.
       *  options.base64 : is the stream in base64 ? default : false
       * @return {JSZip} the current JSZip object
       */
        load: function(stream, options) {
            throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
        },
        /**
       * Filter nested files/folders with the specified function.
       * @param {Function} search the predicate to use :
       * function (relativePath, file) {...}
       * It takes 2 arguments : the relative path and the file.
       * @return {Array} An array of matching elements.
       */
        filter: function(search) {
            var result = [],
                filename, relativePath, file, fileClone;
            for (filename in this.files) {
                if (!this.files.hasOwnProperty(filename)) {
                    
                    continue;
                }
                file = this.files[filename];
                // return a new object, don't let the user mess with our internal objects :)
                fileClone = new ZipObject(file.name, file._data, extend(file.options));
                relativePath = filename.slice(this.root.length, filename.length);
                if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
                search(relativePath, fileClone)) {
                    // and the file matches the function
                    result.push(fileClone);
                }
            }
            return result;
        },
        /**
       * Add a file to the zip file, or search a file.
       * @param   {string|RegExp} name The name of the file to add (if data is defined),
       * the name of the file to find (if no data) or a regex to match files.
       * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
       * @param   {Object} o     File options
       * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
       * a file (when searching by string) or an array of files (when searching by regex).
       */
        file: function(name, data, o) {
            if (arguments.length === 1) {
                if (JSZip.utils.isRegExp(name)) {
                    var regexp = name;
                    return this.filter(function(relativePath, file) {
                        return !file.options.dir && regexp.test(relativePath);
                    });
                } else {
                    // text
                    return this.filter(function(relativePath, file) {
                        return !file.options.dir && relativePath === name;
                    })[0] || null;
                }
            } else {
                // more than one argument : we have data !
                name = this.root + name;
                fileAdd.call(this, name, data, o);
            }
            return this;
        },
        /**
       * Add a directory to the zip file, or search.
       * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
       * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
       */
        folder: function(arg) {
            if (!arg) {
                return this;
            }
            if (JSZip.utils.isRegExp(arg)) {
                return this.filter(function(relativePath, file) {
                    return file.options.dir && arg.test(relativePath);
                });
            }
            // else, name is a new folder
            var name = this.root + arg;
            var newFolder = folderAdd.call(this, name);
            // Allow chaining by returning a new object with this folder as the root
            var ret = this.clone();
            ret.root = newFolder.name;
            return ret;
        },
        /**
       * Delete a file, or a directory and all sub-files, from the zip
       * @param {string} name the name of the file to delete
       * @return {JSZip} this JSZip object
       */
        remove: function(name) {
            name = this.root + name;
            var file = this.files[name];
            if (!file) {
                // Look for any folders
                if (name.slice(-1) != "/") {
                    name += "/";
                }
                file = this.files[name];
            }
            if (file) {
                if (!file.options.dir) {
                    // file
                    delete this.files[name];
                } else {
                    // folder
                    var kids = this.filter(function(relativePath, file) {
                            return file.name.slice(0, name.length) === name;
                        });
                    for (var i = 0; i < kids.length; i++) {
                        delete this.files[kids[i].name];
                    }
                }
            }
            return this;
        },
        /**
       * Generate the complete zip file
       * @param {Object} options the options to generate the zip file :
       * - base64, (deprecated, use type instead) true to generate base64.
       * - compression, "STORE" by default.
       * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
       * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
       */
        generate: function(options) {
            options = extend(options || {}, {
                base64: true,
                compression: "STORE",
                type: "base64"
            });
            JSZip.utils.checkSupport(options.type);
            var zipData = [],
                localDirLength = 0,
                centralDirLength = 0,
                writer, i;
            // first, generate all the zip parts.
            for (var name in this.files) {
                if (!this.files.hasOwnProperty(name)) {
                    
                    continue;
                }
                var file = this.files[name];
                var compressionName = file.options.compression || options.compression.toUpperCase();
                var compression = JSZip.compressions[compressionName];
                if (!compression) {
                    throw new Error(compressionName + " is not a valid compression method !");
                }
                var compressedObject = generateCompressedObjectFrom.call(this, file, compression);
                var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);
                localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
                centralDirLength += zipPart.dirRecord.length;
                zipData.push(zipPart);
            }
            var dirEnd = "";
            // end of central dir signature
            dirEnd = JSZip.signature.CENTRAL_DIRECTORY_END + // number of this disk
            "\x00\x00" + // number of the disk with the start of the central directory
            "\x00\x00" + // total number of entries in the central directory on this disk
            decToHex(zipData.length, 2) + // total number of entries in the central directory
            decToHex(zipData.length, 2) + // size of the central directory   4 bytes
            decToHex(centralDirLength, 4) + // offset of start of central directory with respect to the starting disk number
            decToHex(localDirLength, 4) + // .ZIP file comment length
            "\x00\x00";
            // we have all the parts (and the total length)
            // time to create a writer !
            switch (options.type.toLowerCase()) {
                case "uint8array":
                case "arraybuffer":
                case "blob":
                case "nodebuffer":
                    writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
                    break;
                // case "base64" :
                // case "string" :
                default:
                    writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
                    break;
            }
            for (i = 0; i < zipData.length; i++) {
                writer.append(zipData[i].fileRecord);
                writer.append(zipData[i].compressedObject.compressedContent);
            }
            for (i = 0; i < zipData.length; i++) {
                writer.append(zipData[i].dirRecord);
            }
            writer.append(dirEnd);
            var zip = writer.finalize();
            switch (options.type.toLowerCase()) {
                // case "zip is an Uint8Array"
                case "uint8array":
                case "arraybuffer":
                case "nodebuffer":
                    return JSZip.utils.transformTo(options.type.toLowerCase(), zip);
                case "blob":
                    return JSZip.utils.arrayBuffer2Blob(JSZip.utils.transformTo("arraybuffer", zip));
                // case "zip is a string"
                case "base64":
                    return (options.base64) ? JSZip.base64.encode(zip) : zip;
                default:
                    // case "string" :
                    return zip;
            }
        },
        /**
       *
       *  Javascript crc32
       *  http://www.webtoolkit.info/
       *
       */
        crc32: function crc32(input, crc) {
            if (typeof input === "undefined" || !input.length) {
                return 0;
            }
            var isArray = JSZip.utils.getTypeOf(input) !== "string";
            var table = [
                    0,
                    1996959894,
                    3.993919788E9,
                    2.567524794E9,
                    124634137,
                    1886057615,
                    3.915621685E9,
                    2.657392035E9,
                    249268274,
                    2044508324,
                    3.77211523E9,
                    2.547177864E9,
                    162941995,
                    2125561021,
                    3.887607047E9,
                    2.428444049E9,
                    498536548,
                    1789927666,
                    4.089016648E9,
                    2.227061214E9,
                    450548861,
                    1843258603,
                    4.107580753E9,
                    2.211677639E9,
                    325883990,
                    1684777152,
                    4.251122042E9,
                    2.321926636E9,
                    335633487,
                    1661365465,
                    4.195302755E9,
                    2.366115317E9,
                    997073096,
                    1281953886,
                    3.579855332E9,
                    2.724688242E9,
                    1006888145,
                    1258607687,
                    3.524101629E9,
                    2.768942443E9,
                    901097722,
                    1119000684,
                    3.686517206E9,
                    2.898065728E9,
                    853044451,
                    1172266101,
                    3.705015759E9,
                    2.882616665E9,
                    651767980,
                    1373503546,
                    3.369554304E9,
                    3.218104598E9,
                    565507253,
                    1454621731,
                    3.485111705E9,
                    3.099436303E9,
                    671266974,
                    1594198024,
                    3.32273093E9,
                    2.970347812E9,
                    795835527,
                    1483230225,
                    3.244367275E9,
                    3.060149565E9,
                    1994146192,
                    31158534,
                    2.563907772E9,
                    4.02371793E9,
                    1907459465,
                    112637215,
                    2.680153253E9,
                    3.904427059E9,
                    2013776290,
                    251722036,
                    2.517215374E9,
                    3.77583004E9,
                    2137656763,
                    141376813,
                    2.439277719E9,
                    3.865271297E9,
                    1802195444,
                    476864866,
                    2.238001368E9,
                    4.066508878E9,
                    1812370925,
                    453092731,
                    2.181625025E9,
                    4.111451223E9,
                    1706088902,
                    314042704,
                    2.344532202E9,
                    4.240017532E9,
                    1658658271,
                    366619977,
                    2.362670323E9,
                    4.224994405E9,
                    1303535960,
                    984961486,
                    2.747007092E9,
                    3.569037538E9,
                    1256170817,
                    1037604311,
                    2.765210733E9,
                    3.554079995E9,
                    1131014506,
                    879679996,
                    2.909243462E9,
                    3.663771856E9,
                    1141124467,
                    855842277,
                    2.852801631E9,
                    3.708648649E9,
                    1342533948,
                    654459306,
                    3.188396048E9,
                    3.373015174E9,
                    1466479909,
                    544179635,
                    3.110523913E9,
                    3.462522015E9,
                    1591671054,
                    702138776,
                    2.96646045E9,
                    3.352799412E9,
                    1504918807,
                    783551873,
                    3.082640443E9,
                    3.233442989E9,
                    3.988292384E9,
                    2.596254646E9,
                    62317068,
                    1957810842,
                    3.939845945E9,
                    2.647816111E9,
                    81470997,
                    1943803523,
                    3.81491893E9,
                    2.489596804E9,
                    225274430,
                    2053790376,
                    3.826175755E9,
                    2.466906013E9,
                    167816743,
                    2097651377,
                    4.02755258E9,
                    2.265490386E9,
                    503444072,
                    1762050814,
                    4.150417245E9,
                    2.154129355E9,
                    426522225,
                    1852507879,
                    4.275313526E9,
                    2.31231792E9,
                    282753626,
                    1742555852,
                    4.189708143E9,
                    2.394877945E9,
                    397917763,
                    1622183637,
                    3.604390888E9,
                    2.714866558E9,
                    953729732,
                    1340076626,
                    3.518719985E9,
                    2.797360999E9,
                    1068828381,
                    1219638859,
                    3.62474185E9,
                    2.936675148E9,
                    906185462,
                    1090812512,
                    3.747672003E9,
                    2.825379669E9,
                    829329135,
                    1181335161,
                    3.412177804E9,
                    3.160834842E9,
                    628085408,
                    1382605366,
                    3.423369109E9,
                    3.138078467E9,
                    570562233,
                    1426400815,
                    3.317316542E9,
                    2.998733608E9,
                    733239954,
                    1555261956,
                    3.268935591E9,
                    3.050360625E9,
                    752459403,
                    1541320221,
                    2.60707192E9,
                    3.96597303E9,
                    1969922972,
                    40735498,
                    2.617837225E9,
                    3.943577151E9,
                    1913087877,
                    83908371,
                    2.512341634E9,
                    3.803740692E9,
                    2075208622,
                    213261112,
                    2.463272603E9,
                    3.855990285E9,
                    2094854071,
                    198958881,
                    2.262029012E9,
                    4.05726061E9,
                    1759359992,
                    534414190,
                    2.176718541E9,
                    4.139329115E9,
                    1873836001,
                    414664567,
                    2.282248934E9,
                    4.279200368E9,
                    1711684554,
                    285281116,
                    2.405801727E9,
                    4.167216745E9,
                    1634467795,
                    376229701,
                    2.685067896E9,
                    3.608007406E9,
                    1308918612,
                    956543938,
                    2.808555105E9,
                    3.495958263E9,
                    1231636301,
                    1047427035,
                    2.932959818E9,
                    3.654703836E9,
                    1088359270,
                    936918000,
                    2.847714899E9,
                    3.736837829E9,
                    1202900863,
                    817233897,
                    3.183342108E9,
                    3.40123713E9,
                    1404277552,
                    615818150,
                    3.134207493E9,
                    3.453421203E9,
                    1423857449,
                    601450431,
                    3.009837614E9,
                    3.294710456E9,
                    1567103746,
                    711928724,
                    3.020668471E9,
                    3.272380065E9,
                    1510334235,
                    755167117
                ];
            if (typeof (crc) == "undefined") {
                crc = 0;
            }
            var x = 0;
            var y = 0;
            var _byte = 0;
            crc = crc ^ (-1);
            for (var i = 0,
                iTop = input.length; i < iTop; i++) {
                _byte = isArray ? input[i] : input.charCodeAt(i);
                y = (crc ^ _byte) & 255;
                x = table[y];
                crc = (crc >>> 8) ^ x;
            }
            return crc ^ (-1);
        },
        // Inspired by http://my.opera.com/GreyWyvern/blog/show.dml/1725165
        clone: function() {
            var newObj = new JSZip();
            for (var i in this) {
                if (typeof this[i] !== "function") {
                    newObj[i] = this[i];
                }
            }
            return newObj;
        },
        /**
       * http://www.webtoolkit.info/javascript-utf8.html
       */
        utf8encode: function(string) {
            // TextEncoder + Uint8Array to binary string is faster than checking every bytes on long strings.
            // http://jsperf.com/utf8encode-vs-textencoder
            // On short strings (file names for example), the TextEncoder API is (currently) slower.
            if (textEncoder) {
                var u8 = textEncoder.encode(string);
                return JSZip.utils.transformTo("string", u8);
            }
            if (JSZip.support.nodebuffer) {
                return JSZip.utils.transformTo("string", new Buffer(string, "utf-8"));
            }
            // array.join may be slower than string concatenation but generates less objects (less time spent garbage collecting).
            // See also http://jsperf.com/array-direct-assignment-vs-push/31
            var result = [],
                resIndex = 0;
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    result[resIndex++] = String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    result[resIndex++] = String.fromCharCode((c >> 6) | 192);
                    result[resIndex++] = String.fromCharCode((c & 63) | 128);
                } else {
                    result[resIndex++] = String.fromCharCode((c >> 12) | 224);
                    result[resIndex++] = String.fromCharCode(((c >> 6) & 63) | 128);
                    result[resIndex++] = String.fromCharCode((c & 63) | 128);
                }
            }
            return result.join("");
        },
        /**
       * http://www.webtoolkit.info/javascript-utf8.html
       */
        utf8decode: function(input) {
            var result = [],
                resIndex = 0;
            var type = JSZip.utils.getTypeOf(input);
            var isArray = type !== "string";
            var i = 0;
            var c = 0,
                c1 = 0,
                c2 = 0,
                c3 = 0;
            // check if we can use the TextDecoder API
            // see http://encoding.spec.whatwg.org/#api
            if (textDecoder) {
                return textDecoder.decode(JSZip.utils.transformTo("uint8array", input));
            }
            if (JSZip.support.nodebuffer) {
                return JSZip.utils.transformTo("nodebuffer", input).toString("utf-8");
            }
            while (i < input.length) {
                c = isArray ? input[i] : input.charCodeAt(i);
                if (c < 128) {
                    result[resIndex++] = String.fromCharCode(c);
                    i++;
                } else if ((c > 191) && (c < 224)) {
                    c2 = isArray ? input[i + 1] : input.charCodeAt(i + 1);
                    result[resIndex++] = String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = isArray ? input[i + 1] : input.charCodeAt(i + 1);
                    c3 = isArray ? input[i + 2] : input.charCodeAt(i + 2);
                    result[resIndex++] = String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }
            return result.join("");
        }
    };
}());
/*
 * Compression methods
 * This object is filled in as follow :
 * name : {
 *    magic // the 2 bytes indentifying the compression method
 *    compress // function, take the uncompressed content and return it compressed.
 *    uncompress // function, take the compressed content and return it uncompressed.
 *    compressInputType // string, the type accepted by the compress method. null to accept everything.
 *    uncompressInputType // string, the type accepted by the uncompress method. null to accept everything.
 * }
 *
 * STORE is the default compression method, so it's included in this file.
 * Other methods should go to separated files : the user wants modularity.
 */
JSZip.compressions = {
    "STORE": {
        magic: "\x00\x00",
        compress: function(content) {
            return content;
        },
        // no compression
        uncompress: function(content) {
            return content;
        },
        // no compression
        compressInputType: null,
        uncompressInputType: null
    }
};
(function() {
    JSZip.utils = {
        /**
       * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
       * @param {string} str the string to transform.
       * @return {String} the binary string.
       */
        string2binary: function(str) {
            var result = "";
            for (var i = 0; i < str.length; i++) {
                result += String.fromCharCode(str.charCodeAt(i) & 255);
            }
            return result;
        },
        /**
       * Create a Uint8Array from the string.
       * @param {string} str the string to transform.
       * @return {Uint8Array} the typed array.
       * @throws {Error} an Error if the browser doesn't support the requested feature.
       * @deprecated : use JSZip.utils.transformTo instead.
       */
        string2Uint8Array: function(str) {
            return JSZip.utils.transformTo("uint8array", str);
        },
        /**
       * Create a string from the Uint8Array.
       * @param {Uint8Array} array the array to transform.
       * @return {string} the string.
       * @throws {Error} an Error if the browser doesn't support the requested feature.
       * @deprecated : use JSZip.utils.transformTo instead.
       */
        uint8Array2String: function(array) {
            return JSZip.utils.transformTo("string", array);
        },
        /**
       * Create a blob from the given ArrayBuffer.
       * @param {ArrayBuffer} buffer the buffer to transform.
       * @return {Blob} the result.
       * @throws {Error} an Error if the browser doesn't support the requested feature.
       */
        arrayBuffer2Blob: function(buffer) {
            JSZip.utils.checkSupport("blob");
            try {
                // Blob constructor
                return new Blob([
                    buffer
                ], {
                    type: "application/zip"
                });
            } catch (e) {}
            try {
                // deprecated, browser only, old way
                var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                var builder = new BlobBuilder();
                builder.append(buffer);
                return builder.getBlob('application/zip');
            } catch (e) {}
            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
        },
        /**
       * Create a blob from the given string.
       * @param {string} str the string to transform.
       * @return {Blob} the result.
       * @throws {Error} an Error if the browser doesn't support the requested feature.
       */
        string2Blob: function(str) {
            var buffer = JSZip.utils.transformTo("arraybuffer", str);
            return JSZip.utils.arrayBuffer2Blob(buffer);
        }
    };
    /**
    * The identity function.
    * @param {Object} input the input.
    * @return {Object} the same input.
    */
    function identity(input) {
        return input;
    }
    /**
    * Fill in an array with a string.
    * @param {String} str the string to use.
    * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
    * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
    */
    function stringToArrayLike(str, array) {
        for (var i = 0; i < str.length; ++i) {
            array[i] = str.charCodeAt(i) & 255;
        }
        return array;
    }
    /**
    * Transform an array-like object to a string.
    * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
    * @return {String} the result.
    */
    function arrayLikeToString(array) {
        // Performances notes :
        // --------------------
        // String.fromCharCode.apply(null, array) is the fastest, see
        // see http://jsperf.com/converting-a-uint8array-to-a-string/2
        // but the stack is limited (and we can get huge arrays !).
        //
        // result += String.fromCharCode(array[i]); generate too many strings !
        //
        // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
        var chunk = 65536;
        var result = [],
            len = array.length,
            type = JSZip.utils.getTypeOf(array),
            k = 0;
        var canUseApply = true;
        try {
            switch (type) {
                case "uint8array":
                    String.fromCharCode.apply(null, new Uint8Array(0));
                    break;
                case "nodebuffer":
                    String.fromCharCode.apply(null, new Buffer(0));
                    break;
            }
        } catch (e) {
            canUseApply = false;
        }
        // no apply : slow and painful algorithm
        // default browser on android 4.*
        if (!canUseApply) {
            var resultStr = "";
            for (var i = 0; i < array.length; i++) {
                resultStr += String.fromCharCode(array[i]);
            }
            return resultStr;
        }
        while (k < len && chunk > 1) {
            try {
                if (type === "array" || type === "nodebuffer") {
                    result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
                } else {
                    result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
                }
                k += chunk;
            } catch (e) {
                chunk = Math.floor(chunk / 2);
            }
        }
        return result.join("");
    }
    /**
    * Copy the data from an array-like to an other array-like.
    * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
    * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
    * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
    */
    function arrayLikeToArrayLike(arrayFrom, arrayTo) {
        for (var i = 0; i < arrayFrom.length; i++) {
            arrayTo[i] = arrayFrom[i];
        }
        return arrayTo;
    }
    // a matrix containing functions to transform everything into everything.
    var transform = {};
    // string to ?
    transform["string"] = {
        "string": identity,
        "array": function(input) {
            return stringToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function(input) {
            return transform["string"]["uint8array"](input).buffer;
        },
        "uint8array": function(input) {
            return stringToArrayLike(input, new Uint8Array(input.length));
        },
        "nodebuffer": function(input) {
            return stringToArrayLike(input, new Buffer(input.length));
        }
    };
    // array to ?
    transform["array"] = {
        "string": arrayLikeToString,
        "array": identity,
        "arraybuffer": function(input) {
            return (new Uint8Array(input)).buffer;
        },
        "uint8array": function(input) {
            return new Uint8Array(input);
        },
        "nodebuffer": function(input) {
            return new Buffer(input);
        }
    };
    // arraybuffer to ?
    transform["arraybuffer"] = {
        "string": function(input) {
            return arrayLikeToString(new Uint8Array(input));
        },
        "array": function(input) {
            return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
        },
        "arraybuffer": identity,
        "uint8array": function(input) {
            return new Uint8Array(input);
        },
        "nodebuffer": function(input) {
            return new Buffer(new Uint8Array(input));
        }
    };
    // uint8array to ?
    transform["uint8array"] = {
        "string": arrayLikeToString,
        "array": function(input) {
            return arrayLikeToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function(input) {
            return input.buffer;
        },
        "uint8array": identity,
        "nodebuffer": function(input) {
            return new Buffer(input);
        }
    };
    // nodebuffer to ?
    transform["nodebuffer"] = {
        "string": arrayLikeToString,
        "array": function(input) {
            return arrayLikeToArrayLike(input, new Array(input.length));
        },
        "arraybuffer": function(input) {
            return transform["nodebuffer"]["uint8array"](input).buffer;
        },
        "uint8array": function(input) {
            return arrayLikeToArrayLike(input, new Uint8Array(input.length));
        },
        "nodebuffer": identity
    };
    /**
    * Transform an input into any type.
    * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
    * If no output type is specified, the unmodified input will be returned.
    * @param {String} outputType the output type.
    * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
    * @throws {Error} an Error if the browser doesn't support the requested output type.
    */
    JSZip.utils.transformTo = function(outputType, input) {
        if (!input) {
            // undefined, null, etc
            // an empty string won't harm.
            input = "";
        }
        if (!outputType) {
            return input;
        }
        JSZip.utils.checkSupport(outputType);
        var inputType = JSZip.utils.getTypeOf(input);
        var result = transform[inputType][outputType](input);
        return result;
    };
    /**
    * Return the type of the input.
    * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
    * @param {Object} input the input to identify.
    * @return {String} the (lowercase) type of the input.
    */
    JSZip.utils.getTypeOf = function(input) {
        if (typeof input === "string") {
            return "string";
        }
        if (Object.prototype.toString.call(input) === "[object Array]") {
            return "array";
        }
        if (JSZip.support.nodebuffer && Buffer.isBuffer(input)) {
            return "nodebuffer";
        }
        if (JSZip.support.uint8array && input instanceof Uint8Array) {
            return "uint8array";
        }
        if (JSZip.support.arraybuffer && input instanceof ArrayBuffer) {
            return "arraybuffer";
        }
    };
    /**
    * Cross-window, cross-Node-context regular expression detection
    * @param  {Object}  object Anything
    * @return {Boolean}        true if the object is a regular expression,
    * false otherwise
    */
    JSZip.utils.isRegExp = function(object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
    };
    /**
    * Throw an exception if the type is not supported.
    * @param {String} type the type to check.
    * @throws {Error} an Error if the browser doesn't support the requested type.
    */
    JSZip.utils.checkSupport = function(type) {
        var supported = true;
        switch (type.toLowerCase()) {
            case "uint8array":
                supported = JSZip.support.uint8array;
                break;
            case "arraybuffer":
                supported = JSZip.support.arraybuffer;
                break;
            case "nodebuffer":
                supported = JSZip.support.nodebuffer;
                break;
            case "blob":
                supported = JSZip.support.blob;
                break;
        }
        if (!supported) {
            throw new Error(type + " is not supported by this browser");
        }
    };
})();
(function() {
    /**
    * Represents an entry in the zip.
    * The content may or may not be compressed.
    * @constructor
    */
    JSZip.CompressedObject = function() {
        this.compressedSize = 0;
        this.uncompressedSize = 0;
        this.crc32 = 0;
        this.compressionMethod = null;
        this.compressedContent = null;
    };
    JSZip.CompressedObject.prototype = {
        /**
       * Return the decompressed content in an unspecified format.
       * The format will depend on the decompressor.
       * @return {Object} the decompressed content.
       */
        getContent: function() {
            return null;
        },
        // see implementation
        /**
       * Return the compressed content in an unspecified format.
       * The format will depend on the compressed conten source.
       * @return {Object} the compressed content.
       */
        getCompressedContent: function() {
            return null;
        }
    };
})();
// see implementation
/**
 *
 *  Base64 encode / decode
 *  http://www.webtoolkit.info/
 *
 *  Hacked so that it doesn't utf8 en/decode everything
 **/
JSZip.base64 = (function() {
    // private property
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return {
        // public method for encoding
        encode: function(input, utf8) {
            var output = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
            }
            return output;
        },
        // public method for decoding
        decode: function(input, utf8) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            while (i < input.length) {
                enc1 = _keyStr.indexOf(input.charAt(i++));
                enc2 = _keyStr.indexOf(input.charAt(i++));
                enc3 = _keyStr.indexOf(input.charAt(i++));
                enc4 = _keyStr.indexOf(input.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }
            }
            return output;
        }
    };
}());
// enforcing Stuk's coding style
// vim: set shiftwidth=3 softtabstop=3:
(function() {
    "use strict";
    if (!JSZip) {
        throw "JSZip not defined";
    }
    /*jshint -W004, -W018, -W030, -W032, -W033, -W034, -W037,-W040, -W055, -W056, -W061, -W064, -W093, -W117 */
    var context = {};
    (function() {
        // https://github.com/imaya/zlib.js
        // tag 0.1.6
        // file bin/deflate.min.js
        /** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */
        (function() {
            'use strict';
            var n = void 0,
                u = !0,
                aa = this;
            function ba(e, d) {
                var c = e.split("."),
                    f = aa;
                !(c[0] in f) && f.execScript && f.execScript("var " + c[0]);
                for (var a; c.length && (a = c.shift()); ) !c.length && d !== n ? f[a] = d : f = f[a] ? f[a] : f[a] = {};
            }
            
            var C = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;
            function K(e, d) {
                this.index = "number" === typeof d ? d : 0;
                this.d = 0;
                this.buffer = e instanceof (C ? Uint8Array : Array) ? e : new (C ? Uint8Array : Array)(32768);
                if (2 * this.buffer.length <= this.index)  {
                    throw Error("invalid index");
                }
                
                this.buffer.length <= this.index && ca(this);
            }
            function ca(e) {
                var d = e.buffer,
                    c,
                    f = d.length,
                    a = new (C ? Uint8Array : Array)(f << 1);
                if (C)  {
                    a.set(d);
                }
                else  {
                    for (c = 0; c < f; ++c) a[c] = d[c];
                }
                
                return e.buffer = a;
            }
            K.prototype.a = function(e, d, c) {
                var f = this.buffer,
                    a = this.index,
                    b = this.d,
                    k = f[a],
                    m;
                c && 1 < d && (e = 8 < d ? (L[e & 255] << 24 | L[e >>> 8 & 255] << 16 | L[e >>> 16 & 255] << 8 | L[e >>> 24 & 255]) >> 32 - d : L[e] >> 8 - d);
                if (8 > d + b)  {
                    k = k << d | e , b += d;
                }
                else  {
                    for (m = 0; m < d; ++m) k = k << 1 | e >> d - m - 1 & 1 , 8 === ++b && (b = 0 , f[a++] = L[k] , k = 0 , a === f.length && (f = ca(this)));
                }
                
                f[a] = k;
                this.buffer = f;
                this.d = b;
                this.index = a;
            };
            K.prototype.finish = function() {
                var e = this.buffer,
                    d = this.index,
                    c;
                0 < this.d && (e[d] <<= 8 - this.d , e[d] = L[e[d]] , d++);
                C ? c = e.subarray(0, d) : (e.length = d , c = e);
                return c;
            };
            var ga = new (C ? Uint8Array : Array)(256),
                M;
            for (M = 0; 256 > M; ++M) {
                for (var R = M,
                    S = R,
                    ha = 7,
                    R = R >>> 1; R; R >>>= 1) S <<= 1 , S |= R & 1 , --ha;
                ga[M] = (S << ha & 255) >>> 0;
            }
            var L = ga;
            function ja(e) {
                this.buffer = new (C ? Uint16Array : Array)(2 * e);
                this.length = 0;
            }
            ja.prototype.getParent = function(e) {
                return 2 * ((e - 2) / 4 | 0);
            };
            ja.prototype.push = function(e, d) {
                var c, f,
                    a = this.buffer,
                    b;
                c = this.length;
                a[this.length++] = d;
                for (a[this.length++] = e; 0 < c; ) if (f = this.getParent(c) , a[c] > a[f])  {
                    b = a[c] , a[c] = a[f] , a[f] = b , b = a[c + 1] , a[c + 1] = a[f + 1] , a[f + 1] = b , c = f;
                }
                else  {
                    break;
                }
                ;
                return this.length;
            };
            ja.prototype.pop = function() {
                var e, d,
                    c = this.buffer,
                    f, a, b;
                d = c[0];
                e = c[1];
                this.length -= 2;
                c[0] = c[this.length];
                c[1] = c[this.length + 1];
                for (b = 0; ; ) {
                    a = 2 * b + 2;
                    if (a >= this.length)  {
                        break;
                    }
                    
                    a + 2 < this.length && c[a + 2] > c[a] && (a += 2);
                    if (c[a] > c[b])  {
                        f = c[b] , c[b] = c[a] , c[a] = f , f = c[b + 1] , c[b + 1] = c[a + 1] , c[a + 1] = f;
                    }
                    else  {
                        break;
                    }
                    
                    b = a;
                }
                return {
                    index: e,
                    value: d,
                    length: this.length
                };
            };
            function ka(e, d) {
                this.e = ma;
                this.f = 0;
                this.input = C && e instanceof Array ? new Uint8Array(e) : e;
                this.c = 0;
                d && (d.lazy && (this.f = d.lazy) , "number" === typeof d.compressionType && (this.e = d.compressionType) , d.outputBuffer && (this.b = C && d.outputBuffer instanceof Array ? new Uint8Array(d.outputBuffer) : d.outputBuffer) , "number" === typeof d.outputIndex && (this.c = d.outputIndex));
                this.b || (this.b = new (C ? Uint8Array : Array)(32768));
            }
            var ma = 2,
                T = [],
                U;
            for (U = 0; 288 > U; U++) switch (u) {
                case 143 >= U:
                    T.push([
                        U + 48,
                        8
                    ]);
                    break;
                case 255 >= U:
                    T.push([
                        U - 144 + 400,
                        9
                    ]);
                    break;
                case 279 >= U:
                    T.push([
                        U - 256 + 0,
                        7
                    ]);
                    break;
                case 287 >= U:
                    T.push([
                        U - 280 + 192,
                        8
                    ]);
                    break;
                default:
                    throw "invalid literal: " + U;
            };
            ka.prototype.h = function() {
                var e, d, c, f,
                    a = this.input;
                switch (this.e) {
                    case 0:
                        c = 0;
                        for (f = a.length; c < f; ) {
                            d = C ? a.subarray(c, c + 65535) : a.slice(c, c + 65535);
                            c += d.length;
                            var b = d,
                                k = c === f,
                                m = n,
                                g = n,
                                p = n,
                                v = n,
                                x = n,
                                l = this.b,
                                h = this.c;
                            if (C) {
                                for (l = new Uint8Array(this.b.buffer); l.length <= h + b.length + 5; ) l = new Uint8Array(l.length << 1);
                                l.set(this.b);
                            }
                            m = k ? 1 : 0;
                            l[h++] = m | 0;
                            g = b.length;
                            p = ~g + 65536 & 65535;
                            l[h++] = g & 255;
                            l[h++] = g >>> 8 & 255;
                            l[h++] = p & 255;
                            l[h++] = p >>> 8 & 255;
                            if (C)  {
                                l.set(b, h) , h += b.length , l = l.subarray(0, h);
                            }
                            else {
                                v = 0;
                                for (x = b.length; v < x; ++v) l[h++] = b[v];
                                l.length = h;
                            }
                            this.c = h;
                            this.b = l;
                        };
                        break;
                    case 1:
                        var q = new K(C ? new Uint8Array(this.b.buffer) : this.b, this.c);
                        q.a(1, 1, u);
                        q.a(1, 2, u);
                        var t = na(this, a),
                            w, da, z;
                        w = 0;
                        for (da = t.length; w < da; w++) if (z = t[w] , K.prototype.a.apply(q, T[z]) , 256 < z)  {
                            q.a(t[++w], t[++w], u) , q.a(t[++w], 5) , q.a(t[++w], t[++w], u);
                        }
                        else if (256 === z)  {
                            break;
                        }
                        ;
                        this.b = q.finish();
                        this.c = this.b.length;
                        break;
                    case ma:
                        var B = new K(C ? new Uint8Array(this.b.buffer) : this.b, this.c),
                            ra, J, N, O, P,
                            Ia = [
                                16,
                                17,
                                18,
                                0,
                                8,
                                7,
                                9,
                                6,
                                10,
                                5,
                                11,
                                4,
                                12,
                                3,
                                13,
                                2,
                                14,
                                1,
                                15
                            ],
                            W, sa, X, ta, ea,
                            ia = Array(19),
                            ua, Q, fa, y, va;
                        ra = ma;
                        B.a(1, 1, u);
                        B.a(ra, 2, u);
                        J = na(this, a);
                        W = oa(this.j, 15);
                        sa = pa(W);
                        X = oa(this.i, 7);
                        ta = pa(X);
                        for (N = 286; 257 < N && 0 === W[N - 1]; N--){};
                        for (O = 30; 1 < O && 0 === X[O - 1]; O--){};
                        var wa = N,
                            xa = O,
                            F = new (C ? Uint32Array : Array)(wa + xa),
                            r, G, s, Y,
                            E = new (C ? Uint32Array : Array)(316),
                            D, A,
                            H = new (C ? Uint8Array : Array)(19);
                        for (r = G = 0; r < wa; r++) F[G++] = W[r];
                        for (r = 0; r < xa; r++) F[G++] = X[r];
                        if (!C) {
                            r = 0;
                            for (Y = H.length; r < Y; ++r) H[r] = 0;
                        };
                        r = D = 0;
                        for (Y = F.length; r < Y; r += G) {
                            for (G = 1; r + G < Y && F[r + G] === F[r]; ++G){}
                            s = G;
                            if (0 === F[r])  {
                                if (3 > s)  {
                                    for (; 0 < s--; ) E[D++] = 0 , H[0]++;
                                }
                                else  {
                                    for (; 0 < s; ) A = 138 > s ? s : 138 , A > s - 3 && A < s && (A = s - 3) , 10 >= A ? (E[D++] = 17 , E[D++] = A - 3 , H[17]++) : (E[D++] = 18 , E[D++] = A - 11 , H[18]++) , s -= A;
                                }
                                ;
                            }
                            else if (E[D++] = F[r] , H[F[r]]++ , s-- , 3 > s)  {
                                for (; 0 < s--; ) E[D++] = F[r] , H[F[r]]++;
                            }
                            else  {
                                for (; 0 < s; ) A = 6 > s ? s : 6 , A > s - 3 && A < s && (A = s - 3) , E[D++] = 16 , E[D++] = A - 3 , H[16]++ , s -= A;
                            }
                            
                        };
                        e = C ? E.subarray(0, D) : E.slice(0, D);
                        ea = oa(H, 7);
                        for (y = 0; 19 > y; y++) ia[y] = ea[Ia[y]];
                        for (P = 19; 4 < P && 0 === ia[P - 1]; P--){};
                        ua = pa(ea);
                        B.a(N - 257, 5, u);
                        B.a(O - 1, 5, u);
                        B.a(P - 4, 4, u);
                        for (y = 0; y < P; y++) B.a(ia[y], 3, u);
                        y = 0;
                        for (va = e.length; y < va; y++) if (Q = e[y] , B.a(ua[Q], ea[Q], u) , 16 <= Q) {
                            y++;
                            switch (Q) {
                                case 16:
                                    fa = 2;
                                    break;
                                case 17:
                                    fa = 3;
                                    break;
                                case 18:
                                    fa = 7;
                                    break;
                                default:
                                    throw "invalid code: " + Q;
                            }
                            B.a(e[y], fa, u);
                        };
                        var ya = [
                                sa,
                                W
                            ],
                            za = [
                                ta,
                                X
                            ],
                            I, Aa, Z, la, Ba, Ca, Da, Ea;
                        Ba = ya[0];
                        Ca = ya[1];
                        Da = za[0];
                        Ea = za[1];
                        I = 0;
                        for (Aa = J.length; I < Aa; ++I) if (Z = J[I] , B.a(Ba[Z], Ca[Z], u) , 256 < Z)  {
                            B.a(J[++I], J[++I], u) , la = J[++I] , B.a(Da[la], Ea[la], u) , B.a(J[++I], J[++I], u);
                        }
                        else if (256 === Z)  {
                            break;
                        }
                        ;
                        this.b = B.finish();
                        this.c = this.b.length;
                        break;
                    default:
                        throw "invalid compression type";
                }
                return this.b;
            };
            function qa(e, d) {
                this.length = e;
                this.g = d;
            }
            var Fa = function() {
                    function e(a) {
                        switch (u) {
                            case 3 === a:
                                return [
                                    257,
                                    a - 3,
                                    0
                                ];
                            case 4 === a:
                                return [
                                    258,
                                    a - 4,
                                    0
                                ];
                            case 5 === a:
                                return [
                                    259,
                                    a - 5,
                                    0
                                ];
                            case 6 === a:
                                return [
                                    260,
                                    a - 6,
                                    0
                                ];
                            case 7 === a:
                                return [
                                    261,
                                    a - 7,
                                    0
                                ];
                            case 8 === a:
                                return [
                                    262,
                                    a - 8,
                                    0
                                ];
                            case 9 === a:
                                return [
                                    263,
                                    a - 9,
                                    0
                                ];
                            case 10 === a:
                                return [
                                    264,
                                    a - 10,
                                    0
                                ];
                            case 12 >= a:
                                return [
                                    265,
                                    a - 11,
                                    1
                                ];
                            case 14 >= a:
                                return [
                                    266,
                                    a - 13,
                                    1
                                ];
                            case 16 >= a:
                                return [
                                    267,
                                    a - 15,
                                    1
                                ];
                            case 18 >= a:
                                return [
                                    268,
                                    a - 17,
                                    1
                                ];
                            case 22 >= a:
                                return [
                                    269,
                                    a - 19,
                                    2
                                ];
                            case 26 >= a:
                                return [
                                    270,
                                    a - 23,
                                    2
                                ];
                            case 30 >= a:
                                return [
                                    271,
                                    a - 27,
                                    2
                                ];
                            case 34 >= a:
                                return [
                                    272,
                                    a - 31,
                                    2
                                ];
                            case 42 >= a:
                                return [
                                    273,
                                    a - 35,
                                    3
                                ];
                            case 50 >= a:
                                return [
                                    274,
                                    a - 43,
                                    3
                                ];
                            case 58 >= a:
                                return [
                                    275,
                                    a - 51,
                                    3
                                ];
                            case 66 >= a:
                                return [
                                    276,
                                    a - 59,
                                    3
                                ];
                            case 82 >= a:
                                return [
                                    277,
                                    a - 67,
                                    4
                                ];
                            case 98 >= a:
                                return [
                                    278,
                                    a - 83,
                                    4
                                ];
                            case 114 >= a:
                                return [
                                    279,
                                    a - 99,
                                    4
                                ];
                            case 130 >= a:
                                return [
                                    280,
                                    a - 115,
                                    4
                                ];
                            case 162 >= a:
                                return [
                                    281,
                                    a - 131,
                                    5
                                ];
                            case 194 >= a:
                                return [
                                    282,
                                    a - 163,
                                    5
                                ];
                            case 226 >= a:
                                return [
                                    283,
                                    a - 195,
                                    5
                                ];
                            case 257 >= a:
                                return [
                                    284,
                                    a - 227,
                                    5
                                ];
                            case 258 === a:
                                return [
                                    285,
                                    a - 258,
                                    0
                                ];
                            default:
                                throw "invalid length: " + a;
                        }
                    }
                    var d = [],
                        c, f;
                    for (c = 3; 258 >= c; c++) f = e(c) , d[c] = f[2] << 24 | f[1] << 16 | f[0];
                    return d;
                }(),
                Ga = C ? new Uint32Array(Fa) : Fa;
            function na(e, d) {
                function c(a, c) {
                    var b = a.g,
                        d = [],
                        f = 0,
                        e;
                    e = Ga[a.length];
                    d[f++] = e & 65535;
                    d[f++] = e >> 16 & 255;
                    d[f++] = e >> 24;
                    var g;
                    switch (u) {
                        case 1 === b:
                            g = [
                                0,
                                b - 1,
                                0
                            ];
                            break;
                        case 2 === b:
                            g = [
                                1,
                                b - 2,
                                0
                            ];
                            break;
                        case 3 === b:
                            g = [
                                2,
                                b - 3,
                                0
                            ];
                            break;
                        case 4 === b:
                            g = [
                                3,
                                b - 4,
                                0
                            ];
                            break;
                        case 6 >= b:
                            g = [
                                4,
                                b - 5,
                                1
                            ];
                            break;
                        case 8 >= b:
                            g = [
                                5,
                                b - 7,
                                1
                            ];
                            break;
                        case 12 >= b:
                            g = [
                                6,
                                b - 9,
                                2
                            ];
                            break;
                        case 16 >= b:
                            g = [
                                7,
                                b - 13,
                                2
                            ];
                            break;
                        case 24 >= b:
                            g = [
                                8,
                                b - 17,
                                3
                            ];
                            break;
                        case 32 >= b:
                            g = [
                                9,
                                b - 25,
                                3
                            ];
                            break;
                        case 48 >= b:
                            g = [
                                10,
                                b - 33,
                                4
                            ];
                            break;
                        case 64 >= b:
                            g = [
                                11,
                                b - 49,
                                4
                            ];
                            break;
                        case 96 >= b:
                            g = [
                                12,
                                b - 65,
                                5
                            ];
                            break;
                        case 128 >= b:
                            g = [
                                13,
                                b - 97,
                                5
                            ];
                            break;
                        case 192 >= b:
                            g = [
                                14,
                                b - 129,
                                6
                            ];
                            break;
                        case 256 >= b:
                            g = [
                                15,
                                b - 193,
                                6
                            ];
                            break;
                        case 384 >= b:
                            g = [
                                16,
                                b - 257,
                                7
                            ];
                            break;
                        case 512 >= b:
                            g = [
                                17,
                                b - 385,
                                7
                            ];
                            break;
                        case 768 >= b:
                            g = [
                                18,
                                b - 513,
                                8
                            ];
                            break;
                        case 1024 >= b:
                            g = [
                                19,
                                b - 769,
                                8
                            ];
                            break;
                        case 1536 >= b:
                            g = [
                                20,
                                b - 1025,
                                9
                            ];
                            break;
                        case 2048 >= b:
                            g = [
                                21,
                                b - 1537,
                                9
                            ];
                            break;
                        case 3072 >= b:
                            g = [
                                22,
                                b - 2049,
                                10
                            ];
                            break;
                        case 4096 >= b:
                            g = [
                                23,
                                b - 3073,
                                10
                            ];
                            break;
                        case 6144 >= b:
                            g = [
                                24,
                                b - 4097,
                                11
                            ];
                            break;
                        case 8192 >= b:
                            g = [
                                25,
                                b - 6145,
                                11
                            ];
                            break;
                        case 12288 >= b:
                            g = [
                                26,
                                b - 8193,
                                12
                            ];
                            break;
                        case 16384 >= b:
                            g = [
                                27,
                                b - 12289,
                                12
                            ];
                            break;
                        case 24576 >= b:
                            g = [
                                28,
                                b - 16385,
                                13
                            ];
                            break;
                        case 32768 >= b:
                            g = [
                                29,
                                b - 24577,
                                13
                            ];
                            break;
                        default:
                            throw "invalid distance";
                    }
                    e = g;
                    d[f++] = e[0];
                    d[f++] = e[1];
                    d[f++] = e[2];
                    var k, m;
                    k = 0;
                    for (m = d.length; k < m; ++k) l[h++] = d[k];
                    t[d[0]]++;
                    w[d[3]]++;
                    q = a.length + c - 1;
                    x = null;
                }
                var f, a, b, k, m,
                    g = {},
                    p, v, x,
                    l = C ? new Uint16Array(2 * d.length) : [],
                    h = 0,
                    q = 0,
                    t = new (C ? Uint32Array : Array)(286),
                    w = new (C ? Uint32Array : Array)(30),
                    da = e.f,
                    z;
                if (!C) {
                    for (b = 0; 285 >= b; ) t[b++] = 0;
                    for (b = 0; 29 >= b; ) w[b++] = 0;
                }
                t[256] = 1;
                f = 0;
                for (a = d.length; f < a; ++f) {
                    b = m = 0;
                    for (k = 3; b < k && f + b !== a; ++b) m = m << 8 | d[f + b];
                    g[m] === n && (g[m] = []);
                    p = g[m];
                    if (!(0 < q--)) {
                        for (; 0 < p.length && 32768 < f - p[0]; ) p.shift();
                        if (f + 3 >= a) {
                            x && c(x, -1);
                            b = 0;
                            for (k = a - f; b < k; ++b) z = d[f + b] , l[h++] = z , ++t[z];
                            break;
                        }
                        0 < p.length ? (v = Ha(d, f, p) , x ? x.length < v.length ? (z = d[f - 1] , l[h++] = z , ++t[z] , c(v, 0)) : c(x, -1) : v.length < da ? x = v : c(v, 0)) : x ? c(x, -1) : (z = d[f] , l[h++] = z , ++t[z]);
                    }
                    p.push(f);
                }
                l[h++] = 256;
                t[256]++;
                e.j = t;
                e.i = w;
                return C ? l.subarray(0, h) : l;
            }
            function Ha(e, d, c) {
                var f, a,
                    b = 0,
                    k, m, g, p,
                    v = e.length;
                m = 0;
                p = c.length;
                a: for (; m < p; m++) {
                    f = c[p - m - 1];
                    k = 3;
                    if (3 < b) {
                        for (g = b; 3 < g; g--) if (e[f + g - 1] !== e[d + g - 1])  {
                            
                            continue a;
                        }
                        ;
                        k = b;
                    }
                    for (; 258 > k && d + k < v && e[f + k] === e[d + k]; ) ++k;
                    k > b && (a = f , b = k);
                    if (258 === k)  {
                        break;
                    }
                    
                }
                return new qa(b, d - a);
            }
            function oa(e, d) {
                var c = e.length,
                    f = new ja(572),
                    a = new (C ? Uint8Array : Array)(c),
                    b, k, m, g, p;
                if (!C)  {
                    for (g = 0; g < c; g++) a[g] = 0;
                }
                
                for (g = 0; g < c; ++g) 0 < e[g] && f.push(g, e[g]);
                b = Array(f.length / 2);
                k = new (C ? Uint32Array : Array)(f.length / 2);
                if (1 === b.length)  {
                    return a[f.pop().index] = 1 , a;
                }
                
                g = 0;
                for (p = f.length / 2; g < p; ++g) b[g] = f.pop() , k[g] = b[g].value;
                m = Ja(k, k.length, d);
                g = 0;
                for (p = b.length; g < p; ++g) a[b[g].index] = m[g];
                return a;
            }
            function Ja(e, d, c) {
                function f(a) {
                    var b = g[a][p[a]];
                    b === d ? (f(a + 1) , f(a + 1)) : --k[b];
                    ++p[a];
                }
                var a = new (C ? Uint16Array : Array)(c),
                    b = new (C ? Uint8Array : Array)(c),
                    k = new (C ? Uint8Array : Array)(d),
                    m = Array(c),
                    g = Array(c),
                    p = Array(c),
                    v = (1 << c) - d,
                    x = 1 << c - 1,
                    l, h, q, t, w;
                a[c - 1] = d;
                for (h = 0; h < c; ++h) v < x ? b[h] = 0 : (b[h] = 1 , v -= x) , v <<= 1 , a[c - 2 - h] = (a[c - 1 - h] / 2 | 0) + d;
                a[0] = b[0];
                m[0] = Array(a[0]);
                g[0] = Array(a[0]);
                for (h = 1; h < c; ++h) a[h] > 2 * a[h - 1] + b[h] && (a[h] = 2 * a[h - 1] + b[h]) , m[h] = Array(a[h]) , g[h] = Array(a[h]);
                for (l = 0; l < d; ++l) k[l] = c;
                for (q = 0; q < a[c - 1]; ++q) m[c - 1][q] = e[q] , g[c - 1][q] = q;
                for (l = 0; l < c; ++l) p[l] = 0;
                1 === b[c - 1] && (--k[0] , ++p[c - 1]);
                for (h = c - 2; 0 <= h; --h) {
                    t = l = 0;
                    w = p[h + 1];
                    for (q = 0; q < a[h]; q++) t = m[h + 1][w] + m[h + 1][w + 1] , t > e[l] ? (m[h][q] = t , g[h][q] = d , w += 2) : (m[h][q] = e[l] , g[h][q] = l , ++l);
                    p[h] = 0;
                    1 === b[h] && f(h);
                }
                return k;
            }
            function pa(e) {
                var d = new (C ? Uint16Array : Array)(e.length),
                    c = [],
                    f = [],
                    a = 0,
                    b, k, m, g;
                b = 0;
                for (k = e.length; b < k; b++) c[e[b]] = (c[e[b]] | 0) + 1;
                b = 1;
                for (k = 16; b <= k; b++) f[b] = a , a += c[b] | 0 , a <<= 1;
                b = 0;
                for (k = e.length; b < k; b++) {
                    a = f[e[b]];
                    f[e[b]] += 1;
                    m = d[b] = 0;
                    for (g = e[b]; m < g; m++) d[b] = d[b] << 1 | a & 1 , a >>>= 1;
                }
                return d;
            }
            
            ba("Zlib.RawDeflate", ka);
            ba("Zlib.RawDeflate.prototype.compress", ka.prototype.h);
            var Ka = {
                    NONE: 0,
                    FIXED: 1,
                    DYNAMIC: ma
                },
                V, La, $, Ma;
            if (Object.keys)  {
                V = Object.keys(Ka);
            }
            else  {
                for (La in V = [] , $ = 0 , Ka) V[$++] = La;
            }
            
            $ = 0;
            for (Ma = V.length; $ < Ma; ++$) La = V[$] , ba("Zlib.RawDeflate.CompressionType." + La, Ka[La]);
        }).call(this);
    }).call(context);
    /*jshint +W004, +W018, +W030, +W032, +W033, +W034, +W037,+W040, +W055, +W056, +W061, +W064, +W093, +W117 */
    var compress = function(input) {
            var deflate = new context.Zlib.RawDeflate(input);
            return deflate.compress();
        };
    var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');
    // we add the compression method for JSZip
    if (!JSZip.compressions["DEFLATE"]) {
        JSZip.compressions["DEFLATE"] = {
            magic: "\b\x00",
            compress: compress,
            compressInputType: USE_TYPEDARRAY ? "uint8array" : "array"
        };
    } else {
        JSZip.compressions["DEFLATE"].compress = compress;
        JSZip.compressions["DEFLATE"].compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
    }
})();
// enforcing Stuk's coding style
// vim: set shiftwidth=3 softtabstop=3:
(function() {
    "use strict";
    if (!JSZip) {
        throw "JSZip not defined";
    }
    /*jshint -W004, -W030, -W032, -W033, -W034, -W040, -W056, -W061, -W064, -W093 */
    var context = {};
    (function() {
        // https://github.com/imaya/zlib.js
        // tag 0.1.6
        // file bin/deflate.min.js
        /** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */
        (function() {
            'use strict';
            var l = void 0,
                p = this;
            function q(c, d) {
                var a = c.split("."),
                    b = p;
                !(a[0] in b) && b.execScript && b.execScript("var " + a[0]);
                for (var e; a.length && (e = a.shift()); ) !a.length && d !== l ? b[e] = d : b = b[e] ? b[e] : b[e] = {};
            }
            
            var r = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;
            function u(c) {
                var d = c.length,
                    a = 0,
                    b = Number.POSITIVE_INFINITY,
                    e, f, g, h, k, m, s, n, t;
                for (n = 0; n < d; ++n) c[n] > a && (a = c[n]) , c[n] < b && (b = c[n]);
                e = 1 << a;
                f = new (r ? Uint32Array : Array)(e);
                g = 1;
                h = 0;
                for (k = 2; g <= a; ) {
                    for (n = 0; n < d; ++n) if (c[n] === g) {
                        m = 0;
                        s = h;
                        for (t = 0; t < g; ++t) m = m << 1 | s & 1 , s >>= 1;
                        for (t = m; t < e; t += k) f[t] = g << 16 | n;
                        ++h;
                    };
                    ++g;
                    h <<= 1;
                    k <<= 1;
                }
                return [
                    f,
                    a,
                    b
                ];
            }
            
            function v(c, d) {
                this.g = [];
                this.h = 32768;
                this.c = this.f = this.d = this.k = 0;
                this.input = r ? new Uint8Array(c) : c;
                this.l = !1;
                this.i = w;
                this.p = !1;
                if (d || !(d = {}))  {
                    d.index && (this.d = d.index) , d.bufferSize && (this.h = d.bufferSize) , d.bufferType && (this.i = d.bufferType) , d.resize && (this.p = d.resize);
                }
                
                switch (this.i) {
                    case x:
                        this.a = 32768;
                        this.b = new (r ? Uint8Array : Array)(32768 + this.h + 258);
                        break;
                    case w:
                        this.a = 0;
                        this.b = new (r ? Uint8Array : Array)(this.h);
                        this.e = this.u;
                        this.m = this.r;
                        this.j = this.s;
                        break;
                    default:
                        throw Error("invalid inflate mode");
                }
            }
            var x = 0,
                w = 1;
            v.prototype.t = function() {
                for (; !this.l; ) {
                    var c = y(this, 3);
                    c & 1 && (this.l = !0);
                    c >>>= 1;
                    switch (c) {
                        case 0:
                            var d = this.input,
                                a = this.d,
                                b = this.b,
                                e = this.a,
                                f = l,
                                g = l,
                                h = l,
                                k = b.length,
                                m = l;
                            this.c = this.f = 0;
                            f = d[a++];
                            if (f === l)  {
                                throw Error("invalid uncompressed block header: LEN (first byte)");
                            }
                            ;
                            g = f;
                            f = d[a++];
                            if (f === l)  {
                                throw Error("invalid uncompressed block header: LEN (second byte)");
                            }
                            ;
                            g |= f << 8;
                            f = d[a++];
                            if (f === l)  {
                                throw Error("invalid uncompressed block header: NLEN (first byte)");
                            }
                            ;
                            h = f;
                            f = d[a++];
                            if (f === l)  {
                                throw Error("invalid uncompressed block header: NLEN (second byte)");
                            }
                            ;
                            h |= f << 8;
                            if (g === ~h)  {
                                throw Error("invalid uncompressed block header: length verify");
                            }
                            ;
                            if (a + g > d.length)  {
                                throw Error("input buffer is broken");
                            }
                            ;
                            switch (this.i) {
                                case x:
                                    for (; e + g > b.length; ) {
                                        m = k - e;
                                        g -= m;
                                        if (r)  {
                                            b.set(d.subarray(a, a + m), e) , e += m , a += m;
                                        }
                                        else  {
                                            for (; m--; ) b[e++] = d[a++];
                                        }
                                        
                                        this.a = e;
                                        b = this.e();
                                        e = this.a;
                                    };
                                    break;
                                case w:
                                    for (; e + g > b.length; ) b = this.e({
                                        o: 2
                                    });
                                    break;
                                default:
                                    throw Error("invalid inflate mode");
                            };
                            if (r)  {
                                b.set(d.subarray(a, a + g), e) , e += g , a += g;
                            }
                            else  {
                                for (; g--; ) b[e++] = d[a++];
                            }
                            ;
                            this.d = a;
                            this.a = e;
                            this.b = b;
                            break;
                        case 1:
                            this.j(z, A);
                            break;
                        case 2:
                            B(this);
                            break;
                        default:
                            throw Error("unknown BTYPE: " + c);
                    }
                }
                return this.m();
            };
            var C = [
                    16,
                    17,
                    18,
                    0,
                    8,
                    7,
                    9,
                    6,
                    10,
                    5,
                    11,
                    4,
                    12,
                    3,
                    13,
                    2,
                    14,
                    1,
                    15
                ],
                D = r ? new Uint16Array(C) : C,
                E = [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    13,
                    15,
                    17,
                    19,
                    23,
                    27,
                    31,
                    35,
                    43,
                    51,
                    59,
                    67,
                    83,
                    99,
                    115,
                    131,
                    163,
                    195,
                    227,
                    258,
                    258,
                    258
                ],
                F = r ? new Uint16Array(E) : E,
                G = [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    0,
                    0,
                    0
                ],
                H = r ? new Uint8Array(G) : G,
                I = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    7,
                    9,
                    13,
                    17,
                    25,
                    33,
                    49,
                    65,
                    97,
                    129,
                    193,
                    257,
                    385,
                    513,
                    769,
                    1025,
                    1537,
                    2049,
                    3073,
                    4097,
                    6145,
                    8193,
                    12289,
                    16385,
                    24577
                ],
                J = r ? new Uint16Array(I) : I,
                K = [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    11,
                    11,
                    12,
                    12,
                    13,
                    13
                ],
                L = r ? new Uint8Array(K) : K,
                M = new (r ? Uint8Array : Array)(288),
                N, O;
            N = 0;
            for (O = M.length; N < O; ++N) M[N] = 143 >= N ? 8 : 255 >= N ? 9 : 279 >= N ? 7 : 8;
            var z = u(M),
                P = new (r ? Uint8Array : Array)(30),
                Q, R;
            Q = 0;
            for (R = P.length; Q < R; ++Q) P[Q] = 5;
            var A = u(P);
            function y(c, d) {
                for (var a = c.f,
                    b = c.c,
                    e = c.input,
                    f = c.d,
                    g; b < d; ) {
                    g = e[f++];
                    if (g === l)  {
                        throw Error("input buffer is broken");
                    }
                    
                    a |= g << b;
                    b += 8;
                }
                g = a & (1 << d) - 1;
                c.f = a >>> d;
                c.c = b - d;
                c.d = f;
                return g;
            }
            function S(c, d) {
                for (var a = c.f,
                    b = c.c,
                    e = c.input,
                    f = c.d,
                    g = d[0],
                    h = d[1],
                    k, m, s; b < h; ) {
                    k = e[f++];
                    if (k === l)  {
                        break;
                    }
                    
                    a |= k << b;
                    b += 8;
                }
                m = g[a & (1 << h) - 1];
                s = m >>> 16;
                c.f = a >> s;
                c.c = b - s;
                c.d = f;
                return m & 65535;
            }
            function B(c) {
                function d(a, c, b) {
                    var d, f, e, g;
                    for (g = 0; g < a; ) switch (d = S(this, c) , d) {
                        case 16:
                            for (e = 3 + y(this, 2); e--; ) b[g++] = f;
                            break;
                        case 17:
                            for (e = 3 + y(this, 3); e--; ) b[g++] = 0;
                            f = 0;
                            break;
                        case 18:
                            for (e = 11 + y(this, 7); e--; ) b[g++] = 0;
                            f = 0;
                            break;
                        default:
                            f = b[g++] = d;
                    };
                    return b;
                }
                var a = y(c, 5) + 257,
                    b = y(c, 5) + 1,
                    e = y(c, 4) + 4,
                    f = new (r ? Uint8Array : Array)(D.length),
                    g, h, k, m;
                for (m = 0; m < e; ++m) f[D[m]] = y(c, 3);
                g = u(f);
                h = new (r ? Uint8Array : Array)(a);
                k = new (r ? Uint8Array : Array)(b);
                c.j(u(d.call(c, a, g, h)), u(d.call(c, b, g, k)));
            }
            v.prototype.j = function(c, d) {
                var a = this.b,
                    b = this.a;
                this.n = c;
                for (var e = a.length - 258,
                    f, g, h, k; 256 !== (f = S(this, c)); ) if (256 > f)  {
                    b >= e && (this.a = b , a = this.e() , b = this.a) , a[b++] = f;
                }
                else {
                    g = f - 257;
                    k = F[g];
                    0 < H[g] && (k += y(this, H[g]));
                    f = S(this, d);
                    h = J[f];
                    0 < L[f] && (h += y(this, L[f]));
                    b >= e && (this.a = b , a = this.e() , b = this.a);
                    for (; k--; ) a[b] = a[b++ - h];
                };
                for (; 8 <= this.c; ) this.c -= 8 , this.d--;
                this.a = b;
            };
            v.prototype.s = function(c, d) {
                var a = this.b,
                    b = this.a;
                this.n = c;
                for (var e = a.length,
                    f, g, h, k; 256 !== (f = S(this, c)); ) if (256 > f)  {
                    b >= e && (a = this.e() , e = a.length) , a[b++] = f;
                }
                else {
                    g = f - 257;
                    k = F[g];
                    0 < H[g] && (k += y(this, H[g]));
                    f = S(this, d);
                    h = J[f];
                    0 < L[f] && (h += y(this, L[f]));
                    b + k > e && (a = this.e() , e = a.length);
                    for (; k--; ) a[b] = a[b++ - h];
                };
                for (; 8 <= this.c; ) this.c -= 8 , this.d--;
                this.a = b;
            };
            v.prototype.e = function() {
                var c = new (r ? Uint8Array : Array)(this.a - 32768),
                    d = this.a - 32768,
                    a, b,
                    e = this.b;
                if (r)  {
                    c.set(e.subarray(32768, c.length));
                }
                else {
                    a = 0;
                    for (b = c.length; a < b; ++a) c[a] = e[a + 32768];
                }
                this.g.push(c);
                this.k += c.length;
                if (r)  {
                    e.set(e.subarray(d, d + 32768));
                }
                else  {
                    for (a = 0; 32768 > a; ++a) e[a] = e[d + a];
                }
                
                this.a = 32768;
                return e;
            };
            v.prototype.u = function(c) {
                var d,
                    a = this.input.length / this.d + 1 | 0,
                    b, e, f,
                    g = this.input,
                    h = this.b;
                c && ("number" === typeof c.o && (a = c.o) , "number" === typeof c.q && (a += c.q));
                2 > a ? (b = (g.length - this.d) / this.n[2] , f = 258 * (b / 2) | 0 , e = f < h.length ? h.length + f : h.length << 1) : e = h.length * a;
                r ? (d = new Uint8Array(e) , d.set(h)) : d = h;
                return this.b = d;
            };
            v.prototype.m = function() {
                var c = 0,
                    d = this.b,
                    a = this.g,
                    b,
                    e = new (r ? Uint8Array : Array)(this.k + (this.a - 32768)),
                    f, g, h, k;
                if (0 === a.length)  {
                    return r ? this.b.subarray(32768, this.a) : this.b.slice(32768, this.a);
                }
                
                f = 0;
                for (g = a.length; f < g; ++f) {
                    b = a[f];
                    h = 0;
                    for (k = b.length; h < k; ++h) e[c++] = b[h];
                }
                f = 32768;
                for (g = this.a; f < g; ++f) e[c++] = d[f];
                this.g = [];
                return this.buffer = e;
            };
            v.prototype.r = function() {
                var c,
                    d = this.a;
                r ? this.p ? (c = new Uint8Array(d) , c.set(this.b.subarray(0, d))) : c = this.b.subarray(0, d) : (this.b.length > d && (this.b.length = d) , c = this.b);
                return this.buffer = c;
            };
            q("Zlib.RawInflate", v);
            q("Zlib.RawInflate.prototype.decompress", v.prototype.t);
            var T = {
                    ADAPTIVE: w,
                    BLOCK: x
                },
                U, V, W, X;
            if (Object.keys)  {
                U = Object.keys(T);
            }
            else  {
                for (V in U = [] , W = 0 , T) U[W++] = V;
            }
            
            W = 0;
            for (X = U.length; W < X; ++W) V = U[W] , q("Zlib.RawInflate.BufferType." + V, T[V]);
        }).call(this);
    }).call(context);
    /*jshint +W004, +W030, +W032, +W033, +W034, +W040, +W056, +W061, +W064, +W093 */
    var uncompress = function(input) {
            var inflate = new context.Zlib.RawInflate(input);
            return inflate.decompress();
        };
    var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');
    // we add the compression method for JSZip
    if (!JSZip.compressions["DEFLATE"]) {
        JSZip.compressions["DEFLATE"] = {
            magic: "\b\x00",
            uncompress: uncompress,
            uncompressInputType: USE_TYPEDARRAY ? "uint8array" : "array"
        };
    } else {
        JSZip.compressions["DEFLATE"].uncompress = uncompress;
        JSZip.compressions["DEFLATE"].uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
    }
})();
// enforcing Stuk's coding style
// vim: set shiftwidth=3 softtabstop=3:
/**

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2011 David Duponchel <d.duponchel@gmail.com>
Dual licenced under the MIT license or GPLv3. See LICENSE.markdown.

**/
/*global JSZip */
(function(root) {
    "use strict";
    var MAX_VALUE_16BITS = 65535;
    var MAX_VALUE_32BITS = -1;
    // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1
    /**
    * Prettify a string read as binary.
    * @param {string} str the string to prettify.
    * @return {string} a pretty string.
    */
    var pretty = function(str) {
            var res = '',
                code, i;
            for (i = 0; i < (str || "").length; i++) {
                code = str.charCodeAt(i);
                res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
            }
            return res;
        };
    /**
    * Find a compression registered in JSZip.
    * @param {string} compressionMethod the method magic to find.
    * @return {Object|null} the JSZip compression object, null if none found.
    */
    var findCompression = function(compressionMethod) {
            for (var method in JSZip.compressions) {
                if (!JSZip.compressions.hasOwnProperty(method)) {
                    
                    continue;
                }
                if (JSZip.compressions[method].magic === compressionMethod) {
                    return JSZip.compressions[method];
                }
            }
            return null;
        };
    // class DataReader {{{
    /**
    * Read bytes from a source.
    * Developer tip : when debugging, a watch on pretty(this.reader.data.slice(this.reader.index))
    * is very useful :)
    * @constructor
    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to read.
    */
    function DataReader(data) {
        this.data = null;
        // type : see implementation
        this.length = 0;
        this.index = 0;
    }
    DataReader.prototype = {
        /**
       * Check that the offset will not go too far.
       * @param {string} offset the additional offset to check.
       * @throws {Error} an Error if the offset is out of bounds.
       */
        checkOffset: function(offset) {
            this.checkIndex(this.index + offset);
        },
        /**
       * Check that the specifed index will not be too far.
       * @param {string} newIndex the index to check.
       * @throws {Error} an Error if the index is out of bounds.
       */
        checkIndex: function(newIndex) {
            if (this.length < newIndex || newIndex < 0) {
                throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
            }
        },
        /**
       * Change the index.
       * @param {number} newIndex The new index.
       * @throws {Error} if the new index is out of the data.
       */
        setIndex: function(newIndex) {
            this.checkIndex(newIndex);
            this.index = newIndex;
        },
        /**
       * Skip the next n bytes.
       * @param {number} n the number of bytes to skip.
       * @throws {Error} if the new index is out of the data.
       */
        skip: function(n) {
            this.setIndex(this.index + n);
        },
        /**
       * Get the byte at the specified index.
       * @param {number} i the index to use.
       * @return {number} a byte.
       */
        byteAt: function(i) {},
        // see implementations
        /**
       * Get the next number with a given byte size.
       * @param {number} size the number of bytes to read.
       * @return {number} the corresponding number.
       */
        readInt: function(size) {
            var result = 0,
                i;
            this.checkOffset(size);
            for (i = this.index + size - 1; i >= this.index; i--) {
                result = (result << 8) + this.byteAt(i);
            }
            this.index += size;
            return result;
        },
        /**
       * Get the next string with a given byte size.
       * @param {number} size the number of bytes to read.
       * @return {string} the corresponding string.
       */
        readString: function(size) {
            return JSZip.utils.transformTo("string", this.readData(size));
        },
        /**
       * Get raw data without conversion, <size> bytes.
       * @param {number} size the number of bytes to read.
       * @return {Object} the raw data, implementation specific.
       */
        readData: function(size) {},
        // see implementations
        /**
       * Find the last occurence of a zip signature (4 bytes).
       * @param {string} sig the signature to find.
       * @return {number} the index of the last occurence, -1 if not found.
       */
        lastIndexOfSignature: function(sig) {},
        // see implementations
        /**
       * Get the next date.
       * @return {Date} the date.
       */
        readDate: function() {
            var dostime = this.readInt(4);
            return new Date(((dostime >> 25) & 127) + 1980, // year
            ((dostime >> 21) & 15) - 1, // month
            (dostime >> 16) & 31, // day
            (dostime >> 11) & 31, // hour
            (dostime >> 5) & 63, // minute
            (dostime & 31) << 1);
        }
    };
    // second
    /**
    * Read bytes from a string.
    * @constructor
    * @param {String} data the data to read.
    */
    function StringReader(data, optimizedBinaryString) {
        this.data = data;
        if (!optimizedBinaryString) {
            this.data = JSZip.utils.string2binary(this.data);
        }
        this.length = this.data.length;
        this.index = 0;
    }
    StringReader.prototype = new DataReader();
    /**
    * @see DataReader.byteAt
    */
    StringReader.prototype.byteAt = function(i) {
        return this.data.charCodeAt(i);
    };
    /**
    * @see DataReader.lastIndexOfSignature
    */
    StringReader.prototype.lastIndexOfSignature = function(sig) {
        return this.data.lastIndexOf(sig);
    };
    /**
    * @see DataReader.readData
    */
    StringReader.prototype.readData = function(size) {
        this.checkOffset(size);
        // this will work because the constructor applied the "& 0xff" mask.
        var result = this.data.slice(this.index, this.index + size);
        this.index += size;
        return result;
    };
    /**
    * Read bytes from an Uin8Array.
    * @constructor
    * @param {Uint8Array} data the data to read.
    */
    function Uint8ArrayReader(data) {
        if (data) {
            this.data = data;
            this.length = this.data.length;
            this.index = 0;
        }
    }
    Uint8ArrayReader.prototype = new DataReader();
    /**
    * @see DataReader.byteAt
    */
    Uint8ArrayReader.prototype.byteAt = function(i) {
        return this.data[i];
    };
    /**
    * @see DataReader.lastIndexOfSignature
    */
    Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
        var sig0 = sig.charCodeAt(0),
            sig1 = sig.charCodeAt(1),
            sig2 = sig.charCodeAt(2),
            sig3 = sig.charCodeAt(3);
        for (var i = this.length - 4; i >= 0; --i) {
            if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
                return i;
            }
        }
        return -1;
    };
    /**
    * @see DataReader.readData
    */
    Uint8ArrayReader.prototype.readData = function(size) {
        this.checkOffset(size);
        var result = this.data.subarray(this.index, this.index + size);
        this.index += size;
        return result;
    };
    /**
    * Read bytes from a Buffer.
    * @constructor
    * @param {Buffer} data the data to read.
    */
    function NodeBufferReader(data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
    }
    NodeBufferReader.prototype = new Uint8ArrayReader();
    /**
    * @see DataReader.readData
    */
    NodeBufferReader.prototype.readData = function(size) {
        this.checkOffset(size);
        var result = this.data.slice(this.index, this.index + size);
        this.index += size;
        return result;
    };
    // }}} end of DataReader
    // class ZipEntry {{{
    /**
    * An entry in the zip file.
    * @constructor
    * @param {Object} options Options of the current file.
    * @param {Object} loadOptions Options for loading the data.
    */
    function ZipEntry(options, loadOptions) {
        this.options = options;
        this.loadOptions = loadOptions;
    }
    ZipEntry.prototype = {
        /**
       * say if the file is encrypted.
       * @return {boolean} true if the file is encrypted, false otherwise.
       */
        isEncrypted: function() {
            // bit 1 is set
            return (this.bitFlag & 1) === 1;
        },
        /**
       * say if the file has utf-8 filename/comment.
       * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
       */
        useUTF8: function() {
            // bit 11 is set
            return (this.bitFlag & 2048) === 2048;
        },
        /**
       * Prepare the function used to generate the compressed content from this ZipFile.
       * @param {DataReader} reader the reader to use.
       * @param {number} from the offset from where we should read the data.
       * @param {number} length the length of the data to read.
       * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
       */
        prepareCompressedContent: function(reader, from, length) {
            return function() {
                var previousIndex = reader.index;
                reader.setIndex(from);
                var compressedFileData = reader.readData(length);
                reader.setIndex(previousIndex);
                return compressedFileData;
            };
        },
        /**
       * Prepare the function used to generate the uncompressed content from this ZipFile.
       * @param {DataReader} reader the reader to use.
       * @param {number} from the offset from where we should read the data.
       * @param {number} length the length of the data to read.
       * @param {JSZip.compression} compression the compression used on this file.
       * @param {number} uncompressedSize the uncompressed size to expect.
       * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
       */
        prepareContent: function(reader, from, length, compression, uncompressedSize) {
            return function() {
                var compressedFileData = JSZip.utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
                var uncompressedFileData = compression.uncompress(compressedFileData);
                if (uncompressedFileData.length !== uncompressedSize) {
                    throw new Error("Bug : uncompressed data size mismatch");
                }
                return uncompressedFileData;
            };
        },
        /**
       * Read the local part of a zip file and add the info in this object.
       * @param {DataReader} reader the reader to use.
       */
        readLocalPart: function(reader) {
            var compression, localExtraFieldsLength;
            // we already know everything from the central dir !
            // If the central dir data are false, we are doomed.
            // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
            // The less data we get here, the more reliable this should be.
            // Let's skip the whole header and dash to the data !
            reader.skip(22);
            // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
            // Strangely, the filename here is OK.
            // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
            // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
            // Search "unzip mismatching "local" filename continuing with "central" filename version" on
            // the internet.
            //
            // I think I see the logic here : the central directory is used to display
            // content and the local directory is used to extract the files. Mixing / and \
            // may be used to display \ to windows users and use / when extracting the files.
            // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
            this.fileNameLength = reader.readInt(2);
            localExtraFieldsLength = reader.readInt(2);
            // can't be sure this will be the same as the central dir
            this.fileName = reader.readString(this.fileNameLength);
            reader.skip(localExtraFieldsLength);
            if (this.compressedSize == -1 || this.uncompressedSize == -1) {
                throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
            }
            compression = findCompression(this.compressionMethod);
            if (compression === null) {
                // no compression found
                throw new Error("Corrupted zip : compression " + pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
            }
            this.decompressed = new JSZip.CompressedObject();
            this.decompressed.compressedSize = this.compressedSize;
            this.decompressed.uncompressedSize = this.uncompressedSize;
            this.decompressed.crc32 = this.crc32;
            this.decompressed.compressionMethod = this.compressionMethod;
            this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
            this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);
            // we need to compute the crc32...
            if (this.loadOptions.checkCRC32) {
                this.decompressed = JSZip.utils.transformTo("string", this.decompressed.getContent());
                if (JSZip.prototype.crc32(this.decompressed) !== this.crc32) {
                    throw new Error("Corrupted zip : CRC32 mismatch");
                }
            }
        },
        /**
       * Read the central part of a zip file and add the info in this object.
       * @param {DataReader} reader the reader to use.
       */
        readCentralPart: function(reader) {
            this.versionMadeBy = reader.readString(2);
            this.versionNeeded = reader.readInt(2);
            this.bitFlag = reader.readInt(2);
            this.compressionMethod = reader.readString(2);
            this.date = reader.readDate();
            this.crc32 = reader.readInt(4);
            this.compressedSize = reader.readInt(4);
            this.uncompressedSize = reader.readInt(4);
            this.fileNameLength = reader.readInt(2);
            this.extraFieldsLength = reader.readInt(2);
            this.fileCommentLength = reader.readInt(2);
            this.diskNumberStart = reader.readInt(2);
            this.internalFileAttributes = reader.readInt(2);
            this.externalFileAttributes = reader.readInt(4);
            this.localHeaderOffset = reader.readInt(4);
            if (this.isEncrypted()) {
                throw new Error("Encrypted zip are not supported");
            }
            this.fileName = reader.readString(this.fileNameLength);
            this.readExtraFields(reader);
            this.parseZIP64ExtraField(reader);
            this.fileComment = reader.readString(this.fileCommentLength);
            // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)
            this.dir = this.externalFileAttributes & 16 ? true : false;
        },
        /**
       * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
       * @param {DataReader} reader the reader to use.
       */
        parseZIP64ExtraField: function(reader) {
            if (!this.extraFields[1]) {
                return;
            }
            // should be something, preparing the extra reader
            var extraReader = new StringReader(this.extraFields[1].value);
            // I really hope that these 64bits integer can fit in 32 bits integer, because js
            // won't let us have more.
            if (this.uncompressedSize === MAX_VALUE_32BITS) {
                this.uncompressedSize = extraReader.readInt(8);
            }
            if (this.compressedSize === MAX_VALUE_32BITS) {
                this.compressedSize = extraReader.readInt(8);
            }
            if (this.localHeaderOffset === MAX_VALUE_32BITS) {
                this.localHeaderOffset = extraReader.readInt(8);
            }
            if (this.diskNumberStart === MAX_VALUE_32BITS) {
                this.diskNumberStart = extraReader.readInt(4);
            }
        },
        /**
       * Read the central part of a zip file and add the info in this object.
       * @param {DataReader} reader the reader to use.
       */
        readExtraFields: function(reader) {
            var start = reader.index,
                extraFieldId, extraFieldLength, extraFieldValue;
            this.extraFields = this.extraFields || {};
            while (reader.index < start + this.extraFieldsLength) {
                extraFieldId = reader.readInt(2);
                extraFieldLength = reader.readInt(2);
                extraFieldValue = reader.readString(extraFieldLength);
                this.extraFields[extraFieldId] = {
                    id: extraFieldId,
                    length: extraFieldLength,
                    value: extraFieldValue
                };
            }
        },
        /**
       * Apply an UTF8 transformation if needed.
       */
        handleUTF8: function() {
            if (this.useUTF8()) {
                this.fileName = JSZip.prototype.utf8decode(this.fileName);
                this.fileComment = JSZip.prototype.utf8decode(this.fileComment);
            }
        }
    };
    // }}} end of ZipEntry
    //  class ZipEntries {{{
    /**
    * All the entries in the zip file.
    * @constructor
    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary data to load.
    * @param {Object} loadOptions Options for loading the data.
    */
    function ZipEntries(data, loadOptions) {
        this.files = [];
        this.loadOptions = loadOptions;
        if (data) {
            this.load(data);
        }
    }
    ZipEntries.prototype = {
        /**
       * Check that the reader is on the speficied signature.
       * @param {string} expectedSignature the expected signature.
       * @throws {Error} if it is an other signature.
       */
        checkSignature: function(expectedSignature) {
            var signature = this.reader.readString(4);
            if (signature !== expectedSignature) {
                throw new Error("Corrupted zip or bug : unexpected signature " + "(" + pretty(signature) + ", expected " + pretty(expectedSignature) + ")");
            }
        },
        /**
       * Read the end of the central directory.
       */
        readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2);
            this.diskWithCentralDirStart = this.reader.readInt(2);
            this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
            this.centralDirRecords = this.reader.readInt(2);
            this.centralDirSize = this.reader.readInt(4);
            this.centralDirOffset = this.reader.readInt(4);
            this.zipCommentLength = this.reader.readInt(2);
            this.zipComment = this.reader.readString(this.zipCommentLength);
        },
        /**
       * Read the end of the Zip 64 central directory.
       * Not merged with the method readEndOfCentral :
       * The end of central can coexist with its Zip64 brother,
       * I don't want to read the wrong number of bytes !
       */
        readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8);
            this.versionMadeBy = this.reader.readString(2);
            this.versionNeeded = this.reader.readInt(2);
            this.diskNumber = this.reader.readInt(4);
            this.diskWithCentralDirStart = this.reader.readInt(4);
            this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
            this.centralDirRecords = this.reader.readInt(8);
            this.centralDirSize = this.reader.readInt(8);
            this.centralDirOffset = this.reader.readInt(8);
            this.zip64ExtensibleData = {};
            var extraDataSize = this.zip64EndOfCentralSize - 44,
                index = 0,
                extraFieldId, extraFieldLength, extraFieldValue;
            while (index < extraDataSize) {
                extraFieldId = this.reader.readInt(2);
                extraFieldLength = this.reader.readInt(4);
                extraFieldValue = this.reader.readString(extraFieldLength);
                this.zip64ExtensibleData[extraFieldId] = {
                    id: extraFieldId,
                    length: extraFieldLength,
                    value: extraFieldValue
                };
            }
        },
        /**
       * Read the end of the Zip 64 central directory locator.
       */
        readBlockZip64EndOfCentralLocator: function() {
            this.diskWithZip64CentralDirStart = this.reader.readInt(4);
            this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
            this.disksCount = this.reader.readInt(4);
            if (this.disksCount > 1) {
                throw new Error("Multi-volumes zip are not supported");
            }
        },
        /**
       * Read the local files, based on the offset read in the central part.
       */
        readLocalFiles: function() {
            var i, file;
            for (i = 0; i < this.files.length; i++) {
                file = this.files[i];
                this.reader.setIndex(file.localHeaderOffset);
                this.checkSignature(JSZip.signature.LOCAL_FILE_HEADER);
                file.readLocalPart(this.reader);
                file.handleUTF8();
            }
        },
        /**
       * Read the central directory.
       */
        readCentralDir: function() {
            var file;
            this.reader.setIndex(this.centralDirOffset);
            while (this.reader.readString(4) === JSZip.signature.CENTRAL_FILE_HEADER) {
                file = new ZipEntry({
                    zip64: this.zip64
                }, this.loadOptions);
                file.readCentralPart(this.reader);
                this.files.push(file);
            }
        },
        /**
       * Read the end of central directory.
       */
        readEndOfCentral: function() {
            var offset = this.reader.lastIndexOfSignature(JSZip.signature.CENTRAL_DIRECTORY_END);
            if (offset === -1) {
                throw new Error("Corrupted zip : can't find end of central directory");
            }
            this.reader.setIndex(offset);
            this.checkSignature(JSZip.signature.CENTRAL_DIRECTORY_END);
            this.readBlockEndOfCentral();
            /* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
            if (this.diskNumber === MAX_VALUE_16BITS || this.diskWithCentralDirStart === MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === MAX_VALUE_16BITS || this.centralDirRecords === MAX_VALUE_16BITS || this.centralDirSize === MAX_VALUE_32BITS || this.centralDirOffset === MAX_VALUE_32BITS) {
                this.zip64 = true;
                /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */
                // should look for a zip64 EOCD locator
                offset = this.reader.lastIndexOfSignature(JSZip.signature.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                if (offset === -1) {
                    throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
                }
                this.reader.setIndex(offset);
                this.checkSignature(JSZip.signature.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                this.readBlockZip64EndOfCentralLocator();
                // now the zip64 EOCD record
                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
                this.checkSignature(JSZip.signature.ZIP64_CENTRAL_DIRECTORY_END);
                this.readBlockZip64EndOfCentral();
            }
        },
        prepareReader: function(data) {
            var type = JSZip.utils.getTypeOf(data);
            if (type === "string" && !JSZip.support.uint8array) {
                this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
            } else if (type === "nodebuffer") {
                this.reader = new NodeBufferReader(data);
            } else {
                this.reader = new Uint8ArrayReader(JSZip.utils.transformTo("uint8array", data));
            }
        },
        /**
       * Read a zip file and create ZipEntries.
       * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
       */
        load: function(data) {
            this.prepareReader(data);
            this.readEndOfCentral();
            this.readCentralDir();
            this.readLocalFiles();
        }
    };
    // }}} end of ZipEntries
    /**
    * Implementation of the load method of JSZip.
    * It uses the above classes to decode a zip file, and load every files.
    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to load.
    * @param {Object} options Options for loading the data.
    *  options.base64 : is the data in base64 ? default : false
    */
    JSZip.prototype.load = function(data, options) {
        var files, zipEntries, i, input;
        options = options || {};
        if (options.base64) {
            data = JSZip.base64.decode(data);
        }
        zipEntries = new ZipEntries(data, options);
        files = zipEntries.files;
        for (i = 0; i < files.length; i++) {
            input = files[i];
            this.file(input.fileName, input.decompressed, {
                binary: true,
                optimizedBinaryString: true,
                date: input.date,
                dir: input.dir
            });
        }
        return this;
    };
}(this));
if (typeof exports !== 'undefined')  {
    exports.JSZip = JSZip;
}

// enforcing Stuk's coding style
// vim: set shiftwidth=3 softtabstop=3 foldmethod=marker:

/* xls.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
/* vim: set ts=2: */
/*jshint funcscope:true, eqnull:true */
var XLS = {};
(function make_xls(XLS) {
    XLS.version = '0.7.2';
    var current_codepage = 1252,
        current_cptable;
    if (typeof module !== "undefined" && typeof require !== 'undefined') {
        if (typeof cptable === 'undefined')  {
            cptable = require('./dist/cpexcel');
        }
        
        current_cptable = cptable[current_codepage];
    }
    function reset_cp() {
        set_cp(1252);
    }
    function set_cp(cp) {
        current_codepage = cp;
        if (typeof cptable !== 'undefined')  {
            current_cptable = cptable[cp];
        }
        
    }
    var _getchar = function _gc1(x) {
            return String.fromCharCode(x);
        };
    if (typeof cptable !== 'undefined')  {
        _getchar = function _gc2(x) {
            if (current_codepage === 1200)  {
                return String.fromCharCode(x);
            }
            
            return cptable.utils.decode(current_codepage, [
                x & 255,
                x >> 8
            ])[0];
        };
    }
    
    var has_buf = (typeof Buffer !== 'undefined');
    function new_buf(len) {
        /* jshint -W056 */
        return new (has_buf ? Buffer : Array)(len);
    }
    /* jshint +W056 */
    var Base64 = (function make_b64() {
            var map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            return {
                /* (will need this for writing) encode: function(input, utf8) {
			var o = "";
			var c1, c2, c3, e1, e2, e3, e4;
			for(var i = 0; i < input.length; ) {
				c1 = input.charCodeAt(i++);
				c2 = input.charCodeAt(i++);
				c3 = input.charCodeAt(i++);
				e1 = c1 >> 2;
				e2 = (c1 & 3) << 4 | c2 >> 4;
				e3 = (c2 & 15) << 2 | c3 >> 6;
				e4 = c3 & 63;
				if (isNaN(c2)) { e3 = e4 = 64; }
				else if (isNaN(c3)) { e4 = 64; }
				o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);
			}
			return o;
		},*/
                decode: function b64_decode(input, utf8) {
                    var o = "";
                    var c1, c2, c3;
                    var e1, e2, e3, e4;
                    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                    for (var i = 0; i < input.length; ) {
                        e1 = map.indexOf(input.charAt(i++));
                        e2 = map.indexOf(input.charAt(i++));
                        e3 = map.indexOf(input.charAt(i++));
                        e4 = map.indexOf(input.charAt(i++));
                        c1 = e1 << 2 | e2 >> 4;
                        c2 = (e2 & 15) << 4 | e3 >> 2;
                        c3 = (e3 & 3) << 6 | e4;
                        o += String.fromCharCode(c1);
                        if (e3 != 64) {
                            o += String.fromCharCode(c2);
                        }
                        if (e4 != 64) {
                            o += String.fromCharCode(c3);
                        }
                    }
                    return o;
                }
            };
        })();
    function s2a(s) {
        if (has_buf)  {
            return new Buffer(s, "binary");
        }
        
        var w = s.split("").map(function(x) {
                return x.charCodeAt(0) & 255;
            });
        return w;
    }
    function readIEEE754(buf, idx, isLE, nl, ml) {
        if (isLE === undefined)  {
            isLE = true;
        }
        
        if (!nl)  {
            nl = 8;
        }
        
        if (!ml && nl === 8)  {
            ml = 52;
        }
        
        var e, m,
            el = nl * 8 - ml - 1,
            eMax = (1 << el) - 1,
            eBias = eMax >> 1;
        var bits = -7,
            d = isLE ? -1 : 1,
            i = isLE ? (nl - 1) : 0,
            s = buf[idx + i];
        i += d;
        e = s & ((1 << (-bits)) - 1);
        s >>>= (-bits);
        bits += el;
        for (; bits > 0; e = e * 256 + buf[idx + i] , i += d , bits -= 8){}
        m = e & ((1 << (-bits)) - 1);
        e >>>= (-bits);
        bits += ml;
        for (; bits > 0; m = m * 256 + buf[idx + i] , i += d , bits -= 8){}
        if (e === eMax)  {
            return m ? NaN : ((s ? -1 : 1) * Infinity);
        }
        else if (e === 0)  {
            e = 1 - eBias;
        }
        else {
            m = m + Math.pow(2, ml);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - ml);
    }
    var chr0 = /\u0000/g,
        chr1 = /[\u0001-\u0006]/;
    var __toBuffer, ___toBuffer;
    __toBuffer = ___toBuffer = function toBuffer_(bufs) {
        var x = [];
        for (var i = 0; i < bufs[0].length; ++i) {
            x.push.apply(x, bufs[0][i]);
        }
        return x;
    };
    var __utf16le, ___utf16le;
    __utf16le = ___utf16le = function utf16le_(b, s, e) {
        var ss = [];
        for (var i = s; i < e; i += 2) ss.push(String.fromCharCode(__readUInt16LE(b, i)));
        return ss.join("");
    };
    var __hexlify, ___hexlify;
    __hexlify = ___hexlify = function hexlify_(b, s, l) {
        return b.slice(s, (s + l)).map(function(x) {
            return (x < 16 ? "0" : "") + x.toString(16);
        }).join("");
    };
    var __utf8, ___utf8;
    __utf8 = ___utf8 = function(b, s, e) {
        var ss = [];
        for (var i = s; i < e; i++) ss.push(String.fromCharCode(__readUInt8(b, i)));
        return ss.join("");
    };
    var __lpstr, ___lpstr;
    __lpstr = ___lpstr = function lpstr_(b, i) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
    };
    var __lpwstr, ___lpwstr;
    __lpwstr = ___lpwstr = function lpwstr_(b, i) {
        var len = 2 * __readUInt32LE(b, i);
        return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
    };
    var __double, ___double;
    __double = ___double = function(b, idx) {
        return readIEEE754(b, idx);
    };
    var bconcat = function(bufs) {
            return [].concat.apply([], bufs);
        };
    if (typeof Buffer !== "undefined") {
        __utf16le = function utf16le_b(b, s, e) {
            if (!Buffer.isBuffer(b))  {
                return ___utf16le(b, s, e);
            }
            
            return b.toString('utf16le', s, e);
        };
        __hexlify = function(b, s, l) {
            return Buffer.isBuffer(b) ? b.toString('hex', s, s + l) : ___hexlify(b, s, l);
        };
        __lpstr = function lpstr_b(b, i) {
            if (!Buffer.isBuffer(b))  {
                return ___lpstr(b, i);
            }
            
            var len = b.readUInt32LE(i);
            return len > 0 ? b.toString('utf8', i + 4, i + 4 + len - 1) : "";
        };
        __lpwstr = function lpwstr_b(b, i) {
            if (!Buffer.isBuffer(b))  {
                return ___lpwstr(b, i);
            }
            
            var len = 2 * b.readUInt32LE(i);
            return b.toString('utf16le', i + 4, i + 4 + len - 1);
        };
        __utf8 = function utf8_b(s, e) {
            return this.toString('utf8', s, e);
        };
        __toBuffer = function(bufs) {
            return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);
        };
        bconcat = function(bufs) {
            return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs);
        };
        __double = function double_(b, i) {
            if (Buffer.isBuffer(b))  {
                return b.readDoubleLE(i);
            }
            
            return ___double(b, i);
        };
    }
    var __readUInt8 = function(b, idx) {
            return b[idx];
        };
    var __readUInt16LE = function(b, idx) {
            return b[idx + 1] * (1 << 8) + b[idx];
        };
    var __readInt16LE = function(b, idx) {
            var u = b[idx + 1] * (1 << 8) + b[idx];
            return (u < 32768) ? u : (65535 - u + 1) * -1;
        };
    var __readUInt32LE = function(b, idx) {
            return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
        };
    var __readInt32LE = function(b, idx) {
            return (b[idx + 3] << 24) | (b[idx + 2] << 16) | (b[idx + 1] << 8) | b[idx];
        };
    var ___unhexlify = function(s) {
            return s.match(/../g).map(function(x) {
                return parseInt(x, 16);
            });
        };
    var __unhexlify = typeof Buffer !== "undefined" ? function(s) {
            return Buffer.isBuffer(s) ? new Buffer(s, 'hex') : ___unhexlify(s);
        } : ___unhexlify;
    if (typeof cptable !== 'undefined') {
        __utf16le = function(b, s, e) {
            return cptable.utils.decode(1200, b.slice(s, e));
        };
        __utf8 = function(b, s, e) {
            return cptable.utils.decode(65001, b.slice(s, e));
        };
        __lpstr = function(b, i) {
            var len = __readUInt32LE(b, i);
            return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
        };
        __lpwstr = function(b, i) {
            var len = 2 * __readUInt32LE(b, i);
            return len > 0 ? cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
        };
    }
    function ReadShift(size, t) {
        var o, oI, oR,
            oo = [],
            w, vv, i, loc;
        switch (t) {
            /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
            case 'lpstr':
                o = __lpstr(this, this.l);
                size = 5 + o.length;
                break;
            /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
            case 'lpwstr':
                o = __lpwstr(this, this.l);
                size = 5 + o.length;
                if (o[o.length - 1] == '\x00')  {
                    size += 2;
                }
                ;
                break;
            case 'cstr':
                size = 0;
                o = "";
                while ((w = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w));
                o = oo.join("");
                break;
            case 'wstr':
                size = 0;
                o = "";
                while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
                    oo.push(_getchar(w));
                    size += 2;
                };
                size += 2;
                o = oo.join("");
                break;
            /* sbcs and dbcs support continue records in the SST way TODO codepages */
            case 'dbcs':
                o = "";
                loc = this.l;
                for (i = 0; i != size; ++i) {
                    if (this.lens && this.lens.indexOf(loc) !== -1) {
                        w = __readUInt8(this, loc);
                        this.l = loc + 1;
                        vv = ReadShift.call(this, size - i, w ? 'dbcs' : 'sbcs');
                        return oo.join("") + vv;
                    }
                    oo.push(_getchar(__readUInt16LE(this, loc)));
                    loc += 2;
                };
                o = oo.join("");
                size *= 2;
                break;
            case 'sbcs':
                o = "";
                loc = this.l;
                for (i = 0; i != size; ++i) {
                    if (this.lens && this.lens.indexOf(loc) !== -1) {
                        w = __readUInt8(this, loc);
                        this.l = loc + 1;
                        vv = ReadShift.call(this, size - i, w ? 'dbcs' : 'sbcs');
                        return oo.join("") + vv;
                    }
                    oo.push(_getchar(__readUInt8(this, loc)));
                    loc += 1;
                };
                o = oo.join("");
                break;
            case 'utf8':
                o = __utf8(this, this.l, this.l + size);
                break;
            case 'utf16le':
                size *= 2;
                o = __utf16le(this, this.l, this.l + size);
                break;
            default:
                switch (size) {
                    case 1:
                        oI = __readUInt8(this, this.l);
                        this.l++;
                        return oI;
                    case 2:
                        oI = t !== 'i' ? __readUInt16LE(this, this.l) : __readInt16LE(this, this.l);
                        this.l += 2;
                        return oI;
                    case 4:
                        if (t === 'i' || (this[this.l + 3] & 128) === 0) {
                            oI = __readInt32LE(this, this.l);
                            this.l += 4;
                            return oI;
                        } else {
                            oR = __readUInt32LE(this, this.l);
                            this.l += 4;
                            return oR;
                        };
                        break;
                    case 8:
                        if (t === 'f') {
                            oR = __double(this, this.l);
                            this.l += 8;
                            return oR;
                        };
                    /* falls through */
                    case 16:
                        o = __hexlify(this, this.l, size);
                        break;
                };
        }
        this.l += size;
        return o;
    }
    function CheckField(hexstr, fld) {
        var m = __hexlify(this, this.l, hexstr.length >> 1);
        if (m !== hexstr)  {
            throw fld + 'Expected ' + hexstr + ' saw ' + m;
        }
        
        this.l += hexstr.length >> 1;
    }
    function prep_blob(blob, pos) {
        blob.l = pos;
        blob.read_shift = ReadShift;
        blob.chk = CheckField;
    }
    /* ssf.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
    var SSF = {};
    var make_ssf = function make_ssf(SSF) {
            SSF.version = '0.8.1';
            function _strrev(x) {
                var o = "",
                    i = x.length - 1;
                while (i >= 0) o += x.charAt(i--);
                return o;
            }
            function fill(c, l) {
                var o = "";
                while (o.length < l) o += c;
                return o;
            }
            function pad0(v, d) {
                var t = "" + v;
                return t.length >= d ? t : fill('0', d - t.length) + t;
            }
            function pad_(v, d) {
                var t = "" + v;
                return t.length >= d ? t : fill(' ', d - t.length) + t;
            }
            function rpad_(v, d) {
                var t = "" + v;
                return t.length >= d ? t : t + fill(' ', d - t.length);
            }
            function pad0r1(v, d) {
                var t = "" + Math.round(v);
                return t.length >= d ? t : fill('0', d - t.length) + t;
            }
            function pad0r2(v, d) {
                var t = "" + v;
                return t.length >= d ? t : fill('0', d - t.length) + t;
            }
            var p2_32 = Math.pow(2, 32);
            function pad0r(v, d) {
                if (v > p2_32 || v < -p2_32)  {
                    return pad0r1(v, d);
                }
                
                var i = Math.round(v);
                return pad0r2(i, d);
            }
            function isgeneral(s, i) {
                return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
            }
            /* Options */
            var opts_fmt = [
                    [
                        "date1904",
                        0
                    ],
                    [
                        "output",
                        ""
                    ],
                    [
                        "WTF",
                        false
                    ]
                ];
            function fixopts(o) {
                for (var y = 0; y != opts_fmt.length; ++y) if (o[opts_fmt[y][0]] === undefined)  {
                    o[opts_fmt[y][0]] = opts_fmt[y][1];
                }
                ;
            }
            SSF.opts = opts_fmt;
            var table_fmt = {
                    0: 'General',
                    1: '0',
                    2: '0.00',
                    3: '#,##0',
                    4: '#,##0.00',
                    9: '0%',
                    10: '0.00%',
                    11: '0.00E+00',
                    12: '# ?/?',
                    13: '# ??/??',
                    14: 'm/d/yy',
                    15: 'd-mmm-yy',
                    16: 'd-mmm',
                    17: 'mmm-yy',
                    18: 'h:mm AM/PM',
                    19: 'h:mm:ss AM/PM',
                    20: 'h:mm',
                    21: 'h:mm:ss',
                    22: 'm/d/yy h:mm',
                    37: '#,##0 ;(#,##0)',
                    38: '#,##0 ;[Red](#,##0)',
                    39: '#,##0.00;(#,##0.00)',
                    40: '#,##0.00;[Red](#,##0.00)',
                    45: 'mm:ss',
                    46: '[h]:mm:ss',
                    47: 'mmss.0',
                    48: '##0.0E+0',
                    49: '@',
                    56: '"‰∏äÂçà/‰∏ãÂçà "hh"ÊôÇ"mm"ÂàÜ"ss"Áßí "',
                    65535: 'General'
                };
            var days = [
                    [
                        'Sun',
                        'Sunday'
                    ],
                    [
                        'Mon',
                        'Monday'
                    ],
                    [
                        'Tue',
                        'Tuesday'
                    ],
                    [
                        'Wed',
                        'Wednesday'
                    ],
                    [
                        'Thu',
                        'Thursday'
                    ],
                    [
                        'Fri',
                        'Friday'
                    ],
                    [
                        'Sat',
                        'Saturday'
                    ]
                ];
            var months = [
                    [
                        'J',
                        'Jan',
                        'January'
                    ],
                    [
                        'F',
                        'Feb',
                        'February'
                    ],
                    [
                        'M',
                        'Mar',
                        'March'
                    ],
                    [
                        'A',
                        'Apr',
                        'April'
                    ],
                    [
                        'M',
                        'May',
                        'May'
                    ],
                    [
                        'J',
                        'Jun',
                        'June'
                    ],
                    [
                        'J',
                        'Jul',
                        'July'
                    ],
                    [
                        'A',
                        'Aug',
                        'August'
                    ],
                    [
                        'S',
                        'Sep',
                        'September'
                    ],
                    [
                        'O',
                        'Oct',
                        'October'
                    ],
                    [
                        'N',
                        'Nov',
                        'November'
                    ],
                    [
                        'D',
                        'Dec',
                        'December'
                    ]
                ];
            function frac(x, D, mixed) {
                var sgn = x < 0 ? -1 : 1;
                var B = x * sgn;
                var P_2 = 0,
                    P_1 = 1,
                    P = 0;
                var Q_2 = 1,
                    Q_1 = 0,
                    Q = 0;
                var A = Math.floor(B);
                while (Q_1 < D) {
                    A = Math.floor(B);
                    P = A * P_1 + P_2;
                    Q = A * Q_1 + Q_2;
                    if ((B - A) < 5.0E-10)  {
                        break;
                    }
                    
                    B = 1 / (B - A);
                    P_2 = P_1;
                    P_1 = P;
                    Q_2 = Q_1;
                    Q_1 = Q;
                }
                if (Q > D) {
                    Q = Q_1;
                    P = P_1;
                }
                if (Q > D) {
                    Q = Q_2;
                    P = P_2;
                }
                if (!mixed)  {
                    return [
                        0,
                        sgn * P,
                        Q
                    ];
                }
                
                if (Q === 0)  {
                    throw "Unexpected state: " + P + " " + P_1 + " " + P_2 + " " + Q + " " + Q_1 + " " + Q_2;
                }
                
                var q = Math.floor(sgn * P / Q);
                return [
                    q,
                    sgn * P - q * Q,
                    Q
                ];
            }
            function general_fmt_int(v, opts) {
                return "" + v;
            }
            SSF._general_int = general_fmt_int;
            var general_fmt_num = (function make_general_fmt_num() {
                    var gnr1 = /\.(\d*[1-9])0+$/,
                        gnr2 = /\.0*$/,
                        gnr4 = /\.(\d*[1-9])0+/,
                        gnr5 = /\.0*[Ee]/,
                        gnr6 = /(E[+-])(\d)$/;
                    function gfn2(v) {
                        var w = (v < 0 ? 12 : 11);
                        var o = gfn5(v.toFixed(12));
                        if (o.length <= w)  {
                            return o;
                        }
                        
                        o = v.toPrecision(10);
                        if (o.length <= w)  {
                            return o;
                        }
                        
                        return v.toExponential(5);
                    }
                    function gfn3(v) {
                        var o = v.toFixed(11).replace(gnr1, ".$1");
                        if (o.length > (v < 0 ? 12 : 11))  {
                            o = v.toPrecision(6);
                        }
                        
                        return o;
                    }
                    function gfn4(o) {
                        for (var i = 0; i != o.length; ++i) if ((o.charCodeAt(i) | 32) === 101)  {
                            return o.replace(gnr4, ".$1").replace(gnr5, "E").replace("e", "E").replace(gnr6, "$10$2");
                        }
                        ;
                        return o;
                    }
                    function gfn5(o) {
                        //for(var i = 0; i != o.length; ++i) if(o.charCodeAt(i) === 46) return o.replace(gnr2,"").replace(gnr1,".$1");
                        //return o;
                        return o.indexOf(".") > -1 ? o.replace(gnr2, "").replace(gnr1, ".$1") : o;
                    }
                    return function general_fmt_num(v, opts) {
                        var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E),
                            o;
                        if (V >= -4 && V <= -1)  {
                            o = v.toPrecision(10 + V);
                        }
                        else if (Math.abs(V) <= 9)  {
                            o = gfn2(v);
                        }
                        else if (V === 10)  {
                            o = v.toFixed(10).substr(0, 12);
                        }
                        else  {
                            o = gfn3(v);
                        }
                        
                        return gfn5(gfn4(o));
                    };
                })();
            SSF._general_num = general_fmt_num;
            function general_fmt(v, opts) {
                switch (typeof v) {
                    case 'string':
                        return v;
                    case 'boolean':
                        return v ? "TRUE" : "FALSE";
                    case 'number':
                        return (v | 0) === v ? general_fmt_int(v, opts) : general_fmt_num(v, opts);
                }
                throw new Error("unsupported value in General format: " + v);
            }
            SSF._general = general_fmt;
            function fix_hijri(date, o) {
                return 0;
            }
            function parse_date_code(v, opts, b2) {
                if (v > 2958465 || v < 0)  {
                    return null;
                }
                
                var date = (v | 0),
                    time = Math.floor(86400 * (v - date)),
                    dow = 0;
                var dout = [];
                var out = {
                        D: date,
                        T: time,
                        u: 86400 * (v - date) - time,
                        y: 0,
                        m: 0,
                        d: 0,
                        H: 0,
                        M: 0,
                        S: 0,
                        q: 0
                    };
                if (Math.abs(out.u) < 1.0E-6)  {
                    out.u = 0;
                }
                
                fixopts(opts != null ? opts : (opts = []));
                if (opts.date1904)  {
                    date += 1462;
                }
                
                if (out.u > 0.999) {
                    out.u = 0;
                    if (++time == 86400) {
                        time = 0;
                        ++date;
                    }
                }
                if (date === 60) {
                    dout = b2 ? [
                        1317,
                        10,
                        29
                    ] : [
                        1900,
                        2,
                        29
                    ];
                    dow = 3;
                } else if (date === 0) {
                    dout = b2 ? [
                        1317,
                        8,
                        29
                    ] : [
                        1900,
                        1,
                        0
                    ];
                    dow = 6;
                } else {
                    if (date > 60)  {
                        --date;
                    }
                    
                    /* 1 = Jan 1 1900 */
                    var d = new Date(1900, 0, 1);
                    d.setDate(d.getDate() + date - 1);
                    dout = [
                        d.getFullYear(),
                        d.getMonth() + 1,
                        d.getDate()
                    ];
                    dow = d.getDay();
                    if (date < 60)  {
                        dow = (dow + 6) % 7;
                    }
                    
                    if (b2)  {
                        dow = fix_hijri(d, dout);
                    }
                    
                }
                out.y = dout[0];
                out.m = dout[1];
                out.d = dout[2];
                out.S = time % 60;
                time = Math.floor(time / 60);
                out.M = time % 60;
                time = Math.floor(time / 60);
                out.H = time;
                out.q = dow;
                return out;
            }
            SSF.parse_date_code = parse_date_code;
            /*jshint -W086 */
            function write_date(type, fmt, val, ss0) {
                var o = "",
                    ss = 0,
                    tt = 0,
                    y = val.y,
                    out,
                    outl = 0;
                switch (type) {
                    case 98:
                        /* 'b' buddhist year */
                        y = val.y + 543;
                    /* falls through */
                    case 121:
                        /* 'y' year */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = y % 100;
                                outl = 2;
                                break;
                            default:
                                out = y % 10000;
                                outl = 4;
                                break;
                        };
                        break;
                    case 109:
                        /* 'm' month */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.m;
                                outl = fmt.length;
                                break;
                            case 3:
                                return months[val.m - 1][1];
                            case 5:
                                return months[val.m - 1][0];
                            default:
                                return months[val.m - 1][2];
                        };
                        break;
                    case 100:
                        /* 'd' day */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.d;
                                outl = fmt.length;
                                break;
                            case 3:
                                return days[val.q][0];
                            default:
                                return days[val.q][1];
                        };
                        break;
                    case 104:
                        /* 'h' 12-hour */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = 1 + (val.H + 11) % 12;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad hour format: ' + fmt;
                        };
                        break;
                    case 72:
                        /* 'H' 24-hour */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.H;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad hour format: ' + fmt;
                        };
                        break;
                    case 77:
                        /* 'M' minutes */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.M;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad minute format: ' + fmt;
                        };
                        break;
                    case 115:
                        /* 's' seconds */
                        if (val.u === 0)  {
                            switch (fmt) {
                                case 's':
                                case 'ss':
                                    return pad0(val.S, fmt.length);
                                case '.0':
                                case '.00':
                                case '.000':
                            };
                        }
                        ;
                        switch (fmt) {
                            case 's':
                            case 'ss':
                            case '.0':
                            case '.00':
                            case '.000':
                                if (ss0 >= 2)  {
                                    tt = ss0 === 3 ? 1000 : 100;
                                }
                                else  {
                                    tt = ss0 === 1 ? 10 : 1;
                                }
                                ;
                                ss = Math.round((tt) * (val.S + val.u));
                                if (ss >= 60 * tt)  {
                                    ss = 0;
                                }
                                ;
                                if (fmt === 's')  {
                                    return ss === 0 ? "0" : "" + ss / tt;
                                }
                                ;
                                o = pad0(ss, 2 + ss0);
                                if (fmt === 'ss')  {
                                    return o.substr(0, 2);
                                }
                                ;
                                return "." + o.substr(2, fmt.length - 1);
                            default:
                                throw 'bad second format: ' + fmt;
                        };
                    case 90:
                        /* 'Z' absolute time */
                        switch (fmt) {
                            case '[h]':
                            case '[hh]':
                                out = val.D * 24 + val.H;
                                break;
                            case '[m]':
                            case '[mm]':
                                out = (val.D * 24 + val.H) * 60 + val.M;
                                break;
                            case '[s]':
                            case '[ss]':
                                out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                                break;
                            default:
                                throw 'bad abstime format: ' + fmt;
                        };
                        outl = fmt.length === 3 ? 1 : 2;
                        break;
                    case 101:
                        /* 'e' era */
                        out = y;
                        outl = 1;
                }
                if (outl > 0)  {
                    return pad0(out, outl);
                }
                else  {
                    return "";
                }
                
            }
            /*jshint +W086 */
            function commaify(s) {
                if (s.length <= 3)  {
                    return s;
                }
                
                var j = (s.length % 3),
                    o = s.substr(0, j);
                for (; j != s.length; j += 3) o += (o.length > 0 ? "," : "") + s.substr(j, 3);
                return o;
            }
            var write_num = (function make_write_num() {
                    var pct1 = /%/g;
                    function write_num_pct(type, fmt, val) {
                        var sfmt = fmt.replace(pct1, ""),
                            mul = fmt.length - sfmt.length;
                        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
                    }
                    function write_num_cm(type, fmt, val) {
                        var idx = fmt.length - 1;
                        while (fmt.charCodeAt(idx - 1) === 44) --idx;
                        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
                    }
                    function write_num_exp(fmt, val) {
                        var o;
                        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
                        if (fmt.match(/^#+0.0E\+0$/)) {
                            var period = fmt.indexOf(".");
                            if (period === -1)  {
                                period = fmt.indexOf('E');
                            }
                            
                            var ee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) % period;
                            if (ee < 0)  {
                                ee += period;
                            }
                            
                            o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
                            if (o.indexOf("e") === -1) {
                                var fakee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E);
                                if (o.indexOf(".") === -1)  {
                                    o = o[0] + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
                                }
                                else  {
                                    o += "E+" + (fakee - ee);
                                }
                                
                                while (o.substr(0, 2) === "0.") {
                                    o = o[0] + o.substr(2, period) + "." + o.substr(2 + period);
                                    o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
                                }
                                o = o.replace(/\+-/, "-");
                            }
                            o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
                                return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
                            });
                        } else  {
                            o = val.toExponential(idx);
                        }
                        
                        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))  {
                            o = o.substr(0, o.length - 1) + "0" + o[o.length - 1];
                        }
                        
                        if (fmt.match(/E\-/) && o.match(/e\+/))  {
                            o = o.replace(/e\+/, "e");
                        }
                        
                        return o.replace("e", "E");
                    }
                    var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
                    function write_num_f1(r, aval, sign) {
                        var den = parseInt(r[4]),
                            rr = Math.round(aval * den),
                            base = Math.floor(rr / den);
                        var myn = (rr - base * den),
                            myd = den;
                        return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
                    }
                    function write_num_f2(r, aval, sign) {
                        return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
                    }
                    var dec1 = /^#*0*\.(0+)/;
                    var closeparen = /\).*[0#]/;
                    var phone = /\(###\) ###\\?-####/;
                    function hashq(str) {
                        var o = "",
                            cc;
                        for (var i = 0; i != str.length; ++i) switch ((cc = str.charCodeAt(i))) {
                            case 35:
                                break;
                            case 63:
                                o += " ";
                                break;
                            case 48:
                                o += "0";
                                break;
                            default:
                                o += String.fromCharCode(cc);
                        };
                        return o;
                    }
                    function rnd(val, d) {
                        var dd = Math.pow(10, d);
                        return "" + (Math.round(val * dd) / dd);
                    }
                    function dec(val, d) {
                        return Math.round((val - Math.floor(val)) * Math.pow(10, d));
                    }
                    function flr(val) {
                        if (val < 2147483647 && val > -2.147483648E9)  {
                            return "" + (val >= 0 ? (val | 0) : (val - 1 | 0));
                        }
                        
                        return "" + Math.floor(val);
                    }
                    function write_num_flt(type, fmt, val) {
                        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
                            var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
                            if (val >= 0)  {
                                return write_num_flt('n', ffmt, val);
                            }
                            
                            return '(' + write_num_flt('n', ffmt, -val) + ')';
                        }
                        if (fmt.charCodeAt(fmt.length - 1) === 44)  {
                            return write_num_cm(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('%') !== -1)  {
                            return write_num_pct(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('E') !== -1)  {
                            return write_num_exp(fmt, val);
                        }
                        
                        if (fmt.charCodeAt(0) === 36)  {
                            return "$" + write_num_flt(type, fmt.substr(fmt[1] == ' ' ? 2 : 1), val);
                        }
                        
                        var o, oo;
                        var r, ri, ff,
                            aval = Math.abs(val),
                            sign = val < 0 ? "-" : "";
                        if (fmt.match(/^00+$/))  {
                            return sign + pad0r(aval, fmt.length);
                        }
                        
                        if (fmt.match(/^[#?]+$/)) {
                            o = pad0r(val, 0);
                            if (o === "0")  {
                                o = "";
                            }
                            
                            return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(frac1)) !== null)  {
                            return write_num_f1(r, aval, sign);
                        }
                        
                        if (fmt.match(/^#+0+$/) !== null)  {
                            return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
                        }
                        
                        if ((r = fmt.match(dec1)) !== null) {
                            o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + r[1]).replace(/\.$/, "." + r[1]).replace(/\.(\d*)$/, function($$, $1) {
                                return "." + $1 + fill("0", r[1].length - $1.length);
                            });
                            return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
                        }
                        fmt = fmt.replace(/^#+([0.])/, "$1");
                        if ((r = fmt.match(/^(0*)\.(#*)$/)) !== null) {
                            return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
                        }
                        if ((r = fmt.match(/^#,##0(\.?)$/)) !== null)  {
                            return sign + commaify(pad0r(aval, 0));
                        }
                        
                        if ((r = fmt.match(/^#,##0\.([#0]*0)$/)) !== null) {
                            return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val))) + "." + pad0(dec(val, r[1].length), r[1].length);
                        }
                        if ((r = fmt.match(/^#,#*,#0/)) !== null)  {
                            return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
                        }
                        
                        if ((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) !== null) {
                            o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
                            ri = 0;
                            return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
                                return ri < o.length ? o[ri++] : x === '0' ? '0' : "";
                            }));
                        }
                        if (fmt.match(phone) !== null) {
                            o = write_num_flt(type, "##########", val);
                            return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
                        }
                        var oa = "";
                        if ((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(r[4].length, 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, false);
                            o = "" + sign;
                            oa = write_num("n", r[1], ff[1]);
                            if (oa[oa.length - 1] == " ")  {
                                oa = oa.substr(0, oa.length - 1) + "0";
                            }
                            
                            o += oa + r[2] + "/" + r[3];
                            oa = rpad_(ff[2], ri);
                            if (oa.length < r[4].length)  {
                                oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
                            }
                            
                            o += oa;
                            return o;
                        }
                        if ((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(Math.max(r[1].length, r[4].length), 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, true);
                            return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
                        }
                        if ((r = fmt.match(/^[#0?]+$/)) !== null) {
                            o = pad0r(val, 0);
                            if (fmt.length <= o.length)  {
                                return o;
                            }
                            
                            return hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(/^([#0?]+)\.([#0]+)$/)) !== null) {
                            o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
                            ri = o.indexOf(".");
                            var lres = fmt.indexOf(".") - ri,
                                rres = fmt.length - o.length - lres;
                            return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
                        }
                        if ((r = fmt.match(/^00,000\.([#0]*0)$/)) !== null) {
                            ri = dec(val, r[1].length);
                            return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
                                return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
                            }) + "." + pad0(ri, r[1].length);
                        }
                        switch (fmt) {
                            case "#,###":
                                var x = commaify(pad0r(aval, 0));
                                return x !== "0" ? sign + x : "";
                            default:
                        }
                        throw new Error("unsupported format |" + fmt + "|");
                    }
                    function write_num_cm2(type, fmt, val) {
                        var idx = fmt.length - 1;
                        while (fmt.charCodeAt(idx - 1) === 44) --idx;
                        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
                    }
                    function write_num_pct2(type, fmt, val) {
                        var sfmt = fmt.replace(pct1, ""),
                            mul = fmt.length - sfmt.length;
                        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
                    }
                    function write_num_exp2(fmt, val) {
                        var o;
                        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
                        if (fmt.match(/^#+0.0E\+0$/)) {
                            var period = fmt.indexOf(".");
                            if (period === -1)  {
                                period = fmt.indexOf('E');
                            }
                            
                            var ee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) % period;
                            if (ee < 0)  {
                                ee += period;
                            }
                            
                            o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
                            if (!o.match(/[Ee]/)) {
                                var fakee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E);
                                if (o.indexOf(".") === -1)  {
                                    o = o[0] + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
                                }
                                else  {
                                    o += "E+" + (fakee - ee);
                                }
                                
                                o = o.replace(/\+-/, "-");
                            }
                            o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
                                return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
                            });
                        } else  {
                            o = val.toExponential(idx);
                        }
                        
                        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))  {
                            o = o.substr(0, o.length - 1) + "0" + o[o.length - 1];
                        }
                        
                        if (fmt.match(/E\-/) && o.match(/e\+/))  {
                            o = o.replace(/e\+/, "e");
                        }
                        
                        return o.replace("e", "E");
                    }
                    function write_num_int(type, fmt, val) {
                        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
                            var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
                            if (val >= 0)  {
                                return write_num_int('n', ffmt, val);
                            }
                            
                            return '(' + write_num_int('n', ffmt, -val) + ')';
                        }
                        if (fmt.charCodeAt(fmt.length - 1) === 44)  {
                            return write_num_cm2(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('%') !== -1)  {
                            return write_num_pct2(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('E') !== -1)  {
                            return write_num_exp2(fmt, val);
                        }
                        
                        if (fmt.charCodeAt(0) === 36)  {
                            return "$" + write_num_int(type, fmt.substr(fmt[1] == ' ' ? 2 : 1), val);
                        }
                        
                        var o;
                        var r, ri, ff,
                            aval = Math.abs(val),
                            sign = val < 0 ? "-" : "";
                        if (fmt.match(/^00+$/))  {
                            return sign + pad0(aval, fmt.length);
                        }
                        
                        if (fmt.match(/^[#?]+$/)) {
                            o = ("" + val);
                            if (val === 0)  {
                                o = "";
                            }
                            
                            return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(frac1)) !== null)  {
                            return write_num_f2(r, aval, sign);
                        }
                        
                        if (fmt.match(/^#+0+$/) !== null)  {
                            return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
                        }
                        
                        if ((r = fmt.match(dec1)) !== null) {
                            o = ("" + val).replace(/^([^\.]+)$/, "$1." + r[1]).replace(/\.$/, "." + r[1]).replace(/\.(\d*)$/, function($$, $1) {
                                return "." + $1 + fill("0", r[1].length - $1.length);
                            });
                            return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
                        }
                        fmt = fmt.replace(/^#+([0.])/, "$1");
                        if ((r = fmt.match(/^(0*)\.(#*)$/)) !== null) {
                            return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
                        }
                        if ((r = fmt.match(/^#,##0(\.?)$/)) !== null)  {
                            return sign + commaify(("" + aval));
                        }
                        
                        if ((r = fmt.match(/^#,##0\.([#0]*0)$/)) !== null) {
                            return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(("" + val)) + "." + fill('0', r[1].length);
                        }
                        if ((r = fmt.match(/^#,#*,#0/)) !== null)  {
                            return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
                        }
                        
                        if ((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) !== null) {
                            o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
                            ri = 0;
                            return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
                                return ri < o.length ? o[ri++] : x === '0' ? '0' : "";
                            }));
                        }
                        if (fmt.match(phone) !== null) {
                            o = write_num_int(type, "##########", val);
                            return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
                        }
                        var oa = "";
                        if ((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(r[4].length, 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, false);
                            o = "" + sign;
                            oa = write_num("n", r[1], ff[1]);
                            if (oa[oa.length - 1] == " ")  {
                                oa = oa.substr(0, oa.length - 1) + "0";
                            }
                            
                            o += oa + r[2] + "/" + r[3];
                            oa = rpad_(ff[2], ri);
                            if (oa.length < r[4].length)  {
                                oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
                            }
                            
                            o += oa;
                            return o;
                        }
                        if ((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(Math.max(r[1].length, r[4].length), 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, true);
                            return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
                        }
                        if ((r = fmt.match(/^[#0?]+$/)) !== null) {
                            o = "" + val;
                            if (fmt.length <= o.length)  {
                                return o;
                            }
                            
                            return hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(/^([#0]+)\.([#0]+)$/)) !== null) {
                            o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
                            ri = o.indexOf(".");
                            var lres = fmt.indexOf(".") - ri,
                                rres = fmt.length - o.length - lres;
                            return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
                        }
                        if ((r = fmt.match(/^00,000\.([#0]*0)$/)) !== null) {
                            return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
                                return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
                            }) + "." + pad0(0, r[1].length);
                        }
                        switch (fmt) {
                            case "#,###":
                                var x = commaify("" + aval);
                                return x !== "0" ? sign + x : "";
                            default:
                        }
                        throw new Error("unsupported format |" + fmt + "|");
                    }
                    return function write_num(type, fmt, val) {
                        return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
                    };
                })();
            function split_fmt(fmt) {
                var out = [];
                var in_str = false,
                    cc;
                for (var i = 0,
                    j = 0; i < fmt.length; ++i) switch ((cc = fmt.charCodeAt(i))) {
                    case 34:
                        /* '"' */
                        in_str = !in_str;
                        break;
                    case 95:
                    case 42:
                    case 92:
                        /* '_' '*' '\\' */
                        ++i;
                        break;
                    case 59:
                        /* ';' */
                        out[out.length] = fmt.substr(j, i - j);
                        j = i + 1;
                };
                out[out.length] = fmt.substr(j);
                if (in_str === true)  {
                    throw new Error("Format |" + fmt + "| unterminated string ");
                }
                
                return out;
            }
            SSF._split = split_fmt;
            var abstime = /\[[HhMmSs]*\]/;
            function eval_fmt(fmt, v, opts, flen) {
                var out = [],
                    o = "",
                    i = 0,
                    c = "",
                    lst = 't',
                    q, dt, j, cc;
                var hr = 'H';
                /* Tokenize */
                while (i < fmt.length) {
                    switch ((c = fmt[i])) {
                        case 'G':
                            /* General */
                            if (!isgeneral(fmt, i))  {
                                throw new Error('unrecognized character ' + c + ' in ' + fmt);
                            }
                            ;
                            out[out.length] = {
                                t: 'G',
                                v: 'General'
                            };
                            i += 7;
                            break;
                        case '"':
                            /* Literal text */
                            for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length; ) o += String.fromCharCode(cc);
                            out[out.length] = {
                                t: 't',
                                v: o
                            };
                            ++i;
                            break;
                        case '\\':
                            var w = fmt[++i],
                                t = (w === "(" || w === ")") ? w : 't';
                            out[out.length] = {
                                t: t,
                                v: w
                            };
                            ++i;
                            break;
                        case '_':
                            out[out.length] = {
                                t: 't',
                                v: " "
                            };
                            i += 2;
                            break;
                        case '@':
                            /* Text Placeholder */
                            out[out.length] = {
                                t: 'T',
                                v: v
                            };
                            ++i;
                            break;
                        case 'B':
                        case 'b':
                            if (fmt[i + 1] === "1" || fmt[i + 1] === "2") {
                                if (dt == null) {
                                    dt = parse_date_code(v, opts, fmt[i + 1] === "2");
                                    if (dt == null)  {
                                        return "";
                                    }
                                    
                                }
                                out[out.length] = {
                                    t: 'X',
                                    v: fmt.substr(i, 2)
                                };
                                lst = c;
                                i += 2;
                                break;
                            };
                        /* falls through */
                        case 'M':
                        case 'D':
                        case 'Y':
                        case 'H':
                        case 'S':
                        case 'E':
                            c = c.toLowerCase();
                        /* falls through */
                        case 'm':
                        case 'd':
                        case 'y':
                        case 'h':
                        case 's':
                        case 'e':
                        case 'g':
                            if (v < 0)  {
                                return "";
                            }
                            ;
                            if (dt == null) {
                                dt = parse_date_code(v, opts);
                                if (dt == null)  {
                                    return "";
                                }
                                
                            };
                            o = c;
                            while (++i < fmt.length && fmt[i].toLowerCase() === c) o += c;
                            if (c === 'm' && lst.toLowerCase() === 'h')  {
                                c = 'M';
                            }
                            ;
                            /* m = minute */
                            if (c === 'h')  {
                                c = hr;
                            }
                            ;
                            out[out.length] = {
                                t: c,
                                v: o
                            };
                            lst = c;
                            break;
                        case 'A':
                            q = {
                                t: c,
                                v: "A"
                            };
                            if (dt == null)  {
                                dt = parse_date_code(v, opts);
                            }
                            ;
                            if (fmt.substr(i, 3) === "A/P") {
                                if (dt != null)  {
                                    q.v = dt.H >= 12 ? "P" : "A";
                                }
                                
                                q.t = 'T';
                                hr = 'h';
                                i += 3;
                            } else if (fmt.substr(i, 5) === "AM/PM") {
                                if (dt != null)  {
                                    q.v = dt.H >= 12 ? "PM" : "AM";
                                }
                                
                                q.t = 'T';
                                i += 5;
                                hr = 'h';
                            } else {
                                q.t = "t";
                                ++i;
                            };
                            if (dt == null && q.t === 'T')  {
                                return "";
                            }
                            ;
                            out[out.length] = q;
                            lst = c;
                            break;
                        case '[':
                            o = c;
                            while (fmt[i++] !== ']' && i < fmt.length) o += fmt[i];
                            if (o.substr(-1) !== ']')  {
                                throw 'unterminated "[" block: |' + o + '|';
                            }
                            ;
                            if (o.match(abstime)) {
                                if (dt == null) {
                                    dt = parse_date_code(v, opts);
                                    if (dt == null)  {
                                        return "";
                                    }
                                    
                                }
                                out[out.length] = {
                                    t: 'Z',
                                    v: o.toLowerCase()
                                };
                            } else {
                                o = "";
                            };
                            break;
                        /* Numbers */
                        case '.':
                            if (dt != null) {
                                o = c;
                                while ((c = fmt[++i]) === "0") o += c;
                                out[out.length] = {
                                    t: 's',
                                    v: o
                                };
                                break;
                            };
                        /* falls through */
                        case '0':
                        case '#':
                            o = c;
                            while ("0#?.,E+-%".indexOf(c = fmt[++i]) > -1 || c == '\\' && fmt[i + 1] == "-" && "0#".indexOf(fmt[i + 2]) > -1) o += c;
                            out[out.length] = {
                                t: 'n',
                                v: o
                            };
                            break;
                        case '?':
                            o = c;
                            while (fmt[++i] === c) o += c;
                            q = {
                                t: c,
                                v: o
                            };
                            out[out.length] = q;
                            lst = c;
                            break;
                        case '*':
                            ++i;
                            if (fmt[i] == ' ' || fmt[i] == '*')  {
                                ++i;
                            }
                            ;
                            break;
                        // **
                        case '(':
                        case ')':
                            out[out.length] = {
                                t: (flen === 1 ? 't' : c),
                                v: c
                            };
                            ++i;
                            break;
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            o = c;
                            while ("0123456789".indexOf(fmt[++i]) > -1) o += fmt[i];
                            out[out.length] = {
                                t: 'D',
                                v: o
                            };
                            break;
                        case ' ':
                            out[out.length] = {
                                t: c,
                                v: c
                            };
                            ++i;
                            break;
                        default:
                            if (",$-+/():!^&'~{}<>=‚Ç¨acfijklopqrtuvwxz".indexOf(c) === -1)  {
                                throw new Error('unrecognized character ' + c + ' in ' + fmt);
                            }
                            ;
                            out[out.length] = {
                                t: 't',
                                v: c
                            };
                            ++i;
                            break;
                    }
                }
                var bt = 0,
                    ss0 = 0,
                    ssm;
                for (i = out.length - 1 , lst = 't'; i >= 0; --i) {
                    switch (out[i].t) {
                        case 'h':
                        case 'H':
                            out[i].t = hr;
                            lst = 'h';
                            if (bt < 1)  {
                                bt = 1;
                            }
                            ;
                            break;
                        case 's':
                            if ((ssm = out[i].v.match(/\.0+$/)))  {
                                ss0 = Math.max(ss0, ssm[0].length - 1);
                            }
                            ;
                            if (bt < 3)  {
                                bt = 3;
                            }
                            ;
                        /* falls through */
                        case 'd':
                        case 'y':
                        case 'M':
                        case 'e':
                            lst = out[i].t;
                            break;
                        case 'm':
                            if (lst === 's') {
                                out[i].t = 'M';
                                if (bt < 2)  {
                                    bt = 2;
                                }
                                
                            };
                            break;
                        case 'X':
                            if (out[i].v === "B2")  {
                                ;
                            }
                            ;
                            break;
                        case 'Z':
                            if (bt < 1 && out[i].v.match(/[Hh]/))  {
                                bt = 1;
                            }
                            ;
                            if (bt < 2 && out[i].v.match(/[Mm]/))  {
                                bt = 2;
                            }
                            ;
                            if (bt < 3 && out[i].v.match(/[Ss]/))  {
                                bt = 3;
                            }
                            ;
                    }
                }
                switch (bt) {
                    case 0:
                        break;
                    case 1:
                        if (dt.u >= 0.5) {
                            dt.u = 0;
                            ++dt.S;
                        };
                        if (dt.S >= 60) {
                            dt.S = 0;
                            ++dt.M;
                        };
                        if (dt.M >= 60) {
                            dt.M = 0;
                            ++dt.H;
                        };
                        break;
                    case 2:
                        if (dt.u >= 0.5) {
                            dt.u = 0;
                            ++dt.S;
                        };
                        if (dt.S >= 60) {
                            dt.S = 0;
                            ++dt.M;
                        };
                        break;
                }
                /* replace fields */
                var nstr = "",
                    jj;
                for (i = 0; i < out.length; ++i) {
                    switch (out[i].t) {
                        case 't':
                        case 'T':
                        case ' ':
                        case 'D':
                            break;
                        case 'X':
                            out[i] = undefined;
                            break;
                        case 'd':
                        case 'm':
                        case 'y':
                        case 'h':
                        case 'H':
                        case 'M':
                        case 's':
                        case 'e':
                        case 'b':
                        case 'Z':
                            out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
                            out[i].t = 't';
                            break;
                        case 'n':
                        case '(':
                        case '?':
                            jj = i + 1;
                            while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === '?' || out[jj + 1].t === "t" && out[jj + 1].v === '/') || out[i].t === '(' && (c === ' ' || c === 'n' || c === ')') || c === 't' && (out[jj].v === '/' || '$‚Ç¨'.indexOf(out[jj].v) > -1 || out[jj].v === ' ' && out[jj + 1] != null && out[jj + 1].t == '?'))) {
                                out[i].v += out[jj].v;
                                out[jj] = undefined;
                                ++jj;
                            };
                            nstr += out[i].v;
                            i = jj - 1;
                            break;
                        case 'G':
                            out[i].t = 't';
                            out[i].v = general_fmt(v, opts);
                            break;
                    }
                }
                var vv = "",
                    myv, ostr;
                if (nstr.length > 0) {
                    myv = (v < 0 && nstr.charCodeAt(0) === 45 ? -v : v);
                    /* '-' */
                    ostr = write_num(nstr.charCodeAt(0) === 40 ? '(' : 'n', nstr, myv);
                    /* '(' */
                    jj = ostr.length - 1;
                    var decpt = out.length;
                    for (i = 0; i < out.length; ++i) if (out[i] != null && out[i].v.indexOf(".") > -1) {
                        decpt = i;
                        break;
                    };
                    var lasti = out.length;
                    if (decpt === out.length && ostr.indexOf("E") === -1) {
                        for (i = out.length - 1; i >= 0; --i) {
                            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1)  {
                                
                                continue;
                            }
                            
                            if (jj >= out[i].v.length - 1) {
                                jj -= out[i].v.length;
                                out[i].v = ostr.substr(jj + 1, out[i].v.length);
                            } else if (jj < 0)  {
                                out[i].v = "";
                            }
                            else {
                                out[i].v = ostr.substr(0, jj + 1);
                                jj = -1;
                            }
                            out[i].t = 't';
                            lasti = i;
                        }
                        if (jj >= 0 && lasti < out.length)  {
                            out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
                        }
                        
                    } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
                        jj = ostr.indexOf(".") - 1;
                        for (i = decpt; i >= 0; --i) {
                            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1)  {
                                
                                continue;
                            }
                            
                            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
                            vv = out[i].v.substr(j + 1);
                            for (; j >= 0; --j) {
                                if (jj >= 0 && (out[i].v[j] === "0" || out[i].v[j] === "#"))  {
                                    vv = ostr[jj--] + vv;
                                }
                                
                            }
                            out[i].v = vv;
                            out[i].t = 't';
                            lasti = i;
                        }
                        if (jj >= 0 && lasti < out.length)  {
                            out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
                        }
                        
                        jj = ostr.indexOf(".") + 1;
                        for (i = decpt; i < out.length; ++i) {
                            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt)  {
                                
                                continue;
                            }
                            
                            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
                            vv = out[i].v.substr(0, j);
                            for (; j < out[i].v.length; ++j) {
                                if (jj < ostr.length)  {
                                    vv += ostr[jj++];
                                }
                                
                            }
                            out[i].v = vv;
                            out[i].t = 't';
                            lasti = i;
                        }
                    }
                }
                for (i = 0; i < out.length; ++i) if (out[i] != null && 'n(?'.indexOf(out[i].t) > -1) {
                    myv = (flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v);
                    out[i].v = write_num(out[i].t, out[i].v, myv);
                    out[i].t = 't';
                };
                var retval = "";
                for (i = 0; i !== out.length; ++i) if (out[i] != null)  {
                    retval += out[i].v;
                }
                ;
                return retval;
            }
            SSF._eval = eval_fmt;
            var cfregex = /\[[=<>]/;
            var cfregex2 = /\[([=<>]*)(-?\d+\.?\d*)\]/;
            function chkcond(v, rr) {
                if (rr == null)  {
                    return false;
                }
                
                var thresh = parseFloat(rr[2]);
                switch (rr[1]) {
                    case "=":
                        if (v == thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case ">":
                        if (v > thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case "<":
                        if (v < thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case "<>":
                        if (v != thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case ">=":
                        if (v >= thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case "<=":
                        if (v <= thresh)  {
                            return true;
                        }
                        ;
                        break;
                }
                return false;
            }
            function choose_fmt(f, v) {
                var fmt = split_fmt(f);
                var l = fmt.length,
                    lat = fmt[l - 1].indexOf("@");
                if (l < 4 && lat > -1)  {
                    --l;
                }
                
                if (fmt.length > 4)  {
                    throw "cannot find right format for |" + fmt + "|";
                }
                
                if (typeof v !== "number")  {
                    return [
                        4,
                        fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"
                    ];
                }
                
                switch (fmt.length) {
                    case 1:
                        fmt = lat > -1 ? [
                            "General",
                            "General",
                            "General",
                            fmt[0]
                        ] : [
                            fmt[0],
                            fmt[0],
                            fmt[0],
                            "@"
                        ];
                        break;
                    case 2:
                        fmt = lat > -1 ? [
                            fmt[0],
                            fmt[0],
                            fmt[0],
                            fmt[1]
                        ] : [
                            fmt[0],
                            fmt[1],
                            fmt[0],
                            "@"
                        ];
                        break;
                    case 3:
                        fmt = lat > -1 ? [
                            fmt[0],
                            fmt[1],
                            fmt[0],
                            fmt[2]
                        ] : [
                            fmt[0],
                            fmt[1],
                            fmt[2],
                            "@"
                        ];
                        break;
                    case 4:
                        break;
                }
                var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
                if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1)  {
                    return [
                        l,
                        ff
                    ];
                }
                
                if (fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
                    var m1 = fmt[0].match(cfregex2);
                    var m2 = fmt[1].match(cfregex2);
                    return chkcond(v, m1) ? [
                        l,
                        fmt[0]
                    ] : chkcond(v, m2) ? [
                        l,
                        fmt[1]
                    ] : [
                        l,
                        fmt[m1 != null && m2 != null ? 2 : 1]
                    ];
                }
                return [
                    l,
                    ff
                ];
            }
            function format(fmt, v, o) {
                fixopts(o != null ? o : (o = []));
                var sfmt = "";
                switch (typeof fmt) {
                    case "string":
                        sfmt = fmt;
                        break;
                    case "number":
                        sfmt = (o.table != null ? o.table : table_fmt)[fmt];
                        break;
                }
                if (isgeneral(sfmt, 0))  {
                    return general_fmt(v, o);
                }
                
                var f = choose_fmt(sfmt, v);
                if (isgeneral(f[1]))  {
                    return general_fmt(v, o);
                }
                
                if (v === true)  {
                    v = "TRUE";
                }
                else if (v === false)  {
                    v = "FALSE";
                }
                else if (v === "" || v == null)  {
                    return "";
                }
                
                return eval_fmt(f[1], v, o, f[0]);
            }
            SSF._table = table_fmt;
            SSF.load = function load_entry(fmt, idx) {
                table_fmt[idx] = fmt;
            };
            SSF.format = format;
            SSF.get_table = function get_table() {
                return table_fmt;
            };
            SSF.load_table = function load_table(tbl) {
                for (var i = 0; i != 392; ++i) if (tbl[i] !== undefined)  {
                    SSF.load(tbl[i], i);
                }
                ;
            };
        };
    make_ssf(SSF);
    /* [MS-OLEPS] v20130118 */
    /* [MS-OSHARED] v20130211 */
    /* [MS-OLEPS] 2.2 PropertyType */
    {
        var VT_EMPTY = 0;
        var VT_NULL = 1;
        var VT_I2 = 2;
        var VT_I4 = 3;
        var VT_R4 = 4;
        var VT_R8 = 5;
        var VT_CY = 6;
        var VT_DATE = 7;
        var VT_BSTR = 8;
        var VT_ERROR = 10;
        var VT_BOOL = 11;
        var VT_VARIANT = 12;
        var VT_DECIMAL = 14;
        var VT_I1 = 16;
        var VT_UI1 = 17;
        var VT_UI2 = 18;
        var VT_UI4 = 19;
        var VT_I8 = 20;
        var VT_UI8 = 21;
        var VT_INT = 22;
        var VT_UINT = 23;
        var VT_LPSTR = 30;
        var VT_LPWSTR = 31;
        var VT_FILETIME = 64;
        var VT_BLOB = 65;
        var VT_STREAM = 66;
        var VT_STORAGE = 67;
        var VT_STREAMED_Object = 68;
        var VT_STORED_Object = 69;
        var VT_BLOB_Object = 70;
        var VT_CF = 71;
        var VT_CLSID = 72;
        var VT_VERSIONED_STREAM = 73;
        var VT_VECTOR = 4096;
        var VT_ARRAY = 8192;
        var VT_STRING = 80;
        // 2.3.3.1.11 VtString
        var VT_USTR = 81;
        // 2.3.3.1.12 VtUnalignedString
        var VT_CUSTOM = [
                VT_STRING,
                VT_USTR
            ];
    }
    /* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */
    var DocSummaryPIDDSI = {
            1: {
                n: 'CodePage',
                t: VT_I2
            },
            2: {
                n: 'Category',
                t: VT_STRING
            },
            3: {
                n: 'PresentationFormat',
                t: VT_STRING
            },
            4: {
                n: 'ByteCount',
                t: VT_I4
            },
            5: {
                n: 'LineCount',
                t: VT_I4
            },
            6: {
                n: 'ParagraphCount',
                t: VT_I4
            },
            7: {
                n: 'SlideCount',
                t: VT_I4
            },
            8: {
                n: 'NoteCount',
                t: VT_I4
            },
            9: {
                n: 'HiddenCount',
                t: VT_I4
            },
            10: {
                n: 'MultimediaClipCount',
                t: VT_I4
            },
            11: {
                n: 'Scale',
                t: VT_BOOL
            },
            12: {
                n: 'HeadingPair',
                t: VT_VECTOR | VT_VARIANT
            },
            13: {
                n: 'DocParts',
                t: VT_VECTOR | VT_LPSTR
            },
            14: {
                n: 'Manager',
                t: VT_STRING
            },
            15: {
                n: 'Company',
                t: VT_STRING
            },
            16: {
                n: 'LinksDirty',
                t: VT_BOOL
            },
            17: {
                n: 'CharacterCount',
                t: VT_I4
            },
            19: {
                n: 'SharedDoc',
                t: VT_BOOL
            },
            22: {
                n: 'HLinksChanged',
                t: VT_BOOL
            },
            23: {
                n: 'AppVersion',
                t: VT_I4,
                p: 'version'
            },
            26: {
                n: 'ContentType',
                t: VT_STRING
            },
            27: {
                n: 'ContentStatus',
                t: VT_STRING
            },
            28: {
                n: 'Language',
                t: VT_STRING
            },
            29: {
                n: 'Version',
                t: VT_STRING
            },
            255: {}
        };
    /* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */
    var SummaryPIDSI = {
            1: {
                n: 'CodePage',
                t: VT_I2
            },
            2: {
                n: 'Title',
                t: VT_STRING
            },
            3: {
                n: 'Subject',
                t: VT_STRING
            },
            4: {
                n: 'Author',
                t: VT_STRING
            },
            5: {
                n: 'Keywords',
                t: VT_STRING
            },
            6: {
                n: 'Comments',
                t: VT_STRING
            },
            7: {
                n: 'Template',
                t: VT_STRING
            },
            8: {
                n: 'LastAuthor',
                t: VT_STRING
            },
            9: {
                n: 'RevNumber',
                t: VT_STRING
            },
            10: {
                n: 'EditTime',
                t: VT_FILETIME
            },
            11: {
                n: 'LastPrinted',
                t: VT_FILETIME
            },
            12: {
                n: 'CreatedDate',
                t: VT_FILETIME
            },
            13: {
                n: 'ModifiedDate',
                t: VT_FILETIME
            },
            14: {
                n: 'PageCount',
                t: VT_I4
            },
            15: {
                n: 'WordCount',
                t: VT_I4
            },
            16: {
                n: 'CharCount',
                t: VT_I4
            },
            17: {
                n: 'Thumbnail',
                t: VT_CF
            },
            18: {
                n: 'ApplicationName',
                t: VT_LPSTR
            },
            19: {
                n: 'DocumentSecurity',
                t: VT_I4
            },
            255: {}
        };
    /* [MS-OLEPS] 2.18 */
    var SpecialProperties = {
            2.147483648E9: {
                n: 'Locale',
                t: VT_UI4
            },
            2.147483651E9: {
                n: 'Behavior',
                t: VT_UI4
            },
            1768515945: {}
        };
    (function() {
        for (var y in SpecialProperties) if (SpecialProperties.hasOwnProperty(y))  {
            DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];
        }
        
    })();
    /* [MS-DTYP] 2.3.3 FILETIME */
    /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */
    /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */
    function parse_FILETIME(blob) {
        var dwLowDateTime = blob.read_shift(4),
            dwHighDateTime = blob.read_shift(4);
        return new Date(((dwHighDateTime / 10000000 * Math.pow(2, 32) + dwLowDateTime / 10000000) - 1.16444736E10) * 1000).toISOString().replace(/\.000/, "");
    }
    /* [MS-OSHARED] 2.3.3.1.4 Lpstr */
    function parse_lpstr(blob, type, pad) {
        var str = blob.read_shift(0, 'lpstr');
        if (pad)  {
            blob.l += (4 - ((str.length + 1) & 3)) & 3;
        }
        
        return str;
    }
    /* [MS-OSHARED] 2.3.3.1.6 Lpwstr */
    function parse_lpwstr(blob, type, pad) {
        var str = blob.read_shift(0, 'lpwstr');
        if (pad)  {
            blob.l += (4 - ((str.length + 1) & 3)) & 3;
        }
        
        return str;
    }
    /* [MS-OSHARED] 2.3.3.1.11 VtString */
    /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */
    function parse_VtStringBase(blob, stringType, pad) {
        if (stringType === 31)  {
            /*VT_LPWSTR*/
            return parse_lpwstr(blob);
        }
        
        return parse_lpstr(blob, stringType, pad);
    }
    function parse_VtString(blob, t, pad) {
        return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
    }
    function parse_VtUnalignedString(blob, t) {
        if (!t)  {
            throw new Error("dafuq?");
        }
        
        return parse_VtStringBase(blob, t, 0);
    }
    /* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */
    function parse_VtVecUnalignedLpstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr');
        return ret;
    }
    /* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */
    function parse_VtVecUnalignedLpstr(blob) {
        return parse_VtVecUnalignedLpstrValue(blob);
    }
    /* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */
    function parse_VtHeadingPair(blob) {
        var headingString = parse_TypedPropertyValue(blob, VT_USTR);
        var headerParts = parse_TypedPropertyValue(blob, VT_I4);
        return [
            headingString,
            headerParts
        ];
    }
    /* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */
    function parse_VtVecHeadingPairValue(blob) {
        var cElements = blob.read_shift(4);
        var out = [];
        for (var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
        return out;
    }
    /* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */
    function parse_VtVecHeadingPair(blob) {
        // NOTE: When invoked, wType & padding were already consumed
        return parse_VtVecHeadingPairValue(blob);
    }
    /* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */
    function parse_dictionary(blob, CodePage) {
        var cnt = blob.read_shift(4);
        var dict = {};
        for (var j = 0; j != cnt; ++j) {
            var pid = blob.read_shift(4);
            var len = blob.read_shift(4);
            dict[pid] = blob.read_shift(len, (CodePage === 1200 ? 'utf16le' : 'utf8')).replace(chr0, '').replace(chr1, '!');
        }
        if (blob.l & 3)  {
            blob.l = (blob.l >> 2 + 1) << 2;
        }
        
        return dict;
    }
    /* [MS-OLEPS] 2.9 BLOB */
    function parse_BLOB(blob) {
        var size = blob.read_shift(4);
        var bytes = blob.slice(blob.l, blob.l + size);
        if (size & 3 > 0)  {
            blob.l += (4 - (size & 3)) & 3;
        }
        
        return bytes;
    }
    /* [MS-OLEPS] 2.11 ClipboardData */
    function parse_ClipboardData(blob) {
        // TODO
        var o = {};
        o.Size = blob.read_shift(4);
        //o.Format = blob.read_shift(4);
        blob.l += o.Size;
        return o;
    }
    /* [MS-OLEPS] 2.14 Vector and Array Property Types */
    function parse_VtVector(blob, cb) {}
    /* [MS-OLEPS] 2.14.2 VectorHeader */
    /*	var Length = blob.read_shift(4);
	var o = [];
	for(var i = 0; i != Length; ++i) {
		o.push(cb(blob));
	}
	return o;*/
    /* [MS-OLEPS] 2.15 TypedPropertyValue */
    function parse_TypedPropertyValue(blob, type, _opts) {
        var t = blob.read_shift(2),
            ret,
            opts = _opts || {};
        blob.l += 2;
        if (type !== VT_VARIANT)  {
            if (t !== type && VT_CUSTOM.indexOf(type) === -1)  {
                throw new Error('Expected type ' + type + ' saw ' + t);
            }
            ;
        }
        
        switch (type === VT_VARIANT ? t : type) {
            case 2:
                /*VT_I2*/
                ret = blob.read_shift(2, 'i');
                if (!opts.raw)  {
                    blob.l += 2;
                }
                ;
                return ret;
            case 3:
                /*VT_I4*/
                ret = blob.read_shift(4, 'i');
                return ret;
            case 11:
                /*VT_BOOL*/
                return blob.read_shift(4) !== 0;
            case 19:
                /*VT_UI4*/
                ret = blob.read_shift(4);
                return ret;
            case 30:
                /*VT_LPSTR*/
                return parse_lpstr(blob, t, 4).replace(chr0, '');
            case 31:
                /*VT_LPWSTR*/
                return parse_lpwstr(blob);
            case 64:
                /*VT_FILETIME*/
                return parse_FILETIME(blob);
            case 65:
                /*VT_BLOB*/
                return parse_BLOB(blob);
            case 71:
                /*VT_CF*/
                return parse_ClipboardData(blob);
            case 80:
                /*VT_STRING*/
                return parse_VtString(blob, t, !opts.raw && 4).replace(chr0, '');
            case 81:
                /*VT_USTR*/
                return parse_VtUnalignedString(blob, t, 4).replace(chr0, '');
            case 4108:
                /*VT_VECTOR|VT_VARIANT*/
                return parse_VtVecHeadingPair(blob);
            case 4126:
                /*VT_LPSTR*/
                return parse_VtVecUnalignedLpstr(blob);
            default:
                throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
        }
    }
    /* [MS-OLEPS] 2.14.2 VectorHeader */
    /*function parse_VTVectorVariant(blob) {
	var Length = blob.read_shift(4);

	if(Length & 1 !== 0) throw new Error("VectorHeader Length=" + Length + " must be even");
	var o = [];
	for(var i = 0; i != Length; ++i) {
		o.push(parse_TypedPropertyValue(blob, VT_VARIANT));
	}
	return o;
}*/
    /* [MS-OLEPS] 2.20 PropertySet */
    function parse_PropertySet(blob, PIDSI) {
        var start_addr = blob.l;
        var size = blob.read_shift(4);
        var NumProps = blob.read_shift(4);
        var Props = [],
            i = 0;
        var CodePage = 0;
        var Dictionary = -1,
            DictObj;
        for (i = 0; i != NumProps; ++i) {
            var PropID = blob.read_shift(4);
            var Offset = blob.read_shift(4);
            Props[i] = [
                PropID,
                Offset + start_addr
            ];
        }
        var PropH = {};
        for (i = 0; i != NumProps; ++i) {
            if (blob.l !== Props[i][1]) {
                var fail = true;
                if (i > 0 && PIDSI)  {
                    switch (PIDSI[Props[i - 1][0]].t) {
                        case 2:
                            /*VT_I2*/
                            if (blob.l + 2 === Props[i][1]) {
                                blob.l += 2;
                                fail = false;
                            };
                            break;
                        case 80:
                            /*VT_STRING*/
                            if (blob.l <= Props[i][1]) {
                                blob.l = Props[i][1];
                                fail = false;
                            };
                            break;
                        case 4108:
                            /*VT_VECTOR|VT_VARIANT*/
                            if (blob.l <= Props[i][1]) {
                                blob.l = Props[i][1];
                                fail = false;
                            };
                            break;
                    };
                }
                
                if (!PIDSI && blob.l <= Props[i][1]) {
                    fail = false;
                    blob.l = Props[i][1];
                }
                if (fail)  {
                    throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
                }
                
            }
            if (PIDSI) {
                var piddsi = PIDSI[Props[i][0]];
                PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {
                    raw: true
                });
                if (piddsi.p === 'version')  {
                    PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + String(PropH[piddsi.n] & 65535);
                }
                
                if (piddsi.n == "CodePage")  {
                    switch (PropH[piddsi.n]) {
                        case 0:
                            PropH[piddsi.n] = 1252;
                        /* falls through */
                        case 10000:
                        // OSX Roman
                        case 1252:
                        // Windows Latin
                        case 874:
                        // SB Windows Thai
                        case 1250:
                        // SB Windows Central Europe
                        case 1251:
                        // SB Windows Cyrillic
                        case 1253:
                        // SB Windows Greek
                        case 1254:
                        // SB Windows Turkish
                        case 1255:
                        // SB Windows Hebrew
                        case 1256:
                        // SB Windows Arabic
                        case 1257:
                        // SB Windows Baltic
                        case 1258:
                        // SB Windows Vietnam
                        case 932:
                        // DB Windows Japanese Shift-JIS
                        case 936:
                        // DB Windows Simplified Chinese GBK
                        case 949:
                        // DB Windows Korean
                        case 950:
                        // DB Windows Traditional Chinese Big5
                        case 1200:
                        // UTF16LE
                        case 1201:
                        // UTF16BE
                        case 65000:
                        case -536:
                        // UTF-7
                        case 65001:
                        case -535:
                            // UTF-8
                            set_cp(CodePage = PropH[piddsi.n]);
                            break;
                        default:
                            throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
                    };
                }
                
            } else {
                if (Props[i][0] === 1) {
                    CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
                    set_cp(CodePage);
                    if (Dictionary !== -1) {
                        var oldpos = blob.l;
                        blob.l = Props[Dictionary][1];
                        DictObj = parse_dictionary(blob, CodePage);
                        blob.l = oldpos;
                    }
                } else if (Props[i][0] === 0) {
                    if (CodePage === 0) {
                        Dictionary = i;
                        blob.l = Props[i + 1][1];
                        
                        continue;
                    }
                    DictObj = parse_dictionary(blob, CodePage);
                } else {
                    var name = DictObj[Props[i][0]];
                    var val;
                    /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */
                    switch (blob[blob.l]) {
                        case 65:
                            /*VT_BLOB*/
                            blob.l += 4;
                            val = parse_BLOB(blob);
                            break;
                        case 30:
                            /*VT_LPSTR*/
                            blob.l += 4;
                            val = parse_VtString(blob, blob[blob.l - 4]);
                            break;
                        case 31:
                            /*VT_LPWSTR*/
                            blob.l += 4;
                            val = parse_VtString(blob, blob[blob.l - 4]);
                            break;
                        case 3:
                            /*VT_I4*/
                            blob.l += 4;
                            val = blob.read_shift(4, 'i');
                            break;
                        case 19:
                            /*VT_UI4*/
                            blob.l += 4;
                            val = blob.read_shift(4);
                            break;
                        case 5:
                            /*VT_R8*/
                            blob.l += 4;
                            val = blob.read_shift(8, 'f');
                            break;
                        case 11:
                            /*VT_BOOL*/
                            blob.l += 4;
                            val = parsebool(blob, 4);
                            break;
                        case 64:
                            /*VT_FILETIME*/
                            blob.l += 4;
                            val = new Date(parse_FILETIME(blob));
                            break;
                        default:
                            throw new Error("unparsed value: " + blob[blob.l]);
                    }
                    PropH[name] = val;
                }
            }
        }
        blob.l = start_addr + size;
        /* step ahead to skip padding */
        return PropH;
    }
    /* [MS-OLEPS] 2.21 PropertySetStream */
    function parse_PropertySetStream(file, PIDSI) {
        var blob = file.content;
        prep_blob(blob, 0);
        var NumSets, FMTID0, FMTID1, Offset0, Offset1;
        blob.chk('feff', 'Byte Order: ');
        var vers = blob.read_shift(2);
        // TODO: check version
        var SystemIdentifier = blob.read_shift(4);
        blob.chk(CFB.utils.consts.HEADER_CLSID, 'CLSID: ');
        NumSets = blob.read_shift(4);
        if (NumSets !== 1 && NumSets !== 2)  {
            throw "Unrecognized #Sets: " + NumSets;
        }
        
        FMTID0 = blob.read_shift(16);
        Offset0 = blob.read_shift(4);
        if (NumSets === 1 && Offset0 !== blob.l)  {
            throw "Length mismatch";
        }
        else if (NumSets === 2) {
            FMTID1 = blob.read_shift(16);
            Offset1 = blob.read_shift(4);
        }
        var PSet0 = parse_PropertySet(blob, PIDSI);
        var rval = {
                SystemIdentifier: SystemIdentifier
            };
        for (var y in PSet0) rval[y] = PSet0[y];
        //rval.blob = blob;
        rval.FMTID = FMTID0;
        //rval.PSet0 = PSet0;
        if (NumSets === 1)  {
            return rval;
        }
        
        if (blob.l !== Offset1)  {
            throw "Length mismatch 2: " + blob.l + " !== " + Offset1;
        }
        
        var PSet1;
        try {
            PSet1 = parse_PropertySet(blob, null);
        } catch (e) {}
        for (y in PSet1) rval[y] = PSet1[y];
        rval.FMTID = [
            FMTID0,
            FMTID1
        ];
        // TODO: verify FMTID0/1
        return rval;
    }
    var DO_NOT_EXPORT_CFB = true;
    /* cfb.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*jshint eqnull:true */
    /* [MS-CFB] v20130118 */
    var CFB = (function _CFB() {
            var exports = {};
            exports.version = '0.10.2';
            function parse(file) {
                var mver = 3;
                // major version
                var ssz = 512;
                // sector size
                var nmfs = 0;
                // number of mini FAT sectors
                var ndfs = 0;
                // number of DIFAT sectors
                var dir_start = 0;
                // first directory sector location
                var minifat_start = 0;
                // first mini FAT sector location
                var difat_start = 0;
                // first mini FAT sector location
                var fat_addrs = [];
                // locations of FAT sectors
                /* [MS-CFB] 2.2 Compound File Header */
                var blob = file.slice(0, 512);
                prep_blob(blob, 0);
                /* major version */
                var mv = check_get_mver(blob);
                mver = mv[0];
                switch (mver) {
                    case 3:
                        ssz = 512;
                        break;
                    case 4:
                        ssz = 4096;
                        break;
                    default:
                        throw "Major Version: Expected 3 or 4 saw " + mver;
                }
                /* reprocess header */
                if (ssz !== 512) {
                    blob = file.slice(0, ssz);
                    prep_blob(blob, 28);
                }
                /* blob.l */
                /* Save header for final object */
                var header = file.slice(0, ssz);
                check_shifts(blob, mver);
                // Number of Directory Sectors
                var nds = blob.read_shift(4, 'i');
                if (mver === 3 && nds !== 0)  {
                    throw '# Directory Sectors: Expected 0 saw ' + nds;
                }
                
                // Number of FAT Sectors
                //var nfs = blob.read_shift(4, 'i');
                blob.l += 4;
                // First Directory Sector Location
                dir_start = blob.read_shift(4, 'i');
                // Transaction Signature
                blob.l += 4;
                // Mini Stream Cutoff Size
                blob.chk('00100000', 'Mini Stream Cutoff Size: ');
                // First Mini FAT Sector Location
                minifat_start = blob.read_shift(4, 'i');
                // Number of Mini FAT Sectors
                nmfs = blob.read_shift(4, 'i');
                // First DIFAT sector location
                difat_start = blob.read_shift(4, 'i');
                // Number of DIFAT Sectors
                ndfs = blob.read_shift(4, 'i');
                // Grab FAT Sector Locations
                for (var q,
                    j = 0; j < 109; ++j) {
                    /* 109 = (512 - blob.l)>>>2; */
                    q = blob.read_shift(4, 'i');
                    if (q < 0)  {
                        break;
                    }
                    
                    fat_addrs[j] = q;
                }
                /** Break the file up into sectors */
                var sectors = sectorify(file, ssz);
                sleuth_fat(difat_start, ndfs, sectors, ssz, fat_addrs);
                /** Chains */
                var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
                sector_list[dir_start].name = "!Directory";
                if (nmfs > 0 && minifat_start !== ENDOFCHAIN)  {
                    sector_list[minifat_start].name = "!MiniFAT";
                }
                
                sector_list[fat_addrs[0]].name = "!FAT";
                sector_list.fat_addrs = fat_addrs;
                sector_list.ssz = ssz;
                /* [MS-CFB] 2.6.1 Compound File Directory Entry */
                var files = {},
                    Paths = [],
                    FileIndex = [],
                    FullPaths = [],
                    FullPathDir = {};
                read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex);
                build_full_paths(FileIndex, FullPathDir, FullPaths, Paths);
                var root_name = Paths.shift();
                Paths.root = root_name;
                /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */
                var find_path = make_find_path(FullPaths, Paths, FileIndex, files, root_name);
                return {
                    raw: {
                        header: header,
                        sectors: sectors
                    },
                    FileIndex: FileIndex,
                    FullPaths: FullPaths,
                    FullPathDir: FullPathDir,
                    find: find_path
                };
            }
            // parse
            /* [MS-CFB] 2.2 Compound File Header -- read up to major version */
            function check_get_mver(blob) {
                // header signature 8
                blob.chk(HEADER_SIGNATURE, 'Header Signature: ');
                // clsid 16
                blob.chk(HEADER_CLSID, 'CLSID: ');
                // minor version 2
                var mver = blob.read_shift(2, 'u');
                return [
                    blob.read_shift(2, 'u'),
                    mver
                ];
            }
            function check_shifts(blob, mver) {
                var shift = 9;
                // Byte Order
                blob.chk('feff', 'Byte Order: ');
                // Sector Shift
                switch ((shift = blob.read_shift(2))) {
                    case 9:
                        if (mver !== 3)  {
                            throw 'MajorVersion/SectorShift Mismatch';
                        }
                        ;
                        break;
                    case 12:
                        if (mver !== 4)  {
                            throw 'MajorVersion/SectorShift Mismatch';
                        }
                        ;
                        break;
                    default:
                        throw 'Sector Shift: Expected 9 or 12 saw ' + shift;
                }
                // Mini Sector Shift
                blob.chk('0600', 'Mini Sector Shift: ');
                // Reserved
                blob.chk('000000000000', 'Reserved: ');
            }
            /** Break the file up into sectors */
            function sectorify(file, ssz) {
                var nsectors = Math.ceil(file.length / ssz) - 1;
                var sectors = new Array(nsectors);
                for (var i = 1; i < nsectors; ++i) sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);
                sectors[nsectors - 1] = file.slice(nsectors * ssz);
                return sectors;
            }
            /* [MS-CFB] 2.6.4 Red-Black Tree */
            function build_full_paths(FI, FPD, FP, Paths) {
                var i = 0,
                    L = 0,
                    R = 0,
                    C = 0,
                    j = 0,
                    pl = Paths.length;
                var dad = new Array(pl),
                    q = new Array(pl);
                for (; i < pl; ++i) {
                    dad[i] = q[i] = i;
                    FP[i] = Paths[i];
                }
                for (; j < q.length; ++j) {
                    i = q[j];
                    L = FI[i].L;
                    R = FI[i].R;
                    C = FI[i].C;
                    if (dad[i] === i) {
                        if (L !== -1 && /*NOSTREAM*/
                        dad[L] !== L)  {
                            dad[i] = dad[L];
                        }
                        
                        if (R !== -1 && dad[R] !== R)  {
                            dad[i] = dad[R];
                        }
                        
                    }
                    if (C !== -1)  {
                        /*NOSTREAM*/
                        dad[C] = i;
                    }
                    
                    if (L !== -1) {
                        dad[L] = dad[i];
                        q.push(L);
                    }
                    if (R !== -1) {
                        dad[R] = dad[i];
                        q.push(R);
                    }
                }
                for (i = 1; i !== pl; ++i) if (dad[i] === i) {
                    if (R !== -1 && /*NOSTREAM*/
                    dad[R] !== R)  {
                        dad[i] = dad[R];
                    }
                    else if (L !== -1 && dad[L] !== L)  {
                        dad[i] = dad[L];
                    }
                    
                };
                for (i = 1; i < pl; ++i) {
                    if (FI[i].type === 0)  {
                        /* unknown */
                        
                        continue;
                    }
                    
                    j = dad[i];
                    if (j === 0)  {
                        FP[i] = FP[0] + "/" + FP[i];
                    }
                    else  {
                        while (j !== 0) {
                            FP[i] = FP[j] + "/" + FP[i];
                            j = dad[j];
                        };
                    }
                    
                    dad[i] = 0;
                }
                FP[0] += "/";
                for (i = 1; i < pl; ++i) {
                    if (FI[i].type !== 2)  {
                        /* stream */
                        FP[i] += "/";
                    }
                    
                    FPD[FP[i]] = FI[i];
                }
            }
            /* [MS-CFB] 2.6.4 */
            function make_find_path(FullPaths, Paths, FileIndex, files, root_name) {
                var UCFullPaths = new Array(FullPaths.length);
                var UCPaths = new Array(Paths.length),
                    i;
                for (i = 0; i < FullPaths.length; ++i) UCFullPaths[i] = FullPaths[i].toUpperCase().replace(chr0, '').replace(chr1, '!');
                for (i = 0; i < Paths.length; ++i) UCPaths[i] = Paths[i].toUpperCase().replace(chr0, '').replace(chr1, '!');
                return function find_path(path) {
                    var k;
                    if (path.charCodeAt(0) === 47) /* "/" */
                    {
                        k = true;
                        path = root_name + path;
                    } else  {
                        k = path.indexOf("/") !== -1;
                    }
                    
                    var UCPath = path.toUpperCase().replace(chr0, '').replace(chr1, '!');
                    var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
                    if (w === -1)  {
                        return null;
                    }
                    
                    return k === true ? FileIndex[w] : files[Paths[w]];
                };
            }
            /** Chase down the rest of the DIFAT chain to build a comprehensive list
    DIFAT chains by storing the next sector number as the last 32 bytes */
            function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
                var q;
                if (idx === ENDOFCHAIN) {
                    if (cnt !== 0)  {
                        throw "DIFAT chain shorter than expected";
                    }
                    
                } else if (idx !== -1) /*FREESECT*/
                {
                    var sector = sectors[idx],
                        m = (ssz >>> 2) - 1;
                    for (var i = 0; i < m; ++i) {
                        if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN)  {
                            break;
                        }
                        
                        fat_addrs.push(q);
                    }
                    sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
                }
            }
            /** Follow the linked list of sectors for a given starting point */
            function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
                var sl = sectors.length;
                var buf, buf_chain;
                if (!chkd)  {
                    chkd = new Array(sl);
                }
                
                var modulus = ssz - 1,
                    j, jj;
                buf = [];
                buf_chain = [];
                for (j = start; j >= 0; ) {
                    chkd[j] = true;
                    buf[buf.length] = j;
                    buf_chain.push(sectors[j]);
                    var addr = fat_addrs[Math.floor(j * 4 / ssz)];
                    jj = ((j * 4) & modulus);
                    if (ssz < 4 + jj)  {
                        throw "FAT boundary crossed: " + j + " 4 " + ssz;
                    }
                    
                    j = __readInt32LE(sectors[addr], jj);
                }
                return {
                    nodes: buf,
                    data: __toBuffer([
                        buf_chain
                    ])
                };
            }
            /** Chase down the sector linked lists */
            function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
                var sl = sectors.length,
                    sector_list = new Array(sl);
                var chkd = new Array(sl),
                    buf, buf_chain;
                var modulus = ssz - 1,
                    i, j, k, jj;
                for (i = 0; i < sl; ++i) {
                    buf = [];
                    k = (i + dir_start);
                    if (k >= sl)  {
                        k -= sl;
                    }
                    
                    if (chkd[k] === true)  {
                        
                        continue;
                    }
                    
                    buf_chain = [];
                    for (j = k; j >= 0; ) {
                        chkd[j] = true;
                        buf[buf.length] = j;
                        buf_chain.push(sectors[j]);
                        var addr = fat_addrs[Math.floor(j * 4 / ssz)];
                        jj = ((j * 4) & modulus);
                        if (ssz < 4 + jj)  {
                            throw "FAT boundary crossed: " + j + " 4 " + ssz;
                        }
                        
                        j = __readInt32LE(sectors[addr], jj);
                    }
                    sector_list[k] = {
                        nodes: buf,
                        data: __toBuffer([
                            buf_chain
                        ])
                    };
                }
                return sector_list;
            }
            /* [MS-CFB] 2.6.1 Compound File Directory Entry */
            function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex) {
                var blob;
                var minifat_store = 0,
                    pl = (Paths.length ? 2 : 0);
                var sector = sector_list[dir_start].data;
                var i = 0,
                    namelen = 0,
                    name, o, ctime, mtime;
                for (; i < sector.length; i += 128) {
                    blob = sector.slice(i, i + 128);
                    prep_blob(blob, 64);
                    namelen = blob.read_shift(2);
                    if (namelen === 0)  {
                        
                        continue;
                    }
                    
                    name = __utf16le(blob, 0, namelen - pl);
                    Paths.push(name);
                    o = {
                        name: name,
                        type: blob.read_shift(1),
                        color: blob.read_shift(1),
                        L: blob.read_shift(4, 'i'),
                        R: blob.read_shift(4, 'i'),
                        C: blob.read_shift(4, 'i'),
                        clsid: blob.read_shift(16),
                        state: blob.read_shift(4, 'i')
                    };
                    ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
                    if (ctime !== 0) {
                        o.ctime = ctime;
                        o.ct = read_date(blob, blob.l - 8);
                    }
                    mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
                    if (mtime !== 0) {
                        o.mtime = mtime;
                        o.mt = read_date(blob, blob.l - 8);
                    }
                    o.start = blob.read_shift(4, 'i');
                    o.size = blob.read_shift(4, 'i');
                    if (o.type === 5) {
                        /* root */
                        minifat_store = o.start;
                        if (nmfs > 0 && minifat_store !== ENDOFCHAIN)  {
                            sector_list[minifat_store].name = "!StreamData";
                        }
                        
                    }
                    /*minifat_size = o.size;*/
                    else if (o.size >= 4096) /* MSCSZ */
                    {
                        o.storage = 'fat';
                        if (sector_list[o.start] === undefined)  {
                            sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
                        }
                        
                        sector_list[o.start].name = o.name;
                        o.content = sector_list[o.start].data.slice(0, o.size);
                        prep_blob(o.content, 0);
                    } else {
                        o.storage = 'minifat';
                        if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN) {
                            o.content = sector_list[minifat_store].data.slice(o.start * MSSZ, o.start * MSSZ + o.size);
                            prep_blob(o.content, 0);
                        }
                    }
                    files[name] = o;
                    FileIndex.push(o);
                }
            }
            function read_date(blob, offset) {
                return new Date((((__readUInt32LE(blob, offset + 4) / 10000000) * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 10000000) - 1.16444736E10) * 1000);
            }
            var fs;
            function readFileSync(filename, options) {
                if (fs === undefined)  {
                    fs = require('fs');
                }
                
                return parse(fs.readFileSync(filename), options);
            }
            function readSync(blob, options) {
                switch (options !== undefined && options.type !== undefined ? options.type : "base64") {
                    case "file":
                        return readFileSync(blob, options);
                    case "base64":
                        return parse(s2a(Base64.decode(blob)), options);
                    case "binary":
                        return parse(s2a(blob), options);
                }
                return parse(blob);
            }
            /** CFB Constants */
            var MSSZ = 64;
            /* Mini Sector Size = 1<<6 */
            //var MSCSZ = 4096; /* Mini Stream Cutoff Size */
            /* 2.1 Compound File Sector Numbers and Types */
            var ENDOFCHAIN = -2;
            /* 2.2 Compound File Header */
            var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
            var HEADER_CLSID = '00000000000000000000000000000000';
            var consts = {
                    /* 2.1 Compund File Sector Numbers and Types */
                    MAXREGSECT: -6,
                    DIFSECT: -4,
                    FATSECT: -3,
                    ENDOFCHAIN: ENDOFCHAIN,
                    FREESECT: -1,
                    /* 2.2 Compound File Header */
                    HEADER_SIGNATURE: HEADER_SIGNATURE,
                    HEADER_MINOR_VERSION: '3e00',
                    MAXREGSID: -6,
                    NOSTREAM: -1,
                    HEADER_CLSID: HEADER_CLSID,
                    /* 2.6.1 Compound File Directory Entry */
                    EntryTypes: [
                        'unknown',
                        'storage',
                        'stream',
                        'lockbytes',
                        'property',
                        'root'
                    ]
                };
            exports.read = readSync;
            exports.parse = parse;
            exports.utils = {
                ReadShift: ReadShift,
                CheckField: CheckField,
                prep_blob: prep_blob,
                bconcat: bconcat,
                consts: consts
            };
            return exports;
        })();
    if (typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') {
        module.exports = CFB;
    }
    /* sections refer to MS-XLS unless otherwise stated */
    /* --- Simple Utilities --- */
    function parsenoop(blob, length) {
        blob.read_shift(length);
        return;
    }
    function parsenoop2(blob, length) {
        blob.read_shift(length);
        return null;
    }
    function parslurp(blob, length, cb) {
        var arr = [],
            target = blob.l + length;
        while (blob.l < target) arr.push(cb(blob, target - blob.l));
        if (target !== blob.l)  {
            throw new Error("Slurp error");
        }
        
        return arr;
    }
    function parslurp2(blob, length, cb) {
        var arr = [],
            target = blob.l + length,
            len = blob.read_shift(2);
        while (len-- !== 0) arr.push(cb(blob, target - blob.l));
        if (target !== blob.l)  {
            throw new Error("Slurp error");
        }
        
        return arr;
    }
    function parsebool(blob, length) {
        return blob.read_shift(length) === 1;
    }
    function parseuint16(blob) {
        return blob.read_shift(2, 'u');
    }
    function parseuint16a(blob, length) {
        return parslurp(blob, length, parseuint16);
    }
    /* --- 2.5 Structures --- */
    /* [MS-XLS] 2.5.14 Boolean */
    var parse_Boolean = parsebool;
    /* [MS-XLS] 2.5.10 Bes (boolean or error) */
    function parse_Bes(blob) {
        var v = blob.read_shift(1),
            t = blob.read_shift(1);
        return t === 1 ? v : v === 1;
    }
    /* [MS-XLS] 2.5.240 ShortXLUnicodeString */
    function parse_ShortXLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(1);
        var width = 1,
            encoding = 'sbcs';
        if (opts === undefined || opts.biff !== 5) {
            var fHighByte = blob.read_shift(1);
            if (fHighByte) {
                width = 2;
                encoding = 'dbcs';
            }
        }
        return cch ? blob.read_shift(cch, encoding) : "";
    }
    /* 2.5.293 XLUnicodeRichExtendedString */
    function parse_XLUnicodeRichExtendedString(blob) {
        var cch = blob.read_shift(2),
            flags = blob.read_shift(1);
        var fHighByte = flags & 1,
            fExtSt = flags & 4,
            fRichSt = flags & 8;
        var width = 1 + (flags & 1);
        // 0x0 -> utf8, 0x1 -> dbcs
        var cRun, cbExtRst;
        var z = {};
        if (fRichSt)  {
            cRun = blob.read_shift(2);
        }
        
        if (fExtSt)  {
            cbExtRst = blob.read_shift(4);
        }
        
        var encoding = (flags & 1) ? 'dbcs' : 'sbcs';
        var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
        if (fRichSt)  {
            blob.l += 4 * cRun;
        }
        
        //TODO: parse this
        if (fExtSt)  {
            blob.l += cbExtRst;
        }
        
        //TODO: parse this
        z.t = msg;
        if (!fRichSt) {
            z.raw = "<t>" + z.t + "</t>";
            z.r = z.t;
        }
        return z;
    }
    /* 2.5.296 XLUnicodeStringNoCch */
    function parse_XLUnicodeStringNoCch(blob, cch, opts) {
        var retval;
        var fHighByte = blob.read_shift(1);
        if (fHighByte === 0) {
            retval = blob.read_shift(cch, 'sbcs');
        } else {
            retval = blob.read_shift(cch, 'dbcs');
        }
        return retval;
    }
    /* 2.5.294 XLUnicodeString */
    function parse_XLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts !== undefined && opts.biff > 0 && opts.biff < 8 ? 1 : 2);
        if (cch === 0) {
            blob.l++;
            return "";
        }
        return parse_XLUnicodeStringNoCch(blob, cch, opts);
    }
    /* BIFF5 override */
    function parse_XLUnicodeString2(blob, length, opts) {
        if (opts.biff !== 5 && opts.biff !== 2)  {
            return parse_XLUnicodeString(blob, length, opts);
        }
        
        var cch = blob.read_shift(1);
        if (cch === 0) {
            blob.l++;
            return "";
        }
        return blob.read_shift(cch, 'sbcs');
    }
    /* 2.5.342 Xnum */
    function parse_Xnum(blob) {
        return blob.read_shift(8, 'f');
    }
    /* 2.5.61 ControlInfo */
    var parse_ControlInfo = parsenoop;
    /* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */
    var parse_URLMoniker = function(blob, length) {
            var len = blob.read_shift(4),
                start = blob.l;
            var extra = false;
            if (len > 24) {
                /* look ahead */
                blob.l += len - 24;
                if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763")  {
                    extra = true;
                }
                
                blob.l = start;
            }
            var url = blob.read_shift((extra ? len - 24 : len) >> 1, 'utf16le').replace(chr0, "");
            if (extra)  {
                blob.l += 24;
            }
            
            return url;
        };
    /* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */
    var parse_FileMoniker = function(blob, length) {
            var cAnti = blob.read_shift(2);
            var ansiLength = blob.read_shift(4);
            var ansiPath = blob.read_shift(ansiLength, 'cstr');
            var endServer = blob.read_shift(2);
            var versionNumber = blob.read_shift(2);
            var cbUnicodePathSize = blob.read_shift(4);
            if (cbUnicodePathSize === 0)  {
                return ansiPath.replace(/\\/g, "/");
            }
            
            var cbUnicodePathBytes = blob.read_shift(4);
            var usKeyValue = blob.read_shift(2);
            var unicodePath = blob.read_shift(cbUnicodePathBytes >> 1, 'utf16le').replace(chr0, "");
            return unicodePath;
        };
    /* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */
    var parse_HyperlinkMoniker = function(blob, length) {
            var clsid = blob.read_shift(16);
            length -= 16;
            switch (clsid) {
                case "e0c9ea79f9bace118c8200aa004ba90b":
                    return parse_URLMoniker(blob, length);
                case "0303000000000000c000000000000046":
                    return parse_FileMoniker(blob, length);
                default:
                    throw "unsupported moniker " + clsid;
            }
        };
    /* [MS-OSHARED] 2.3.7.9 HyperlinkString */
    var parse_HyperlinkString = function(blob, length) {
            var len = blob.read_shift(4);
            var o = blob.read_shift(len, 'utf16le').replace(chr0, "");
            return o;
        };
    /* [MS-OSHARED] 2.3.7.1 Hyperlink Object TODO: unify params with XLSX */
    var parse_Hyperlink = function(blob, length) {
            var end = blob.l + length;
            var sVer = blob.read_shift(4);
            if (sVer !== 2)  {
                throw new Error("Unrecognized streamVersion: " + sVer);
            }
            
            var flags = blob.read_shift(2);
            blob.l += 2;
            var displayName, targetFrameName, moniker, oleMoniker, location, guid, fileTime;
            if (flags & 16)  {
                displayName = parse_HyperlinkString(blob, end - blob.l);
            }
            
            if (flags & 128)  {
                targetFrameName = parse_HyperlinkString(blob, end - blob.l);
            }
            
            if ((flags & 257) === 257)  {
                moniker = parse_HyperlinkString(blob, end - blob.l);
            }
            
            if ((flags & 257) === 1)  {
                oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
            }
            
            if (flags & 8)  {
                location = parse_HyperlinkString(blob, end - blob.l);
            }
            
            if (flags & 32)  {
                guid = blob.read_shift(16);
            }
            
            if (flags & 64)  {
                fileTime = parse_FILETIME(blob, 8);
            }
            
            blob.l = end;
            var target = (targetFrameName || moniker || oleMoniker);
            if (location)  {
                target += "#" + location;
            }
            
            return {
                Target: target
            };
        };
    /* 2.5.178 LongRGBA */
    function parse_LongRGBA(blob, length) {
        var r = blob.read_shift(1),
            g = blob.read_shift(1),
            b = blob.read_shift(1),
            a = blob.read_shift(1);
        return [
            r,
            g,
            b,
            a
        ];
    }
    /* 2.5.177 LongRGB */
    function parse_LongRGB(blob, length) {
        var x = parse_LongRGBA(blob, length);
        x[3] = 0;
        return x;
    }
    /* 2.5.127 */
    var FillPattern = [
            null,
            'solid',
            'mediumGray',
            'darkGray',
            'lightGray',
            'darkHorizontal',
            'darkVertical',
            'darkDown',
            'darkUp',
            'darkGrid',
            'darkTrellis',
            'lightHorizontal',
            'lightVertical',
            'lightDown',
            'lightUp',
            'lightGrid',
            'lightTrellis',
            'gray125',
            'gray0625'
        ];
    function rgbify(arr) {
        return arr.map(function(x) {
            return [
                (x >> 16) & 255,
                (x >> 8) & 255,
                x & 255
            ];
        });
    }
    /* 2.5.161 */
    var Icv = rgbify([
            /* Color Constants */
            0,
            16777215,
            16711680,
            65280,
            255,
            16776960,
            16711935,
            65535,
            /* Defaults */
            0,
            16777215,
            16711680,
            65280,
            255,
            16776960,
            16711935,
            65535,
            8388608,
            32768,
            128,
            8421376,
            8388736,
            32896,
            12632256,
            8421504,
            10066431,
            10040166,
            16777164,
            13434879,
            6684774,
            16744576,
            26316,
            13421823,
            128,
            16711935,
            16776960,
            65535,
            8388736,
            8388608,
            32896,
            255,
            52479,
            13434879,
            13434828,
            16777113,
            10079487,
            16751052,
            13408767,
            16764057,
            3368703,
            3394764,
            10079232,
            16763904,
            16750848,
            16737792,
            6710937,
            9868950,
            13158,
            3381606,
            13056,
            3355392,
            10040064,
            10040166,
            3355545,
            3355443,
            /* Sheet */
            16777215,
            0
        ]);
    function isval(x) {
        return x !== undefined && x !== null;
    }
    function keys(o) {
        return Object.keys(o);
    }
    function evert(obj, arr) {
        var o = {};
        var K = keys(obj);
        for (var i = 0; i < K.length; ++i) {
            var k = K[i];
            if (!arr)  {
                o[obj[k]] = k;
            }
            else  {
                (o[obj[k]] = o[obj[k]] || []).push(k);
            }
            
        }
        return o;
    }
    function rgb2Hex(rgb) {
        for (var i = 0,
            o = 1; i != 3; ++i) o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
        return o.toString(16).toUpperCase().substr(1);
    }
    /* 2.5.19 */
    function parse_Cell(blob, length) {
        var rw = blob.read_shift(2);
        // 0-indexed
        var col = blob.read_shift(2);
        var ixfe = blob.read_shift(2);
        return {
            r: rw,
            c: col,
            ixfe: ixfe
        };
    }
    /* 2.5.134 */
    function parse_frtHeader(blob) {
        var rt = blob.read_shift(2);
        var flags = blob.read_shift(2);
        // TODO: parse these flags
        blob.l += 8;
        return {
            type: rt,
            flags: flags
        };
    }
    function parse_OptXLUnicodeString(blob, length, opts) {
        return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
    }
    /* 2.5.158 */
    var HIDEOBJENUM = [
            'SHOWALL',
            'SHOWPLACEHOLDER',
            'HIDEALL'
        ];
    var parse_HideObjEnum = parseuint16;
    /* 2.5.344 */
    function parse_XTI(blob, length) {
        var iSupBook = blob.read_shift(2),
            itabFirst = blob.read_shift(2, 'i'),
            itabLast = blob.read_shift(2, 'i');
        return [
            iSupBook,
            itabFirst,
            itabLast
        ];
    }
    /* 2.5.217 */
    function parse_RkNumber(blob) {
        var b = blob.slice(blob.l, blob.l + 4);
        var fX100 = b[0] & 1,
            fInt = b[0] & 2;
        blob.l += 4;
        b[0] &= ~3;
        var RK = fInt === 0 ? __double([
                0,
                0,
                0,
                0,
                b[0],
                b[1],
                b[2],
                b[3]
            ], 0) : __readInt32LE(b, 0) >> 2;
        return fX100 ? RK / 100 : RK;
    }
    /* 2.5.218 */
    function parse_RkRec(blob, length) {
        var ixfe = blob.read_shift(2);
        var RK = parse_RkNumber(blob);
        //console.log("::", ixfe, RK,";;");
        return [
            ixfe,
            RK
        ];
    }
    /* 2.5.1 */
    function parse_AddinUdf(blob, length) {
        blob.l += 4;
        length -= 4;
        var l = blob.l + length;
        var udfName = parse_ShortXLUnicodeString(blob, length);
        var cb = blob.read_shift(2);
        l -= blob.l;
        if (cb !== l)  {
            throw "Malformed AddinUdf: padding = " + l + " != " + cb;
        }
        
        blob.l += cb;
        return udfName;
    }
    /* 2.5.209 TODO: Check sizes */
    function parse_Ref8U(blob, length) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(2);
        var colLast = blob.read_shift(2);
        return {
            s: {
                c: colFirst,
                r: rwFirst
            },
            e: {
                c: colLast,
                r: rwLast
            }
        };
    }
    /* 2.5.211 */
    function parse_RefU(blob, length) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(1);
        var colLast = blob.read_shift(1);
        return {
            s: {
                c: colFirst,
                r: rwFirst
            },
            e: {
                c: colLast,
                r: rwLast
            }
        };
    }
    /* 2.5.207 */
    var parse_Ref = parse_RefU;
    /* 2.5.143 */
    function parse_FtCmo(blob, length) {
        blob.l += 4;
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 12;
        return [
            id,
            ot,
            flags
        ];
    }
    /* 2.5.149 */
    function parse_FtNts(blob, length) {
        var out = {};
        blob.l += 4;
        blob.l += 16;
        // GUID TODO
        out.fSharedNote = blob.read_shift(2);
        blob.l += 4;
        return out;
    }
    /* 2.5.142 */
    function parse_FtCf(blob, length) {
        var out = {};
        blob.l += 4;
        blob.cf = blob.read_shift(2);
        return out;
    }
    /* 2.5.140 - 2.5.154 and friends */
    var FtTab = {
            21: parse_FtCmo,
            19: parsenoop,
            /* FtLbsData */
            18: function(blob, length) {
                blob.l += 12;
            },
            /* FtCblsData */
            17: function(blob, length) {
                blob.l += 8;
            },
            /* FtRboData */
            16: parsenoop,
            /* FtEdoData */
            15: parsenoop,
            /* FtGboData */
            13: parse_FtNts,
            /* FtNts */
            12: function(blob, length) {
                blob.l += 24;
            },
            /* FtSbs */
            11: function(blob, length) {
                blob.l += 10;
            },
            /* FtRbo */
            10: function(blob, length) {
                blob.l += 16;
            },
            /* FtCbls */
            9: parsenoop,
            /* FtPictFmla */
            8: function(blob, length) {
                blob.l += 6;
            },
            /* FtPioGrbit */
            7: parse_FtCf,
            /* FtCf */
            6: function(blob, length) {
                blob.l += 6;
            },
            /* FtGmo */
            4: parsenoop,
            /* FtMacro */
            0: function(blob, length) {
                blob.l += 4;
            }
        };
    /* FtEnding */
    function parse_FtArray(blob, length, ot) {
        var s = blob.l;
        var fts = [];
        while (blob.l < s + length) {
            var ft = blob.read_shift(2);
            blob.l -= 2;
            try {
                fts.push(FtTab[ft](blob, s + length - blob.l));
            } catch (e) {
                blob.l = s + length;
                return fts;
            }
        }
        if (blob.l != s + length)  {
            blob.l = s + length;
        }
        
        //throw "bad Object Ft-sequence";
        return fts;
    }
    /* 2.5.129 */
    var parse_FontIndex = parseuint16;
    /* --- 2.4 Records --- */
    /* 2.4.21 */
    function parse_BOF(blob, length) {
        var o = {};
        o.BIFFVer = blob.read_shift(2);
        length -= 2;
        switch (o.BIFFVer) {
            case 1536:
            /* BIFF8 */
            case 1280:
            /* BIFF5 */
            case 2:
            case 7:
                /* BIFF2 */
                break;
            default:
                throw "Unexpected BIFF Ver " + o.BIFFVer;
        }
        blob.read_shift(length);
        return o;
    }
    /* 2.4.146 */
    function parse_InterfaceHdr(blob, length) {
        if (length === 0)  {
            return 1200;
        }
        
        var q;
        if ((q = blob.read_shift(2)) !== 1200)  {
            throw 'InterfaceHdr codePage ' + q;
        }
        
        return 1200;
    }
    /* 2.4.349 */
    function parse_WriteAccess(blob, length, opts) {
        if (opts.enc) {
            blob.l += length;
            return "";
        }
        var l = blob.l;
        // TODO: make sure XLUnicodeString doesnt overrun
        var UserName = parse_XLUnicodeString(blob, 0, opts);
        blob.read_shift(length + l - blob.l);
        return UserName;
    }
    /* 2.4.28 */
    function parse_BoundSheet8(blob, length, opts) {
        var pos = blob.read_shift(4);
        var hidden = blob.read_shift(1) >> 6;
        var dt = blob.read_shift(1);
        switch (dt) {
            case 0:
                dt = 'Worksheet';
                break;
            case 1:
                dt = 'Macrosheet';
                break;
            case 2:
                dt = 'Chartsheet';
                break;
            case 6:
                dt = 'VBAModule';
                break;
        }
        var name = parse_ShortXLUnicodeString(blob, 0, opts);
        if (name.length === 0)  {
            name = "Sheet1";
        }
        
        return {
            pos: pos,
            hs: hidden,
            dt: dt,
            name: name
        };
    }
    /* 2.4.265 TODO */
    function parse_SST(blob, length) {
        var cnt = blob.read_shift(4);
        var ucnt = blob.read_shift(4);
        var strs = [];
        for (var i = 0; i != ucnt; ++i) {
            strs.push(parse_XLUnicodeRichExtendedString(blob));
        }
        strs.Count = cnt;
        strs.Unique = ucnt;
        return strs;
    }
    /* 2.4.107 */
    function parse_ExtSST(blob, length) {
        var extsst = {};
        extsst.dsst = blob.read_shift(2);
        blob.l += length - 2;
        return extsst;
    }
    /* 2.4.221 TODO*/
    function parse_Row(blob, length) {
        var rw = blob.read_shift(2),
            col = blob.read_shift(2),
            Col = blob.read_shift(2),
            rht = blob.read_shift(2);
        blob.read_shift(4);
        // reserved(2), unused(2)
        var flags = blob.read_shift(1);
        // various flags
        blob.read_shift(1);
        // reserved
        blob.read_shift(2);
        //ixfe, other flags
        return {
            r: rw,
            c: col,
            cnt: Col - col
        };
    }
    /* 2.4.125 */
    function parse_ForceFullCalculation(blob, length) {
        var header = parse_frtHeader(blob);
        if (header.type != 2211)  {
            throw "Invalid Future Record " + header.type;
        }
        
        var fullcalc = blob.read_shift(4);
        return fullcalc !== 0;
    }
    var parse_CompressPictures = parsenoop2;
    /* 2.4.55 Not interesting */
    /* 2.4.215 rt */
    function parse_RecalcId(blob, length) {
        blob.read_shift(2);
        return blob.read_shift(4);
    }
    /* 2.4.87 */
    function parse_DefaultRowHeight(blob, length) {
        var f = blob.read_shift(2),
            miyRw;
        miyRw = blob.read_shift(2);
        // flags & 0x02 -> hidden, else empty
        var fl = {
                Unsynced: f & 1,
                DyZero: (f & 2) >> 1,
                ExAsc: (f & 4) >> 2,
                ExDsc: (f & 8) >> 3
            };
        return [
            fl,
            miyRw
        ];
    }
    /* 2.4.345 TODO */
    function parse_Window1(blob, length) {
        var xWn = blob.read_shift(2),
            yWn = blob.read_shift(2),
            dxWn = blob.read_shift(2),
            dyWn = blob.read_shift(2);
        var flags = blob.read_shift(2),
            iTabCur = blob.read_shift(2),
            iTabFirst = blob.read_shift(2);
        var ctabSel = blob.read_shift(2),
            wTabRatio = blob.read_shift(2);
        return {
            Pos: [
                xWn,
                yWn
            ],
            Dim: [
                dxWn,
                dyWn
            ],
            Flags: flags,
            CurTab: iTabCur,
            FirstTab: iTabFirst,
            Selected: ctabSel,
            TabRatio: wTabRatio
        };
    }
    /* 2.4.122 TODO */
    function parse_Font(blob, length, opts) {
        blob.l += 14;
        var name = parse_ShortXLUnicodeString(blob, 0, opts);
        return name;
    }
    /* 2.4.149 */
    function parse_LabelSst(blob, length) {
        var cell = parse_Cell(blob);
        cell.isst = blob.read_shift(4);
        return cell;
    }
    /* 2.4.148 */
    function parse_Label(blob, length, opts) {
        var cell = parse_Cell(blob, 6);
        var str = parse_XLUnicodeString(blob, length - 6, opts);
        cell.val = str;
        return cell;
    }
    /* 2.4.126 Number Formats */
    function parse_Format(blob, length, opts) {
        var ifmt = blob.read_shift(2);
        var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
        return [
            ifmt,
            fmtstr
        ];
    }
    /* 2.4.90 */
    function parse_Dimensions(blob, length) {
        var w = length === 10 ? 2 : 4;
        var r = blob.read_shift(w),
            R = blob.read_shift(w),
            c = blob.read_shift(2),
            C = blob.read_shift(2);
        blob.l += 2;
        return {
            s: {
                r: r,
                c: c
            },
            e: {
                r: R,
                c: C
            }
        };
    }
    /* 2.4.220 */
    function parse_RK(blob, length) {
        var rw = blob.read_shift(2),
            col = blob.read_shift(2);
        var rkrec = parse_RkRec(blob);
        return {
            r: rw,
            c: col,
            ixfe: rkrec[0],
            rknum: rkrec[1]
        };
    }
    /* 2.4.175 */
    function parse_MulRk(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2),
            col = blob.read_shift(2);
        var rkrecs = [];
        while (blob.l < target) rkrecs.push(parse_RkRec(blob));
        if (blob.l !== target)  {
            throw "MulRK read error";
        }
        
        var lastcol = blob.read_shift(2);
        if (rkrecs.length != lastcol - col + 1)  {
            throw "MulRK length mismatch";
        }
        
        return {
            r: rw,
            c: col,
            C: lastcol,
            rkrec: rkrecs
        };
    }
    /* 2.5.20 2.5.249 TODO */
    function parse_CellStyleXF(blob, length, style) {
        var o = {};
        var a = blob.read_shift(4),
            b = blob.read_shift(4);
        var c = blob.read_shift(4),
            d = blob.read_shift(2);
        o.patternType = FillPattern[c >> 26];
        o.icvFore = d & 127;
        o.icvBack = (d >> 7) & 127;
        return o;
    }
    function parse_CellXF(blob, length) {
        return parse_CellStyleXF(blob, length, 0);
    }
    function parse_StyleXF(blob, length) {
        return parse_CellStyleXF(blob, length, 1);
    }
    /* 2.4.353 TODO: actually do this right */
    function parse_XF(blob, length) {
        var o = {};
        o.ifnt = blob.read_shift(2);
        o.ifmt = blob.read_shift(2);
        o.flags = blob.read_shift(2);
        o.fStyle = (o.flags >> 2) & 1;
        length -= 6;
        o.data = parse_CellStyleXF(blob, length, o.fStyle);
        return o;
    }
    /* 2.4.134 */
    function parse_Guts(blob, length) {
        blob.l += 4;
        var out = [
                blob.read_shift(2),
                blob.read_shift(2)
            ];
        if (out[0] !== 0)  {
            out[0]--;
        }
        
        if (out[1] !== 0)  {
            out[1]--;
        }
        
        if (out[0] > 7 || out[1] > 7)  {
            throw "Bad Gutters: " + out;
        }
        
        return out;
    }
    /* 2.4.24 */
    function parse_BoolErr(blob, length) {
        var cell = parse_Cell(blob, 6);
        var val = parse_Bes(blob, 2);
        cell.val = val;
        cell.t = (val === true || val === false) ? 'b' : 'e';
        return cell;
    }
    /* 2.4.180 Number */
    function parse_Number(blob, length) {
        var cell = parse_Cell(blob, 6);
        var xnum = parse_Xnum(blob, 8);
        cell.val = xnum;
        return cell;
    }
    var parse_XLHeaderFooter = parse_OptXLUnicodeString;
    // TODO: parse 2.4.136
    /* 2.4.271 */
    function parse_SupBook(blob, length, opts) {
        var end = blob.l + length;
        var ctab = blob.read_shift(2);
        var cch = blob.read_shift(2);
        var virtPath;
        if (cch >= 1 && cch <= 255)  {
            virtPath = parse_XLUnicodeStringNoCch(blob, cch);
        }
        
        var rgst = blob.read_shift(end - blob.l);
        opts.sbcch = cch;
        return [
            cch,
            ctab,
            virtPath,
            rgst
        ];
    }
    /* 2.4.105 TODO */
    function parse_ExternName(blob, length, opts) {
        var flags = blob.read_shift(2);
        var body;
        var o = {
                fBuiltIn: flags & 1,
                fWantAdvise: (flags >>> 1) & 1,
                fWantPict: (flags >>> 2) & 1,
                fOle: (flags >>> 3) & 1,
                fOleLink: (flags >>> 4) & 1,
                cf: (flags >>> 5) & 1023,
                fIcon: flags >>> 15 & 1
            };
        if (opts.sbcch === 14849)  {
            body = parse_AddinUdf(blob, length - 2);
        }
        
        //else throw new Error("unsupported SupBook cch: " + opts.sbcch);
        o.body = body || blob.read_shift(length - 2);
        return o;
    }
    /* 2.4.150 TODO */
    function parse_Lbl(blob, length, opts) {
        if (opts.biff < 8)  {
            return parse_Label(blob, length, opts);
        }
        
        var target = blob.l + length;
        var flags = blob.read_shift(2);
        var chKey = blob.read_shift(1);
        var cch = blob.read_shift(1);
        var cce = blob.read_shift(2);
        blob.l += 2;
        var itab = blob.read_shift(2);
        blob.l += 4;
        var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
        var rgce = parse_NameParsedFormula(blob, target - blob.l, opts, cce);
        return {
            chKey: chKey,
            Name: name,
            rgce: rgce
        };
    }
    /* 2.4.106 TODO: verify supbook manipulation */
    function parse_ExternSheet(blob, length, opts) {
        if (opts.biff < 8)  {
            return parse_ShortXLUnicodeString(blob, length, opts);
        }
        
        var o = parslurp2(blob, length, parse_XTI);
        var oo = [];
        if (opts.sbcch === 1025) {
            for (var i = 0; i != o.length; ++i) oo.push(opts.snames[o[i][1]]);
            return oo;
        } else  {
            return o;
        }
        
    }
    /* 2.4.260 */
    function parse_ShrFmla(blob, length, opts) {
        var ref = parse_RefU(blob, 6);
        blob.l++;
        var cUse = blob.read_shift(1);
        length -= 8;
        return [
            parse_SharedParsedFormula(blob, length, opts),
            cUse
        ];
    }
    /* 2.4.4 TODO */
    function parse_Array(blob, length, opts) {
        var ref = parse_Ref(blob, 6);
        blob.l += 6;
        length -= 12;
        /* TODO: fAlwaysCalc */
        return [
            ref,
            parse_ArrayParsedFormula(blob, length, opts, ref)
        ];
    }
    /* 2.4.173 */
    function parse_MTRSettings(blob, length) {
        var fMTREnabled = blob.read_shift(4) !== 0;
        var fUserSetThreadCount = blob.read_shift(4) !== 0;
        var cUserThreadCount = blob.read_shift(4);
        return [
            fMTREnabled,
            fUserSetThreadCount,
            cUserThreadCount
        ];
    }
    /* 2.5.186 TODO: BIFF5 */
    function parse_NoteSh(blob, length, opts) {
        if (opts.biff < 8)  {
            return;
        }
        
        var row = blob.read_shift(2),
            col = blob.read_shift(2);
        var flags = blob.read_shift(2),
            idObj = blob.read_shift(2);
        var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
        if (opts.biff < 8)  {
            blob.read_shift(1);
        }
        
        return [
            {
                r: row,
                c: col
            },
            stAuthor,
            idObj,
            flags
        ];
    }
    /* 2.4.179 */
    function parse_Note(blob, length, opts) {
        /* TODO: Support revisions */
        return parse_NoteSh(blob, length, opts);
    }
    /* 2.4.168 */
    function parse_MergeCells(blob, length) {
        var merges = [];
        var cmcs = blob.read_shift(2);
        while (cmcs--) merges.push(parse_Ref8U(blob, length));
        return merges;
    }
    /* 2.4.181 TODO: parse all the things! */
    function parse_Obj(blob, length) {
        var cmo = parse_FtCmo(blob, 22);
        // id, ot, flags
        var fts = parse_FtArray(blob, length - 22, cmo[1]);
        return {
            cmo: cmo,
            ft: fts
        };
    }
    /* 2.4.329 TODO: parse properly */
    function parse_TxO(blob, length, opts) {
        var s = blob.l;
        try {
            blob.l += 4;
            var ot = (opts.lastobj || {
                    cmo: [
                        0,
                        0
                    ]
                }).cmo[1];
            var controlInfo;
            if ([
                0,
                5,
                7,
                11,
                12,
                14
            ].indexOf(ot) == -1)  {
                blob.l += 6;
            }
            else  {
                controlInfo = parse_ControlInfo(blob, 6, opts);
            }
            
            var cchText = blob.read_shift(2);
            var cbRuns = blob.read_shift(2);
            var ifntEmpty = parse_FontIndex(blob, 2);
            var len = blob.read_shift(2);
            blob.l += len;
            //var fmla = parse_ObjFmla(blob, s + length - blob.l);
            var texts = "";
            for (var i = 1; i < blob.lens.length - 1; ++i) {
                if (blob.l - s != blob.lens[i])  {
                    throw "TxO: bad continue record";
                }
                
                var hdr = blob[blob.l];
                var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);
                texts += t;
                if (texts.length >= (hdr ? cchText : 2 * cchText))  {
                    break;
                }
                
            }
            if (texts.length !== cchText && texts.length !== cchText * 2) {
                throw "cchText: " + cchText + " != " + texts.length;
            }
            blob.l = s + length;
            /* 2.5.272 TxORuns */
            //	var rgTxoRuns = [];
            //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
            //	var cchText2 = blob.read_shift(2);
            //	if(cchText2 !== cchText) throw "TxOLastRun mismatch: " + cchText2 + " " + cchText;
            //	blob.l += 6;
            //	if(s + length != blob.l) throw "TxO " + (s + length) + ", at " + blob.l;
            return {
                t: texts
            };
        } catch (e) {
            blob.l = s + length;
            return {
                t: texts || ""
            };
        }
    }
    /* 2.4.140 */
    var parse_HLink = function(blob, length) {
            var ref = parse_Ref8U(blob, 8);
            blob.l += 16;
            /* CLSID */
            var hlink = parse_Hyperlink(blob, length - 24);
            return [
                ref,
                hlink
            ];
        };
    /* 2.4.141 */
    var parse_HLinkTooltip = function(blob, length) {
            var end = blob.l + length;
            blob.read_shift(2);
            var ref = parse_Ref8U(blob, 8);
            var wzTooltip = blob.read_shift((length - 10) / 2, 'dbcs');
            wzTooltip = wzTooltip.replace(chr0, "");
            return [
                ref,
                wzTooltip
            ];
        };
    /* 2.4.63 */
    function parse_Country(blob, length) {
        var o = [],
            d;
        d = blob.read_shift(2);
        o[0] = CountryEnum[d] || d;
        d = blob.read_shift(2);
        o[1] = CountryEnum[d] || d;
        return o;
    }
    /* 2.4.50 ClrtClient */
    function parse_ClrtClient(blob, length) {
        var ccv = blob.read_shift(2);
        var o = [];
        while (ccv-- > 0) o.push(parse_LongRGB(blob, 8));
        return o;
    }
    /* 2.4.188 */
    function parse_Palette(blob, length) {
        var ccv = blob.read_shift(2);
        var o = [];
        while (ccv-- > 0) o.push(parse_LongRGB(blob, 8));
        return o;
    }
    /* 2.4.354 */
    function parse_XFCRC(blob, length) {
        blob.l += 2;
        var o = {
                cxfs: 0,
                crc: 0
            };
        o.cxfs = blob.read_shift(2);
        o.crc = blob.read_shift(4);
        return o;
    }
    var parse_Style = parsenoop;
    var parse_StyleExt = parsenoop;
    var parse_ColInfo = parsenoop;
    var parse_Window2 = parsenoop;
    var parse_Backup = parsebool;
    /* 2.4.14 */
    var parse_Blank = parse_Cell;
    /* 2.4.20 Just the cell */
    var parse_BottomMargin = parse_Xnum;
    /* 2.4.27 */
    var parse_BuiltInFnGroupCount = parseuint16;
    /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */
    var parse_CalcCount = parseuint16;
    /* 2.4.31 #Iterations */
    var parse_CalcDelta = parse_Xnum;
    /* 2.4.32 */
    var parse_CalcIter = parsebool;
    /* 2.4.33 1=iterative calc */
    var parse_CalcMode = parseuint16;
    /* 2.4.34 0=manual, 1=auto (def), 2=table */
    var parse_CalcPrecision = parsebool;
    /* 2.4.35 */
    var parse_CalcRefMode = parsenoop2;
    /* 2.4.36 */
    var parse_CalcSaveRecalc = parsebool;
    /* 2.4.37 */
    var parse_CodePage = parseuint16;
    /* 2.4.52 */
    var parse_Compat12 = parsebool;
    /* 2.4.54 true = no compatibility check */
    var parse_Date1904 = parsebool;
    /* 2.4.77 - 1=1904,0=1900 */
    var parse_DefColWidth = parseuint16;
    /* 2.4.89 */
    var parse_DSF = parsenoop2;
    /* 2.4.94 -- MUST be ignored */
    var parse_EntExU2 = parsenoop2;
    /* 2.4.102 -- Explicitly says to ignore */
    var parse_EOF = parsenoop2;
    /* 2.4.103 */
    var parse_Excel9File = parsenoop2;
    /* 2.4.104 -- Optional and unused */
    var parse_FeatHdr = parsenoop2;
    /* 2.4.112 */
    var parse_FontX = parseuint16;
    /* 2.4.123 */
    var parse_Footer = parse_XLHeaderFooter;
    /* 2.4.124 */
    var parse_GridSet = parseuint16;
    /* 2.4.132, =1 */
    var parse_HCenter = parsebool;
    /* 2.4.135 sheet centered horizontal on print */
    var parse_Header = parse_XLHeaderFooter;
    /* 2.4.136 */
    var parse_HideObj = parse_HideObjEnum;
    /* 2.4.139 */
    var parse_InterfaceEnd = parsenoop2;
    /* 2.4.145 -- noop */
    var parse_LeftMargin = parse_Xnum;
    /* 2.4.151 */
    var parse_Mms = parsenoop2;
    /* 2.4.169 -- Explicitly says to ignore */
    var parse_ObjProtect = parsebool;
    /* 2.4.183 -- must be 1 if present */
    var parse_Password = parseuint16;
    /* 2.4.191 */
    var parse_PrintGrid = parsebool;
    /* 2.4.202 */
    var parse_PrintRowCol = parsebool;
    /* 2.4.203 */
    var parse_PrintSize = parseuint16;
    /* 2.4.204 0:3 */
    var parse_Prot4Rev = parsebool;
    /* 2.4.205 */
    var parse_Prot4RevPass = parseuint16;
    /* 2.4.206 */
    var parse_Protect = parsebool;
    /* 2.4.207 */
    var parse_RefreshAll = parsebool;
    /* 2.4.217 -- must be 0 if not template */
    var parse_RightMargin = parse_Xnum;
    /* 2.4.219 */
    var parse_RRTabId = parseuint16a;
    /* 2.4.241 */
    var parse_ScenarioProtect = parsebool;
    /* 2.4.245 */
    var parse_Scl = parseuint16a;
    /* 2.4.247 num, den */
    var parse_String = parse_XLUnicodeString;
    /* 2.4.268 */
    var parse_SxBool = parsebool;
    /* 2.4.274 */
    var parse_TopMargin = parse_Xnum;
    /* 2.4.328 */
    var parse_UsesELFs = parsebool;
    /* 2.4.337 -- should be 0 */
    var parse_VCenter = parsebool;
    /* 2.4.342 */
    var parse_WinProtect = parsebool;
    /* 2.4.347 */
    var parse_WriteProtect = parsenoop;
    /* 2.4.350 empty record */
    /* ---- */
    var parse_VerticalPageBreaks = parsenoop;
    var parse_HorizontalPageBreaks = parsenoop;
    var parse_Selection = parsenoop;
    var parse_Continue = parsenoop;
    var parse_Pane = parsenoop;
    var parse_Pls = parsenoop;
    var parse_DCon = parsenoop;
    var parse_DConRef = parsenoop;
    var parse_DConName = parsenoop;
    var parse_XCT = parsenoop;
    var parse_CRN = parsenoop;
    var parse_FileSharing = parsenoop;
    var parse_Uncalced = parsenoop;
    var parse_Template = parsenoop;
    var parse_Intl = parsenoop;
    var parse_WsBool = parsenoop;
    var parse_Sort = parsenoop;
    var parse_Sync = parsenoop;
    var parse_LPr = parsenoop;
    var parse_DxGCol = parsenoop;
    var parse_FnGroupName = parsenoop;
    var parse_FilterMode = parsenoop;
    var parse_AutoFilterInfo = parsenoop;
    var parse_AutoFilter = parsenoop;
    var parse_Setup = parsenoop;
    var parse_ScenMan = parsenoop;
    var parse_SCENARIO = parsenoop;
    var parse_SxView = parsenoop;
    var parse_Sxvd = parsenoop;
    var parse_SXVI = parsenoop;
    var parse_SxIvd = parsenoop;
    var parse_SXLI = parsenoop;
    var parse_SXPI = parsenoop;
    var parse_DocRoute = parsenoop;
    var parse_RecipName = parsenoop;
    var parse_MulBlank = parsenoop;
    var parse_SXDI = parsenoop;
    var parse_SXDB = parsenoop;
    var parse_SXFDB = parsenoop;
    var parse_SXDBB = parsenoop;
    var parse_SXNum = parsenoop;
    var parse_SxErr = parsenoop;
    var parse_SXInt = parsenoop;
    var parse_SXString = parsenoop;
    var parse_SXDtr = parsenoop;
    var parse_SxNil = parsenoop;
    var parse_SXTbl = parsenoop;
    var parse_SXTBRGIITM = parsenoop;
    var parse_SxTbpg = parsenoop;
    var parse_ObProj = parsenoop;
    var parse_SXStreamID = parsenoop;
    var parse_DBCell = parsenoop;
    var parse_SXRng = parsenoop;
    var parse_SxIsxoper = parsenoop;
    var parse_BookBool = parsenoop;
    var parse_DbOrParamQry = parsenoop;
    var parse_OleObjectSize = parsenoop;
    var parse_SXVS = parsenoop;
    var parse_BkHim = parsenoop;
    var parse_MsoDrawingGroup = parsenoop;
    var parse_MsoDrawing = parsenoop;
    var parse_MsoDrawingSelection = parsenoop;
    var parse_PhoneticInfo = parsenoop;
    var parse_SxRule = parsenoop;
    var parse_SXEx = parsenoop;
    var parse_SxFilt = parsenoop;
    var parse_SxDXF = parsenoop;
    var parse_SxItm = parsenoop;
    var parse_SxName = parsenoop;
    var parse_SxSelect = parsenoop;
    var parse_SXPair = parsenoop;
    var parse_SxFmla = parsenoop;
    var parse_SxFormat = parsenoop;
    var parse_SXVDEx = parsenoop;
    var parse_SXFormula = parsenoop;
    var parse_SXDBEx = parsenoop;
    var parse_RRDInsDel = parsenoop;
    var parse_RRDHead = parsenoop;
    var parse_RRDChgCell = parsenoop;
    var parse_RRDRenSheet = parsenoop;
    var parse_RRSort = parsenoop;
    var parse_RRDMove = parsenoop;
    var parse_RRFormat = parsenoop;
    var parse_RRAutoFmt = parsenoop;
    var parse_RRInsertSh = parsenoop;
    var parse_RRDMoveBegin = parsenoop;
    var parse_RRDMoveEnd = parsenoop;
    var parse_RRDInsDelBegin = parsenoop;
    var parse_RRDInsDelEnd = parsenoop;
    var parse_RRDConflict = parsenoop;
    var parse_RRDDefName = parsenoop;
    var parse_RRDRstEtxp = parsenoop;
    var parse_LRng = parsenoop;
    var parse_CUsr = parsenoop;
    var parse_CbUsr = parsenoop;
    var parse_UsrInfo = parsenoop;
    var parse_UsrExcl = parsenoop;
    var parse_FileLock = parsenoop;
    var parse_RRDInfo = parsenoop;
    var parse_BCUsrs = parsenoop;
    var parse_UsrChk = parsenoop;
    var parse_UserBView = parsenoop;
    var parse_UserSViewBegin = parsenoop;
    // overloaded
    var parse_UserSViewEnd = parsenoop;
    var parse_RRDUserView = parsenoop;
    var parse_Qsi = parsenoop;
    var parse_CondFmt = parsenoop;
    var parse_CF = parsenoop;
    var parse_DVal = parsenoop;
    var parse_DConBin = parsenoop;
    var parse_Lel = parsenoop;
    var parse_CodeName = parse_XLUnicodeString;
    var parse_SXFDBType = parsenoop;
    var parse_ObNoMacros = parsenoop;
    var parse_Dv = parsenoop;
    var parse_Index = parsenoop;
    var parse_Table = parsenoop;
    var parse_BigName = parsenoop;
    var parse_ContinueBigName = parsenoop;
    var parse_WebPub = parsenoop;
    var parse_QsiSXTag = parsenoop;
    var parse_DBQueryExt = parsenoop;
    var parse_ExtString = parsenoop;
    var parse_TxtQry = parsenoop;
    var parse_Qsir = parsenoop;
    var parse_Qsif = parsenoop;
    var parse_RRDTQSIF = parsenoop;
    var parse_OleDbConn = parsenoop;
    var parse_WOpt = parsenoop;
    var parse_SXViewEx = parsenoop;
    var parse_SXTH = parsenoop;
    var parse_SXPIEx = parsenoop;
    var parse_SXVDTEx = parsenoop;
    var parse_SXViewEx9 = parsenoop;
    var parse_ContinueFrt = parsenoop;
    var parse_RealTimeData = parsenoop;
    var parse_ChartFrtInfo = parsenoop;
    var parse_FrtWrapper = parsenoop;
    var parse_StartBlock = parsenoop;
    var parse_EndBlock = parsenoop;
    var parse_StartObject = parsenoop;
    var parse_EndObject = parsenoop;
    var parse_CatLab = parsenoop;
    var parse_YMult = parsenoop;
    var parse_SXViewLink = parsenoop;
    var parse_PivotChartBits = parsenoop;
    var parse_FrtFontList = parsenoop;
    var parse_SheetExt = parsenoop;
    var parse_BookExt = parsenoop;
    var parse_SXAddl = parsenoop;
    var parse_CrErr = parsenoop;
    var parse_HFPicture = parsenoop;
    var parse_Feat = parsenoop;
    var parse_DataLabExt = parsenoop;
    var parse_DataLabExtContents = parsenoop;
    var parse_CellWatch = parsenoop;
    var parse_FeatHdr11 = parsenoop;
    var parse_Feature11 = parsenoop;
    var parse_DropDownObjIds = parsenoop;
    var parse_ContinueFrt11 = parsenoop;
    var parse_DConn = parsenoop;
    var parse_List12 = parsenoop;
    var parse_Feature12 = parsenoop;
    var parse_CondFmt12 = parsenoop;
    var parse_CF12 = parsenoop;
    var parse_CFEx = parsenoop;
    var parse_AutoFilter12 = parsenoop;
    var parse_ContinueFrt12 = parsenoop;
    var parse_MDTInfo = parsenoop;
    var parse_MDXStr = parsenoop;
    var parse_MDXTuple = parsenoop;
    var parse_MDXSet = parsenoop;
    var parse_MDXProp = parsenoop;
    var parse_MDXKPI = parsenoop;
    var parse_MDB = parsenoop;
    var parse_PLV = parsenoop;
    var parse_DXF = parsenoop;
    var parse_TableStyles = parsenoop;
    var parse_TableStyle = parsenoop;
    var parse_TableStyleElement = parsenoop;
    var parse_NamePublish = parsenoop;
    var parse_NameCmt = parsenoop;
    var parse_SortData = parsenoop;
    var parse_GUIDTypeLib = parsenoop;
    var parse_FnGrp12 = parsenoop;
    var parse_NameFnGrp12 = parsenoop;
    var parse_HeaderFooter = parsenoop;
    var parse_CrtLayout12 = parsenoop;
    var parse_CrtMlFrt = parsenoop;
    var parse_CrtMlFrtContinue = parsenoop;
    var parse_ShapePropsStream = parsenoop;
    var parse_TextPropsStream = parsenoop;
    var parse_RichTextStream = parsenoop;
    var parse_CrtLayout12A = parsenoop;
    var parse_Units = parsenoop;
    var parse_Chart = parsenoop;
    var parse_Series = parsenoop;
    var parse_DataFormat = parsenoop;
    var parse_LineFormat = parsenoop;
    var parse_MarkerFormat = parsenoop;
    var parse_AreaFormat = parsenoop;
    var parse_PieFormat = parsenoop;
    var parse_AttachedLabel = parsenoop;
    var parse_SeriesText = parsenoop;
    var parse_ChartFormat = parsenoop;
    var parse_Legend = parsenoop;
    var parse_SeriesList = parsenoop;
    var parse_Bar = parsenoop;
    var parse_Line = parsenoop;
    var parse_Pie = parsenoop;
    var parse_Area = parsenoop;
    var parse_Scatter = parsenoop;
    var parse_CrtLine = parsenoop;
    var parse_Axis = parsenoop;
    var parse_Tick = parsenoop;
    var parse_ValueRange = parsenoop;
    var parse_CatSerRange = parsenoop;
    var parse_AxisLine = parsenoop;
    var parse_CrtLink = parsenoop;
    var parse_DefaultText = parsenoop;
    var parse_Text = parsenoop;
    var parse_ObjectLink = parsenoop;
    var parse_Frame = parsenoop;
    var parse_Begin = parsenoop;
    var parse_End = parsenoop;
    var parse_PlotArea = parsenoop;
    var parse_Chart3d = parsenoop;
    var parse_PicF = parsenoop;
    var parse_DropBar = parsenoop;
    var parse_Radar = parsenoop;
    var parse_Surf = parsenoop;
    var parse_RadarArea = parsenoop;
    var parse_AxisParent = parsenoop;
    var parse_LegendException = parsenoop;
    var parse_ShtProps = parsenoop;
    var parse_SerToCrt = parsenoop;
    var parse_AxesUsed = parsenoop;
    var parse_SBaseRef = parsenoop;
    var parse_SerParent = parsenoop;
    var parse_SerAuxTrend = parsenoop;
    var parse_IFmtRecord = parsenoop;
    var parse_Pos = parsenoop;
    var parse_AlRuns = parsenoop;
    var parse_BRAI = parsenoop;
    var parse_SerAuxErrBar = parsenoop;
    var parse_SerFmt = parsenoop;
    var parse_Chart3DBarShape = parsenoop;
    var parse_Fbi = parsenoop;
    var parse_BopPop = parsenoop;
    var parse_AxcExt = parsenoop;
    var parse_Dat = parsenoop;
    var parse_PlotGrowth = parsenoop;
    var parse_SIIndex = parsenoop;
    var parse_GelFrame = parsenoop;
    var parse_BopPopCustom = parsenoop;
    var parse_Fbi2 = parsenoop;
    /* --- */
    function parse_BIFF5String(blob) {
        var len = blob.read_shift(1);
        return blob.read_shift(len, 'sbcs');
    }
    /* BIFF2_??? where ??? is the name from [XLS] */
    function parse_BIFF2STR(blob, length, opts) {
        var cell = parse_Cell(blob, 6);
        ++blob.l;
        var str = parse_XLUnicodeString2(blob, length - 7, opts);
        cell.val = str;
        return cell;
    }
    function parse_BIFF2NUM(blob, length, opts) {
        var cell = parse_Cell(blob, 6);
        ++blob.l;
        var num = parse_Xnum(blob, 8);
        cell.val = num;
        return cell;
    }
    var _chr = function(c) {
            return String.fromCharCode(c);
        };
    var attregexg = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
    var attregex = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
    function parsexmltag(tag, skip_root) {
        var words = tag.split(/\s+/);
        var z = [];
        if (!skip_root)  {
            z[0] = words[0];
        }
        
        if (words.length === 1)  {
            return z;
        }
        
        var m = tag.match(attregexg),
            y, j, w, i;
        if (m)  {
            for (i = 0; i != m.length; ++i) {
                y = m[i].match(attregex);
                if ((j = y[1].indexOf(":")) === -1)  {
                    z[y[1]] = y[2].substr(1, y[2].length - 2);
                }
                else {
                    if (y[1].substr(0, 6) === "xmlns:")  {
                        w = "xmlns" + y[1].substr(6);
                    }
                    else  {
                        w = y[1].substr(j + 1);
                    }
                    
                    z[w] = y[2].substr(1, y[2].length - 2);
                }
            };
        }
        
        return z;
    }
    function parsexmltagobj(tag) {
        var words = tag.split(/\s+/);
        var z = {};
        if (words.length === 1)  {
            return z;
        }
        
        var m = tag.match(attregexg),
            y, j, w, i;
        if (m)  {
            for (i = 0; i != m.length; ++i) {
                y = m[i].match(attregex);
                if ((j = y[1].indexOf(":")) === -1)  {
                    z[y[1]] = y[2].substr(1, y[2].length - 2);
                }
                else {
                    if (y[1].substr(0, 6) === "xmlns:")  {
                        w = "xmlns" + y[1].substr(6);
                    }
                    else  {
                        w = y[1].substr(j + 1);
                    }
                    
                    z[w] = y[2].substr(1, y[2].length - 2);
                }
            };
        }
        
        return z;
    }
    var encodings = {
            '&quot;': '"',
            '&apos;': "'",
            '&gt;': '>',
            '&lt;': '<',
            '&amp;': '&'
        };
    var rencoding = evert(encodings);
    var rencstr = "&<>'\"".split("");
    var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
    var OFFCRYPTO = {};
    var make_offcrypto = function(O, _crypto) {
            var crypto;
            if (typeof _crypto !== 'undefined')  {
                crypto = _crypto;
            }
            else if (typeof require !== 'undefined') {
                try {
                    crypto = require('cry' + 'pto');
                } catch (e) {
                    crypto = null;
                }
            }
            O.rc4 = function(key, data) {
                var S = new Array(256);
                var c = 0,
                    i = 0,
                    j = 0,
                    t = 0;
                for (i = 0; i != 256; ++i) S[i] = i;
                for (i = 0; i != 256; ++i) {
                    j = (j + S[i] + (key[i % key.length]).charCodeAt(0)) & 255;
                    t = S[i];
                    S[i] = S[j];
                    S[j] = t;
                }
                i = j = 0;
                out = Buffer(data.length);
                for (c = 0; c != data.length; ++c) {
                    i = (i + 1) & 255;
                    j = (j + S[i]) % 256;
                    t = S[i];
                    S[i] = S[j];
                    S[j] = t;
                    out[c] = (data[c] ^ S[(S[i] + S[j]) & 255]);
                }
                return out;
            };
            if (crypto) {
                O.md5 = function(hex) {
                    return crypto.createHash('md5').update(hex).digest('hex');
                };
            } else {
                O.md5 = function(hex) {
                    throw "unimplemented";
                };
            }
        };
    make_offcrypto(OFFCRYPTO, typeof crypto !== "undefined" ? crypto : undefined);
    function _JS2ANSI(str) {
        if (typeof cptable !== 'undefined')  {
            return cptable.utils.encode(1252, str);
        }
        
        return str.split("").map(function(x) {
            return x.charCodeAt(0);
        });
    }
    /* [MS-OFFCRYPTO] 2.1.4 Version */
    function parse_Version(blob, length) {
        var o = {};
        o.Major = blob.read_shift(2);
        o.Minor = blob.read_shift(2);
        return o;
    }
    /* [MS-OFFCRYPTO] 2.3.2 Encryption Header */
    function parse_EncryptionHeader(blob, length) {
        var o = {};
        o.Flags = blob.read_shift(4);
        // Check if SizeExtra is 0x00000000
        var tmp = blob.read_shift(4);
        if (tmp !== 0)  {
            throw 'Unrecognized SizeExtra: ' + tmp;
        }
        
        o.AlgID = blob.read_shift(4);
        switch (o.AlgID) {
            case 0:
            case 26625:
            case 26126:
            case 26127:
            case 26128:
                break;
            default:
                throw 'Unrecognized encryption algorithm: ' + o.AlgID;
        }
        parsenoop(blob, length - 12);
        return o;
    }
    /* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */
    function parse_EncryptionVerifier(blob, length) {
        return parsenoop(blob, length);
    }
    /* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */
    function parse_RC4CryptoHeader(blob, length) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_Version(blob, 4);
        length -= 4;
        if (vers.Minor != 2)  {
            throw 'unrecognized minor version code: ' + vers.Minor;
        }
        
        if (vers.Major > 4 || vers.Major < 2)  {
            throw 'unrecognized major version code: ' + vers.Major;
        }
        
        o.Flags = blob.read_shift(4);
        length -= 4;
        var sz = blob.read_shift(4);
        length -= 4;
        o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
        length -= sz;
        o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
        return o;
    }
    /* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */
    function parse_RC4Header(blob, length) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_Version(blob, 4);
        length -= 4;
        if (vers.Major != 1 || vers.Minor != 1)  {
            throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
        }
        
        o.Salt = blob.read_shift(16);
        o.EncryptedVerifier = blob.read_shift(16);
        o.EncryptedVerifierHash = blob.read_shift(16);
        return o;
    }
    /* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */
    function crypto_CreatePasswordVerifier_Method1(Password) {
        var Verifier = 0,
            PasswordArray;
        var PasswordDecoded = _JS2ANSI(Password);
        var len = PasswordDecoded.length + 1,
            i, PasswordByte;
        var Intermediate1, Intermediate2, Intermediate3;
        PasswordArray = new_buf(len);
        PasswordArray[0] = PasswordDecoded.length;
        for (i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i - 1];
        for (i = len - 1; i >= 0; --i) {
            PasswordByte = PasswordArray[i];
            Intermediate1 = ((Verifier & 16384) === 0) ? 0 : 1;
            Intermediate2 = (Verifier << 1) & 32767;
            Intermediate3 = Intermediate1 | Intermediate2;
            Verifier = Intermediate3 ^ PasswordByte;
        }
        return Verifier ^ 52811;
    }
    /* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */
    var crypto_CreateXorArray_Method1 = (function() {
            var PadArray = [
                    187,
                    255,
                    255,
                    186,
                    255,
                    255,
                    185,
                    128,
                    0,
                    190,
                    15,
                    0,
                    191,
                    15,
                    0
                ];
            var InitialCode = [
                    57840,
                    7439,
                    52380,
                    33984,
                    4364,
                    3600,
                    61902,
                    12606,
                    6258,
                    57657,
                    54287,
                    34041,
                    10252,
                    43370,
                    20163
                ];
            var XorMatrix = [
                    44796,
                    19929,
                    39858,
                    10053,
                    20106,
                    40212,
                    10761,
                    31585,
                    63170,
                    64933,
                    60267,
                    50935,
                    40399,
                    11199,
                    17763,
                    35526,
                    1453,
                    2906,
                    5812,
                    11624,
                    23248,
                    885,
                    1770,
                    3540,
                    7080,
                    14160,
                    28320,
                    56640,
                    55369,
                    41139,
                    20807,
                    41614,
                    21821,
                    43642,
                    17621,
                    28485,
                    56970,
                    44341,
                    19019,
                    38038,
                    14605,
                    29210,
                    60195,
                    50791,
                    40175,
                    10751,
                    21502,
                    43004,
                    24537,
                    18387,
                    36774,
                    3949,
                    7898,
                    15796,
                    31592,
                    63184,
                    47201,
                    24803,
                    49606,
                    37805,
                    14203,
                    28406,
                    56812,
                    17824,
                    35648,
                    1697,
                    3394,
                    6788,
                    13576,
                    27152,
                    43601,
                    17539,
                    35078,
                    557,
                    1114,
                    2228,
                    4456,
                    30388,
                    60776,
                    51953,
                    34243,
                    7079,
                    14158,
                    28316,
                    14128,
                    28256,
                    56512,
                    43425,
                    17251,
                    34502,
                    7597,
                    13105,
                    26210,
                    52420,
                    35241,
                    883,
                    1766,
                    3532,
                    4129,
                    8258,
                    16516,
                    33032,
                    4657,
                    9314,
                    18628
                ];
            var Ror = function(Byte) {
                    return ((Byte / 2) | (Byte * 128)) & 255;
                };
            var XorRor = function(byte1, byte2) {
                    return Ror(byte1 ^ byte2);
                };
            var CreateXorKey_Method1 = function(Password) {
                    var XorKey = InitialCode[Password.length - 1];
                    var CurrentElement = 104;
                    for (var i = Password.length - 1; i >= 0; --i) {
                        var Char = Password[i];
                        for (var j = 0; j != 7; ++j) {
                            if (Char & 64)  {
                                XorKey ^= XorMatrix[CurrentElement];
                            }
                            
                            Char *= 2;
                            --CurrentElement;
                        }
                    }
                    return XorKey;
                };
            return function(password) {
                var Password = _JS2ANSI(password);
                var XorKey = CreateXorKey_Method1(Password);
                var Index = Password.length;
                var ObfuscationArray = new_buf(16);
                for (var i = 0; i != 16; ++i) ObfuscationArray[i] = 0;
                var Temp, PasswordLastChar, PadIndex;
                if ((Index & 1) === 1) {
                    Temp = XorKey >> 8;
                    ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
                    --Index;
                    Temp = XorKey & 255;
                    PasswordLastChar = Password[Password.length - 1];
                    ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
                }
                while (Index > 0) {
                    --Index;
                    Temp = XorKey >> 8;
                    ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                    --Index;
                    Temp = XorKey & 255;
                    ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                }
                Index = 15;
                PadIndex = 15 - Password.length;
                while (PadIndex > 0) {
                    Temp = XorKey >> 8;
                    ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
                    --Index;
                    --PadIndex;
                    Temp = XorKey & 255;
                    ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                    --Index;
                    --PadIndex;
                }
                return ObfuscationArray;
            };
        })();
    /* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */
    var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {
            /* If XorArray is set, use it; if O is not set, make changes in-place */
            if (!O)  {
                O = Data;
            }
            
            if (!XorArray)  {
                XorArray = crypto_CreateXorArray_Method1(password);
            }
            
            var Index, Value;
            for (Index = 0; Index != Data.length; ++Index) {
                Value = Data[Index];
                Value ^= XorArray[XorArrayIndex];
                Value = ((Value >> 5) | (Value << 3)) & 255;
                O[Index] = Value;
                ++XorArrayIndex;
            }
            return [
                O,
                XorArrayIndex,
                XorArray
            ];
        };
    var crypto_MakeXorDecryptor = function(password) {
            var XorArrayIndex = 0,
                XorArray = crypto_CreateXorArray_Method1(password);
            return function(Data) {
                var O = crypto_DecryptData_Method1(null, Data, XorArrayIndex, XorArray);
                XorArrayIndex = O[1];
                return O[0];
            };
        };
    /* 2.5.343 */
    function parse_XORObfuscation(blob, length, opts, out) {
        var o = {
                key: parseuint16(blob),
                verificationBytes: parseuint16(blob)
            };
        if (opts.password)  {
            o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
        }
        
        out.valid = o.verificationBytes === o.verifier;
        if (out.valid)  {
            out.insitu_decrypt = crypto_MakeXorDecryptor(opts.password);
        }
        
        return o;
    }
    /* 2.4.117 */
    function parse_FilePassHeader(blob, length, oo) {
        var o = oo || {};
        o.Info = blob.read_shift(2);
        blob.l -= 2;
        if (o.Info === 1)  {
            o.Data = parse_RC4Header(blob, length);
        }
        else  {
            o.Data = parse_RC4CryptoHeader(blob, length);
        }
        
        return o;
    }
    function parse_FilePass(blob, length, opts) {
        var o = {
                Type: blob.read_shift(2)
            };
        /* wEncryptionType */
        if (o.Type)  {
            parse_FilePassHeader(blob, length - 2, o);
        }
        else  {
            parse_XORObfuscation(blob, length - 2, opts, o);
        }
        
        return o;
    }
    /* Small helpers */
    function parseread(l) {
        return function(blob, length) {
            blob.l += l;
            return;
        };
    }
    function parseread1(blob, length) {
        blob.l += 1;
        return;
    }
    /* Rgce Helpers */
    /* 2.5.51 */
    function parse_ColRelU(blob, length) {
        var c = blob.read_shift(2);
        return [
            c & 16383,
            (c >> 14) & 1,
            (c >> 15) & 1
        ];
    }
    /* 2.5.198.105 */
    function parse_RgceArea(blob, length) {
        var r = blob.read_shift(2),
            R = blob.read_shift(2);
        var c = parse_ColRelU(blob, 2);
        var C = parse_ColRelU(blob, 2);
        return {
            s: {
                r: r,
                c: c[0],
                cRel: c[1],
                rRel: c[2]
            },
            e: {
                r: R,
                c: C[0],
                cRel: C[1],
                rRel: C[2]
            }
        };
    }
    /* 2.5.198.105 TODO */
    function parse_RgceAreaRel(blob, length) {
        var r = blob.read_shift(2),
            R = blob.read_shift(2);
        var c = parse_ColRelU(blob, 2);
        var C = parse_ColRelU(blob, 2);
        return {
            s: {
                r: r,
                c: c[0],
                cRel: c[1],
                rRel: c[2]
            },
            e: {
                r: R,
                c: C[0],
                cRel: C[1],
                rRel: C[2]
            }
        };
    }
    /* 2.5.198.109 */
    function parse_RgceLoc(blob, length) {
        var r = blob.read_shift(2);
        var c = parse_ColRelU(blob, 2);
        return {
            r: r,
            c: c[0],
            cRel: c[1],
            rRel: c[2]
        };
    }
    /* 2.5.198.111 */
    function parse_RgceLocRel(blob, length) {
        var r = blob.read_shift(2);
        var cl = blob.read_shift(2);
        var cRel = (cl & 32768) >> 15,
            rRel = (cl & 16384) >> 14;
        cl &= 16383;
        if (cRel !== 0)  {
            while (cl >= 256) cl -= 256;
        }
        
        return {
            r: r,
            c: cl,
            cRel: cRel,
            rRel: rRel
        };
    }
    /* Ptg Tokens */
    /* 2.5.198.27 */
    function parse_PtgArea(blob, length) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceArea(blob, 8);
        return [
            type,
            area
        ];
    }
    /* 2.5.198.28 */
    function parse_PtgArea3d(blob, length) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var area = parse_RgceArea(blob, 8);
        return [
            type,
            ixti,
            area
        ];
    }
    /* 2.5.198.29 */
    function parse_PtgAreaErr(blob, length) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += 8;
        return [
            type
        ];
    }
    /* 2.5.198.30 */
    function parse_PtgAreaErr3d(blob, length) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        blob.l += 8;
        return [
            type,
            ixti
        ];
    }
    /* 2.5.198.31 */
    function parse_PtgAreaN(blob, length) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceAreaRel(blob, 8);
        return [
            type,
            area
        ];
    }
    /* 2.5.198.32 -- ignore this and look in PtgExtraArray for shape + values */
    function parse_PtgArray(blob, length) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += 7;
        return [
            type
        ];
    }
    /* 2.5.198.33 */
    function parse_PtgAttrBaxcel(blob, length) {
        var bitSemi = blob[blob.l + 1] & 1;
        /* 1 = volatile */
        var bitBaxcel = 1;
        blob.l += 4;
        return [
            bitSemi,
            bitBaxcel
        ];
    }
    /* 2.5.198.34 */
    function parse_PtgAttrChoose(blob, length) {
        blob.l += 2;
        var offset = blob.read_shift(2);
        var o = [];
        /* offset is 1 less than the number of elements */
        for (var i = 0; i <= offset; ++i) o.push(blob.read_shift(2));
        return o;
    }
    /* 2.5.198.35 */
    function parse_PtgAttrGoto(blob, length) {
        var bitGoto = (blob[blob.l + 1] & 255) ? 1 : 0;
        blob.l += 2;
        return [
            bitGoto,
            blob.read_shift(2)
        ];
    }
    /* 2.5.198.36 */
    function parse_PtgAttrIf(blob, length) {
        var bitIf = (blob[blob.l + 1] & 255) ? 1 : 0;
        blob.l += 2;
        return [
            bitIf,
            blob.read_shift(2)
        ];
    }
    /* 2.5.198.37 */
    function parse_PtgAttrSemi(blob, length) {
        var bitSemi = (blob[blob.l + 1] & 255) ? 1 : 0;
        blob.l += 4;
        return [
            bitSemi
        ];
    }
    /* 2.5.198.40 (used by PtgAttrSpace and PtgAttrSpaceSemi) */
    function parse_PtgAttrSpaceType(blob, length) {
        var type = blob.read_shift(1),
            cch = blob.read_shift(1);
        return [
            type,
            cch
        ];
    }
    /* 2.5.198.38 */
    function parse_PtgAttrSpace(blob, length) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
    }
    /* 2.5.198.39 */
    function parse_PtgAttrSpaceSemi(blob, length) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
    }
    /* 2.5.198.84 TODO */
    function parse_PtgRef(blob, length) {
        var ptg = blob[blob.l] & 31;
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLoc(blob, 4);
        return [
            type,
            loc
        ];
    }
    /* 2.5.198.88 TODO */
    function parse_PtgRefN(blob, length) {
        var ptg = blob[blob.l] & 31;
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLocRel(blob, 4);
        return [
            type,
            loc
        ];
    }
    /* 2.5.198.85 TODO */
    function parse_PtgRef3d(blob, length) {
        var ptg = blob[blob.l] & 31;
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var ixti = blob.read_shift(2);
        // XtiIndex
        var loc = parse_RgceLoc(blob, 4);
        return [
            type,
            ixti,
            loc
        ];
    }
    /* 2.5.198.62 TODO */
    function parse_PtgFunc(blob, length) {
        var ptg = blob[blob.l] & 31;
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var iftab = blob.read_shift(2);
        return [
            FtabArgc[iftab],
            Ftab[iftab]
        ];
    }
    /* 2.5.198.63 TODO */
    function parse_PtgFuncVar(blob, length) {
        blob.l++;
        var cparams = blob.read_shift(1),
            tab = parsetab(blob);
        return [
            cparams,
            (tab[0] === 0 ? Ftab : Cetab)[tab[1]]
        ];
    }
    function parsetab(blob, length) {
        return [
            blob[blob.l + 1] >> 7,
            blob.read_shift(2) & 32767
        ];
    }
    /* 2.5.198.41 */
    var parse_PtgAttrSum = parseread(4);
    /* 2.5.198.43 */
    var parse_PtgConcat = parseread1;
    /* 2.5.198.58 */
    function parse_PtgExp(blob, length) {
        blob.l++;
        var row = blob.read_shift(2);
        var col = blob.read_shift(2);
        return [
            row,
            col
        ];
    }
    /* 2.5.198.57 */
    function parse_PtgErr(blob, length) {
        blob.l++;
        return BErr[blob.read_shift(1)];
    }
    /* 2.5.198.66 TODO */
    function parse_PtgInt(blob, length) {
        blob.l++;
        return blob.read_shift(2);
    }
    /* 2.5.198.42 */
    function parse_PtgBool(blob, length) {
        blob.l++;
        return blob.read_shift(1) !== 0;
    }
    /* 2.5.198.79 */
    function parse_PtgNum(blob, length) {
        blob.l++;
        return parse_Xnum(blob, 8);
    }
    /* 2.5.198.89 */
    function parse_PtgStr(blob, length) {
        blob.l++;
        return parse_ShortXLUnicodeString(blob);
    }
    /* 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */
    function parse_SerAr(blob) {
        var val = [];
        switch ((val[0] = blob.read_shift(1))) {
            /* 2.5.192.113 */
            case 4:
                /* SerBool -- boolean */
                val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
                blob.l += 7;
                break;
            /* 2.5.192.114 */
            case 16:
                /* SerErr -- error */
                val[1] = BErr[blob[blob.l]];
                blob.l += 8;
                break;
            /* 2.5.192.115 */
            case 0:
                /* SerNil -- honestly, I'm not sure how to reproduce this */
                blob.l += 8;
                break;
            /* 2.5.192.116 */
            case 1:
                /* SerNum -- Xnum */
                val[1] = parse_Xnum(blob, 8);
                break;
            /* 2.5.192.117 */
            case 2:
                /* SerStr -- XLUnicodeString (<256 chars) */
                val[1] = parse_XLUnicodeString(blob);
                break;
        }
        // default: throw "Bad SerAr: " + val[0]; /* Unreachable */
        return val;
    }
    /* 2.5.198.61 */
    function parse_PtgExtraMem(blob, cce) {
        var count = blob.read_shift(2);
        var out = [];
        for (var i = 0; i != count; ++i) out.push(parse_Ref8U(blob, 8));
        return out;
    }
    /* 2.5.198.59 */
    function parse_PtgExtraArray(blob) {
        var cols = 1 + blob.read_shift(1);
        //DColByteU
        var rows = 1 + blob.read_shift(2);
        //DRw
        for (var i = 0,
            o = []; i != rows && (o[i] = []); ++i) for (var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob);
        return o;
    }
    /* 2.5.198.76 */
    function parse_PtgName(blob, length) {
        var type = (blob.read_shift(1) >>> 5) & 3;
        var nameindex = blob.read_shift(4);
        return [
            type,
            0,
            nameindex
        ];
    }
    /* 2.5.198.77 */
    function parse_PtgNameX(blob, length) {
        var type = (blob.read_shift(1) >>> 5) & 3;
        var ixti = blob.read_shift(2);
        // XtiIndex
        var nameindex = blob.read_shift(4);
        return [
            type,
            ixti,
            nameindex
        ];
    }
    /* 2.5.198.70 */
    function parse_PtgMemArea(blob, length) {
        var type = (blob.read_shift(1) >>> 5) & 3;
        blob.l += 4;
        var cce = blob.read_shift(2);
        return [
            type,
            cce
        ];
    }
    /* 2.5.198.72 */
    function parse_PtgMemFunc(blob, length) {
        var type = (blob.read_shift(1) >>> 5) & 3;
        var cce = blob.read_shift(2);
        return [
            type,
            cce
        ];
    }
    /* 2.5.198.86 */
    function parse_PtgRefErr(blob, length) {
        var type = (blob.read_shift(1) >>> 5) & 3;
        blob.l += 4;
        return [
            type
        ];
    }
    /* 2.5.198.26 */
    var parse_PtgAdd = parseread1;
    /* 2.5.198.45 */
    var parse_PtgDiv = parseread1;
    /* 2.5.198.56 */
    var parse_PtgEq = parseread1;
    /* 2.5.198.64 */
    var parse_PtgGe = parseread1;
    /* 2.5.198.65 */
    var parse_PtgGt = parseread1;
    /* 2.5.198.67 */
    var parse_PtgIsect = parseread1;
    /* 2.5.198.68 */
    var parse_PtgLe = parseread1;
    /* 2.5.198.69 */
    var parse_PtgLt = parseread1;
    /* 2.5.198.74 */
    var parse_PtgMissArg = parseread1;
    /* 2.5.198.75 */
    var parse_PtgMul = parseread1;
    /* 2.5.198.78 */
    var parse_PtgNe = parseread1;
    /* 2.5.198.80 */
    var parse_PtgParen = parseread1;
    /* 2.5.198.81 */
    var parse_PtgPercent = parseread1;
    /* 2.5.198.82 */
    var parse_PtgPower = parseread1;
    /* 2.5.198.83 */
    var parse_PtgRange = parseread1;
    /* 2.5.198.90 */
    var parse_PtgSub = parseread1;
    /* 2.5.198.93 */
    var parse_PtgUminus = parseread1;
    /* 2.5.198.94 */
    var parse_PtgUnion = parseread1;
    /* 2.5.198.95 */
    var parse_PtgUplus = parseread1;
    /* 2.5.198.71 */
    var parse_PtgMemErr = parsenoop;
    /* 2.5.198.73 */
    var parse_PtgMemNoMem = parsenoop;
    /* 2.5.198.87 */
    var parse_PtgRefErr3d = parsenoop;
    /* 2.5.198.92 */
    var parse_PtgTbl = parsenoop;
    /* 2.5.198.25 */
    var PtgTypes = {
            1: {
                n: 'PtgExp',
                f: parse_PtgExp
            },
            2: {
                n: 'PtgTbl',
                f: parse_PtgTbl
            },
            3: {
                n: 'PtgAdd',
                f: parse_PtgAdd
            },
            4: {
                n: 'PtgSub',
                f: parse_PtgSub
            },
            5: {
                n: 'PtgMul',
                f: parse_PtgMul
            },
            6: {
                n: 'PtgDiv',
                f: parse_PtgDiv
            },
            7: {
                n: 'PtgPower',
                f: parse_PtgPower
            },
            8: {
                n: 'PtgConcat',
                f: parse_PtgConcat
            },
            9: {
                n: 'PtgLt',
                f: parse_PtgLt
            },
            10: {
                n: 'PtgLe',
                f: parse_PtgLe
            },
            11: {
                n: 'PtgEq',
                f: parse_PtgEq
            },
            12: {
                n: 'PtgGe',
                f: parse_PtgGe
            },
            13: {
                n: 'PtgGt',
                f: parse_PtgGt
            },
            14: {
                n: 'PtgNe',
                f: parse_PtgNe
            },
            15: {
                n: 'PtgIsect',
                f: parse_PtgIsect
            },
            16: {
                n: 'PtgUnion',
                f: parse_PtgUnion
            },
            17: {
                n: 'PtgRange',
                f: parse_PtgRange
            },
            18: {
                n: 'PtgUplus',
                f: parse_PtgUplus
            },
            19: {
                n: 'PtgUminus',
                f: parse_PtgUminus
            },
            20: {
                n: 'PtgPercent',
                f: parse_PtgPercent
            },
            21: {
                n: 'PtgParen',
                f: parse_PtgParen
            },
            22: {
                n: 'PtgMissArg',
                f: parse_PtgMissArg
            },
            23: {
                n: 'PtgStr',
                f: parse_PtgStr
            },
            28: {
                n: 'PtgErr',
                f: parse_PtgErr
            },
            29: {
                n: 'PtgBool',
                f: parse_PtgBool
            },
            30: {
                n: 'PtgInt',
                f: parse_PtgInt
            },
            31: {
                n: 'PtgNum',
                f: parse_PtgNum
            },
            32: {
                n: 'PtgArray',
                f: parse_PtgArray
            },
            33: {
                n: 'PtgFunc',
                f: parse_PtgFunc
            },
            34: {
                n: 'PtgFuncVar',
                f: parse_PtgFuncVar
            },
            35: {
                n: 'PtgName',
                f: parse_PtgName
            },
            36: {
                n: 'PtgRef',
                f: parse_PtgRef
            },
            37: {
                n: 'PtgArea',
                f: parse_PtgArea
            },
            38: {
                n: 'PtgMemArea',
                f: parse_PtgMemArea
            },
            39: {
                n: 'PtgMemErr',
                f: parse_PtgMemErr
            },
            40: {
                n: 'PtgMemNoMem',
                f: parse_PtgMemNoMem
            },
            41: {
                n: 'PtgMemFunc',
                f: parse_PtgMemFunc
            },
            42: {
                n: 'PtgRefErr',
                f: parse_PtgRefErr
            },
            43: {
                n: 'PtgAreaErr',
                f: parse_PtgAreaErr
            },
            44: {
                n: 'PtgRefN',
                f: parse_PtgRefN
            },
            45: {
                n: 'PtgAreaN',
                f: parse_PtgAreaN
            },
            57: {
                n: 'PtgNameX',
                f: parse_PtgNameX
            },
            58: {
                n: 'PtgRef3d',
                f: parse_PtgRef3d
            },
            59: {
                n: 'PtgArea3d',
                f: parse_PtgArea3d
            },
            60: {
                n: 'PtgRefErr3d',
                f: parse_PtgRefErr3d
            },
            61: {
                n: 'PtgAreaErr3d',
                f: parse_PtgAreaErr3d
            },
            255: {}
        };
    /* These are duplicated in the PtgTypes table */
    var PtgDupes = {
            64: 32,
            96: 32,
            65: 33,
            97: 33,
            66: 34,
            98: 34,
            67: 35,
            99: 35,
            68: 36,
            100: 36,
            69: 37,
            101: 37,
            70: 38,
            102: 38,
            71: 39,
            103: 39,
            72: 40,
            104: 40,
            73: 41,
            105: 41,
            74: 42,
            106: 42,
            75: 43,
            107: 43,
            76: 44,
            108: 44,
            77: 45,
            109: 45,
            89: 57,
            121: 57,
            90: 58,
            122: 58,
            91: 59,
            123: 59,
            92: 60,
            124: 60,
            93: 61,
            125: 61
        };
    (function() {
        for (var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];
    })();
    var Ptg18 = {};
    var Ptg19 = {
            1: {
                n: 'PtgAttrSemi',
                f: parse_PtgAttrSemi
            },
            2: {
                n: 'PtgAttrIf',
                f: parse_PtgAttrIf
            },
            4: {
                n: 'PtgAttrChoose',
                f: parse_PtgAttrChoose
            },
            8: {
                n: 'PtgAttrGoto',
                f: parse_PtgAttrGoto
            },
            16: {
                n: 'PtgAttrSum',
                f: parse_PtgAttrSum
            },
            32: {
                n: 'PtgAttrBaxcel',
                f: parse_PtgAttrBaxcel
            },
            64: {
                n: 'PtgAttrSpace',
                f: parse_PtgAttrSpace
            },
            65: {
                n: 'PtgAttrSpaceSemi',
                f: parse_PtgAttrSpaceSemi
            },
            255: {}
        };
    /* TODO: it will be useful to parse the function str */
    var rcregex = /(^|[^A-Za-z])R(\[?)(-?\d+|)\]?C(\[?)(-?\d+|)\]?/g;
    var rcbase;
    function rcfunc($$, $1, $2, $3, $4, $5) {
        var R = $3.length > 0 ? parseInt($3, 10) | 0 : 0,
            C = $5.length > 0 ? parseInt($5, 10) | 0 : 0;
        if (C < 0 && $4.length === 0)  {
            C = 0;
        }
        
        if ($4.length > 0)  {
            C += rcbase.c;
        }
        
        if ($2.length > 0)  {
            R += rcbase.r;
        }
        
        return $1 + encode_col(C) + encode_row(R);
    }
    function rc_to_a1(fstr, base) {
        rcbase = base;
        return fstr.replace(rcregex, rcfunc);
    }
    /* 2.4.127 TODO */
    function parse_Formula(blob, length, opts) {
        var cell = parse_Cell(blob, 6);
        var val = parse_FormulaValue(blob, 8);
        var flags = blob.read_shift(1);
        blob.read_shift(1);
        var chn = blob.read_shift(4);
        var cbf = "";
        if (opts.biff === 5)  {
            blob.l += length - 20;
        }
        else  {
            cbf = parse_CellParsedFormula(blob, length - 20, opts);
        }
        
        return {
            cell: cell,
            val: val[0],
            formula: cbf,
            shared: (flags >> 3) & 1,
            tt: val[1]
        };
    }
    /* 2.5.133 TODO: how to emit empty strings? */
    function parse_FormulaValue(blob) {
        var b;
        if (__readUInt16LE(blob, blob.l + 6) !== 65535)  {
            return [
                parse_Xnum(blob),
                'n'
            ];
        }
        
        switch (blob[blob.l]) {
            case 0:
                blob.l += 8;
                return [
                    "String",
                    's'
                ];
            case 1:
                b = blob[blob.l + 2] === 1;
                blob.l += 8;
                return [
                    b,
                    'b'
                ];
            case 2:
                b = blob[blob.l + 2];
                blob.l += 8;
                return [
                    b,
                    'e'
                ];
            case 3:
                blob.l += 8;
                return [
                    "",
                    's'
                ];
        }
    }
    /* 2.5.198.103 */
    function parse_RgbExtra(blob, length, rgce, opts) {
        if (opts.biff < 8)  {
            return parsenoop(blob, length);
        }
        
        var target = blob.l + length;
        var o = [];
        for (var i = 0; i !== rgce.length; ++i) {
            switch (rgce[i][0]) {
                case 'PtgArray':
                    /* PtgArray -> PtgExtraArray */
                    rgce[i][1] = parse_PtgExtraArray(blob);
                    o.push(rgce[i][1]);
                    break;
                case 'PtgMemArea':
                    /* PtgMemArea -> PtgExtraMem */
                    rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]);
                    o.push(rgce[i][2]);
                    break;
                default:
                    break;
            }
        }
        length = target - blob.l;
        if (length !== 0)  {
            o.push(parsenoop(blob, length));
        }
        
        return o;
    }
    /* 2.5.198.21 */
    function parse_NameParsedFormula(blob, length, opts, cce) {
        var target = blob.l + length;
        var rgce = parse_Rgce(blob, cce);
        var rgcb;
        if (target !== blob.l)  {
            rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
        }
        
        return [
            rgce,
            rgcb
        ];
    }
    /* 2.5.198.3 TODO */
    function parse_CellParsedFormula(blob, length, opts) {
        var target = blob.l + length;
        var rgcb,
            cce = blob.read_shift(2);
        // length of rgce
        if (cce == 65535)  {
            return [
                [],
                parsenoop(blob, length - 2)
            ];
        }
        
        var rgce = parse_Rgce(blob, cce);
        if (length !== cce + 2)  {
            rgcb = parse_RgbExtra(blob, length - cce - 2, rgce, opts);
        }
        
        return [
            rgce,
            rgcb
        ];
    }
    /* 2.5.198.118 TODO */
    function parse_SharedParsedFormula(blob, length, opts) {
        var target = blob.l + length;
        var rgcb,
            cce = blob.read_shift(2);
        // length of rgce
        var rgce = parse_Rgce(blob, cce);
        if (cce == 65535)  {
            return [
                [],
                parsenoop(blob, length - 2)
            ];
        }
        
        if (length !== cce + 2)  {
            rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
        }
        
        return [
            rgce,
            rgcb
        ];
    }
    /* 2.5.198.1 TODO */
    function parse_ArrayParsedFormula(blob, length, opts, ref) {
        var target = blob.l + length;
        var rgcb,
            cce = blob.read_shift(2);
        // length of rgce
        if (cce == 65535)  {
            return [
                [],
                parsenoop(blob, length - 2)
            ];
        }
        
        var rgce = parse_Rgce(blob, cce);
        if (length !== cce + 2)  {
            rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
        }
        
        return [
            rgce,
            rgcb
        ];
    }
    /* 2.5.198.104 */
    function parse_Rgce(blob, length) {
        var target = blob.l + length;
        var R, id,
            ptgs = [];
        while (target != blob.l) {
            length = target - blob.l;
            id = blob[blob.l];
            R = PtgTypes[id];
            //console.log("ptg", id, R)
            if (id === 24 || id === 25) {
                id = blob[blob.l + 1];
                R = (id === 24 ? Ptg18 : Ptg19)[id];
            }
            if (!R || !R.f) {
                ptgs.push(parsenoop(blob, length));
            } else {
                ptgs.push([
                    R.n,
                    R.f(blob, length)
                ]);
            }
        }
        return ptgs;
    }
    function mapper(x) {
        return x.map(function f2(y) {
            return y[1];
        }).join(",");
    }
    /* 2.2.2 + Magic TODO */
    function stringify_formula(formula, range, cell, supbooks, opts) {
        if (opts !== undefined && opts.biff === 5)  {
            return "BIFF5??";
        }
        
        var _range = range !== undefined ? range : {
                s: {
                    c: 0,
                    r: 0
                }
            };
        var stack = [],
            e1, e2, type, c, ixti, nameidx, r;
        if (!formula[0] || !formula[0][0])  {
            return "";
        }
        
        //console.log("--",cell,formula[0])
        for (var ff = 0,
            fflen = formula[0].length; ff < fflen; ++ff) {
            var f = formula[0][ff];
            //console.log("++",f, stack)
            switch (f[0]) {
                /* 2.2.2.1 Unary Operator Tokens */
                /* 2.5.198.93 */
                case 'PtgUminus':
                    stack.push("-" + stack.pop());
                    break;
                /* 2.5.198.95 */
                case 'PtgUplus':
                    stack.push("+" + stack.pop());
                    break;
                /* 2.5.198.81 */
                case 'PtgPercent':
                    stack.push(stack.pop() + "%");
                    break;
                /* 2.2.2.1 Binary Value Operator Token */
                /* 2.5.198.26 */
                case 'PtgAdd':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "+" + e1);
                    break;
                /* 2.5.198.90 */
                case 'PtgSub':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "-" + e1);
                    break;
                /* 2.5.198.75 */
                case 'PtgMul':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "*" + e1);
                    break;
                /* 2.5.198.45 */
                case 'PtgDiv':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "/" + e1);
                    break;
                /* 2.5.198.82 */
                case 'PtgPower':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "^" + e1);
                    break;
                /* 2.5.198.43 */
                case 'PtgConcat':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "&" + e1);
                    break;
                /* 2.5.198.69 */
                case 'PtgLt':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "<" + e1);
                    break;
                /* 2.5.198.68 */
                case 'PtgLe':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "<=" + e1);
                    break;
                /* 2.5.198.56 */
                case 'PtgEq':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "=" + e1);
                    break;
                /* 2.5.198.64 */
                case 'PtgGe':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + ">=" + e1);
                    break;
                /* 2.5.198.65 */
                case 'PtgGt':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + ">" + e1);
                    break;
                /* 2.5.198.78 */
                case 'PtgNe':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "<>" + e1);
                    break;
                /* 2.2.2.1 Binary Reference Operator Token */
                /* 2.5.198.67 */
                case 'PtgIsect':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + " " + e1);
                    break;
                case 'PtgUnion':
                    e1 = stack.pop();
                    e2 = stack.pop();
                    stack.push(e2 + "," + e1);
                    break;
                case 'PtgRange':
                    break;
                /* 2.2.2.3 Control Tokens "can be ignored" */
                /* 2.5.198.34 */
                case 'PtgAttrChoose':
                    break;
                /* 2.5.198.35 */
                case 'PtgAttrGoto':
                    break;
                /* 2.5.198.36 */
                case 'PtgAttrIf':
                    break;
                /* 2.5.198.84 */
                case 'PtgRef':
                    type = f[1][0];
                    c = shift_cell(decode_cell(encode_cell(f[1][1])), _range);
                    stack.push(encode_cell(c));
                    break;
                /* 2.5.198.88 */
                case 'PtgRefN':
                    type = f[1][0];
                    c = shift_cell(decode_cell(encode_cell(f[1][1])), cell);
                    stack.push(encode_cell(c));
                    break;
                case 'PtgRef3d':
                    // TODO: lots of stuff
                    type = f[1][0];
                    ixti = f[1][1];
                    c = shift_cell(f[1][2], _range);
                    stack.push(supbooks[1][ixti + 1] + "!" + encode_cell(c));
                    break;
                /* Function Call */
                /* 2.5.198.62 */
                case 'PtgFunc':
                /* 2.5.198.63 */
                case 'PtgFuncVar':
                    /* f[1] = [argc, func] */
                    var argc = f[1][0],
                        func = f[1][1];
                    if (!argc)  {
                        argc = 0;
                    }
                    ;
                    var args = stack.slice(-argc);
                    stack.length -= argc;
                    if (func === 'User')  {
                        func = args.shift();
                    }
                    ;
                    stack.push(func + "(" + args.join(",") + ")");
                    break;
                /* 2.5.198.42 */
                case 'PtgBool':
                    stack.push(f[1] ? "TRUE" : "FALSE");
                    break;
                /* 2.5.198.66 */
                case 'PtgInt':
                    stack.push(f[1]);
                    break;
                /* 2.5.198.79 TODO: precision? */
                case 'PtgNum':
                    stack.push(String(f[1]));
                    break;
                /* 2.5.198.89 */
                case 'PtgStr':
                    stack.push('"' + f[1] + '"');
                    break;
                /* 2.5.198.57 */
                case 'PtgErr':
                    stack.push(f[1]);
                    break;
                /* 2.5.198.27 TODO: fixed points */
                case 'PtgArea':
                    type = f[1][0];
                    r = shift_range(f[1][1], _range);
                    stack.push(encode_range(r));
                    break;
                /* 2.5.198.28 */
                case 'PtgArea3d':
                    // TODO: lots of stuff
                    type = f[1][0];
                    ixti = f[1][1];
                    r = f[1][2];
                    stack.push(supbooks[1][ixti + 1] + "!" + encode_range(r));
                    break;
                /* 2.5.198.41 */
                case 'PtgAttrSum':
                    stack.push("SUM(" + stack.pop() + ")");
                    break;
                /* Expression Prefixes */
                /* 2.5.198.37 */
                case 'PtgAttrSemi':
                    break;
                /* 2.5.97.60 TODO: do something different for revisions */
                case 'PtgName':
                    /* f[1] = type, 0, nameindex */
                    nameidx = f[1][2];
                    var lbl = supbooks[0][nameidx];
                    var name = lbl.Name;
                    if (name in XLSXFutureFunctions)  {
                        name = XLSXFutureFunctions[name];
                    }
                    ;
                    stack.push(name);
                    break;
                /* 2.5.97.61 TODO: do something different for revisions */
                case 'PtgNameX':
                    /* f[1] = type, ixti, nameindex */
                    var bookidx = f[1][1];
                    nameidx = f[1][2];
                    var externbook;
                    /* TODO: Properly handle missing values */
                    if (supbooks[bookidx + 1])  {
                        externbook = supbooks[bookidx + 1][nameidx];
                    }
                    else if (supbooks[bookidx - 1])  {
                        externbook = supbooks[bookidx - 1][nameidx];
                    }
                    ;
                    if (!externbook)  {
                        externbook = {
                            body: "??NAMEX??"
                        };
                    }
                    ;
                    stack.push(externbook.body);
                    break;
                /* 2.2.2.4 Display Tokens */
                /* 2.5.198.80 */
                case 'PtgParen':
                    stack.push('(' + stack.pop() + ')');
                    break;
                /* 2.5.198.86 */
                case 'PtgRefErr':
                    stack.push('#REF!');
                    break;
                /* */
                /* 2.5.198.58 TODO */
                case 'PtgExp':
                    c = {
                        c: f[1][1],
                        r: f[1][0]
                    };
                    var q = {
                            c: cell.c,
                            r: cell.r
                        };
                    if (supbooks.sharedf[encode_cell(c)]) {
                        var parsedf = (supbooks.sharedf[encode_cell(c)]);
                        stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
                    } else {
                        var fnd = false;
                        for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
                            /* TODO: should be something like range_has */
                            e2 = supbooks.arrayf[e1];
                            if (c.c < e2[0].s.c || c.c > e2[0].e.c)  {
                                
                                continue;
                            }
                            
                            if (c.r < e2[0].s.r || c.r > e2[0].e.r)  {
                                
                                continue;
                            }
                            
                            stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                        }
                        if (!fnd)  {
                            stack.push(f[1]);
                        }
                        
                    };
                    break;
                /* 2.5.198.32 TODO */
                case 'PtgArray':
                    stack.push("{" + f[1].map(mapper).join(";") + "}");
                    break;
                /* 2.2.2.5 Mem Tokens */
                /* 2.5.198.70 TODO: confirm this is a non-display */
                case 'PtgMemArea':
                    //stack.push("(" + f[2].map(encode_range).join(",") + ")");
                    break;
                /* 2.5.198.38 TODO */
                case 'PtgAttrSpace':
                    break;
                /* 2.5.198.92 TODO */
                case 'PtgTbl':
                    break;
                /* 2.5.198.71 */
                case 'PtgMemErr':
                    break;
                /* 2.5.198.74 */
                case 'PtgMissArg':
                    stack.push("");
                    break;
                /* 2.5.198.29 TODO */
                case 'PtgAreaErr':
                    break;
                /* 2.5.198.31 TODO */
                case 'PtgAreaN':
                    stack.push("");
                    break;
                /* 2.5.198.87 TODO */
                case 'PtgRefErr3d':
                    break;
                /* 2.5.198.72 TODO */
                case 'PtgMemFunc':
                    break;
                default:
                    throw 'Unrecognized Formula Token: ' + f;
            }
        }
        //console.log("::",f, stack)
        //console.log("--",stack);
        return stack[0];
    }
    /* 2.5.198.44 */
    var PtgDataType = {
            1: "REFERENCE",
            // reference to range
            2: "VALUE",
            // single value
            3: "ARRAY"
        };
    // array of values
    /* 2.5.198.2 */
    var BErr = {
            0: "#NULL!",
            7: "#DIV/0!",
            15: "#VALUE!",
            23: "#REF!",
            29: "#NAME?",
            36: "#NUM!",
            42: "#N/A",
            43: "#GETTING_DATA",
            /* Noted in 2.5.10 but not in 2.5.198.2 */
            255: "#WTF?"
        };
    var RBErr = evert(BErr);
    /* 2.5.198.4 */
    var Cetab = {
            0: 'BEEP',
            1: 'OPEN',
            2: 'OPEN.LINKS',
            3: 'CLOSE.ALL',
            4: 'SAVE',
            5: 'SAVE.AS',
            6: 'FILE.DELETE',
            7: 'PAGE.SETUP',
            8: 'PRINT',
            9: 'PRINTER.SETUP',
            10: 'QUIT',
            11: 'NEW.WINDOW',
            12: 'ARRANGE.ALL',
            13: 'WINDOW.SIZE',
            14: 'WINDOW.MOVE',
            15: 'FULL',
            16: 'CLOSE',
            17: 'RUN',
            22: 'SET.PRINT.AREA',
            23: 'SET.PRINT.TITLES',
            24: 'SET.PAGE.BREAK',
            25: 'REMOVE.PAGE.BREAK',
            26: 'FONT',
            27: 'DISPLAY',
            28: 'PROTECT.DOCUMENT',
            29: 'PRECISION',
            30: 'A1.R1C1',
            31: 'CALCULATE.NOW',
            32: 'CALCULATION',
            34: 'DATA.FIND',
            35: 'EXTRACT',
            36: 'DATA.DELETE',
            37: 'SET.DATABASE',
            38: 'SET.CRITERIA',
            39: 'SORT',
            40: 'DATA.SERIES',
            41: 'TABLE',
            42: 'FORMAT.NUMBER',
            43: 'ALIGNMENT',
            44: 'STYLE',
            45: 'BORDER',
            46: 'CELL.PROTECTION',
            47: 'COLUMN.WIDTH',
            48: 'UNDO',
            49: 'CUT',
            50: 'COPY',
            51: 'PASTE',
            52: 'CLEAR',
            53: 'PASTE.SPECIAL',
            54: 'EDIT.DELETE',
            55: 'INSERT',
            56: 'FILL.RIGHT',
            57: 'FILL.DOWN',
            61: 'DEFINE.NAME',
            62: 'CREATE.NAMES',
            63: 'FORMULA.GOTO',
            64: 'FORMULA.FIND',
            65: 'SELECT.LAST.CELL',
            66: 'SHOW.ACTIVE.CELL',
            67: 'GALLERY.AREA',
            68: 'GALLERY.BAR',
            69: 'GALLERY.COLUMN',
            70: 'GALLERY.LINE',
            71: 'GALLERY.PIE',
            72: 'GALLERY.SCATTER',
            73: 'COMBINATION',
            74: 'PREFERRED',
            75: 'ADD.OVERLAY',
            76: 'GRIDLINES',
            77: 'SET.PREFERRED',
            78: 'AXES',
            79: 'LEGEND',
            80: 'ATTACH.TEXT',
            81: 'ADD.ARROW',
            82: 'SELECT.CHART',
            83: 'SELECT.PLOT.AREA',
            84: 'PATTERNS',
            85: 'MAIN.CHART',
            86: 'OVERLAY',
            87: 'SCALE',
            88: 'FORMAT.LEGEND',
            89: 'FORMAT.TEXT',
            90: 'EDIT.REPEAT',
            91: 'PARSE',
            92: 'JUSTIFY',
            93: 'HIDE',
            94: 'UNHIDE',
            95: 'WORKSPACE',
            96: 'FORMULA',
            97: 'FORMULA.FILL',
            98: 'FORMULA.ARRAY',
            99: 'DATA.FIND.NEXT',
            100: 'DATA.FIND.PREV',
            101: 'FORMULA.FIND.NEXT',
            102: 'FORMULA.FIND.PREV',
            103: 'ACTIVATE',
            104: 'ACTIVATE.NEXT',
            105: 'ACTIVATE.PREV',
            106: 'UNLOCKED.NEXT',
            107: 'UNLOCKED.PREV',
            108: 'COPY.PICTURE',
            109: 'SELECT',
            110: 'DELETE.NAME',
            111: 'DELETE.FORMAT',
            112: 'VLINE',
            113: 'HLINE',
            114: 'VPAGE',
            115: 'HPAGE',
            116: 'VSCROLL',
            117: 'HSCROLL',
            118: 'ALERT',
            119: 'NEW',
            120: 'CANCEL.COPY',
            121: 'SHOW.CLIPBOARD',
            122: 'MESSAGE',
            124: 'PASTE.LINK',
            125: 'APP.ACTIVATE',
            126: 'DELETE.ARROW',
            127: 'ROW.HEIGHT',
            128: 'FORMAT.MOVE',
            129: 'FORMAT.SIZE',
            130: 'FORMULA.REPLACE',
            131: 'SEND.KEYS',
            132: 'SELECT.SPECIAL',
            133: 'APPLY.NAMES',
            134: 'REPLACE.FONT',
            135: 'FREEZE.PANES',
            136: 'SHOW.INFO',
            137: 'SPLIT',
            138: 'ON.WINDOW',
            139: 'ON.DATA',
            140: 'DISABLE.INPUT',
            142: 'OUTLINE',
            143: 'LIST.NAMES',
            144: 'FILE.CLOSE',
            145: 'SAVE.WORKBOOK',
            146: 'DATA.FORM',
            147: 'COPY.CHART',
            148: 'ON.TIME',
            149: 'WAIT',
            150: 'FORMAT.FONT',
            151: 'FILL.UP',
            152: 'FILL.LEFT',
            153: 'DELETE.OVERLAY',
            155: 'SHORT.MENUS',
            159: 'SET.UPDATE.STATUS',
            161: 'COLOR.PALETTE',
            162: 'DELETE.STYLE',
            163: 'WINDOW.RESTORE',
            164: 'WINDOW.MAXIMIZE',
            166: 'CHANGE.LINK',
            167: 'CALCULATE.DOCUMENT',
            168: 'ON.KEY',
            169: 'APP.RESTORE',
            170: 'APP.MOVE',
            171: 'APP.SIZE',
            172: 'APP.MINIMIZE',
            173: 'APP.MAXIMIZE',
            174: 'BRING.TO.FRONT',
            175: 'SEND.TO.BACK',
            185: 'MAIN.CHART.TYPE',
            186: 'OVERLAY.CHART.TYPE',
            187: 'SELECT.END',
            188: 'OPEN.MAIL',
            189: 'SEND.MAIL',
            190: 'STANDARD.FONT',
            191: 'CONSOLIDATE',
            192: 'SORT.SPECIAL',
            193: 'GALLERY.3D.AREA',
            194: 'GALLERY.3D.COLUMN',
            195: 'GALLERY.3D.LINE',
            196: 'GALLERY.3D.PIE',
            197: 'VIEW.3D',
            198: 'GOAL.SEEK',
            199: 'WORKGROUP',
            200: 'FILL.GROUP',
            201: 'UPDATE.LINK',
            202: 'PROMOTE',
            203: 'DEMOTE',
            204: 'SHOW.DETAIL',
            206: 'UNGROUP',
            207: 'OBJECT.PROPERTIES',
            208: 'SAVE.NEW.OBJECT',
            209: 'SHARE',
            210: 'SHARE.NAME',
            211: 'DUPLICATE',
            212: 'APPLY.STYLE',
            213: 'ASSIGN.TO.OBJECT',
            214: 'OBJECT.PROTECTION',
            215: 'HIDE.OBJECT',
            216: 'SET.EXTRACT',
            217: 'CREATE.PUBLISHER',
            218: 'SUBSCRIBE.TO',
            219: 'ATTRIBUTES',
            220: 'SHOW.TOOLBAR',
            222: 'PRINT.PREVIEW',
            223: 'EDIT.COLOR',
            224: 'SHOW.LEVELS',
            225: 'FORMAT.MAIN',
            226: 'FORMAT.OVERLAY',
            227: 'ON.RECALC',
            228: 'EDIT.SERIES',
            229: 'DEFINE.STYLE',
            240: 'LINE.PRINT',
            243: 'ENTER.DATA',
            249: 'GALLERY.RADAR',
            250: 'MERGE.STYLES',
            251: 'EDITION.OPTIONS',
            252: 'PASTE.PICTURE',
            253: 'PASTE.PICTURE.LINK',
            254: 'SPELLING',
            256: 'ZOOM',
            259: 'INSERT.OBJECT',
            260: 'WINDOW.MINIMIZE',
            265: 'SOUND.NOTE',
            266: 'SOUND.PLAY',
            267: 'FORMAT.SHAPE',
            268: 'EXTEND.POLYGON',
            269: 'FORMAT.AUTO',
            272: 'GALLERY.3D.BAR',
            273: 'GALLERY.3D.SURFACE',
            274: 'FILL.AUTO',
            276: 'CUSTOMIZE.TOOLBAR',
            277: 'ADD.TOOL',
            278: 'EDIT.OBJECT',
            279: 'ON.DOUBLECLICK',
            280: 'ON.ENTRY',
            281: 'WORKBOOK.ADD',
            282: 'WORKBOOK.MOVE',
            283: 'WORKBOOK.COPY',
            284: 'WORKBOOK.OPTIONS',
            285: 'SAVE.WORKSPACE',
            288: 'CHART.WIZARD',
            289: 'DELETE.TOOL',
            290: 'MOVE.TOOL',
            291: 'WORKBOOK.SELECT',
            292: 'WORKBOOK.ACTIVATE',
            293: 'ASSIGN.TO.TOOL',
            295: 'COPY.TOOL',
            296: 'RESET.TOOL',
            297: 'CONSTRAIN.NUMERIC',
            298: 'PASTE.TOOL',
            302: 'WORKBOOK.NEW',
            305: 'SCENARIO.CELLS',
            306: 'SCENARIO.DELETE',
            307: 'SCENARIO.ADD',
            308: 'SCENARIO.EDIT',
            309: 'SCENARIO.SHOW',
            310: 'SCENARIO.SHOW.NEXT',
            311: 'SCENARIO.SUMMARY',
            312: 'PIVOT.TABLE.WIZARD',
            313: 'PIVOT.FIELD.PROPERTIES',
            314: 'PIVOT.FIELD',
            315: 'PIVOT.ITEM',
            316: 'PIVOT.ADD.FIELDS',
            318: 'OPTIONS.CALCULATION',
            319: 'OPTIONS.EDIT',
            320: 'OPTIONS.VIEW',
            321: 'ADDIN.MANAGER',
            322: 'MENU.EDITOR',
            323: 'ATTACH.TOOLBARS',
            324: 'VBAActivate',
            325: 'OPTIONS.CHART',
            328: 'VBA.INSERT.FILE',
            330: 'VBA.PROCEDURE.DEFINITION',
            336: 'ROUTING.SLIP',
            338: 'ROUTE.DOCUMENT',
            339: 'MAIL.LOGON',
            342: 'INSERT.PICTURE',
            343: 'EDIT.TOOL',
            344: 'GALLERY.DOUGHNUT',
            350: 'CHART.TREND',
            352: 'PIVOT.ITEM.PROPERTIES',
            354: 'WORKBOOK.INSERT',
            355: 'OPTIONS.TRANSITION',
            356: 'OPTIONS.GENERAL',
            370: 'FILTER.ADVANCED',
            373: 'MAIL.ADD.MAILER',
            374: 'MAIL.DELETE.MAILER',
            375: 'MAIL.REPLY',
            376: 'MAIL.REPLY.ALL',
            377: 'MAIL.FORWARD',
            378: 'MAIL.NEXT.LETTER',
            379: 'DATA.LABEL',
            380: 'INSERT.TITLE',
            381: 'FONT.PROPERTIES',
            382: 'MACRO.OPTIONS',
            383: 'WORKBOOK.HIDE',
            384: 'WORKBOOK.UNHIDE',
            385: 'WORKBOOK.DELETE',
            386: 'WORKBOOK.NAME',
            388: 'GALLERY.CUSTOM',
            390: 'ADD.CHART.AUTOFORMAT',
            391: 'DELETE.CHART.AUTOFORMAT',
            392: 'CHART.ADD.DATA',
            393: 'AUTO.OUTLINE',
            394: 'TAB.ORDER',
            395: 'SHOW.DIALOG',
            396: 'SELECT.ALL',
            397: 'UNGROUP.SHEETS',
            398: 'SUBTOTAL.CREATE',
            399: 'SUBTOTAL.REMOVE',
            400: 'RENAME.OBJECT',
            412: 'WORKBOOK.SCROLL',
            413: 'WORKBOOK.NEXT',
            414: 'WORKBOOK.PREV',
            415: 'WORKBOOK.TAB.SPLIT',
            416: 'FULL.SCREEN',
            417: 'WORKBOOK.PROTECT',
            420: 'SCROLLBAR.PROPERTIES',
            421: 'PIVOT.SHOW.PAGES',
            422: 'TEXT.TO.COLUMNS',
            423: 'FORMAT.CHARTTYPE',
            424: 'LINK.FORMAT',
            425: 'TRACER.DISPLAY',
            430: 'TRACER.NAVIGATE',
            431: 'TRACER.CLEAR',
            432: 'TRACER.ERROR',
            433: 'PIVOT.FIELD.GROUP',
            434: 'PIVOT.FIELD.UNGROUP',
            435: 'CHECKBOX.PROPERTIES',
            436: 'LABEL.PROPERTIES',
            437: 'LISTBOX.PROPERTIES',
            438: 'EDITBOX.PROPERTIES',
            439: 'PIVOT.REFRESH',
            440: 'LINK.COMBO',
            441: 'OPEN.TEXT',
            442: 'HIDE.DIALOG',
            443: 'SET.DIALOG.FOCUS',
            444: 'ENABLE.OBJECT',
            445: 'PUSHBUTTON.PROPERTIES',
            446: 'SET.DIALOG.DEFAULT',
            447: 'FILTER',
            448: 'FILTER.SHOW.ALL',
            449: 'CLEAR.OUTLINE',
            450: 'FUNCTION.WIZARD',
            451: 'ADD.LIST.ITEM',
            452: 'SET.LIST.ITEM',
            453: 'REMOVE.LIST.ITEM',
            454: 'SELECT.LIST.ITEM',
            455: 'SET.CONTROL.VALUE',
            456: 'SAVE.COPY.AS',
            458: 'OPTIONS.LISTS.ADD',
            459: 'OPTIONS.LISTS.DELETE',
            460: 'SERIES.AXES',
            461: 'SERIES.X',
            462: 'SERIES.Y',
            463: 'ERRORBAR.X',
            464: 'ERRORBAR.Y',
            465: 'FORMAT.CHART',
            466: 'SERIES.ORDER',
            467: 'MAIL.LOGOFF',
            468: 'CLEAR.ROUTING.SLIP',
            469: 'APP.ACTIVATE.MICROSOFT',
            470: 'MAIL.EDIT.MAILER',
            471: 'ON.SHEET',
            472: 'STANDARD.WIDTH',
            473: 'SCENARIO.MERGE',
            474: 'SUMMARY.INFO',
            475: 'FIND.FILE',
            476: 'ACTIVE.CELL.FONT',
            477: 'ENABLE.TIPWIZARD',
            478: 'VBA.MAKE.ADDIN',
            480: 'INSERTDATATABLE',
            481: 'WORKGROUP.OPTIONS',
            482: 'MAIL.SEND.MAILER',
            485: 'AUTOCORRECT',
            489: 'POST.DOCUMENT',
            491: 'PICKLIST',
            493: 'VIEW.SHOW',
            494: 'VIEW.DEFINE',
            495: 'VIEW.DELETE',
            509: 'SHEET.BACKGROUND',
            510: 'INSERT.MAP.OBJECT',
            511: 'OPTIONS.MENONO',
            517: 'MSOCHECKS',
            518: 'NORMAL',
            519: 'LAYOUT',
            520: 'RM.PRINT.AREA',
            521: 'CLEAR.PRINT.AREA',
            522: 'ADD.PRINT.AREA',
            523: 'MOVE.BRK',
            545: 'HIDECURR.NOTE',
            546: 'HIDEALL.NOTES',
            547: 'DELETE.NOTE',
            548: 'TRAVERSE.NOTES',
            549: 'ACTIVATE.NOTES',
            620: 'PROTECT.REVISIONS',
            621: 'UNPROTECT.REVISIONS',
            647: 'OPTIONS.ME',
            653: 'WEB.PUBLISH',
            667: 'NEWWEBQUERY',
            673: 'PIVOT.TABLE.CHART',
            753: 'OPTIONS.SAVE',
            755: 'OPTIONS.SPELL',
            808: 'HIDEALL.INKANNOTS'
        };
    /* 2.5.198.17 */
    var Ftab = {
            0: 'COUNT',
            1: 'IF',
            2: 'ISNA',
            3: 'ISERROR',
            4: 'SUM',
            5: 'AVERAGE',
            6: 'MIN',
            7: 'MAX',
            8: 'ROW',
            9: 'COLUMN',
            10: 'NA',
            11: 'NPV',
            12: 'STDEV',
            13: 'DOLLAR',
            14: 'FIXED',
            15: 'SIN',
            16: 'COS',
            17: 'TAN',
            18: 'ATAN',
            19: 'PI',
            20: 'SQRT',
            21: 'EXP',
            22: 'LN',
            23: 'LOG10',
            24: 'ABS',
            25: 'INT',
            26: 'SIGN',
            27: 'ROUND',
            28: 'LOOKUP',
            29: 'INDEX',
            30: 'REPT',
            31: 'MID',
            32: 'LEN',
            33: 'VALUE',
            34: 'TRUE',
            35: 'FALSE',
            36: 'AND',
            37: 'OR',
            38: 'NOT',
            39: 'MOD',
            40: 'DCOUNT',
            41: 'DSUM',
            42: 'DAVERAGE',
            43: 'DMIN',
            44: 'DMAX',
            45: 'DSTDEV',
            46: 'VAR',
            47: 'DVAR',
            48: 'TEXT',
            49: 'LINEST',
            50: 'TREND',
            51: 'LOGEST',
            52: 'GROWTH',
            53: 'GOTO',
            54: 'HALT',
            55: 'RETURN',
            56: 'PV',
            57: 'FV',
            58: 'NPER',
            59: 'PMT',
            60: 'RATE',
            61: 'MIRR',
            62: 'IRR',
            63: 'RAND',
            64: 'MATCH',
            65: 'DATE',
            66: 'TIME',
            67: 'DAY',
            68: 'MONTH',
            69: 'YEAR',
            70: 'WEEKDAY',
            71: 'HOUR',
            72: 'MINUTE',
            73: 'SECOND',
            74: 'NOW',
            75: 'AREAS',
            76: 'ROWS',
            77: 'COLUMNS',
            78: 'OFFSET',
            79: 'ABSREF',
            80: 'RELREF',
            81: 'ARGUMENT',
            82: 'SEARCH',
            83: 'TRANSPOSE',
            84: 'ERROR',
            85: 'STEP',
            86: 'TYPE',
            87: 'ECHO',
            88: 'SET.NAME',
            89: 'CALLER',
            90: 'DEREF',
            91: 'WINDOWS',
            92: 'SERIES',
            93: 'DOCUMENTS',
            94: 'ACTIVE.CELL',
            95: 'SELECTION',
            96: 'RESULT',
            97: 'ATAN2',
            98: 'ASIN',
            99: 'ACOS',
            100: 'CHOOSE',
            101: 'HLOOKUP',
            102: 'VLOOKUP',
            103: 'LINKS',
            104: 'INPUT',
            105: 'ISREF',
            106: 'GET.FORMULA',
            107: 'GET.NAME',
            108: 'SET.VALUE',
            109: 'LOG',
            110: 'EXEC',
            111: 'CHAR',
            112: 'LOWER',
            113: 'UPPER',
            114: 'PROPER',
            115: 'LEFT',
            116: 'RIGHT',
            117: 'EXACT',
            118: 'TRIM',
            119: 'REPLACE',
            120: 'SUBSTITUTE',
            121: 'CODE',
            122: 'NAMES',
            123: 'DIRECTORY',
            124: 'FIND',
            125: 'CELL',
            126: 'ISERR',
            127: 'ISTEXT',
            128: 'ISNUMBER',
            129: 'ISBLANK',
            130: 'T',
            131: 'N',
            132: 'FOPEN',
            133: 'FCLOSE',
            134: 'FSIZE',
            135: 'FREADLN',
            136: 'FREAD',
            137: 'FWRITELN',
            138: 'FWRITE',
            139: 'FPOS',
            140: 'DATEVALUE',
            141: 'TIMEVALUE',
            142: 'SLN',
            143: 'SYD',
            144: 'DDB',
            145: 'GET.DEF',
            146: 'REFTEXT',
            147: 'TEXTREF',
            148: 'INDIRECT',
            149: 'REGISTER',
            150: 'CALL',
            151: 'ADD.BAR',
            152: 'ADD.MENU',
            153: 'ADD.COMMAND',
            154: 'ENABLE.COMMAND',
            155: 'CHECK.COMMAND',
            156: 'RENAME.COMMAND',
            157: 'SHOW.BAR',
            158: 'DELETE.MENU',
            159: 'DELETE.COMMAND',
            160: 'GET.CHART.ITEM',
            161: 'DIALOG.BOX',
            162: 'CLEAN',
            163: 'MDETERM',
            164: 'MINVERSE',
            165: 'MMULT',
            166: 'FILES',
            167: 'IPMT',
            168: 'PPMT',
            169: 'COUNTA',
            170: 'CANCEL.KEY',
            171: 'FOR',
            172: 'WHILE',
            173: 'BREAK',
            174: 'NEXT',
            175: 'INITIATE',
            176: 'REQUEST',
            177: 'POKE',
            178: 'EXECUTE',
            179: 'TERMINATE',
            180: 'RESTART',
            181: 'HELP',
            182: 'GET.BAR',
            183: 'PRODUCT',
            184: 'FACT',
            185: 'GET.CELL',
            186: 'GET.WORKSPACE',
            187: 'GET.WINDOW',
            188: 'GET.DOCUMENT',
            189: 'DPRODUCT',
            190: 'ISNONTEXT',
            191: 'GET.NOTE',
            192: 'NOTE',
            193: 'STDEVP',
            194: 'VARP',
            195: 'DSTDEVP',
            196: 'DVARP',
            197: 'TRUNC',
            198: 'ISLOGICAL',
            199: 'DCOUNTA',
            200: 'DELETE.BAR',
            201: 'UNREGISTER',
            204: 'USDOLLAR',
            205: 'FINDB',
            206: 'SEARCHB',
            207: 'REPLACEB',
            208: 'LEFTB',
            209: 'RIGHTB',
            210: 'MIDB',
            211: 'LENB',
            212: 'ROUNDUP',
            213: 'ROUNDDOWN',
            214: 'ASC',
            215: 'DBCS',
            216: 'RANK',
            219: 'ADDRESS',
            220: 'DAYS360',
            221: 'TODAY',
            222: 'VDB',
            223: 'ELSE',
            224: 'ELSE.IF',
            225: 'END.IF',
            226: 'FOR.CELL',
            227: 'MEDIAN',
            228: 'SUMPRODUCT',
            229: 'SINH',
            230: 'COSH',
            231: 'TANH',
            232: 'ASINH',
            233: 'ACOSH',
            234: 'ATANH',
            235: 'DGET',
            236: 'CREATE.OBJECT',
            237: 'VOLATILE',
            238: 'LAST.ERROR',
            239: 'CUSTOM.UNDO',
            240: 'CUSTOM.REPEAT',
            241: 'FORMULA.CONVERT',
            242: 'GET.LINK.INFO',
            243: 'TEXT.BOX',
            244: 'INFO',
            245: 'GROUP',
            246: 'GET.OBJECT',
            247: 'DB',
            248: 'PAUSE',
            251: 'RESUME',
            252: 'FREQUENCY',
            253: 'ADD.TOOLBAR',
            254: 'DELETE.TOOLBAR',
            255: 'User',
            256: 'RESET.TOOLBAR',
            257: 'EVALUATE',
            258: 'GET.TOOLBAR',
            259: 'GET.TOOL',
            260: 'SPELLING.CHECK',
            261: 'ERROR.TYPE',
            262: 'APP.TITLE',
            263: 'WINDOW.TITLE',
            264: 'SAVE.TOOLBAR',
            265: 'ENABLE.TOOL',
            266: 'PRESS.TOOL',
            267: 'REGISTER.ID',
            268: 'GET.WORKBOOK',
            269: 'AVEDEV',
            270: 'BETADIST',
            271: 'GAMMALN',
            272: 'BETAINV',
            273: 'BINOMDIST',
            274: 'CHIDIST',
            275: 'CHIINV',
            276: 'COMBIN',
            277: 'CONFIDENCE',
            278: 'CRITBINOM',
            279: 'EVEN',
            280: 'EXPONDIST',
            281: 'FDIST',
            282: 'FINV',
            283: 'FISHER',
            284: 'FISHERINV',
            285: 'FLOOR',
            286: 'GAMMADIST',
            287: 'GAMMAINV',
            288: 'CEILING',
            289: 'HYPGEOMDIST',
            290: 'LOGNORMDIST',
            291: 'LOGINV',
            292: 'NEGBINOMDIST',
            293: 'NORMDIST',
            294: 'NORMSDIST',
            295: 'NORMINV',
            296: 'NORMSINV',
            297: 'STANDARDIZE',
            298: 'ODD',
            299: 'PERMUT',
            300: 'POISSON',
            301: 'TDIST',
            302: 'WEIBULL',
            303: 'SUMXMY2',
            304: 'SUMX2MY2',
            305: 'SUMX2PY2',
            306: 'CHITEST',
            307: 'CORREL',
            308: 'COVAR',
            309: 'FORECAST',
            310: 'FTEST',
            311: 'INTERCEPT',
            312: 'PEARSON',
            313: 'RSQ',
            314: 'STEYX',
            315: 'SLOPE',
            316: 'TTEST',
            317: 'PROB',
            318: 'DEVSQ',
            319: 'GEOMEAN',
            320: 'HARMEAN',
            321: 'SUMSQ',
            322: 'KURT',
            323: 'SKEW',
            324: 'ZTEST',
            325: 'LARGE',
            326: 'SMALL',
            327: 'QUARTILE',
            328: 'PERCENTILE',
            329: 'PERCENTRANK',
            330: 'MODE',
            331: 'TRIMMEAN',
            332: 'TINV',
            334: 'MOVIE.COMMAND',
            335: 'GET.MOVIE',
            336: 'CONCATENATE',
            337: 'POWER',
            338: 'PIVOT.ADD.DATA',
            339: 'GET.PIVOT.TABLE',
            340: 'GET.PIVOT.FIELD',
            341: 'GET.PIVOT.ITEM',
            342: 'RADIANS',
            343: 'DEGREES',
            344: 'SUBTOTAL',
            345: 'SUMIF',
            346: 'COUNTIF',
            347: 'COUNTBLANK',
            348: 'SCENARIO.GET',
            349: 'OPTIONS.LISTS.GET',
            350: 'ISPMT',
            351: 'DATEDIF',
            352: 'DATESTRING',
            353: 'NUMBERSTRING',
            354: 'ROMAN',
            355: 'OPEN.DIALOG',
            356: 'SAVE.DIALOG',
            357: 'VIEW.GET',
            358: 'GETPIVOTDATA',
            359: 'HYPERLINK',
            360: 'PHONETIC',
            361: 'AVERAGEA',
            362: 'MAXA',
            363: 'MINA',
            364: 'STDEVPA',
            365: 'VARPA',
            366: 'STDEVA',
            367: 'VARA',
            368: 'BAHTTEXT',
            369: 'THAIDAYOFWEEK',
            370: 'THAIDIGIT',
            371: 'THAIMONTHOFYEAR',
            372: 'THAINUMSOUND',
            373: 'THAINUMSTRING',
            374: 'THAISTRINGLENGTH',
            375: 'ISTHAIDIGIT',
            376: 'ROUNDBAHTDOWN',
            377: 'ROUNDBAHTUP',
            378: 'THAIYEAR',
            379: 'RTD'
        };
    var FtabArgc = {
            2: 1,
            /* ISNA */
            3: 1,
            /* ISERROR */
            15: 1,
            /* SIN */
            16: 1,
            /* COS */
            17: 1,
            /* TAN */
            18: 1,
            /* ATAN */
            20: 1,
            /* SQRT */
            21: 1,
            /* EXP */
            22: 1,
            /* LN */
            23: 1,
            /* LOG10 */
            24: 1,
            /* ABS */
            25: 1,
            /* INT */
            26: 1,
            /* SIGN */
            27: 2,
            /* ROUND */
            30: 2,
            /* REPT */
            31: 3,
            /* MID */
            32: 1,
            /* LEN */
            33: 1,
            /* VALUE */
            38: 1,
            /* NOT */
            39: 2,
            /* MOD */
            40: 3,
            /* DCOUNT */
            41: 3,
            /* DSUM */
            42: 3,
            /* DAVERAGE */
            43: 3,
            /* DMIN */
            44: 3,
            /* DMAX */
            45: 3,
            /* DSTDEV */
            47: 3,
            /* DVAR */
            48: 2,
            /* TEXT */
            53: 1,
            /* GOTO */
            61: 3,
            /* MIRR */
            65: 3,
            /* DATE */
            66: 3,
            /* TIME */
            67: 1,
            /* DAY */
            68: 1,
            /* MONTH */
            69: 1,
            /* YEAR */
            71: 1,
            /* HOUR */
            72: 1,
            /* MINUTE */
            73: 1,
            /* SECOND */
            75: 1,
            /* AREAS */
            76: 1,
            /* ROWS */
            77: 1,
            /* COLUMNS */
            79: 2,
            /* ABSREF */
            80: 2,
            /* RELREF */
            83: 1,
            /* TRANSPOSE */
            86: 1,
            /* TYPE */
            90: 1,
            /* DEREF */
            97: 2,
            /* ATAN2 */
            98: 1,
            /* ASIN */
            99: 1,
            /* ACOS */
            105: 1,
            /* ISREF */
            111: 1,
            /* CHAR */
            112: 1,
            /* LOWER */
            113: 1,
            /* UPPER */
            114: 1,
            /* PROPER */
            117: 2,
            /* EXACT */
            118: 1,
            /* TRIM */
            119: 4,
            /* REPLACE */
            121: 1,
            /* CODE */
            126: 1,
            /* ISERR */
            127: 1,
            /* ISTEXT */
            128: 1,
            /* ISNUMBER */
            129: 1,
            /* ISBLANK */
            130: 1,
            /* T */
            131: 1,
            /* N */
            133: 1,
            /* FCLOSE */
            134: 1,
            /* FSIZE */
            135: 1,
            /* FREADLN */
            136: 2,
            /* FREAD */
            137: 2,
            /* FWRITELN */
            138: 2,
            /* FWRITE */
            140: 1,
            /* DATEVALUE */
            141: 1,
            /* TIMEVALUE */
            142: 3,
            /* SLN */
            143: 4,
            /* SYD */
            162: 1,
            /* CLEAN */
            163: 1,
            /* MDETERM */
            164: 1,
            /* MINVERSE */
            165: 2,
            /* MMULT */
            172: 1,
            /* WHILE */
            175: 2,
            /* INITIATE */
            176: 2,
            /* REQUEST */
            177: 3,
            /* POKE */
            178: 2,
            /* EXECUTE */
            179: 1,
            /* TERMINATE */
            184: 1,
            /* FACT */
            189: 3,
            /* DPRODUCT */
            190: 1,
            /* ISNONTEXT */
            195: 3,
            /* DSTDEVP */
            196: 3,
            /* DVARP */
            198: 1,
            /* ISLOGICAL */
            199: 3,
            /* DCOUNTA */
            201: 1,
            /* UNREGISTER */
            207: 4,
            /* REPLACEB */
            210: 3,
            /* MIDB */
            211: 1,
            /* LENB */
            212: 2,
            /* ROUNDUP */
            213: 2,
            /* ROUNDDOWN */
            214: 1,
            /* ASC */
            215: 1,
            /* DBCS */
            229: 1,
            /* SINH */
            230: 1,
            /* COSH */
            231: 1,
            /* TANH */
            232: 1,
            /* ASINH */
            233: 1,
            /* ACOSH */
            234: 1,
            /* ATANH */
            235: 3,
            /* DGET */
            244: 1,
            /* INFO */
            252: 2,
            /* FREQUENCY */
            257: 1,
            /* EVALUATE */
            261: 1,
            /* ERROR.TYPE */
            271: 1,
            /* GAMMALN */
            273: 4,
            /* BINOMDIST */
            274: 2,
            /* CHIDIST */
            275: 2,
            /* CHIINV */
            276: 2,
            /* COMBIN */
            277: 3,
            /* CONFIDENCE */
            278: 3,
            /* CRITBINOM */
            279: 1,
            /* EVEN */
            280: 3,
            /* EXPONDIST */
            281: 3,
            /* FDIST */
            282: 3,
            /* FINV */
            283: 1,
            /* FISHER */
            284: 1,
            /* FISHERINV */
            285: 2,
            /* FLOOR */
            286: 4,
            /* GAMMADIST */
            287: 3,
            /* GAMMAINV */
            288: 2,
            /* CEILING */
            289: 4,
            /* HYPGEOMDIST */
            290: 3,
            /* LOGNORMDIST */
            291: 3,
            /* LOGINV */
            292: 3,
            /* NEGBINOMDIST */
            293: 4,
            /* NORMDIST */
            294: 1,
            /* NORMSDIST */
            295: 3,
            /* NORMINV */
            296: 1,
            /* NORMSINV */
            297: 3,
            /* STANDARDIZE */
            298: 1,
            /* ODD */
            299: 2,
            /* PERMUT */
            300: 3,
            /* POISSON */
            301: 3,
            /* TDIST */
            302: 4,
            /* WEIBULL */
            303: 2,
            /* SUMXMY2 */
            304: 2,
            /* SUMX2MY2 */
            305: 2,
            /* SUMX2PY2 */
            306: 2,
            /* CHITEST */
            307: 2,
            /* CORREL */
            308: 2,
            /* COVAR */
            309: 3,
            /* FORECAST */
            310: 2,
            /* FTEST */
            311: 2,
            /* INTERCEPT */
            312: 2,
            /* PEARSON */
            313: 2,
            /* RSQ */
            314: 2,
            /* STEYX */
            315: 2,
            /* SLOPE */
            316: 4,
            /* TTEST */
            325: 2,
            /* LARGE */
            326: 2,
            /* SMALL */
            327: 2,
            /* QUARTILE */
            328: 2,
            /* PERCENTILE */
            331: 2,
            /* TRIMMEAN */
            332: 2,
            /* TINV */
            337: 2,
            /* POWER */
            342: 1,
            /* RADIANS */
            343: 1,
            /* DEGREES */
            346: 2,
            /* COUNTIF */
            347: 1,
            /* COUNTBLANK */
            350: 4,
            /* ISPMT */
            351: 3,
            /* DATEDIF */
            352: 1,
            /* DATESTRING */
            353: 2,
            /* NUMBERSTRING */
            360: 1,
            /* PHONETIC */
            368: 1,
            /* BAHTTEXT */
            369: 1,
            /* THAIDAYOFWEEK */
            370: 1,
            /* THAIDIGIT */
            371: 1,
            /* THAIMONTHOFYEAR */
            372: 1,
            /* THAINUMSOUND */
            373: 1,
            /* THAINUMSTRING */
            374: 1,
            /* THAISTRINGLENGTH */
            375: 1,
            /* ISTHAIDIGIT */
            376: 1,
            /* ROUNDBAHTDOWN */
            377: 1,
            /* ROUNDBAHTUP */
            378: 1,
            /* THAIYEAR */
            65535: 0
        };
    /* [MS-XLSX] 2.2.3 Functions */
    var XLSXFutureFunctions = {
            "_xlfn.ACOT": "ACOT",
            "_xlfn.ACOTH": "ACOTH",
            "_xlfn.AGGREGATE": "AGGREGATE",
            "_xlfn.ARABIC": "ARABIC",
            "_xlfn.AVERAGEIF": "AVERAGEIF",
            "_xlfn.AVERAGEIFS": "AVERAGEIFS",
            "_xlfn.BASE": "BASE",
            "_xlfn.BETA.DIST": "BETA.DIST",
            "_xlfn.BETA.INV": "BETA.INV",
            "_xlfn.BINOM.DIST": "BINOM.DIST",
            "_xlfn.BINOM.DIST.RANGE": "BINOM.DIST.RANGE",
            "_xlfn.BINOM.INV": "BINOM.INV",
            "_xlfn.BITAND": "BITAND",
            "_xlfn.BITLSHIFT": "BITLSHIFT",
            "_xlfn.BITOR": "BITOR",
            "_xlfn.BITRSHIFT": "BITRSHIFT",
            "_xlfn.BITXOR": "BITXOR",
            "_xlfn.CEILING.MATH": "CEILING.MATH",
            "_xlfn.CEILING.PRECISE": "CEILING.PRECISE",
            "_xlfn.CHISQ.DIST": "CHISQ.DIST",
            "_xlfn.CHISQ.DIST.RT": "CHISQ.DIST.RT",
            "_xlfn.CHISQ.INV": "CHISQ.INV",
            "_xlfn.CHISQ.INV.RT": "CHISQ.INV.RT",
            "_xlfn.CHISQ.TEST": "CHISQ.TEST",
            "_xlfn.COMBINA": "COMBINA",
            "_xlfn.CONFIDENCE.NORM": "CONFIDENCE.NORM",
            "_xlfn.CONFIDENCE.T": "CONFIDENCE.T",
            "_xlfn.COT": "COT",
            "_xlfn.COTH": "COTH",
            "_xlfn.COUNTIFS": "COUNTIFS",
            "_xlfn.COVARIANCE.P": "COVARIANCE.P",
            "_xlfn.COVARIANCE.S": "COVARIANCE.S",
            "_xlfn.CSC": "CSC",
            "_xlfn.CSCH": "CSCH",
            "_xlfn.DAYS": "DAYS",
            "_xlfn.DECIMAL": "DECIMAL",
            "_xlfn.ECMA.CEILING": "ECMA.CEILING",
            "_xlfn.ERF.PRECISE": "ERF.PRECISE",
            "_xlfn.ERFC.PRECISE": "ERFC.PRECISE",
            "_xlfn.EXPON.DIST": "EXPON.DIST",
            "_xlfn.F.DIST": "F.DIST",
            "_xlfn.F.DIST.RT": "F.DIST.RT",
            "_xlfn.F.INV": "F.INV",
            "_xlfn.F.INV.RT": "F.INV.RT",
            "_xlfn.F.TEST": "F.TEST",
            "_xlfn.FILTERXML": "FILTERXML",
            "_xlfn.FLOOR.MATH": "FLOOR.MATH",
            "_xlfn.FLOOR.PRECISE": "FLOOR.PRECISE",
            "_xlfn.FORMULATEXT": "FORMULATEXT",
            "_xlfn.GAMMA": "GAMMA",
            "_xlfn.GAMMA.DIST": "GAMMA.DIST",
            "_xlfn.GAMMA.INV": "GAMMA.INV",
            "_xlfn.GAMMALN.PRECISE": "GAMMALN.PRECISE",
            "_xlfn.GAUSS": "GAUSS",
            "_xlfn.HYPGEOM.DIST": "HYPGEOM.DIST",
            "_xlfn.IFNA": "IFNA",
            "_xlfn.IFERROR": "IFERROR",
            "_xlfn.IMCOSH": "IMCOSH",
            "_xlfn.IMCOT": "IMCOT",
            "_xlfn.IMCSC": "IMCSC",
            "_xlfn.IMCSCH": "IMCSCH",
            "_xlfn.IMSEC": "IMSEC",
            "_xlfn.IMSECH": "IMSECH",
            "_xlfn.IMSINH": "IMSINH",
            "_xlfn.IMTAN": "IMTAN",
            "_xlfn.ISFORMULA": "ISFORMULA",
            "_xlfn.ISO.CEILING": "ISO.CEILING",
            "_xlfn.ISOWEEKNUM": "ISOWEEKNUM",
            "_xlfn.LOGNORM.DIST": "LOGNORM.DIST",
            "_xlfn.LOGNORM.INV": "LOGNORM.INV",
            "_xlfn.MODE.MULT": "MODE.MULT",
            "_xlfn.MODE.SNGL": "MODE.SNGL",
            "_xlfn.MUNIT": "MUNIT",
            "_xlfn.NEGBINOM.DIST": "NEGBINOM.DIST",
            "_xlfn.NETWORKDAYS.INTL": "NETWORKDAYS.INTL",
            "_xlfn.NIGBINOM": "NIGBINOM",
            "_xlfn.NORM.DIST": "NORM.DIST",
            "_xlfn.NORM.INV": "NORM.INV",
            "_xlfn.NORM.S.DIST": "NORM.S.DIST",
            "_xlfn.NORM.S.INV": "NORM.S.INV",
            "_xlfn.NUMBERVALUE": "NUMBERVALUE",
            "_xlfn.PDURATION": "PDURATION",
            "_xlfn.PERCENTILE.EXC": "PERCENTILE.EXC",
            "_xlfn.PERCENTILE.INC": "PERCENTILE.INC",
            "_xlfn.PERCENTRANK.EXC": "PERCENTRANK.EXC",
            "_xlfn.PERCENTRANK.INC": "PERCENTRANK.INC",
            "_xlfn.PERMUTATIONA": "PERMUTATIONA",
            "_xlfn.PHI": "PHI",
            "_xlfn.POISSON.DIST": "POISSON.DIST",
            "_xlfn.QUARTILE.EXC": "QUARTILE.EXC",
            "_xlfn.QUARTILE.INC": "QUARTILE.INC",
            "_xlfn.QUERYSTRING": "QUERYSTRING",
            "_xlfn.RANK.AVG": "RANK.AVG",
            "_xlfn.RANK.EQ": "RANK.EQ",
            "_xlfn.RRI": "RRI",
            "_xlfn.SEC": "SEC",
            "_xlfn.SECH": "SECH",
            "_xlfn.SHEET": "SHEET",
            "_xlfn.SHEETS": "SHEETS",
            "_xlfn.SKEW.P": "SKEW.P",
            "_xlfn.STDEV.P": "STDEV.P",
            "_xlfn.STDEV.S": "STDEV.S",
            "_xlfn.SUMIFS": "SUMIFS",
            "_xlfn.T.DIST": "T.DIST",
            "_xlfn.T.DIST.2T": "T.DIST.2T",
            "_xlfn.T.DIST.RT": "T.DIST.RT",
            "_xlfn.T.INV": "T.INV",
            "_xlfn.T.INV.2T": "T.INV.2T",
            "_xlfn.T.TEST": "T.TEST",
            "_xlfn.UNICHAR": "UNICHAR",
            "_xlfn.UNICODE": "UNICODE",
            "_xlfn.VAR.P": "VAR.P",
            "_xlfn.VAR.S": "VAR.S",
            "_xlfn.WEBSERVICE": "WEBSERVICE",
            "_xlfn.WEIBULL.DIST": "WEIBULL.DIST",
            "_xlfn.WORKDAY.INTL": "WORKDAY.INTL",
            "_xlfn.XOR": "XOR",
            "_xlfn.Z.TEST": "Z.TEST"
        };
    /* 2.4.326 TODO: payload is a zip file */
    function parse_Theme(blob, length) {
        var dwThemeVersion = blob.read_shift(4);
        if (dwThemeVersion === 124226)  {
            return;
        }
        
        blob.l += length - 4;
    }
    /* 2.5.49 */
    function parse_ColorTheme(blob, length) {
        return blob.read_shift(4);
    }
    /* 2.5.155 */
    function parse_FullColorExt(blob, length) {
        var o = {};
        o.xclrType = blob.read_shift(2);
        o.nTintShade = blob.read_shift(2);
        switch (o.xclrType) {
            case 0:
                blob.l += 4;
                break;
            case 1:
                o.xclrValue = parse_IcvXF(blob, 4);
                break;
            case 2:
                o.xclrValue = parse_LongRGBA(blob, 4);
                break;
            case 3:
                o.xclrValue = parse_ColorTheme(blob, 4);
                break;
            case 4:
                blob.l += 4;
                break;
        }
        blob.l += 8;
        return o;
    }
    /* 2.5.108 */
    function parse_ExtProp(blob, length) {
        var extType = blob.read_shift(2);
        var cb = blob.read_shift(2);
        var o = [
                extType
            ];
        switch (extType) {
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 13:
                o[1] = parse_FullColorExt(blob, cb);
                break;
            case 6:
                o[1] = parse_XFExtGradient(blob, cb);
                break;
            case 14:
            case 15:
                o[1] = blob.read_shift(cb === 5 ? 1 : 2);
                break;
            default:
                throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
        }
        return o;
    }
    /* 2.4.355 */
    function parse_XFExt(blob, length) {
        var end = blob.l + length;
        blob.l += 2;
        var ixfe = blob.read_shift(2);
        blob.l += 2;
        var cexts = blob.read_shift(2);
        var ext = [];
        while (cexts-- > 0) ext.push(parse_ExtProp(blob, end - blob.l));
        return {
            ixfe: ixfe,
            ext: ext
        };
    }
    /* xf is an XF, see parse_XFExt for xfext */
    function update_xfext(xf, xfext) {
        xfext.forEach(function(xfe) {
            switch (xfe[0]) {
                /* 2.5.108 extPropData */
                case 4:
                    break;
                /* foreground color */
                case 5:
                    break;
                /* background color */
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                case 13:
                    break;
                /* text color */
                case 14:
                    break;
                /* font scheme */
                default:
                    throw "bafuq" + xfe[0].toString(16);
            }
        });
    }
    var RecordEnum = {
            3: {
                n: "BIFF2NUM",
                f: parse_BIFF2NUM
            },
            4: {
                n: "BIFF2STR",
                f: parse_BIFF2STR
            },
            6: {
                n: "Formula",
                f: parse_Formula
            },
            9: {
                n: 'BOF',
                f: parse_BOF
            },
            10: {
                n: 'EOF',
                f: parse_EOF
            },
            12: {
                n: "CalcCount",
                f: parse_CalcCount
            },
            13: {
                n: "CalcMode",
                f: parse_CalcMode
            },
            14: {
                n: "CalcPrecision",
                f: parse_CalcPrecision
            },
            15: {
                n: "CalcRefMode",
                f: parse_CalcRefMode
            },
            16: {
                n: "CalcDelta",
                f: parse_CalcDelta
            },
            17: {
                n: "CalcIter",
                f: parse_CalcIter
            },
            18: {
                n: "Protect",
                f: parse_Protect
            },
            19: {
                n: "Password",
                f: parse_Password
            },
            20: {
                n: "Header",
                f: parse_Header
            },
            21: {
                n: "Footer",
                f: parse_Footer
            },
            23: {
                n: "ExternSheet",
                f: parse_ExternSheet
            },
            24: {
                n: "Lbl",
                f: parse_Lbl
            },
            25: {
                n: "WinProtect",
                f: parse_WinProtect
            },
            26: {
                n: "VerticalPageBreaks",
                f: parse_VerticalPageBreaks
            },
            27: {
                n: "HorizontalPageBreaks",
                f: parse_HorizontalPageBreaks
            },
            28: {
                n: "Note",
                f: parse_Note
            },
            29: {
                n: "Selection",
                f: parse_Selection
            },
            34: {
                n: "Date1904",
                f: parse_Date1904
            },
            35: {
                n: "ExternName",
                f: parse_ExternName
            },
            38: {
                n: "LeftMargin",
                f: parse_LeftMargin
            },
            39: {
                n: "RightMargin",
                f: parse_RightMargin
            },
            40: {
                n: "TopMargin",
                f: parse_TopMargin
            },
            41: {
                n: "BottomMargin",
                f: parse_BottomMargin
            },
            42: {
                n: "PrintRowCol",
                f: parse_PrintRowCol
            },
            43: {
                n: "PrintGrid",
                f: parse_PrintGrid
            },
            47: {
                n: "FilePass",
                f: parse_FilePass
            },
            49: {
                n: "Font",
                f: parse_Font
            },
            51: {
                n: "PrintSize",
                f: parse_PrintSize
            },
            60: {
                n: "Continue",
                f: parse_Continue
            },
            61: {
                n: "Window1",
                f: parse_Window1
            },
            64: {
                n: "Backup",
                f: parse_Backup
            },
            65: {
                n: "Pane",
                f: parse_Pane
            },
            66: {
                n: 'CodePage',
                f: parse_CodePage
            },
            77: {
                n: "Pls",
                f: parse_Pls
            },
            80: {
                n: "DCon",
                f: parse_DCon
            },
            81: {
                n: "DConRef",
                f: parse_DConRef
            },
            82: {
                n: "DConName",
                f: parse_DConName
            },
            85: {
                n: "DefColWidth",
                f: parse_DefColWidth
            },
            89: {
                n: "XCT",
                f: parse_XCT
            },
            90: {
                n: "CRN",
                f: parse_CRN
            },
            91: {
                n: "FileSharing",
                f: parse_FileSharing
            },
            92: {
                n: 'WriteAccess',
                f: parse_WriteAccess
            },
            93: {
                n: "Obj",
                f: parse_Obj
            },
            94: {
                n: "Uncalced",
                f: parse_Uncalced
            },
            95: {
                n: "CalcSaveRecalc",
                f: parse_CalcSaveRecalc
            },
            96: {
                n: "Template",
                f: parse_Template
            },
            97: {
                n: "Intl",
                f: parse_Intl
            },
            99: {
                n: "ObjProtect",
                f: parse_ObjProtect
            },
            125: {
                n: "ColInfo",
                f: parse_ColInfo
            },
            128: {
                n: "Guts",
                f: parse_Guts
            },
            129: {
                n: "WsBool",
                f: parse_WsBool
            },
            130: {
                n: "GridSet",
                f: parse_GridSet
            },
            131: {
                n: "HCenter",
                f: parse_HCenter
            },
            132: {
                n: "VCenter",
                f: parse_VCenter
            },
            133: {
                n: 'BoundSheet8',
                f: parse_BoundSheet8
            },
            134: {
                n: "WriteProtect",
                f: parse_WriteProtect
            },
            140: {
                n: "Country",
                f: parse_Country
            },
            141: {
                n: "HideObj",
                f: parse_HideObj
            },
            144: {
                n: "Sort",
                f: parse_Sort
            },
            146: {
                n: "Palette",
                f: parse_Palette
            },
            151: {
                n: "Sync",
                f: parse_Sync
            },
            152: {
                n: "LPr",
                f: parse_LPr
            },
            153: {
                n: "DxGCol",
                f: parse_DxGCol
            },
            154: {
                n: "FnGroupName",
                f: parse_FnGroupName
            },
            155: {
                n: "FilterMode",
                f: parse_FilterMode
            },
            156: {
                n: "BuiltInFnGroupCount",
                f: parse_BuiltInFnGroupCount
            },
            157: {
                n: "AutoFilterInfo",
                f: parse_AutoFilterInfo
            },
            158: {
                n: "AutoFilter",
                f: parse_AutoFilter
            },
            160: {
                n: "Scl",
                f: parse_Scl
            },
            161: {
                n: "Setup",
                f: parse_Setup
            },
            174: {
                n: "ScenMan",
                f: parse_ScenMan
            },
            175: {
                n: "SCENARIO",
                f: parse_SCENARIO
            },
            176: {
                n: "SxView",
                f: parse_SxView
            },
            177: {
                n: "Sxvd",
                f: parse_Sxvd
            },
            178: {
                n: "SXVI",
                f: parse_SXVI
            },
            180: {
                n: "SxIvd",
                f: parse_SxIvd
            },
            181: {
                n: "SXLI",
                f: parse_SXLI
            },
            182: {
                n: "SXPI",
                f: parse_SXPI
            },
            184: {
                n: "DocRoute",
                f: parse_DocRoute
            },
            185: {
                n: "RecipName",
                f: parse_RecipName
            },
            189: {
                n: "MulRk",
                f: parse_MulRk
            },
            190: {
                n: "MulBlank",
                f: parse_MulBlank
            },
            193: {
                n: 'Mms',
                f: parse_Mms
            },
            197: {
                n: "SXDI",
                f: parse_SXDI
            },
            198: {
                n: "SXDB",
                f: parse_SXDB
            },
            199: {
                n: "SXFDB",
                f: parse_SXFDB
            },
            200: {
                n: "SXDBB",
                f: parse_SXDBB
            },
            201: {
                n: "SXNum",
                f: parse_SXNum
            },
            202: {
                n: "SxBool",
                f: parse_SxBool
            },
            203: {
                n: "SxErr",
                f: parse_SxErr
            },
            204: {
                n: "SXInt",
                f: parse_SXInt
            },
            205: {
                n: "SXString",
                f: parse_SXString
            },
            206: {
                n: "SXDtr",
                f: parse_SXDtr
            },
            207: {
                n: "SxNil",
                f: parse_SxNil
            },
            208: {
                n: "SXTbl",
                f: parse_SXTbl
            },
            209: {
                n: "SXTBRGIITM",
                f: parse_SXTBRGIITM
            },
            210: {
                n: "SxTbpg",
                f: parse_SxTbpg
            },
            211: {
                n: "ObProj",
                f: parse_ObProj
            },
            213: {
                n: "SXStreamID",
                f: parse_SXStreamID
            },
            215: {
                n: "DBCell",
                f: parse_DBCell
            },
            216: {
                n: "SXRng",
                f: parse_SXRng
            },
            217: {
                n: "SxIsxoper",
                f: parse_SxIsxoper
            },
            218: {
                n: "BookBool",
                f: parse_BookBool
            },
            220: {
                n: "DbOrParamQry",
                f: parse_DbOrParamQry
            },
            221: {
                n: "ScenarioProtect",
                f: parse_ScenarioProtect
            },
            222: {
                n: "OleObjectSize",
                f: parse_OleObjectSize
            },
            224: {
                n: "XF",
                f: parse_XF
            },
            225: {
                n: 'InterfaceHdr',
                f: parse_InterfaceHdr
            },
            226: {
                n: 'InterfaceEnd',
                f: parse_InterfaceEnd
            },
            227: {
                n: "SXVS",
                f: parse_SXVS
            },
            229: {
                n: "MergeCells",
                f: parse_MergeCells
            },
            233: {
                n: "BkHim",
                f: parse_BkHim
            },
            235: {
                n: "MsoDrawingGroup",
                f: parse_MsoDrawingGroup
            },
            236: {
                n: "MsoDrawing",
                f: parse_MsoDrawing
            },
            237: {
                n: "MsoDrawingSelection",
                f: parse_MsoDrawingSelection
            },
            239: {
                n: "PhoneticInfo",
                f: parse_PhoneticInfo
            },
            240: {
                n: "SxRule",
                f: parse_SxRule
            },
            241: {
                n: "SXEx",
                f: parse_SXEx
            },
            242: {
                n: "SxFilt",
                f: parse_SxFilt
            },
            244: {
                n: "SxDXF",
                f: parse_SxDXF
            },
            245: {
                n: "SxItm",
                f: parse_SxItm
            },
            246: {
                n: "SxName",
                f: parse_SxName
            },
            247: {
                n: "SxSelect",
                f: parse_SxSelect
            },
            248: {
                n: "SXPair",
                f: parse_SXPair
            },
            249: {
                n: "SxFmla",
                f: parse_SxFmla
            },
            251: {
                n: "SxFormat",
                f: parse_SxFormat
            },
            252: {
                n: "SST",
                f: parse_SST
            },
            253: {
                n: "LabelSst",
                f: parse_LabelSst
            },
            255: {
                n: "ExtSST",
                f: parse_ExtSST
            },
            256: {
                n: "SXVDEx",
                f: parse_SXVDEx
            },
            259: {
                n: "SXFormula",
                f: parse_SXFormula
            },
            290: {
                n: "SXDBEx",
                f: parse_SXDBEx
            },
            311: {
                n: "RRDInsDel",
                f: parse_RRDInsDel
            },
            312: {
                n: "RRDHead",
                f: parse_RRDHead
            },
            315: {
                n: "RRDChgCell",
                f: parse_RRDChgCell
            },
            317: {
                n: "RRTabId",
                f: parse_RRTabId
            },
            318: {
                n: "RRDRenSheet",
                f: parse_RRDRenSheet
            },
            319: {
                n: "RRSort",
                f: parse_RRSort
            },
            320: {
                n: "RRDMove",
                f: parse_RRDMove
            },
            330: {
                n: "RRFormat",
                f: parse_RRFormat
            },
            331: {
                n: "RRAutoFmt",
                f: parse_RRAutoFmt
            },
            333: {
                n: "RRInsertSh",
                f: parse_RRInsertSh
            },
            334: {
                n: "RRDMoveBegin",
                f: parse_RRDMoveBegin
            },
            335: {
                n: "RRDMoveEnd",
                f: parse_RRDMoveEnd
            },
            336: {
                n: "RRDInsDelBegin",
                f: parse_RRDInsDelBegin
            },
            337: {
                n: "RRDInsDelEnd",
                f: parse_RRDInsDelEnd
            },
            338: {
                n: "RRDConflict",
                f: parse_RRDConflict
            },
            339: {
                n: "RRDDefName",
                f: parse_RRDDefName
            },
            340: {
                n: "RRDRstEtxp",
                f: parse_RRDRstEtxp
            },
            351: {
                n: "LRng",
                f: parse_LRng
            },
            352: {
                n: "UsesELFs",
                f: parse_UsesELFs
            },
            353: {
                n: "DSF",
                f: parse_DSF
            },
            401: {
                n: "CUsr",
                f: parse_CUsr
            },
            402: {
                n: "CbUsr",
                f: parse_CbUsr
            },
            403: {
                n: "UsrInfo",
                f: parse_UsrInfo
            },
            404: {
                n: "UsrExcl",
                f: parse_UsrExcl
            },
            405: {
                n: "FileLock",
                f: parse_FileLock
            },
            406: {
                n: "RRDInfo",
                f: parse_RRDInfo
            },
            407: {
                n: "BCUsrs",
                f: parse_BCUsrs
            },
            408: {
                n: "UsrChk",
                f: parse_UsrChk
            },
            425: {
                n: "UserBView",
                f: parse_UserBView
            },
            426: {
                n: "UserSViewBegin",
                f: parse_UserSViewBegin
            },
            427: {
                n: "UserSViewEnd",
                f: parse_UserSViewEnd
            },
            428: {
                n: "RRDUserView",
                f: parse_RRDUserView
            },
            429: {
                n: "Qsi",
                f: parse_Qsi
            },
            430: {
                n: "SupBook",
                f: parse_SupBook
            },
            431: {
                n: "Prot4Rev",
                f: parse_Prot4Rev
            },
            432: {
                n: "CondFmt",
                f: parse_CondFmt
            },
            433: {
                n: "CF",
                f: parse_CF
            },
            434: {
                n: "DVal",
                f: parse_DVal
            },
            437: {
                n: "DConBin",
                f: parse_DConBin
            },
            438: {
                n: "TxO",
                f: parse_TxO
            },
            439: {
                n: "RefreshAll",
                f: parse_RefreshAll
            },
            440: {
                n: "HLink",
                f: parse_HLink
            },
            441: {
                n: "Lel",
                f: parse_Lel
            },
            442: {
                n: "CodeName",
                f: parse_CodeName
            },
            443: {
                n: "SXFDBType",
                f: parse_SXFDBType
            },
            444: {
                n: "Prot4RevPass",
                f: parse_Prot4RevPass
            },
            445: {
                n: "ObNoMacros",
                f: parse_ObNoMacros
            },
            446: {
                n: "Dv",
                f: parse_Dv
            },
            448: {
                n: "Excel9File",
                f: parse_Excel9File
            },
            449: {
                n: "RecalcId",
                f: parse_RecalcId,
                r: 2
            },
            450: {
                n: "EntExU2",
                f: parse_EntExU2
            },
            512: {
                n: "Dimensions",
                f: parse_Dimensions
            },
            513: {
                n: "Blank",
                f: parse_Blank
            },
            515: {
                n: "Number",
                f: parse_Number
            },
            516: {
                n: "Label",
                f: parse_Label
            },
            517: {
                n: "BoolErr",
                f: parse_BoolErr
            },
            519: {
                n: "String",
                f: parse_String
            },
            520: {
                n: 'Row',
                f: parse_Row
            },
            523: {
                n: "Index",
                f: parse_Index
            },
            545: {
                n: "Array",
                f: parse_Array
            },
            549: {
                n: "DefaultRowHeight",
                f: parse_DefaultRowHeight
            },
            566: {
                n: "Table",
                f: parse_Table
            },
            574: {
                n: "Window2",
                f: parse_Window2
            },
            638: {
                n: "RK",
                f: parse_RK
            },
            659: {
                n: "Style",
                f: parse_Style
            },
            1048: {
                n: "BigName",
                f: parse_BigName
            },
            1054: {
                n: "Format",
                f: parse_Format
            },
            1084: {
                n: "ContinueBigName",
                f: parse_ContinueBigName
            },
            1212: {
                n: "ShrFmla",
                f: parse_ShrFmla
            },
            2048: {
                n: "HLinkTooltip",
                f: parse_HLinkTooltip
            },
            2049: {
                n: "WebPub",
                f: parse_WebPub
            },
            2050: {
                n: "QsiSXTag",
                f: parse_QsiSXTag
            },
            2051: {
                n: "DBQueryExt",
                f: parse_DBQueryExt
            },
            2052: {
                n: "ExtString",
                f: parse_ExtString
            },
            2053: {
                n: "TxtQry",
                f: parse_TxtQry
            },
            2054: {
                n: "Qsir",
                f: parse_Qsir
            },
            2055: {
                n: "Qsif",
                f: parse_Qsif
            },
            2056: {
                n: "RRDTQSIF",
                f: parse_RRDTQSIF
            },
            2057: {
                n: 'BOF',
                f: parse_BOF
            },
            2058: {
                n: "OleDbConn",
                f: parse_OleDbConn
            },
            2059: {
                n: "WOpt",
                f: parse_WOpt
            },
            2060: {
                n: "SXViewEx",
                f: parse_SXViewEx
            },
            2061: {
                n: "SXTH",
                f: parse_SXTH
            },
            2062: {
                n: "SXPIEx",
                f: parse_SXPIEx
            },
            2063: {
                n: "SXVDTEx",
                f: parse_SXVDTEx
            },
            2064: {
                n: "SXViewEx9",
                f: parse_SXViewEx9
            },
            2066: {
                n: "ContinueFrt",
                f: parse_ContinueFrt
            },
            2067: {
                n: "RealTimeData",
                f: parse_RealTimeData
            },
            2128: {
                n: "ChartFrtInfo",
                f: parse_ChartFrtInfo
            },
            2129: {
                n: "FrtWrapper",
                f: parse_FrtWrapper
            },
            2130: {
                n: "StartBlock",
                f: parse_StartBlock
            },
            2131: {
                n: "EndBlock",
                f: parse_EndBlock
            },
            2132: {
                n: "StartObject",
                f: parse_StartObject
            },
            2133: {
                n: "EndObject",
                f: parse_EndObject
            },
            2134: {
                n: "CatLab",
                f: parse_CatLab
            },
            2135: {
                n: "YMult",
                f: parse_YMult
            },
            2136: {
                n: "SXViewLink",
                f: parse_SXViewLink
            },
            2137: {
                n: "PivotChartBits",
                f: parse_PivotChartBits
            },
            2138: {
                n: "FrtFontList",
                f: parse_FrtFontList
            },
            2146: {
                n: "SheetExt",
                f: parse_SheetExt
            },
            2147: {
                n: "BookExt",
                f: parse_BookExt,
                r: 12
            },
            2148: {
                n: "SXAddl",
                f: parse_SXAddl
            },
            2149: {
                n: "CrErr",
                f: parse_CrErr
            },
            2150: {
                n: "HFPicture",
                f: parse_HFPicture
            },
            2151: {
                n: 'FeatHdr',
                f: parse_FeatHdr
            },
            2152: {
                n: "Feat",
                f: parse_Feat
            },
            2154: {
                n: "DataLabExt",
                f: parse_DataLabExt
            },
            2155: {
                n: "DataLabExtContents",
                f: parse_DataLabExtContents
            },
            2156: {
                n: "CellWatch",
                f: parse_CellWatch
            },
            2161: {
                n: "FeatHdr11",
                f: parse_FeatHdr11
            },
            2162: {
                n: "Feature11",
                f: parse_Feature11
            },
            2164: {
                n: "DropDownObjIds",
                f: parse_DropDownObjIds
            },
            2165: {
                n: "ContinueFrt11",
                f: parse_ContinueFrt11
            },
            2166: {
                n: "DConn",
                f: parse_DConn
            },
            2167: {
                n: "List12",
                f: parse_List12
            },
            2168: {
                n: "Feature12",
                f: parse_Feature12
            },
            2169: {
                n: "CondFmt12",
                f: parse_CondFmt12
            },
            2170: {
                n: "CF12",
                f: parse_CF12
            },
            2171: {
                n: "CFEx",
                f: parse_CFEx
            },
            2172: {
                n: "XFCRC",
                f: parse_XFCRC,
                r: 12
            },
            2173: {
                n: "XFExt",
                f: parse_XFExt,
                r: 12
            },
            2174: {
                n: "AutoFilter12",
                f: parse_AutoFilter12
            },
            2175: {
                n: "ContinueFrt12",
                f: parse_ContinueFrt12
            },
            2180: {
                n: "MDTInfo",
                f: parse_MDTInfo
            },
            2181: {
                n: "MDXStr",
                f: parse_MDXStr
            },
            2182: {
                n: "MDXTuple",
                f: parse_MDXTuple
            },
            2183: {
                n: "MDXSet",
                f: parse_MDXSet
            },
            2184: {
                n: "MDXProp",
                f: parse_MDXProp
            },
            2185: {
                n: "MDXKPI",
                f: parse_MDXKPI
            },
            2186: {
                n: "MDB",
                f: parse_MDB
            },
            2187: {
                n: "PLV",
                f: parse_PLV
            },
            2188: {
                n: "Compat12",
                f: parse_Compat12,
                r: 12
            },
            2189: {
                n: "DXF",
                f: parse_DXF
            },
            2190: {
                n: "TableStyles",
                f: parse_TableStyles,
                r: 12
            },
            2191: {
                n: "TableStyle",
                f: parse_TableStyle
            },
            2192: {
                n: "TableStyleElement",
                f: parse_TableStyleElement
            },
            2194: {
                n: "StyleExt",
                f: parse_StyleExt
            },
            2195: {
                n: "NamePublish",
                f: parse_NamePublish
            },
            2196: {
                n: "NameCmt",
                f: parse_NameCmt
            },
            2197: {
                n: "SortData",
                f: parse_SortData
            },
            2198: {
                n: "Theme",
                f: parse_Theme,
                r: 12
            },
            2199: {
                n: "GUIDTypeLib",
                f: parse_GUIDTypeLib
            },
            2200: {
                n: "FnGrp12",
                f: parse_FnGrp12
            },
            2201: {
                n: "NameFnGrp12",
                f: parse_NameFnGrp12
            },
            2202: {
                n: "MTRSettings",
                f: parse_MTRSettings,
                r: 12
            },
            2203: {
                n: "CompressPictures",
                f: parse_CompressPictures
            },
            2204: {
                n: "HeaderFooter",
                f: parse_HeaderFooter
            },
            2205: {
                n: "CrtLayout12",
                f: parse_CrtLayout12
            },
            2206: {
                n: "CrtMlFrt",
                f: parse_CrtMlFrt
            },
            2207: {
                n: "CrtMlFrtContinue",
                f: parse_CrtMlFrtContinue
            },
            2211: {
                n: "ForceFullCalculation",
                f: parse_ForceFullCalculation
            },
            2212: {
                n: "ShapePropsStream",
                f: parse_ShapePropsStream
            },
            2213: {
                n: "TextPropsStream",
                f: parse_TextPropsStream
            },
            2214: {
                n: "RichTextStream",
                f: parse_RichTextStream
            },
            2215: {
                n: "CrtLayout12A",
                f: parse_CrtLayout12A
            },
            4097: {
                n: "Units",
                f: parse_Units
            },
            4098: {
                n: "Chart",
                f: parse_Chart
            },
            4099: {
                n: "Series",
                f: parse_Series
            },
            4102: {
                n: "DataFormat",
                f: parse_DataFormat
            },
            4103: {
                n: "LineFormat",
                f: parse_LineFormat
            },
            4105: {
                n: "MarkerFormat",
                f: parse_MarkerFormat
            },
            4106: {
                n: "AreaFormat",
                f: parse_AreaFormat
            },
            4107: {
                n: "PieFormat",
                f: parse_PieFormat
            },
            4108: {
                n: "AttachedLabel",
                f: parse_AttachedLabel
            },
            4109: {
                n: "SeriesText",
                f: parse_SeriesText
            },
            4116: {
                n: "ChartFormat",
                f: parse_ChartFormat
            },
            4117: {
                n: "Legend",
                f: parse_Legend
            },
            4118: {
                n: "SeriesList",
                f: parse_SeriesList
            },
            4119: {
                n: "Bar",
                f: parse_Bar
            },
            4120: {
                n: "Line",
                f: parse_Line
            },
            4121: {
                n: "Pie",
                f: parse_Pie
            },
            4122: {
                n: "Area",
                f: parse_Area
            },
            4123: {
                n: "Scatter",
                f: parse_Scatter
            },
            4124: {
                n: "CrtLine",
                f: parse_CrtLine
            },
            4125: {
                n: "Axis",
                f: parse_Axis
            },
            4126: {
                n: "Tick",
                f: parse_Tick
            },
            4127: {
                n: "ValueRange",
                f: parse_ValueRange
            },
            4128: {
                n: "CatSerRange",
                f: parse_CatSerRange
            },
            4129: {
                n: "AxisLine",
                f: parse_AxisLine
            },
            4130: {
                n: "CrtLink",
                f: parse_CrtLink
            },
            4132: {
                n: "DefaultText",
                f: parse_DefaultText
            },
            4133: {
                n: "Text",
                f: parse_Text
            },
            4134: {
                n: "FontX",
                f: parse_FontX
            },
            4135: {
                n: "ObjectLink",
                f: parse_ObjectLink
            },
            4146: {
                n: "Frame",
                f: parse_Frame
            },
            4147: {
                n: "Begin",
                f: parse_Begin
            },
            4148: {
                n: "End",
                f: parse_End
            },
            4149: {
                n: "PlotArea",
                f: parse_PlotArea
            },
            4154: {
                n: "Chart3d",
                f: parse_Chart3d
            },
            4156: {
                n: "PicF",
                f: parse_PicF
            },
            4157: {
                n: "DropBar",
                f: parse_DropBar
            },
            4158: {
                n: "Radar",
                f: parse_Radar
            },
            4159: {
                n: "Surf",
                f: parse_Surf
            },
            4160: {
                n: "RadarArea",
                f: parse_RadarArea
            },
            4161: {
                n: "AxisParent",
                f: parse_AxisParent
            },
            4163: {
                n: "LegendException",
                f: parse_LegendException
            },
            4164: {
                n: "ShtProps",
                f: parse_ShtProps
            },
            4165: {
                n: "SerToCrt",
                f: parse_SerToCrt
            },
            4166: {
                n: "AxesUsed",
                f: parse_AxesUsed
            },
            4168: {
                n: "SBaseRef",
                f: parse_SBaseRef
            },
            4170: {
                n: "SerParent",
                f: parse_SerParent
            },
            4171: {
                n: "SerAuxTrend",
                f: parse_SerAuxTrend
            },
            4174: {
                n: "IFmtRecord",
                f: parse_IFmtRecord
            },
            4175: {
                n: "Pos",
                f: parse_Pos
            },
            4176: {
                n: "AlRuns",
                f: parse_AlRuns
            },
            4177: {
                n: "BRAI",
                f: parse_BRAI
            },
            4187: {
                n: "SerAuxErrBar",
                f: parse_SerAuxErrBar
            },
            4188: {
                n: "ClrtClient",
                f: parse_ClrtClient
            },
            4189: {
                n: "SerFmt",
                f: parse_SerFmt
            },
            4191: {
                n: "Chart3DBarShape",
                f: parse_Chart3DBarShape
            },
            4192: {
                n: "Fbi",
                f: parse_Fbi
            },
            4193: {
                n: "BopPop",
                f: parse_BopPop
            },
            4194: {
                n: "AxcExt",
                f: parse_AxcExt
            },
            4195: {
                n: "Dat",
                f: parse_Dat
            },
            4196: {
                n: "PlotGrowth",
                f: parse_PlotGrowth
            },
            4197: {
                n: "SIIndex",
                f: parse_SIIndex
            },
            4198: {
                n: "GelFrame",
                f: parse_GelFrame
            },
            4199: {
                n: "BopPopCustom",
                f: parse_BopPopCustom
            },
            4200: {
                n: "Fbi2",
                f: parse_Fbi2
            },
            /* These are specified in an older version of the spec */
            22: {
                n: "ExternCount",
                f: parsenoop
            },
            126: {
                n: "RK",
                f: parsenoop
            },
            /* Not necessarily same as 0x027e */
            127: {
                n: "ImData",
                f: parsenoop
            },
            135: {
                n: "Addin",
                f: parsenoop
            },
            136: {
                n: "Edg",
                f: parsenoop
            },
            137: {
                n: "Pub",
                f: parsenoop
            },
            145: {
                n: "Sub",
                f: parsenoop
            },
            148: {
                n: "LHRecord",
                f: parsenoop
            },
            149: {
                n: "LHNGraph",
                f: parsenoop
            },
            150: {
                n: "Sound",
                f: parsenoop
            },
            169: {
                n: "CoordList",
                f: parsenoop
            },
            171: {
                n: "GCW",
                f: parsenoop
            },
            188: {
                n: "ShrFmla",
                f: parsenoop
            },
            /* Not necessarily same as 0x04bc */
            194: {
                n: "AddMenu",
                f: parsenoop
            },
            195: {
                n: "DelMenu",
                f: parsenoop
            },
            214: {
                n: "RString",
                f: parsenoop
            },
            223: {
                n: "UDDesc",
                f: parsenoop
            },
            234: {
                n: "TabIdConf",
                f: parsenoop
            },
            354: {
                n: "XL5Modify",
                f: parsenoop
            },
            421: {
                n: "FileSharing2",
                f: parsenoop
            },
            536: {
                n: "Name",
                f: parsenoop
            },
            547: {
                n: "ExternName",
                f: parse_ExternName
            },
            561: {
                n: "Font",
                f: parsenoop
            },
            1030: {
                n: "Formula",
                f: parse_Formula
            },
            2157: {
                n: "FeatInfo",
                f: parsenoop
            },
            2163: {
                n: "FeatInfo11",
                f: parsenoop
            },
            2177: {
                n: "SXAddl12",
                f: parsenoop
            },
            2240: {
                n: "AutoWebPub",
                f: parsenoop
            },
            2241: {
                n: "ListObj",
                f: parsenoop
            },
            2242: {
                n: "ListField",
                f: parsenoop
            },
            2243: {
                n: "ListDV",
                f: parsenoop
            },
            2244: {
                n: "ListCondFmt",
                f: parsenoop
            },
            2245: {
                n: "ListCF",
                f: parsenoop
            },
            2246: {
                n: "FMQry",
                f: parsenoop
            },
            2247: {
                n: "FMSQry",
                f: parsenoop
            },
            2248: {
                n: "PLV",
                f: parsenoop
            },
            /* supposedly PLV for Excel 11 */
            2249: {
                n: "LnExt",
                f: parsenoop
            },
            2250: {
                n: "MkrExt",
                f: parsenoop
            },
            2251: {
                n: "CrtCoopt",
                f: parsenoop
            },
            0: {}
        };
    /* 2.4.63 Country/Region codes */
    var CountryEnum = {
            1: "US",
            // United States
            2: "CA",
            // Canada
            3: "",
            // Latin America (except Brazil)
            7: "RU",
            // Russia
            20: "EG",
            // Egypt
            30: "GR",
            // Greece
            31: "NL",
            // Netherlands
            32: "BE",
            // Belgium
            33: "FR",
            // France
            34: "ES",
            // Spain
            36: "HU",
            // Hungary
            39: "IT",
            // Italy
            41: "CH",
            // Switzerland
            43: "AT",
            // Austria
            44: "GB",
            // United Kingdom
            45: "DK",
            // Denmark
            46: "SE",
            // Sweden
            47: "NO",
            // Norway
            48: "PL",
            // Poland
            49: "DE",
            // Germany
            52: "MX",
            // Mexico
            55: "BR",
            // Brazil
            61: "AU",
            // Australia
            64: "NZ",
            // New Zealand
            66: "TH",
            // Thailand
            81: "JP",
            // Japan
            82: "KR",
            // Korea
            84: "VN",
            // Viet Nam
            86: "CN",
            // China
            90: "TR",
            // Turkey
            105: "JS",
            // Ramastan
            213: "DZ",
            // Algeria
            216: "MA",
            // Morocco
            218: "LY",
            // Libya
            351: "PT",
            // Portugal
            354: "IS",
            // Iceland
            358: "FI",
            // Finland
            420: "CZ",
            // Czech Republic
            886: "TW",
            // Taiwan
            961: "LB",
            // Lebanon
            962: "JO",
            // Jordan
            963: "SY",
            // Syria
            964: "IQ",
            // Iraq
            965: "KW",
            // Kuwait
            966: "SA",
            // Saudi Arabia
            971: "AE",
            // United Arab Emirates
            972: "IL",
            // Israel
            974: "QA",
            // Qatar
            981: "IR",
            // Iran
            65535: "US"
        };
    // United States
    function fix_opts_func(defaults) {
        return function fix_opts(opts) {
            for (var i = 0; i != defaults.length; ++i) {
                var d = defaults[i];
                if (opts[d[0]] === undefined)  {
                    opts[d[0]] = d[1];
                }
                
                if (d[2] === 'n')  {
                    opts[d[0]] = Number(opts[d[0]]);
                }
                
            }
        };
    }
    var fix_read_opts = fix_opts_func([
            [
                'cellNF',
                false
            ],
            /* emit cell number format string as .z */
            [
                'cellFormula',
                true
            ],
            /* emit formulae as .f */
            [
                'cellStyles',
                false
            ],
            /* emits style/theme as .s */
            [
                'sheetRows',
                0,
                'n'
            ],
            /* read n rows (0 = read all rows) */
            [
                'bookSheets',
                false
            ],
            /* only try to get sheet names (no Sheets) */
            [
                'bookProps',
                false
            ],
            /* only try to get properties (no Sheets) */
            [
                'bookFiles',
                false
            ],
            /* include raw file structure (cfb) */
            [
                'password',
                ''
            ],
            /* password */
            [
                'WTF',
                false
            ]
        ]);
    /* WTF mode (throws errors) */
    /* [MS-OLEDS] 2.3.8 CompObjStream */
    function parse_compobj(obj) {
        var v = {};
        var o = obj.content;
        /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */
        var l = 28,
            m;
        m = __lpstr(o, l);
        l += 4 + __readUInt32LE(o, l);
        v.UserType = m;
        /* [MS-OLEDS] 2.3.1 ClipboardFormatOrAnsiString */
        m = __readUInt32LE(o, l);
        l += 4;
        switch (m) {
            case 0:
                break;
            case 4.294967295E9:
            case 4.294967294E9:
                l += 4;
                break;
            default:
                if (m > 400)  {
                    throw new Error("Unsupported Clipboard: " + m.toString(16));
                }
                ;
                l += m;
        }
        m = __lpstr(o, l);
        l += m.length === 0 ? 0 : 5 + m.length;
        v.Reserved1 = m;
        if ((m = __readUInt32LE(o, l)) !== 1907550708)  {
            return v;
        }
        
        throw "Unsupported Unicode Extension";
    }
    /* 2.4.58 Continue logic */
    function slurp(R, blob, length, opts) {
        var l = length;
        var bufs = [];
        var d = blob.slice(blob.l, blob.l + l);
        if (opts && opts.enc && opts.enc.insitu_decrypt)  {
            switch (R.n) {
                case 'BOF':
                case 'FilePass':
                case 'FileLock':
                case 'InterfaceHdr':
                case 'RRDInfo':
                case 'RRDHead':
                case 'UsrExcl':
                    break;
                default:
                    if (d.length === 0)  {
                        break;
                    }
                    ;
                    opts.enc.insitu_decrypt(d);
            };
        }
        
        bufs.push(d);
        blob.l += l;
        var next = (RecordEnum[__readUInt16LE(blob, blob.l)]);
        while (next != null && next.n === 'Continue') {
            l = __readUInt16LE(blob, blob.l + 2);
            bufs.push(blob.slice(blob.l + 4, blob.l + 4 + l));
            blob.l += 4 + l;
            next = (RecordEnum[__readUInt16LE(blob, blob.l)]);
        }
        var b = bconcat(bufs);
        prep_blob(b, 0);
        var ll = 0;
        b.lens = [];
        for (var j = 0; j < bufs.length; ++j) {
            b.lens.push(ll);
            ll += bufs[j].length;
        }
        return R.f(b, b.length, opts);
    }
    function safe_format_xf(p, opts) {
        if (!p.XF)  {
            return;
        }
        
        try {
            var fmtid = p.XF.ifmt || 0;
            if (p.t === 'e') {
                p.w = p.w || BErr[p.v];
            } else if (fmtid === 0) {
                if (p.t === 'n') {
                    if ((p.v | 0) === p.v)  {
                        p.w = SSF._general_int(p.v);
                    }
                    else  {
                        p.w = SSF._general_num(p.v);
                    }
                    
                } else  {
                    p.w = SSF._general(p.v);
                }
                
            } else  {
                p.w = SSF.format(fmtid, p.v);
            }
            
            if (opts.cellNF)  {
                p.z = SSF._table[fmtid];
            }
            
        } catch (e) {
            if (opts.WTF)  {
                throw e;
            }
            
        }
    }
    function make_cell(val, ixfe, t) {
        return {
            v: val,
            ixfe: ixfe,
            t: t
        };
    }
    // 2.3.2
    function parse_workbook(blob, options) {
        var wb = {
                opts: {}
            };
        var Sheets = {};
        var out = {};
        var Directory = {};
        var found_sheet = false;
        var range = {};
        var last_formula = null;
        var sst = [];
        var cur_sheet = "";
        var Preamble = {};
        var lastcell, last_cell, cc, cmnt, rng, rngC, rngR;
        var shared_formulae = {};
        var array_formulae = [];
        /* TODO: something more clever */
        var temp_val;
        var country;
        var cell_valid = true;
        var XFs = [];
        /* XF records */
        var palette = [];
        var get_rgb = function getrgb(icv) {
                if (icv < 8)  {
                    return Icv[icv];
                }
                
                if (icv < 64)  {
                    return palette[icv - 8] || Icv[icv];
                }
                
                return Icv[icv];
            };
        var process_cell_style = function pcs(cell, line) {
                var xfd = line.XF.data;
                if (!xfd || !xfd.patternType)  {
                    return;
                }
                
                line.s = {};
                line.s.patternType = xfd.patternType;
                var t;
                if ((t = rgb2Hex(get_rgb(xfd.icvFore)))) {
                    line.s.fgColor = {
                        rgb: t
                    };
                }
                if ((t = rgb2Hex(get_rgb(xfd.icvBack)))) {
                    line.s.bgColor = {
                        rgb: t
                    };
                }
            };
        var addcell = function addcell(cell, line, options) {
                if (!cell_valid)  {
                    return;
                }
                
                if (options.cellStyles && line.XF && line.XF.data)  {
                    process_cell_style(cell, line);
                }
                
                lastcell = cell;
                last_cell = encode_cell(cell);
                if (range.s) {
                    if (cell.r < range.s.r)  {
                        range.s.r = cell.r;
                    }
                    
                    if (cell.c < range.s.c)  {
                        range.s.c = cell.c;
                    }
                    
                }
                if (range.e) {
                    if (cell.r + 1 > range.e.r)  {
                        range.e.r = cell.r + 1;
                    }
                    
                    if (cell.c + 1 > range.e.c)  {
                        range.e.c = cell.c + 1;
                    }
                    
                }
                if (options.sheetRows && lastcell.r >= options.sheetRows)  {
                    cell_valid = false;
                }
                else  {
                    out[last_cell] = line;
                }
                
            };
        var opts = {
                enc: false,
                // encrypted
                sbcch: 0,
                // cch in the preceding SupBook
                snames: [],
                // sheetnames
                sharedf: shared_formulae,
                // shared formulae by address
                arrayf: array_formulae,
                // array formulae array
                rrtabid: [],
                // RRTabId
                lastuser: "",
                // Last User from WriteAccess
                biff: 8,
                // BIFF version
                codepage: 0,
                // CP from CodePage record
                winlocked: 0,
                // fLockWn from WinProtect
                wtf: false
            };
        if (options.password)  {
            opts.password = options.password;
        }
        
        var mergecells = [];
        var objects = [];
        var supbooks = [
                []
            ];
        // 1-indexed, will hold extern names
        var sbc = 0,
            sbci = 0,
            sbcli = 0;
        supbooks.SheetNames = opts.snames;
        supbooks.sharedf = opts.sharedf;
        supbooks.arrayf = opts.arrayf;
        var last_Rn = '';
        var file_depth = 0;
        /* TODO: make a real stack */
        while (blob.l < blob.length - 1) {
            var s = blob.l;
            var RecordType = blob.read_shift(2);
            if (RecordType === 0 && last_Rn === 'EOF')  {
                break;
            }
            
            var length = (blob.l === blob.length ? 0 : blob.read_shift(2)),
                y;
            var R = RecordEnum[RecordType];
            if (R && R.f) {
                if (options.bookSheets) {
                    if (last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8')  {
                        break;
                    }
                    
                }
                last_Rn = R.n;
                if (R.r === 2 || R.r == 12) {
                    var rt = blob.read_shift(2);
                    length -= 2;
                    if (!opts.enc && rt !== RecordType)  {
                        throw "rt mismatch";
                    }
                    
                    if (R.r == 12) {
                        blob.l += 10;
                        length -= 10;
                    }
                }
                // skip FRT
                //console.error(R,blob.l,length,blob.length);
                var val;
                if (R.n === 'EOF')  {
                    val = R.f(blob, length, opts);
                }
                else  {
                    val = slurp(R, blob, length, opts);
                }
                
                var Rn = R.n;
                /* BIFF5 overrides */
                if (opts.biff === 5 || opts.biff === 2)  {
                    switch (Rn) {
                        case 'Lbl':
                            Rn = 'Label';
                            break;
                    };
                }
                
                /* nested switch statements to workaround V8 128 limit */
                switch (Rn) {
                    /* Workbook Options */
                    case 'Date1904':
                        wb.opts.Date1904 = val;
                        break;
                    case 'WriteProtect':
                        wb.opts.WriteProtect = true;
                        break;
                    case 'FilePass':
                        if (!opts.enc)  {
                            blob.l = 0;
                        }
                        ;
                        opts.enc = val;
                        if (opts.WTF)  {
                            console.error(val);
                        }
                        ;
                        if (!options.password)  {
                            throw new Error("File is password-protected");
                        }
                        ;
                        if (val.Type !== 0)  {
                            throw new Error("Encryption scheme unsupported");
                        }
                        ;
                        if (!val.valid)  {
                            throw new Error("Password is incorrect");
                        }
                        ;
                        break;
                    case 'WriteAccess':
                        opts.lastuser = val;
                        break;
                    case 'FileSharing':
                        break;
                    //TODO
                    case 'CodePage':
                        /* overrides based on test cases */
                        if (val === 21010)  {
                            val = 1200;
                        }
                        else if (val === 32769)  {
                            val = 1252;
                        }
                        ;
                        opts.codepage = val;
                        set_cp(val);
                        break;
                    case 'RRTabId':
                        opts.rrtabid = val;
                        break;
                    case 'WinProtect':
                        opts.winlocked = val;
                        break;
                    case 'Template':
                        break;
                    // TODO
                    case 'RefreshAll':
                        wb.opts.RefreshAll = val;
                        break;
                    case 'BookBool':
                        break;
                    // TODO
                    case 'UsesELFs':
                        /* if(val) console.error("Unsupported ELFs"); */
                        break;
                    case 'MTRSettings':
                        {
                            if (val[0] && val[1])  {
                                throw "Unsupported threads: " + val;
                            }
                            
                        };
                        break;
                    // TODO: actually support threads
                    case 'CalcCount':
                        wb.opts.CalcCount = val;
                        break;
                    case 'CalcDelta':
                        wb.opts.CalcDelta = val;
                        break;
                    case 'CalcIter':
                        wb.opts.CalcIter = val;
                        break;
                    case 'CalcMode':
                        wb.opts.CalcMode = val;
                        break;
                    case 'CalcPrecision':
                        wb.opts.CalcPrecision = val;
                        break;
                    case 'CalcSaveRecalc':
                        wb.opts.CalcSaveRecalc = val;
                        break;
                    case 'CalcRefMode':
                        opts.CalcRefMode = val;
                        break;
                    // TODO: implement R1C1
                    case 'Uncalced':
                        break;
                    case 'ForceFullCalculation':
                        wb.opts.FullCalc = val;
                        break;
                    case 'WsBool':
                        break;
                    // TODO
                    case 'XF':
                        XFs.push(val);
                        break;
                    case 'ExtSST':
                        break;
                    // TODO
                    case 'BookExt':
                        break;
                    // TODO
                    case 'RichTextStream':
                        break;
                    case 'BkHim':
                        break;
                    case 'SupBook':
                        supbooks[++sbc] = [
                            val
                        ];
                        sbci = 0;
                        break;
                    case 'ExternName':
                        supbooks[sbc][++sbci] = val;
                        break;
                    case 'Index':
                        break;
                    // TODO
                    case 'Lbl':
                        supbooks[0][++sbcli] = val;
                        break;
                    case 'ExternSheet':
                        supbooks[sbc] = supbooks[sbc].concat(val);
                        sbci += val.length;
                        break;
                    case 'Protect':
                        out["!protect"] = val;
                        break;
                    /* for sheet or book */
                    case 'Password':
                        if (val !== 0 && opts.WTF)  {
                            console.error("Password verifier: " + val);
                        }
                        ;
                        break;
                    case 'Prot4Rev':
                    case 'Prot4RevPass':
                        break;
                    /*TODO: Revision Control*/
                    case 'BoundSheet8':
                        {
                            Directory[val.pos] = val;
                            opts.snames.push(val.name);
                        };
                        break;
                    case 'EOF':
                        {
                            if (--file_depth)  {
                                break;
                            }
                            
                            if (range.e) {
                                out["!range"] = range;
                                if (range.e.r > 0 && range.e.c > 0) {
                                    range.e.r--;
                                    range.e.c--;
                                    out["!ref"] = encode_range(range);
                                    range.e.r++;
                                    range.e.c++;
                                }
                                if (mergecells.length > 0)  {
                                    out["!merges"] = mergecells;
                                }
                                
                                if (objects.length > 0)  {
                                    out["!objects"] = objects;
                                }
                                
                            }
                            if (cur_sheet === "")  {
                                Preamble = out;
                            }
                            else  {
                                Sheets[cur_sheet] = out;
                            }
                            
                            out = {};
                        };
                        break;
                    case 'BOF':
                        {
                            if (opts.biff !== 8)  {
                                ;
                            }
                            else if (val.BIFFVer === 1280)  {
                                opts.biff = 5;
                            }
                            else if (val.BIFFVer === 2)  {
                                opts.biff = 2;
                            }
                            else if (val.BIFFVer === 7)  {
                                opts.biff = 2;
                            }
                            
                            if (file_depth++)  {
                                break;
                            }
                            
                            cell_valid = true;
                            out = {};
                            if (opts.biff === 2) {
                                if (cur_sheet === "")  {
                                    cur_sheet = "Sheet1";
                                }
                                
                                range = {
                                    s: {
                                        r: 0,
                                        c: 0
                                    },
                                    e: {
                                        r: 0,
                                        c: 0
                                    }
                                };
                            } else  {
                                cur_sheet = (Directory[s] || {
                                    name: ""
                                }).name;
                            }
                            
                            mergecells = [];
                            objects = [];
                        };
                        break;
                    case 'Number':
                    case 'BIFF2NUM':
                        {
                            temp_val = {
                                ixfe: val.ixfe,
                                XF: XFs[val.ixfe],
                                v: val.val,
                                t: 'n'
                            };
                            if (temp_val.XF)  {
                                safe_format_xf(temp_val, options);
                            }
                            
                            addcell({
                                c: val.c,
                                r: val.r
                            }, temp_val, options);
                        };
                        break;
                    case 'BoolErr':
                        {
                            temp_val = {
                                ixfe: val.ixfe,
                                XF: XFs[val.ixfe],
                                v: val.val,
                                t: val.t
                            };
                            if (temp_val.XF)  {
                                safe_format_xf(temp_val, options);
                            }
                            
                            addcell({
                                c: val.c,
                                r: val.r
                            }, temp_val, options);
                        };
                        break;
                    case 'RK':
                        {
                            temp_val = {
                                ixfe: val.ixfe,
                                XF: XFs[val.ixfe],
                                v: val.rknum,
                                t: 'n'
                            };
                            if (temp_val.XF)  {
                                safe_format_xf(temp_val, options);
                            }
                            
                            addcell({
                                c: val.c,
                                r: val.r
                            }, temp_val, options);
                        };
                        break;
                    case 'MulRk':
                        {
                            for (var j = val.c; j <= val.C; ++j) {
                                var ixfe = val.rkrec[j - val.c][0];
                                temp_val = {
                                    ixfe: ixfe,
                                    XF: XFs[ixfe],
                                    v: val.rkrec[j - val.c][1],
                                    t: 'n'
                                };
                                if (temp_val.XF)  {
                                    safe_format_xf(temp_val, options);
                                }
                                
                                addcell({
                                    c: j,
                                    r: val.r
                                }, temp_val, options);
                            }
                        };
                        break;
                    case 'Formula':
                        {
                            switch (val.val) {
                                case 'String':
                                    last_formula = val;
                                    break;
                                case 'Array Formula':
                                    throw "Array Formula unsupported";
                                default:
                                    temp_val = {
                                        v: val.val,
                                        ixfe: val.cell.ixfe,
                                        t: val.tt
                                    };
                                    temp_val.XF = XFs[temp_val.ixfe];
                                    if (options.cellFormula)  {
                                        temp_val.f = "=" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                                    }
                                    ;
                                    if (temp_val.XF)  {
                                        safe_format_xf(temp_val, options);
                                    }
                                    ;
                                    addcell(val.cell, temp_val, options);
                                    last_formula = val;
                            }
                        };
                        break;
                    case 'String':
                        {
                            if (last_formula) {
                                last_formula.val = val;
                                temp_val = {
                                    v: last_formula.val,
                                    ixfe: last_formula.cell.ixfe,
                                    t: 's'
                                };
                                temp_val.XF = XFs[temp_val.ixfe];
                                if (options.cellFormula)  {
                                    temp_val.f = "=" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                                }
                                
                                if (temp_val.XF)  {
                                    safe_format_xf(temp_val, options);
                                }
                                
                                addcell(last_formula.cell, temp_val, options);
                                last_formula = null;
                            }
                        };
                        break;
                    case 'Array':
                        {
                            array_formulae.push(val);
                        };
                        break;
                    case 'ShrFmla':
                        {
                            if (!cell_valid)  {
                                break;
                            }
                            
                            //if(options.cellFormula) out[last_cell].f = stringify_formula(val[0], range, lastcell, supbooks, opts);
                            /* TODO: capture range */
                            shared_formulae[encode_cell(last_formula.cell)] = val[0];
                        };
                        break;
                    case 'LabelSst':
                        //temp_val={v:sst[val.isst].t, ixfe:val.ixfe, t:'s'};
                        temp_val = make_cell(sst[val.isst].t, val.ixfe, 's');
                        temp_val.XF = XFs[temp_val.ixfe];
                        if (temp_val.XF)  {
                            safe_format_xf(temp_val, options);
                        }
                        ;
                        addcell({
                            c: val.c,
                            r: val.r
                        }, temp_val, options);
                        break;
                    case 'Label':
                    case 'BIFF2STR':
                        /* Some writers erroneously write Label */
                        temp_val = make_cell(val.val, val.ixfe, 's');
                        temp_val.XF = XFs[temp_val.ixfe];
                        if (temp_val.XF)  {
                            safe_format_xf(temp_val, options);
                        }
                        ;
                        addcell({
                            c: val.c,
                            r: val.r
                        }, temp_val, options);
                        break;
                    case 'Dimensions':
                        {
                            if (file_depth === 1)  {
                                range = val;
                            }
                            
                        };
                        /* TODO: stack */
                        break;
                    case 'SST':
                        {
                            sst = val;
                        };
                        break;
                    case 'Format':
                        {
                            /* val = [id, fmt] */
                            SSF.load(val[1], val[0]);
                        };
                        break;
                    case 'MergeCells':
                        mergecells = mergecells.concat(val);
                        break;
                    case 'Obj':
                        objects[val.cmo[0]] = opts.lastobj = val;
                        break;
                    case 'TxO':
                        opts.lastobj.TxO = val;
                        break;
                    case 'HLink':
                        {
                            for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) if (out[encode_cell({
                                c: rngC,
                                r: rngR
                            })])  {
                                out[encode_cell({
                                    c: rngC,
                                    r: rngR
                                })].l = val[1];
                            }
                            ;
                        };
                        break;
                    case 'HLinkTooltip':
                        {
                            for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) if (out[encode_cell({
                                c: rngC,
                                r: rngR
                            })])  {
                                out[encode_cell({
                                    c: rngC,
                                    r: rngR
                                })].l.tooltip = val[1];
                            }
                            ;
                        };
                        break;
                    /* Comments */
                    case 'Note':
                        {
                            if (opts.biff <= 5 && opts.biff >= 2)  {
                                break;
                            }
                            
                            /* TODO: BIFF5 */
                            cc = out[encode_cell(val[0])];
                            var noteobj = objects[val[2]];
                            if (!cc)  {
                                break;
                            }
                            
                            if (!cc.c)  {
                                cc.c = [];
                            }
                            
                            cmnt = {
                                a: val[1],
                                t: noteobj.TxO.t
                            };
                            cc.c.push(cmnt);
                        };
                        break;
                    default:
                        switch (R.n) {
                            /* nested */
                            case 'ClrtClient':
                                break;
                            case 'XFExt':
                                update_xfext(XFs[val.ixfe], val.ext);
                                break;
                            case 'NameCmt':
                                break;
                            case 'Header':
                                break;
                            // TODO
                            case 'Footer':
                                break;
                            // TODO
                            case 'HCenter':
                                break;
                            // TODO
                            case 'VCenter':
                                break;
                            // TODO
                            case 'Pls':
                                break;
                            // TODO
                            case 'Setup':
                                break;
                            // TODO
                            case 'DefColWidth':
                                break;
                            // TODO
                            case 'GCW':
                                break;
                            case 'LHRecord':
                                break;
                            case 'ColInfo':
                                break;
                            // TODO
                            case 'Row':
                                break;
                            // TODO
                            case 'DBCell':
                                break;
                            // TODO
                            case 'MulBlank':
                                break;
                            // TODO
                            case 'EntExU2':
                                break;
                            // TODO
                            case 'SxView':
                                break;
                            // TODO
                            case 'Sxvd':
                                break;
                            // TODO
                            case 'SXVI':
                                break;
                            // TODO
                            case 'SXVDEx':
                                break;
                            // TODO
                            case 'SxIvd':
                                break;
                            // TODO
                            case 'SXDI':
                                break;
                            // TODO
                            case 'SXLI':
                                break;
                            // TODO
                            case 'SXEx':
                                break;
                            // TODO
                            case 'QsiSXTag':
                                break;
                            // TODO
                            case 'Selection':
                                break;
                            case 'Feat':
                                break;
                            case 'FeatHdr':
                            case 'FeatHdr11':
                                break;
                            case 'Feature11':
                            case 'Feature12':
                            case 'List12':
                                break;
                            case 'Blank':
                                break;
                            case 'Country':
                                country = val;
                                break;
                            case 'RecalcId':
                                break;
                            case 'DefaultRowHeight':
                            case 'DxGCol':
                                break;
                            // TODO: htmlify
                            case 'Fbi':
                            case 'Fbi2':
                            case 'GelFrame':
                                break;
                            case 'Font':
                                break;
                            // TODO
                            case 'XFCRC':
                                break;
                            // TODO
                            case 'Style':
                                break;
                            // TODO
                            case 'StyleExt':
                                break;
                            // TODO
                            case 'Palette':
                                palette = val;
                                break;
                            // TODO
                            case 'Theme':
                                break;
                            // TODO
                            /* Protection */
                            case 'ScenarioProtect':
                                break;
                            case 'ObjProtect':
                                break;
                            /* Conditional Formatting */
                            case 'CondFmt12':
                                break;
                            /* Table */
                            case 'Table':
                                break;
                            // TODO
                            case 'TableStyles':
                                break;
                            // TODO
                            case 'TableStyle':
                                break;
                            // TODO
                            case 'TableStyleElement':
                                break;
                            // TODO
                            /* PivotTable */
                            case 'SXStreamID':
                                break;
                            // TODO
                            case 'SXVS':
                                break;
                            // TODO
                            case 'DConRef':
                                break;
                            // TODO
                            case 'SXAddl':
                                break;
                            // TODO
                            case 'DConBin':
                                break;
                            // TODO
                            case 'DConName':
                                break;
                            // TODO
                            case 'SXPI':
                                break;
                            // TODO
                            case 'SxFormat':
                                break;
                            // TODO
                            case 'SxSelect':
                                break;
                            // TODO
                            case 'SxRule':
                                break;
                            // TODO
                            case 'SxFilt':
                                break;
                            // TODO
                            case 'SxItm':
                                break;
                            // TODO
                            case 'SxDXF':
                                break;
                            // TODO
                            /* Scenario Manager */
                            case 'ScenMan':
                                break;
                            /* Data Consolidation */
                            case 'DCon':
                                break;
                            /* Watched Cell */
                            case 'CellWatch':
                                break;
                            /* Print Settings */
                            case 'PrintRowCol':
                                break;
                            case 'PrintGrid':
                                break;
                            case 'PrintSize':
                                break;
                            case 'XCT':
                                break;
                            case 'CRN':
                                break;
                            case 'Scl':
                                {};
                                //console.log("Zoom Level:", val[0]/val[1],val);
                                break;
                            case 'SheetExt':
                                {};
                                break;
                            case 'SheetExtOptional':
                                {};
                                break;
                            /* VBA */
                            case 'ObNoMacros':
                                {};
                                break;
                            case 'ObProj':
                                {};
                                break;
                            case 'CodeName':
                                {};
                                break;
                            case 'GUIDTypeLib':
                                {};
                                break;
                            case 'WOpt':
                                break;
                            // TODO: WTF?
                            case 'PhoneticInfo':
                                break;
                            case 'OleObjectSize':
                                break;
                            /* Differential Formatting */
                            case 'DXF':
                            case 'DXFN':
                            case 'DXFN12':
                            case 'DXFN12List':
                            case 'DXFN12NoCB':
                                break;
                            /* Data Validation */
                            case 'Dv':
                            case 'DVal':
                                break;
                            /* Data Series */
                            case 'BRAI':
                            case 'Series':
                            case 'SeriesText':
                                break;
                            /* Data Connection */
                            case 'DConn':
                                break;
                            case 'DbOrParamQry':
                                break;
                            case 'DBQueryExt':
                                break;
                            /* Formatting */
                            case 'IFmtRecord':
                                break;
                            case 'CondFmt':
                            case 'CF':
                            case 'CF12':
                            case 'CFEx':
                                break;
                            /* Explicitly Ignored */
                            case 'Excel9File':
                                break;
                            case 'Units':
                                break;
                            case 'InterfaceHdr':
                            case 'Mms':
                            case 'InterfaceEnd':
                            case 'DSF':
                            case 'BuiltInFnGroupCount':
                            /* View Stuff */
                            case 'Window1':
                            case 'Window2':
                            case 'HideObj':
                            case 'GridSet':
                            case 'Guts':
                            case 'UserBView':
                            case 'UserSViewBegin':
                            case 'UserSViewEnd':
                            case 'Pane':
                                break;
                            default:
                                switch (R.n) {
                                    /* nested */
                                    /* Chart */
                                    case 'Dat':
                                    case 'Begin':
                                    case 'End':
                                    case 'StartBlock':
                                    case 'EndBlock':
                                    case 'Frame':
                                    case 'Area':
                                    case 'Axis':
                                    case 'AxisLine':
                                    case 'Tick':
                                        break;
                                    case 'AxesUsed':
                                    case 'CrtLayout12':
                                    case 'CrtLayout12A':
                                    case 'CrtLink':
                                    case 'CrtLine':
                                    case 'CrtMlFrt':
                                    case 'CrtMlFrtContinue':
                                        break;
                                    case 'LineFormat':
                                    case 'AreaFormat':
                                    case 'Chart':
                                    case 'Chart3d':
                                    case 'Chart3DBarShape':
                                    case 'ChartFormat':
                                    case 'ChartFrtInfo':
                                        break;
                                    case 'PlotArea':
                                    case 'PlotGrowth':
                                        break;
                                    case 'SeriesList':
                                    case 'SerParent':
                                    case 'SerAuxTrend':
                                        break;
                                    case 'DataFormat':
                                    case 'SerToCrt':
                                    case 'FontX':
                                        break;
                                    case 'CatSerRange':
                                    case 'AxcExt':
                                    case 'SerFmt':
                                        break;
                                    case 'ShtProps':
                                        break;
                                    case 'DefaultText':
                                    case 'Text':
                                    case 'CatLab':
                                        break;
                                    case 'DataLabExtContents':
                                        break;
                                    case 'Legend':
                                    case 'LegendException':
                                        break;
                                    case 'Pie':
                                    case 'Scatter':
                                        break;
                                    case 'PieFormat':
                                    case 'MarkerFormat':
                                        break;
                                    case 'StartObject':
                                    case 'EndObject':
                                        break;
                                    case 'AlRuns':
                                    case 'ObjectLink':
                                        break;
                                    case 'SIIndex':
                                        break;
                                    case 'AttachedLabel':
                                    case 'YMult':
                                        break;
                                    /* Chart Group */
                                    case 'Line':
                                    case 'Bar':
                                        break;
                                    case 'Surf':
                                        break;
                                    /* Axis Group */
                                    case 'AxisParent':
                                        break;
                                    case 'Pos':
                                        break;
                                    case 'ValueRange':
                                        break;
                                    /* Pivot Chart */
                                    case 'SXViewEx9':
                                        break;
                                    // TODO
                                    case 'SXViewLink':
                                        break;
                                    case 'PivotChartBits':
                                        break;
                                    case 'SBaseRef':
                                        break;
                                    case 'TextPropsStream':
                                        break;
                                    /* Chart Misc */
                                    case 'LnExt':
                                        break;
                                    case 'MkrExt':
                                        break;
                                    case 'CrtCoopt':
                                        break;
                                    /* Query Table */
                                    case 'Qsi':
                                    case 'Qsif':
                                    case 'Qsir':
                                    case 'QsiSXTag':
                                        break;
                                    case 'TxtQry':
                                        break;
                                    /* Filter */
                                    case 'FilterMode':
                                        break;
                                    case 'AutoFilter':
                                    case 'AutoFilterInfo':
                                        break;
                                    case 'AutoFilter12':
                                        break;
                                    case 'DropDownObjIds':
                                        break;
                                    case 'Sort':
                                        break;
                                    case 'SortData':
                                        break;
                                    /* Drawing */
                                    case 'ShapePropsStream':
                                        break;
                                    case 'MsoDrawing':
                                    case 'MsoDrawingGroup':
                                    case 'MsoDrawingSelection':
                                        break;
                                    case 'ImData':
                                        break;
                                    /* Pub Stuff */
                                    case 'WebPub':
                                    case 'AutoWebPub':
                                    /* Print Stuff */
                                    case 'RightMargin':
                                    case 'LeftMargin':
                                    case 'TopMargin':
                                    case 'BottomMargin':
                                    case 'HeaderFooter':
                                    case 'HFPicture':
                                    case 'PLV':
                                    case 'HorizontalPageBreaks':
                                    case 'VerticalPageBreaks':
                                    /* Behavioral */
                                    case 'Backup':
                                    case 'CompressPictures':
                                    case 'Compat12':
                                        break;
                                    /* Should not Happen */
                                    case 'Continue':
                                    case 'ContinueFrt12':
                                        break;
                                    /* Future Records */
                                    case 'FrtFontList':
                                    case 'FrtWrapper':
                                        break;
                                    /* BIFF5 records */
                                    case 'ExternCount':
                                        break;
                                    case 'RString':
                                        break;
                                    case 'TabIdConf':
                                    case 'Radar':
                                    case 'RadarArea':
                                    case 'DropBar':
                                    case 'Intl':
                                    case 'CoordList':
                                    case 'SerAuxErrBar':
                                        break;
                                    default:
                                        switch (R.n) {
                                            /* nested */
                                            /* Miscellaneous */
                                            case 'SCENARIO':
                                            case 'DConBin':
                                            case 'PicF':
                                            case 'DataLabExt':
                                            case 'Lel':
                                            case 'BopPop':
                                            case 'BopPopCustom':
                                            case 'RealTimeData':
                                            case 'Name':
                                                break;
                                            default:
                                                if (options.WTF)  {
                                                    throw 'Unrecognized Record ' + R.n;
                                                }
                                                ;
                                        };
                                };
                        };
                }
            } else  {
                blob.l += length;
            }
            
        }
        var sheetnamesraw = opts.biff === 2 ? [
                'Sheet1'
            ] : Object.keys(Directory).sort(function(a, b) {
                return Number(a) - Number(b);
            }).map(function(x) {
                return Directory[x].name;
            });
        var sheetnames = sheetnamesraw.slice();
        wb.Directory = sheetnamesraw;
        wb.SheetNames = sheetnamesraw;
        if (!options.bookSheets)  {
            wb.Sheets = Sheets;
        }
        
        wb.Preamble = Preamble;
        wb.Strings = sst;
        wb.SSF = SSF.get_table();
        if (opts.enc)  {
            wb.Encryption = opts.enc;
        }
        
        wb.Metadata = {};
        if (country !== undefined)  {
            wb.Metadata.Country = country;
        }
        
        return wb;
    }
    function parse_xlscfb(cfb, options) {
        if (!options)  {
            options = {};
        }
        
        fix_read_opts(options);
        reset_cp();
        var CompObj, Summary, Workbook;
        if (cfb.find) {
            CompObj = cfb.find('!CompObj');
            Summary = cfb.find('!SummaryInformation');
            Workbook = cfb.find('/Workbook');
        } else {
            prep_blob(cfb, 0);
            Workbook = {
                content: cfb
            };
        }
        if (!Workbook)  {
            Workbook = cfb.find('/Book');
        }
        
        var CompObjP, SummaryP, WorkbookP;
        if (CompObj)  {
            CompObjP = parse_compobj(CompObj);
        }
        
        if (options.bookProps && !options.bookSheets)  {
            WorkbookP = {};
        }
        else {
            if (Workbook)  {
                WorkbookP = parse_workbook(Workbook.content, options, !!Workbook.find);
            }
            else  {
                throw new Error("Cannot find Workbook stream");
            }
            
        }
        if (cfb.find)  {
            parse_props(cfb);
        }
        
        var props = {};
        for (var y in cfb.Summary) props[y] = cfb.Summary[y];
        for (y in cfb.DocSummary) props[y] = cfb.DocSummary[y];
        WorkbookP.Props = WorkbookP.Custprops = props;
        /* TODO: split up properties */
        if (options.bookFiles)  {
            WorkbookP.cfb = cfb;
        }
        
        WorkbookP.CompObjP = CompObjP;
        return WorkbookP;
    }
    /* TODO: WTF */
    function parse_props(cfb) {
        /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
        var DSI = cfb.find('!DocumentSummaryInformation');
        if (DSI)  {
            try {
                cfb.DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI);
            } catch (e) {};
        }
        
        /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/
        var SI = cfb.find('!SummaryInformation');
        if (SI)  {
            try {
                cfb.Summary = parse_PropertySetStream(SI, SummaryPIDSI);
            } catch (e) {};
        }
        
    }
    // TODO: CP remap (need to read file version to determine OS)
    var encregex = /&[a-z]*;/g,
        coderegex = /_x([0-9a-fA-F]+)_/g;
    function coderepl(m, c) {
        return _chr(parseInt(c, 16));
    }
    function encrepl($$) {
        return encodings[$$];
    }
    function unescapexml(s) {
        if (s.indexOf("&") > -1)  {
            s = s.replace(encregex, encrepl);
        }
        
        return s.indexOf("_") === -1 ? s : s.replace(coderegex, coderepl);
    }
    function parsexmlbool(value, tag) {
        switch (value) {
            case '1':
            case 'true':
            case 'TRUE':
                return true;
            /* case '0': case 'false': case 'FALSE':*/
            default:
                return false;
        }
    }
    // matches <foo>...</foo> extracts content
    function matchtag(f, g) {
        return new RegExp('<' + f + '(?: xml:space="preserve")?>([^‚òÉ]*)</' + f + '>', (g || "") + "m");
    }
    /* TODO: handle codepages */
    var entregex = /&#(\d+);/g;
    function entrepl($$, $1) {
        return String.fromCharCode(parseInt($1, 10));
    }
    function fixstr(str) {
        return str.replace(entregex, entrepl);
    }
    /* map from xlml named formats to SSF */
    var magic_formats = {
            "General Number": "General",
            "General Date": SSF._table[22],
            "Long Date": "dddd, mmmm dd, yyyy",
            "Medium Date": SSF._table[15],
            "Short Date": SSF._table[14],
            "Long Time": SSF._table[19],
            "Medium Time": SSF._table[18],
            "Short Time": SSF._table[20],
            "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
            "Fixed": SSF._table[2],
            "Standard": SSF._table[4],
            "Percent": SSF._table[10],
            "Scientific": SSF._table[11],
            "Yes/No": '"Yes";"Yes";"No";@',
            "True/False": '"True";"True";"False";@',
            "On/Off": '"Yes";"Yes";"No";@'
        };
    /* [MS-EXSPXML3] 2.4.54 ST_enmPattern */
    var PatternTypeMap = {
            "None": "none",
            "Solid": "solid",
            "Gray50": "mediumGray",
            "Gray75": "darkGray",
            "Gray25": "lightGray",
            "HorzStripe": "darkHorizontal",
            "VertStripe": "darkVertical",
            "ReverseDiagStripe": "darkDown",
            "DiagStripe": "darkUp",
            "DiagCross": "darkGrid",
            "ThickDiagCross": "darkTrellis",
            "ThinHorzStripe": "lightHorizontal",
            "ThinVertStripe": "lightVertical",
            "ThinReverseDiagStripe": "lightDown",
            "ThinHorzCross": "lightGrid"
        };
    /* TODO: Normalize the properties */
    function xlml_set_prop(Props, tag, val) {
        switch (tag) {
            case 'Description':
                tag = 'Comments';
                break;
        }
        Props[tag] = val;
    }
    function xlml_format(format, value) {
        var fmt = magic_formats[format] || unescapexml(format);
        if (fmt === "General")  {
            return SSF._general(value);
        }
        
        return SSF.format(fmt, value);
    }
    function xlml_set_custprop(Custprops, Rn, cp, val) {
        switch ((cp[0].match(/dt:dt="([\w.]+)"/) || [
            "",
            ""
        ])[1]) {
            case "boolean":
                val = parsexmlbool(val);
                break;
            case "i2":
            case "int":
                val = parseInt(val, 10);
                break;
            case "r4":
            case "float":
                val = parseFloat(val);
                break;
            case "date":
            case "dateTime.tz":
                val = new Date(val);
                break;
            case "i8":
            case "string":
            case "fixed":
            case "uuid":
            case "bin.base64":
                break;
            default:
                throw "bad custprop:" + cp[0];
        }
        Custprops[unescapexml(Rn[3])] = val;
    }
    function safe_format_xlml(cell, nf, o) {
        try {
            if (cell.t === 'e') {
                cell.w = cell.w || BErr[cell.v];
            } else if (nf === "General") {
                if (cell.t === 'n') {
                    if ((cell.v | 0) === cell.v)  {
                        cell.w = SSF._general_int(cell.v);
                    }
                    else  {
                        cell.w = SSF._general_num(cell.v);
                    }
                    
                } else  {
                    cell.w = SSF._general(cell.v);
                }
                
            } else  {
                cell.w = xlml_format(nf || "General", cell.v);
            }
            
            if (o.cellNF)  {
                cell.z = magic_formats[nf] || nf || "General";
            }
            
        } catch (e) {
            if (o.WTF)  {
                throw e;
            }
            
        }
    }
    function process_style_xlml(styles, stag, opts) {
        if (opts.cellStyles) {
            if (stag.Interior) {
                var I = stag.Interior;
                if (I.Pattern)  {
                    I.patternType = PatternTypeMap[I.Pattern] || I.Pattern;
                }
                
            }
        }
        styles[stag.ID] = stag;
    }
    /* TODO: there must exist some form of OSP-blessed spec */
    function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, o) {
        var nf = "General",
            sid = cell.StyleID,
            S = {};
        o = o || {};
        var interiors = [];
        if (sid === undefined && row)  {
            sid = row.StyleID;
        }
        
        if (sid === undefined && csty)  {
            sid = csty.StyleID;
        }
        
        while (styles[sid] !== undefined) {
            if (styles[sid].nf)  {
                nf = styles[sid].nf;
            }
            
            if (styles[sid].Interior)  {
                interiors.push(styles[sid].Interior);
            }
            
            if (!styles[sid].Parent)  {
                break;
            }
            
            sid = styles[sid].Parent;
        }
        switch (data.Type) {
            case 'Boolean':
                cell.t = 'b';
                cell.v = parsexmlbool(xml);
                break;
            case 'String':
                cell.t = 's';
                cell.r = fixstr(unescapexml(xml));
                cell.v = xml.indexOf("<") > -1 ? ss : cell.r;
                break;
            case 'DateTime':
                cell.v = (Date.parse(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                if (cell.v !== cell.v)  {
                    cell.v = unescapexml(xml);
                }
                else if (cell.v >= 1 && cell.v < 60)  {
                    cell.v = cell.v - 1;
                }
                ;
                if (!nf || nf == "General")  {
                    nf = "yyyy-mm-dd";
                }
                ;
            /* falls through */
            case 'Number':
                if (cell.v === undefined)  {
                    cell.v = +xml;
                }
                ;
                if (!cell.t)  {
                    cell.t = 'n';
                }
                ;
                break;
            case 'Error':
                cell.t = 'e';
                cell.v = RBErr[xml];
                cell.w = xml;
                break;
            default:
                cell.t = 's';
                cell.v = fixstr(ss);
                break;
        }
        safe_format_xlml(cell, nf, o);
        if (o.cellFormula != null && cell.Formula) {
            cell.f = rc_to_a1(unescapexml(cell.Formula), base);
            cell.Formula = undefined;
        }
        if (o.cellStyles) {
            interiors.forEach(function(x) {
                if (!S.patternType && x.patternType)  {
                    S.patternType = x.patternType;
                }
                
            });
            cell.s = S;
        }
        cell.ixfe = cell.StyleID !== undefined ? cell.StyleID : 'Default';
    }
    function xlml_clean_comment(comment) {
        comment.t = comment.v;
        comment.v = comment.w = comment.ixfe = undefined;
    }
    function xlml_normalize(d) {
        if (has_buf && Buffer.isBuffer(d))  {
            return d.toString('utf8');
        }
        
        if (typeof d === 'string')  {
            return d;
        }
        
        throw "badf";
    }
    /* TODO: Everything */
    var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;
    function parse_xlml_xml(d, opts) {
        var str = xlml_normalize(d);
        var Rn;
        var state = [],
            tmp;
        var sheets = {},
            sheetnames = [],
            cursheet = {},
            sheetname = "";
        var table = {},
            cell = {},
            row = {},
            dtag, didx;
        var c = 0,
            r = 0;
        var refguess = {
                s: {
                    r: 1000000,
                    c: 1000000
                },
                e: {
                    r: 0,
                    c: 0
                }
            };
        var styles = {},
            stag = {};
        var ss = "",
            fidx = 0;
        var mergecells = [];
        var Props = {},
            Custprops = {},
            pidx = 0,
            cp = {};
        var comments = [],
            comment = {};
        var cstys = [],
            csty;
        while ((Rn = xlmlregex.exec(str))) switch (Rn[3]) {
            case 'Data':
                if (state[state.length - 1][1])  {
                    break;
                }
                ;
                if (Rn[1] === '/')  {
                    parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == "Comment" ? comment : cell, {
                        c: c,
                        r: r
                    }, styles, cstys[c], row, opts);
                }
                else {
                    ss = "";
                    dtag = parsexmltag(Rn[0]);
                    didx = Rn.index + Rn[0].length;
                };
                break;
            case 'Cell':
                if (Rn[1] === '/') {
                    if (comments.length > 0)  {
                        cell.c = comments;
                    }
                    
                    if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined)  {
                        cursheet[encode_col(c) + encode_row(r)] = cell;
                    }
                    
                    if (cell.HRef) {
                        cell.l = {
                            Target: cell.HRef,
                            tooltip: cell.HRefScreenTip
                        };
                        cell.HRef = cell.HRefScreenTip = undefined;
                    }
                    if (cell.MergeAcross || cell.MergeDown) {
                        var cc = c + (parseInt(cell.MergeAcross, 10) | 0);
                        var rr = r + (parseInt(cell.MergeDown, 10) | 0);
                        mergecells.push({
                            s: {
                                c: c,
                                r: r
                            },
                            e: {
                                c: cc,
                                r: rr
                            }
                        });
                    }
                    ++c;
                    if (cell.MergeAcross)  {
                        c += +cell.MergeAcross;
                    }
                    
                } else {
                    cell = parsexmltagobj(Rn[0]);
                    if (cell.Index)  {
                        c = +cell.Index - 1;
                    }
                    
                    if (c < refguess.s.c)  {
                        refguess.s.c = c;
                    }
                    
                    if (c > refguess.e.c)  {
                        refguess.e.c = c;
                    }
                    
                    if (Rn[0].substr(-2) === "/>")  {
                        ++c;
                    }
                    
                    comments = [];
                };
                break;
            case 'Row':
                if (Rn[1] === '/' || Rn[0].substr(-2) === "/>") {
                    if (r < refguess.s.r)  {
                        refguess.s.r = r;
                    }
                    
                    if (r > refguess.e.r)  {
                        refguess.e.r = r;
                    }
                    
                    if (Rn[0].substr(-2) === "/>") {
                        row = parsexmltag(Rn[0]);
                        if (row.Index)  {
                            r = +row.Index - 1;
                        }
                        
                    }
                    c = 0;
                    ++r;
                } else {
                    row = parsexmltag(Rn[0]);
                    if (row.Index)  {
                        r = +row.Index - 1;
                    }
                    
                };
                break;
            case 'Worksheet':
                /* TODO: read range from FullRows/FullColumns */
                if (Rn[1] === '/') {
                    if ((tmp = state.pop())[0] !== Rn[3])  {
                        throw "Bad state: " + tmp;
                    }
                    
                    sheetnames.push(sheetname);
                    if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c)  {
                        cursheet["!ref"] = encode_range(refguess);
                    }
                    
                    if (mergecells.length)  {
                        cursheet["!merges"] = mergecells;
                    }
                    
                    sheets[sheetname] = cursheet;
                } else {
                    refguess = {
                        s: {
                            r: 1000000,
                            c: 1000000
                        },
                        e: {
                            r: 0,
                            c: 0
                        }
                    };
                    r = c = 0;
                    state.push([
                        Rn[3],
                        false
                    ]);
                    tmp = parsexmltag(Rn[0]);
                    sheetname = tmp.Name;
                    cursheet = {};
                    mergecells = [];
                };
                break;
            case 'Table':
                if (Rn[1] === '/') {
                    if ((tmp = state.pop())[0] !== Rn[3])  {
                        throw "Bad state: " + tmp;
                    }
                    
                } else if (Rn[0].slice(-2) == "/>")  {
                    break;
                }
                else {
                    table = parsexmltag(Rn[0]);
                    state.push([
                        Rn[3],
                        false
                    ]);
                    cstys = [];
                };
                break;
            case 'Style':
                if (Rn[1] === '/')  {
                    process_style_xlml(styles, stag, opts);
                }
                else  {
                    stag = parsexmltag(Rn[0]);
                }
                ;
                break;
            case 'NumberFormat':
                stag.nf = parsexmltag(Rn[0]).Format || "General";
                break;
            case 'Column':
                if (state[state.length - 1][0] !== 'Table')  {
                    break;
                }
                ;
                csty = parsexmltag(Rn[0]);
                cstys[(csty.Index - 1 || cstys.length)] = csty;
                for (var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = csty;
                break;
            case 'NamedRange':
                break;
            case 'NamedCell':
                break;
            case 'B':
                break;
            case 'I':
                break;
            case 'U':
                break;
            case 'S':
                break;
            case 'Sub':
                break;
            case 'Sup':
                break;
            case 'Span':
                break;
            case 'Border':
                break;
            case 'Alignment':
                break;
            case 'Borders':
                break;
            case 'Font':
                if (Rn[0].substr(-2) === "/>")  {
                    break;
                }
                else if (Rn[1] === "/")  {
                    ss += str.slice(fidx, Rn.index);
                }
                else  {
                    fidx = Rn.index + Rn[0].length;
                }
                ;
                break;
            case 'Interior':
                if (!opts.cellStyles)  {
                    break;
                }
                ;
                stag.Interior = parsexmltag(Rn[0]);
                break;
            case 'Protection':
                break;
            case 'Author':
            case 'Title':
            case 'Description':
            case 'Created':
            case 'Keywords':
            case 'Subject':
            case 'Category':
            case 'Company':
            case 'LastAuthor':
            case 'LastSaved':
            case 'LastPrinted':
            case 'Version':
            case 'Revision':
            case 'TotalTime':
            case 'HyperlinkBase':
            case 'Manager':
                if (Rn[0].substr(-2) === "/>")  {
                    break;
                }
                else if (Rn[1] === "/")  {
                    xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index));
                }
                else  {
                    pidx = Rn.index + Rn[0].length;
                }
                ;
                break;
            case 'Paragraphs':
                break;
            case 'Styles':
            case 'Workbook':
                if (Rn[1] === '/') {
                    if ((tmp = state.pop())[0] !== Rn[3])  {
                        throw "Bad state: " + tmp;
                    }
                    
                } else  {
                    state.push([
                        Rn[3],
                        false
                    ]);
                }
                ;
                break;
            case 'Comment':
                if (Rn[1] === '/') {
                    if ((tmp = state.pop())[0] !== Rn[3])  {
                        throw "Bad state: " + tmp;
                    }
                    
                    xlml_clean_comment(comment);
                    comments.push(comment);
                } else {
                    state.push([
                        Rn[3],
                        false
                    ]);
                    tmp = parsexmltag(Rn[0]);
                    comment = {
                        a: tmp.Author
                    };
                };
                break;
            case 'Name':
                break;
            case 'ComponentOptions':
            case 'DocumentProperties':
            case 'CustomDocumentProperties':
            case 'OfficeDocumentSettings':
            case 'PivotTable':
            case 'PivotCache':
            case 'Names':
            case 'MapInfo':
            case 'PageBreaks':
            case 'QueryTable':
            case 'DataValidation':
            case 'AutoFilter':
            case 'Sorting':
            case 'Schema':
            case 'data':
            case 'ConditionalFormatting':
            case 'SmartTagType':
            case 'SmartTags':
            case 'ExcelWorkbook':
            case 'WorkbookOptions':
            case 'WorksheetOptions':
                if (Rn[1] === '/') {
                    if ((tmp = state.pop())[0] !== Rn[3])  {
                        throw "Bad state: " + tmp;
                    }
                    
                } else if (Rn[0].charAt(Rn[0].length - 2) !== '/')  {
                    state.push([
                        Rn[3],
                        true
                    ]);
                }
                ;
                break;
            default:
                var seen = true;
                switch (state[state.length - 1][0]) {
                    /* OfficeDocumentSettings */
                    case 'OfficeDocumentSettings':
                        switch (Rn[3]) {
                            case 'AllowPNG':
                                break;
                            case 'RemovePersonalInformation':
                                break;
                            case 'DownloadComponents':
                                break;
                            case 'LocationOfComponents':
                                break;
                            case 'Colors':
                                break;
                            case 'Color':
                                break;
                            case 'Index':
                                break;
                            case 'RGB':
                                break;
                            case 'PixelsPerInch':
                                break;
                            case 'TargetScreenSize':
                                break;
                            case 'ReadOnlyRecommended':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* ComponentOptions */
                    case 'ComponentOptions':
                        switch (Rn[3]) {
                            case 'Toolbar':
                                break;
                            case 'HideOfficeLogo':
                                break;
                            case 'SpreadsheetAutoFit':
                                break;
                            case 'Label':
                                break;
                            case 'Caption':
                                break;
                            case 'MaxHeight':
                                break;
                            case 'MaxWidth':
                                break;
                            case 'NextSheetNumber':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* ExcelWorkbook */
                    case 'ExcelWorkbook':
                        switch (Rn[3]) {
                            case 'WindowHeight':
                                break;
                            case 'WindowWidth':
                                break;
                            case 'WindowTopX':
                                break;
                            case 'WindowTopY':
                                break;
                            case 'TabRatio':
                                break;
                            case 'ProtectStructure':
                                break;
                            case 'ProtectWindows':
                                break;
                            case 'ActiveSheet':
                                break;
                            case 'DisplayInkNotes':
                                break;
                            case 'FirstVisibleSheet':
                                break;
                            case 'SupBook':
                                break;
                            case 'SheetName':
                                break;
                            case 'SheetIndex':
                                break;
                            case 'SheetIndexFirst':
                                break;
                            case 'SheetIndexLast':
                                break;
                            case 'Dll':
                                break;
                            case 'AcceptLabelsInFormulas':
                                break;
                            case 'DoNotSaveLinkValues':
                                break;
                            case 'Date1904':
                                break;
                            case 'Iteration':
                                break;
                            case 'MaxIterations':
                                break;
                            case 'MaxChange':
                                break;
                            case 'Path':
                                break;
                            case 'Xct':
                                break;
                            case 'Count':
                                break;
                            case 'SelectedSheets':
                                break;
                            case 'Calculation':
                                break;
                            case 'Uncalced':
                                break;
                            case 'StartupPrompt':
                                break;
                            case 'Crn':
                                break;
                            case 'ExternName':
                                break;
                            case 'Formula':
                                break;
                            case 'ColFirst':
                                break;
                            case 'ColLast':
                                break;
                            case 'WantAdvise':
                                break;
                            case 'Boolean':
                                break;
                            case 'Error':
                                break;
                            case 'Text':
                                break;
                            case 'OLE':
                                break;
                            case 'NoAutoRecover':
                                break;
                            case 'PublishObjects':
                                break;
                            case 'DoNotCalculateBeforeSave':
                                break;
                            case 'Number':
                                break;
                            case 'RefModeR1C1':
                                break;
                            case 'EmbedSaveSmartTags':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* WorkbookOptions */
                    case 'WorkbookOptions':
                        switch (Rn[3]) {
                            case 'OWCVersion':
                                break;
                            case 'Height':
                                break;
                            case 'Width':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* WorksheetOptions */
                    case 'WorksheetOptions':
                        switch (Rn[3]) {
                            case 'Unsynced':
                                break;
                            case 'Visible':
                                break;
                            case 'Print':
                                break;
                            case 'Panes':
                                break;
                            case 'Scale':
                                break;
                            case 'Pane':
                                break;
                            case 'Number':
                                break;
                            case 'Layout':
                                break;
                            case 'Header':
                                break;
                            case 'Footer':
                                break;
                            case 'PageSetup':
                                break;
                            case 'PageMargins':
                                break;
                            case 'Selected':
                                break;
                            case 'ProtectObjects':
                                break;
                            case 'EnableSelection':
                                break;
                            case 'ProtectScenarios':
                                break;
                            case 'ValidPrinterInfo':
                                break;
                            case 'HorizontalResolution':
                                break;
                            case 'VerticalResolution':
                                break;
                            case 'NumberofCopies':
                                break;
                            case 'ActiveRow':
                                break;
                            case 'ActiveCol':
                                break;
                            case 'ActivePane':
                                break;
                            case 'TopRowVisible':
                                break;
                            case 'TopRowBottomPane':
                                break;
                            case 'LeftColumnVisible':
                                break;
                            case 'LeftColumnRightPane':
                                break;
                            case 'FitToPage':
                                break;
                            case 'RangeSelection':
                                break;
                            case 'PaperSizeIndex':
                                break;
                            case 'PageLayoutZoom':
                                break;
                            case 'PageBreakZoom':
                                break;
                            case 'FilterOn':
                                break;
                            case 'DoNotDisplayGridlines':
                                break;
                            case 'SplitHorizontal':
                                break;
                            case 'SplitVertical':
                                break;
                            case 'FreezePanes':
                                break;
                            case 'FrozenNoSplit':
                                break;
                            case 'FitWidth':
                                break;
                            case 'FitHeight':
                                break;
                            case 'CommentsLayout':
                                break;
                            case 'Zoom':
                                break;
                            case 'LeftToRight':
                                break;
                            case 'Gridlines':
                                break;
                            case 'AllowSort':
                                break;
                            case 'AllowFilter':
                                break;
                            case 'AllowInsertRows':
                                break;
                            case 'AllowDeleteRows':
                                break;
                            case 'AllowInsertCols':
                                break;
                            case 'AllowDeleteCols':
                                break;
                            case 'AllowInsertHyperlinks':
                                break;
                            case 'AllowFormatCells':
                                break;
                            case 'AllowSizeCols':
                                break;
                            case 'AllowSizeRows':
                                break;
                            case 'NoSummaryRowsBelowDetail':
                                break;
                            case 'TabColorIndex':
                                break;
                            case 'DoNotDisplayHeadings':
                                break;
                            case 'ShowPageLayoutZoom':
                                break;
                            case 'NoSummaryColumnsRightDetail':
                                break;
                            case 'BlackAndWhite':
                                break;
                            case 'DoNotDisplayZeros':
                                break;
                            case 'DisplayPageBreak':
                                break;
                            case 'RowColHeadings':
                                break;
                            case 'DoNotDisplayOutline':
                                break;
                            case 'NoOrientation':
                                break;
                            case 'AllowUsePivotTables':
                                break;
                            case 'ZeroHeight':
                                break;
                            case 'ViewableRange':
                                break;
                            case 'Selection':
                                break;
                            case 'ProtectContents':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* PivotTable */
                    case 'PivotTable':
                    case 'PivotCache':
                        switch (Rn[3]) {
                            case 'ImmediateItemsOnDrop':
                                break;
                            case 'ShowPageMultipleItemLabel':
                                break;
                            case 'CompactRowIndent':
                                break;
                            case 'Location':
                                break;
                            case 'PivotField':
                                break;
                            case 'Orientation':
                                break;
                            case 'LayoutForm':
                                break;
                            case 'LayoutSubtotalLocation':
                                break;
                            case 'LayoutCompactRow':
                                break;
                            case 'Position':
                                break;
                            case 'PivotItem':
                                break;
                            case 'DataType':
                                break;
                            case 'DataField':
                                break;
                            case 'SourceName':
                                break;
                            case 'ParentField':
                                break;
                            case 'PTLineItems':
                                break;
                            case 'PTLineItem':
                                break;
                            case 'CountOfSameItems':
                                break;
                            case 'Item':
                                break;
                            case 'ItemType':
                                break;
                            case 'PTSource':
                                break;
                            case 'CacheIndex':
                                break;
                            case 'ConsolidationReference':
                                break;
                            case 'FileName':
                                break;
                            case 'Reference':
                                break;
                            case 'NoColumnGrand':
                                break;
                            case 'NoRowGrand':
                                break;
                            case 'BlankLineAfterItems':
                                break;
                            case 'Hidden':
                                break;
                            case 'Subtotal':
                                break;
                            case 'BaseField':
                                break;
                            case 'MapChildItems':
                                break;
                            case 'Function':
                                break;
                            case 'RefreshOnFileOpen':
                                break;
                            case 'PrintSetTitles':
                                break;
                            case 'MergeLabels':
                                break;
                            case 'DefaultVersion':
                                break;
                            case 'RefreshName':
                                break;
                            case 'RefreshDate':
                                break;
                            case 'RefreshDateCopy':
                                break;
                            case 'VersionLastRefresh':
                                break;
                            case 'VersionLastUpdate':
                                break;
                            case 'VersionUpdateableMin':
                                break;
                            case 'VersionRefreshableMin':
                                break;
                            case 'Calculation':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* PageBreaks */
                    case 'PageBreaks':
                        switch (Rn[3]) {
                            case 'ColBreaks':
                                break;
                            case 'ColBreak':
                                break;
                            case 'RowBreaks':
                                break;
                            case 'RowBreak':
                                break;
                            case 'ColStart':
                                break;
                            case 'ColEnd':
                                break;
                            case 'RowEnd':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* AutoFilter */
                    case 'AutoFilter':
                        switch (Rn[3]) {
                            case 'AutoFilterColumn':
                                break;
                            case 'AutoFilterCondition':
                                break;
                            case 'AutoFilterAnd':
                                break;
                            case 'AutoFilterOr':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* QueryTable */
                    case 'QueryTable':
                        switch (Rn[3]) {
                            case 'Id':
                                break;
                            case 'AutoFormatFont':
                                break;
                            case 'AutoFormatPattern':
                                break;
                            case 'QuerySource':
                                break;
                            case 'QueryType':
                                break;
                            case 'EnableRedirections':
                                break;
                            case 'RefreshedInXl9':
                                break;
                            case 'URLString':
                                break;
                            case 'HTMLTables':
                                break;
                            case 'Connection':
                                break;
                            case 'CommandText':
                                break;
                            case 'RefreshInfo':
                                break;
                            case 'NoTitles':
                                break;
                            case 'NextId':
                                break;
                            case 'ColumnInfo':
                                break;
                            case 'OverwriteCells':
                                break;
                            case 'DoNotPromptForFile':
                                break;
                            case 'TextWizardSettings':
                                break;
                            case 'Source':
                                break;
                            case 'Number':
                                break;
                            case 'Decimal':
                                break;
                            case 'ThousandSeparator':
                                break;
                            case 'TrailingMinusNumbers':
                                break;
                            case 'FormatSettings':
                                break;
                            case 'FieldType':
                                break;
                            case 'Delimiters':
                                break;
                            case 'Tab':
                                break;
                            case 'Comma':
                                break;
                            case 'AutoFormatName':
                                break;
                            case 'VersionLastEdit':
                                break;
                            case 'VersionLastRefresh':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* Sorting */
                    case 'Sorting':
                    /* ConditionalFormatting */
                    case 'ConditionalFormatting':
                    /* DataValidation */
                    case 'DataValidation':
                        switch (Rn[3]) {
                            case 'Range':
                                break;
                            case 'Type':
                                break;
                            case 'Min':
                                break;
                            case 'Max':
                                break;
                            case 'Sort':
                                break;
                            case 'Descending':
                                break;
                            case 'Order':
                                break;
                            case 'CaseSensitive':
                                break;
                            case 'Value':
                                break;
                            case 'ErrorStyle':
                                break;
                            case 'ErrorMessage':
                                break;
                            case 'ErrorTitle':
                                break;
                            case 'CellRangeList':
                                break;
                            case 'InputMessage':
                                break;
                            case 'InputTitle':
                                break;
                            case 'ComboHide':
                                break;
                            case 'InputHide':
                                break;
                            case 'Condition':
                                break;
                            case 'Qualifier':
                                break;
                            case 'UseBlank':
                                break;
                            case 'Value1':
                                break;
                            case 'Value2':
                                break;
                            case 'Format':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* MapInfo (schema) */
                    case 'MapInfo':
                    case 'Schema':
                    case 'data':
                        switch (Rn[3]) {
                            case 'Map':
                                break;
                            case 'Entry':
                                break;
                            case 'Range':
                                break;
                            case 'XPath':
                                break;
                            case 'Field':
                                break;
                            case 'XSDType':
                                break;
                            case 'FilterOn':
                                break;
                            case 'Aggregate':
                                break;
                            case 'ElementType':
                                break;
                            case 'AttributeType':
                                break;
                            /* These are from xsd (XML Schema Definition) */
                            case 'schema':
                            case 'element':
                            case 'complexType':
                            case 'datatype':
                            case 'all':
                            case 'attribute':
                            case 'extends':
                                break;
                            case 'row':
                                break;
                            default:
                                seen = false;
                        };
                        break;
                    /* SmartTags (can be anything) */
                    case 'SmartTags':
                        break;
                    default:
                        seen = false;
                        break;
                };
                if (seen)  {
                    break;
                }
                ;
                /* CustomDocumentProperties */
                if (!state[state.length - 1][1])  {
                    throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
                }
                ;
                if (state[state.length - 1][0] === 'CustomDocumentProperties') {
                    if (Rn[0].substr(-2) === "/>")  {
                        break;
                    }
                    else if (Rn[1] === "/")  {
                        xlml_set_custprop(Custprops, Rn, cp, str.slice(pidx, Rn.index));
                    }
                    else {
                        cp = Rn;
                        pidx = Rn.index + Rn[0].length;
                    }
                    break;
                };
                if (opts.WTF)  {
                    throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
                }
                ;
        };
        var out = {};
        if (!opts.bookSheets && !opts.bookProps)  {
            out.Sheets = sheets;
        }
        
        out.SheetNames = sheetnames;
        out.SSF = SSF.get_table();
        out.Props = Props;
        out.Custprops = Custprops;
        return out;
    }
    function parse_xlml(data, opts) {
        fix_read_opts(opts = opts || {});
        switch (opts.type || "base64") {
            case "base64":
                return parse_xlml_xml(Base64.decode(data), opts);
            case "binary":
            case "buffer":
            case "file":
                return parse_xlml_xml(data, opts);
            case "array":
                return parse_xlml_xml(data.map(_chr).join(""), opts);
        }
    }
    function write_xlml(wb, opts) {}
    var fs;
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            fs = require('fs');
        }
    }
    function firstbyte(f, o) {
        switch ((o || {}).type || "base64") {
            case 'buffer':
                return f[0];
            case 'base64':
                return Base64.decode(f.substr(0, 12)).charCodeAt(0);
            case 'binary':
                return f.charCodeAt(0);
            case 'array':
                return f[0];
            default:
                throw new Error("Unrecognized type " + o.type);
        }
    }
    function xlsread(f, o) {
        if (!o)  {
            o = {};
        }
        
        if (!o.type)  {
            o.type = (has_buf && Buffer.isBuffer(f)) ? "buffer" : "base64";
        }
        
        switch (firstbyte(f, o)) {
            case 208:
                return parse_xlscfb(CFB.read(f, o), o);
            case 9:
                return parse_xlscfb(s2a(o.type === 'base64' ? Base64.decode(f) : f), o);
            case 60:
                return parse_xlml(f, o);
            default:
                throw "Unsupported file";
        }
    }
    var readFile = function(f, o) {
            var d = fs.readFileSync(f);
            if (!o)  {
                o = {};
            }
            
            switch (firstbyte(d, {
                type: 'buffer'
            })) {
                case 208:
                    return parse_xlscfb(CFB.read(d, {
                        type: 'buffer'
                    }), o);
                case 9:
                    return parse_xlscfb(d, o);
                case 60:
                    return parse_xlml(d, (o.type = "buffer" , o));
                default:
                    throw "Unsupported file";
            }
        };
    function writeSync(wb, opts) {
        var o = opts || {};
        switch (o.bookType) {
            case 'xml':
                return write_xlml(wb, o);
            default:
                throw 'unsupported output format ' + o.bookType;
        }
    }
    function writeFileSync(wb, filename, opts) {
        var o = opts | {};
        o.type = 'file';
        o.file = filename;
        switch (o.file.substr(-4).toLowerCase()) {
            case '.xls':
                o.bookType = 'xls';
                break;
            case '.xml':
                o.bookType = 'xml';
                break;
        }
        return writeSync(wb, o);
    }
    function shift_cell(cell, tgt) {
        if (tgt.s) {
            if (cell.cRel)  {
                cell.c += tgt.s.c;
            }
            
            if (cell.rRel)  {
                cell.r += tgt.s.r;
            }
            
        } else {
            cell.c += tgt.c;
            cell.r += tgt.r;
        }
        cell.cRel = cell.rRel = 0;
        while (cell.c >= 256) cell.c -= 256;
        while (cell.r >= 65536) cell.r -= 65536;
        return cell;
    }
    function shift_range(cell, range) {
        cell.s = shift_cell(cell.s, range.s);
        cell.e = shift_cell(cell.e, range.s);
        return cell;
    }
    function decode_row(rowstr) {
        return parseInt(unfix_row(rowstr), 10) - 1;
    }
    function encode_row(row) {
        return "" + (row + 1);
    }
    function fix_row(cstr) {
        return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
    }
    function unfix_row(cstr) {
        return cstr.replace(/\$(\d+)$/, "$1");
    }
    function decode_col(colstr) {
        var c = unfix_col(colstr),
            d = 0,
            i = 0;
        for (; i !== c.length; ++i) d = 26 * d + c.charCodeAt(i) - 64;
        return d - 1;
    }
    function encode_col(col) {
        var s = "";
        for (++col; col; col = Math.floor((col - 1) / 26)) s = String.fromCharCode(((col - 1) % 26) + 65) + s;
        return s;
    }
    function fix_col(cstr) {
        return cstr.replace(/^([A-Z])/, "$$$1");
    }
    function unfix_col(cstr) {
        return cstr.replace(/^\$([A-Z])/, "$1");
    }
    function split_cell(cstr) {
        return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
    }
    function decode_cell(cstr) {
        var splt = split_cell(cstr);
        return {
            c: decode_col(splt[0]),
            r: decode_row(splt[1])
        };
    }
    function encode_cell(cell) {
        return encode_col(cell.c) + encode_row(cell.r);
    }
    function fix_cell(cstr) {
        return fix_col(fix_row(cstr));
    }
    function unfix_cell(cstr) {
        return unfix_col(unfix_row(cstr));
    }
    function decode_range(range) {
        var x = range.split(":").map(decode_cell);
        return {
            s: x[0],
            e: x[x.length - 1]
        };
    }
    function encode_range(cs, ce) {
        if (ce === undefined || typeof ce === 'number')  {
            return encode_range(cs.s, cs.e);
        }
        
        if (typeof cs !== 'string')  {
            cs = encode_cell(cs);
        }
        
        if (typeof ce !== 'string')  {
            ce = encode_cell(ce);
        }
        
        return cs == ce ? cs : cs + ":" + ce;
    }
    function safe_decode_range(range) {
        var o = {
                s: {
                    c: 0,
                    r: 0
                },
                e: {
                    c: 0,
                    r: 0
                }
            };
        var idx = 0,
            i = 0,
            cc = 0;
        var len = range.length;
        for (idx = 0; i < len; ++i) {
            if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26)  {
                break;
            }
            
            idx = 26 * idx + cc;
        }
        o.s.c = --idx;
        for (idx = 0; i < len; ++i) {
            if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9)  {
                break;
            }
            
            idx = 10 * idx + cc;
        }
        o.s.r = --idx;
        if (i === len || range.charCodeAt(++i) === 58) {
            o.e.c = o.s.c;
            o.e.r = o.s.r;
            return o;
        }
        for (idx = 0; i != len; ++i) {
            if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26)  {
                break;
            }
            
            idx = 26 * idx + cc;
        }
        o.e.c = --idx;
        for (idx = 0; i != len; ++i) {
            if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9)  {
                break;
            }
            
            idx = 10 * idx + cc;
        }
        o.e.r = --idx;
        return o;
    }
    function safe_format_cell(cell, v) {
        if (cell.z !== undefined)  {
            try {
                return (cell.w = SSF.format(cell.z, v));
            } catch (e) {};
        }
        
        if (!cell.XF)  {
            return v;
        }
        
        try {
            return (cell.w = SSF.format(cell.XF.ifmt || 0, v));
        } catch (e) {
            return '' + v;
        }
    }
    function format_cell(cell, v) {
        if (cell == null || cell.t == null)  {
            return "";
        }
        
        if (cell.w !== undefined)  {
            return cell.w;
        }
        
        if (v === undefined)  {
            return safe_format_cell(cell, cell.v);
        }
        
        return safe_format_cell(cell, v);
    }
    function sheet_to_json(sheet, opts) {
        var val, row, range,
            header = 0,
            offset = 1,
            r,
            hdr = [],
            isempty, R, C, v;
        var o = opts != null ? opts : {};
        var raw = o.raw;
        if (sheet == null || sheet["!ref"] == null)  {
            return [];
        }
        
        range = o.range !== undefined ? o.range : sheet["!ref"];
        if (o.header === 1)  {
            header = 1;
        }
        else if (o.header === "A")  {
            header = 2;
        }
        else if (Array.isArray(o.header))  {
            header = 3;
        }
        
        switch (typeof range) {
            case 'string':
                r = safe_decode_range(range);
                break;
            case 'number':
                r = safe_decode_range(sheet["!ref"]);
                r.s.r = range;
                break;
            default:
                r = range;
        }
        if (header > 0)  {
            offset = 0;
        }
        
        var rr = encode_row(r.s.r);
        var cols = new Array(r.e.c - r.s.c + 1);
        var out = new Array(r.e.r - r.s.r - offset + 1);
        var outi = 0;
        for (C = r.s.c; C <= r.e.c; ++C) {
            cols[C] = encode_col(C);
            val = sheet[cols[C] + rr];
            switch (header) {
                case 1:
                    hdr[C] = C;
                    break;
                case 2:
                    hdr[C] = cols[C];
                    break;
                case 3:
                    hdr[C] = o.header[C - r.s.c];
                    break;
                default:
                    if (val === undefined)  {
                        
                        continue;
                    }
                    ;
                    hdr[C] = format_cell(val);
            }
        }
        for (R = r.s.r + offset; R <= r.e.r; ++R) {
            rr = encode_row(R);
            isempty = true;
            if (header === 1)  {
                row = [];
            }
            else {
                row = {};
                if (Object.defineProperty)  {
                    Object.defineProperty(row, '__rowNum__', {
                        value: R,
                        enumerable: false
                    });
                }
                else  {
                    row.__rowNum__ = R;
                }
                
            }
            for (C = r.s.c; C <= r.e.c; ++C) {
                val = sheet[cols[C] + rr];
                if (val === undefined || val.t === undefined)  {
                    
                    continue;
                }
                
                v = val.v;
                switch (val.t) {
                    case 'e':
                        
                        continue;
                    case 's':
                        break;
                    case 'b':
                    case 'n':
                        break;
                    default:
                        throw 'unrecognized type ' + val.t;
                }
                if (v !== undefined) {
                    row[hdr[C]] = raw ? v : format_cell(val, v);
                    isempty = false;
                }
            }
            if (isempty === false || header === 1)  {
                out[outi++] = row;
            }
            
        }
        out.length = outi;
        return out;
    }
    function sheet_to_row_object_array(sheet, opts) {
        return sheet_to_json(sheet, opts != null ? opts : {});
    }
    function sheet_to_csv(sheet, opts) {
        var out = "",
            txt = "",
            qreg = /"/g;
        var o = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null)  {
            return "";
        }
        
        var r = safe_decode_range(sheet["!ref"]);
        var FS = o.FS !== undefined ? o.FS : ",",
            fs = FS.charCodeAt(0);
        var RS = o.RS !== undefined ? o.RS : "\n",
            rs = RS.charCodeAt(0);
        var row = "",
            rr = "",
            cols = [];
        var i = 0,
            cc = 0,
            val;
        var R = 0,
            C = 0;
        for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
        for (R = r.s.r; R <= r.e.r; ++R) {
            row = "";
            rr = encode_row(R);
            for (C = r.s.c; C <= r.e.c; ++C) {
                val = sheet[cols[C] + rr];
                txt = val !== undefined ? '' + format_cell(val) : "";
                for (i = 0 , cc = 0; i !== txt.length; ++i) if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {
                    txt = "\"" + txt.replace(qreg, '""') + "\"";
                    break;
                };
                row += (C === r.s.c ? "" : FS) + txt;
            }
            out += row + RS;
        }
        return out;
    }
    var make_csv = sheet_to_csv;
    function sheet_to_formulae(sheet) {
        var cmds,
            y = "",
            x,
            val = "";
        if (sheet == null || sheet["!ref"] == null)  {
            return "";
        }
        
        var r = safe_decode_range(sheet['!ref']),
            rr = "",
            cols = [],
            C;
        cmds = new Array((r.e.r - r.s.r + 1) * (r.e.c - r.s.c + 1));
        var i = 0;
        for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
        for (var R = r.s.r; R <= r.e.r; ++R) {
            rr = encode_row(R);
            for (C = r.s.c; C <= r.e.c; ++C) {
                y = cols[C] + rr;
                x = sheet[y];
                val = "";
                if (x === undefined)  {
                    
                    continue;
                }
                
                if (x.f != null)  {
                    val = x.f;
                }
                else if (x.w !== undefined)  {
                    val = "'" + x.w;
                }
                else if (x.v === undefined)  {
                    
                    continue;
                }
                else  {
                    val = "" + x.v;
                }
                
                cmds[i++] = y + "=" + val;
            }
        }
        cmds.length = i;
        return cmds;
    }
    var utils = {
            encode_col: encode_col,
            encode_row: encode_row,
            encode_cell: encode_cell,
            encode_range: encode_range,
            decode_col: decode_col,
            decode_row: decode_row,
            split_cell: split_cell,
            decode_cell: decode_cell,
            decode_range: decode_range,
            format_cell: format_cell,
            get_formulae: sheet_to_formulae,
            make_csv: sheet_to_csv,
            make_json: sheet_to_json,
            make_formulae: sheet_to_formulae,
            sheet_to_csv: sheet_to_csv,
            sheet_to_json: sheet_to_json,
            sheet_to_formulae: sheet_to_formulae,
            sheet_to_row_object_array: sheet_to_row_object_array
        };
    XLS.parse_xlscfb = parse_xlscfb;
    XLS.read = xlsread;
    XLS.readFile = readFile;
    XLS.utils = utils;
    XLS.CFB = CFB;
    XLS.SSF = SSF;
})(typeof exports !== 'undefined' ? exports : XLS);

/* xlsx.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
/* vim: set ts=2: */
/*jshint -W041 */
var XLSX = {};
(function(XLSX) {
    XLSX.version = '0.7.11';
    var current_codepage = 1252,
        current_cptable;
    if (typeof module !== "undefined" && typeof require !== 'undefined') {
        if (typeof cptable === 'undefined')  {
            cptable = require('./dist/cpexcel');
        }
        
        current_cptable = cptable[current_codepage];
    }
    function reset_cp() {
        set_cp(1252);
    }
    var set_cp = function(cp) {
            current_codepage = cp;
        };
    function char_codes(data) {
        var o = [];
        for (var i = 0,
            len = data.length; i < len; ++i) o[i] = data.charCodeAt(i);
        return o;
    }
    var debom_xml = function(data) {
            return data;
        };
    if (typeof cptable !== 'undefined') {
        set_cp = function(cp) {
            current_codepage = cp;
            current_cptable = cptable[cp];
        };
        debom_xml = function(data) {
            if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) {
                return cptable.utils.decode(1200, char_codes(data.substr(2)));
            }
            return data;
        };
    }
    /* ssf.js (C) 2013-2014 SheetJS -- http://sheetjs.com */
    /*jshint -W041 */
    var SSF = {};
    var make_ssf = function make_ssf(SSF) {
            SSF.version = '0.8.1';
            function _strrev(x) {
                var o = "",
                    i = x.length - 1;
                while (i >= 0) o += x.charAt(i--);
                return o;
            }
            function fill(c, l) {
                var o = "";
                while (o.length < l) o += c;
                return o;
            }
            function pad0(v, d) {
                var t = "" + v;
                return t.length >= d ? t : fill('0', d - t.length) + t;
            }
            function pad_(v, d) {
                var t = "" + v;
                return t.length >= d ? t : fill(' ', d - t.length) + t;
            }
            function rpad_(v, d) {
                var t = "" + v;
                return t.length >= d ? t : t + fill(' ', d - t.length);
            }
            function pad0r1(v, d) {
                var t = "" + Math.round(v);
                return t.length >= d ? t : fill('0', d - t.length) + t;
            }
            function pad0r2(v, d) {
                var t = "" + v;
                return t.length >= d ? t : fill('0', d - t.length) + t;
            }
            var p2_32 = Math.pow(2, 32);
            function pad0r(v, d) {
                if (v > p2_32 || v < -p2_32)  {
                    return pad0r1(v, d);
                }
                
                var i = Math.round(v);
                return pad0r2(i, d);
            }
            function isgeneral(s, i) {
                return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
            }
            /* Options */
            var opts_fmt = [
                    [
                        "date1904",
                        0
                    ],
                    [
                        "output",
                        ""
                    ],
                    [
                        "WTF",
                        false
                    ]
                ];
            function fixopts(o) {
                for (var y = 0; y != opts_fmt.length; ++y) if (o[opts_fmt[y][0]] === undefined)  {
                    o[opts_fmt[y][0]] = opts_fmt[y][1];
                }
                ;
            }
            SSF.opts = opts_fmt;
            var table_fmt = {
                    0: 'General',
                    1: '0',
                    2: '0.00',
                    3: '#,##0',
                    4: '#,##0.00',
                    9: '0%',
                    10: '0.00%',
                    11: '0.00E+00',
                    12: '# ?/?',
                    13: '# ??/??',
                    14: 'm/d/yy',
                    15: 'd-mmm-yy',
                    16: 'd-mmm',
                    17: 'mmm-yy',
                    18: 'h:mm AM/PM',
                    19: 'h:mm:ss AM/PM',
                    20: 'h:mm',
                    21: 'h:mm:ss',
                    22: 'm/d/yy h:mm',
                    37: '#,##0 ;(#,##0)',
                    38: '#,##0 ;[Red](#,##0)',
                    39: '#,##0.00;(#,##0.00)',
                    40: '#,##0.00;[Red](#,##0.00)',
                    45: 'mm:ss',
                    46: '[h]:mm:ss',
                    47: 'mmss.0',
                    48: '##0.0E+0',
                    49: '@',
                    56: '"‰∏äÂçà/‰∏ãÂçà "hh"ÊôÇ"mm"ÂàÜ"ss"Áßí "',
                    65535: 'General'
                };
            var days = [
                    [
                        'Sun',
                        'Sunday'
                    ],
                    [
                        'Mon',
                        'Monday'
                    ],
                    [
                        'Tue',
                        'Tuesday'
                    ],
                    [
                        'Wed',
                        'Wednesday'
                    ],
                    [
                        'Thu',
                        'Thursday'
                    ],
                    [
                        'Fri',
                        'Friday'
                    ],
                    [
                        'Sat',
                        'Saturday'
                    ]
                ];
            var months = [
                    [
                        'J',
                        'Jan',
                        'January'
                    ],
                    [
                        'F',
                        'Feb',
                        'February'
                    ],
                    [
                        'M',
                        'Mar',
                        'March'
                    ],
                    [
                        'A',
                        'Apr',
                        'April'
                    ],
                    [
                        'M',
                        'May',
                        'May'
                    ],
                    [
                        'J',
                        'Jun',
                        'June'
                    ],
                    [
                        'J',
                        'Jul',
                        'July'
                    ],
                    [
                        'A',
                        'Aug',
                        'August'
                    ],
                    [
                        'S',
                        'Sep',
                        'September'
                    ],
                    [
                        'O',
                        'Oct',
                        'October'
                    ],
                    [
                        'N',
                        'Nov',
                        'November'
                    ],
                    [
                        'D',
                        'Dec',
                        'December'
                    ]
                ];
            function frac(x, D, mixed) {
                var sgn = x < 0 ? -1 : 1;
                var B = x * sgn;
                var P_2 = 0,
                    P_1 = 1,
                    P = 0;
                var Q_2 = 1,
                    Q_1 = 0,
                    Q = 0;
                var A = Math.floor(B);
                while (Q_1 < D) {
                    A = Math.floor(B);
                    P = A * P_1 + P_2;
                    Q = A * Q_1 + Q_2;
                    if ((B - A) < 5.0E-10)  {
                        break;
                    }
                    
                    B = 1 / (B - A);
                    P_2 = P_1;
                    P_1 = P;
                    Q_2 = Q_1;
                    Q_1 = Q;
                }
                if (Q > D) {
                    Q = Q_1;
                    P = P_1;
                }
                if (Q > D) {
                    Q = Q_2;
                    P = P_2;
                }
                if (!mixed)  {
                    return [
                        0,
                        sgn * P,
                        Q
                    ];
                }
                
                if (Q === 0)  {
                    throw "Unexpected state: " + P + " " + P_1 + " " + P_2 + " " + Q + " " + Q_1 + " " + Q_2;
                }
                
                var q = Math.floor(sgn * P / Q);
                return [
                    q,
                    sgn * P - q * Q,
                    Q
                ];
            }
            function general_fmt_int(v, opts) {
                return "" + v;
            }
            SSF._general_int = general_fmt_int;
            var general_fmt_num = (function make_general_fmt_num() {
                    var gnr1 = /\.(\d*[1-9])0+$/,
                        gnr2 = /\.0*$/,
                        gnr4 = /\.(\d*[1-9])0+/,
                        gnr5 = /\.0*[Ee]/,
                        gnr6 = /(E[+-])(\d)$/;
                    function gfn2(v) {
                        var w = (v < 0 ? 12 : 11);
                        var o = gfn5(v.toFixed(12));
                        if (o.length <= w)  {
                            return o;
                        }
                        
                        o = v.toPrecision(10);
                        if (o.length <= w)  {
                            return o;
                        }
                        
                        return v.toExponential(5);
                    }
                    function gfn3(v) {
                        var o = v.toFixed(11).replace(gnr1, ".$1");
                        if (o.length > (v < 0 ? 12 : 11))  {
                            o = v.toPrecision(6);
                        }
                        
                        return o;
                    }
                    function gfn4(o) {
                        for (var i = 0; i != o.length; ++i) if ((o.charCodeAt(i) | 32) === 101)  {
                            return o.replace(gnr4, ".$1").replace(gnr5, "E").replace("e", "E").replace(gnr6, "$10$2");
                        }
                        ;
                        return o;
                    }
                    function gfn5(o) {
                        //for(var i = 0; i != o.length; ++i) if(o.charCodeAt(i) === 46) return o.replace(gnr2,"").replace(gnr1,".$1");
                        //return o;
                        return o.indexOf(".") > -1 ? o.replace(gnr2, "").replace(gnr1, ".$1") : o;
                    }
                    return function general_fmt_num(v, opts) {
                        var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E),
                            o;
                        if (V >= -4 && V <= -1)  {
                            o = v.toPrecision(10 + V);
                        }
                        else if (Math.abs(V) <= 9)  {
                            o = gfn2(v);
                        }
                        else if (V === 10)  {
                            o = v.toFixed(10).substr(0, 12);
                        }
                        else  {
                            o = gfn3(v);
                        }
                        
                        return gfn5(gfn4(o));
                    };
                })();
            SSF._general_num = general_fmt_num;
            function general_fmt(v, opts) {
                switch (typeof v) {
                    case 'string':
                        return v;
                    case 'boolean':
                        return v ? "TRUE" : "FALSE";
                    case 'number':
                        return (v | 0) === v ? general_fmt_int(v, opts) : general_fmt_num(v, opts);
                }
                throw new Error("unsupported value in General format: " + v);
            }
            SSF._general = general_fmt;
            function fix_hijri(date, o) {
                return 0;
            }
            function parse_date_code(v, opts, b2) {
                if (v > 2958465 || v < 0)  {
                    return null;
                }
                
                var date = (v | 0),
                    time = Math.floor(86400 * (v - date)),
                    dow = 0;
                var dout = [];
                var out = {
                        D: date,
                        T: time,
                        u: 86400 * (v - date) - time,
                        y: 0,
                        m: 0,
                        d: 0,
                        H: 0,
                        M: 0,
                        S: 0,
                        q: 0
                    };
                if (Math.abs(out.u) < 1.0E-6)  {
                    out.u = 0;
                }
                
                fixopts(opts != null ? opts : (opts = []));
                if (opts.date1904)  {
                    date += 1462;
                }
                
                if (out.u > 0.999) {
                    out.u = 0;
                    if (++time == 86400) {
                        time = 0;
                        ++date;
                    }
                }
                if (date === 60) {
                    dout = b2 ? [
                        1317,
                        10,
                        29
                    ] : [
                        1900,
                        2,
                        29
                    ];
                    dow = 3;
                } else if (date === 0) {
                    dout = b2 ? [
                        1317,
                        8,
                        29
                    ] : [
                        1900,
                        1,
                        0
                    ];
                    dow = 6;
                } else {
                    if (date > 60)  {
                        --date;
                    }
                    
                    /* 1 = Jan 1 1900 */
                    var d = new Date(1900, 0, 1);
                    d.setDate(d.getDate() + date - 1);
                    dout = [
                        d.getFullYear(),
                        d.getMonth() + 1,
                        d.getDate()
                    ];
                    dow = d.getDay();
                    if (date < 60)  {
                        dow = (dow + 6) % 7;
                    }
                    
                    if (b2)  {
                        dow = fix_hijri(d, dout);
                    }
                    
                }
                out.y = dout[0];
                out.m = dout[1];
                out.d = dout[2];
                out.S = time % 60;
                time = Math.floor(time / 60);
                out.M = time % 60;
                time = Math.floor(time / 60);
                out.H = time;
                out.q = dow;
                return out;
            }
            SSF.parse_date_code = parse_date_code;
            /*jshint -W086 */
            function write_date(type, fmt, val, ss0) {
                var o = "",
                    ss = 0,
                    tt = 0,
                    y = val.y,
                    out,
                    outl = 0;
                switch (type) {
                    case 98:
                        /* 'b' buddhist year */
                        y = val.y + 543;
                    /* falls through */
                    case 121:
                        /* 'y' year */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = y % 100;
                                outl = 2;
                                break;
                            default:
                                out = y % 10000;
                                outl = 4;
                                break;
                        };
                        break;
                    case 109:
                        /* 'm' month */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.m;
                                outl = fmt.length;
                                break;
                            case 3:
                                return months[val.m - 1][1];
                            case 5:
                                return months[val.m - 1][0];
                            default:
                                return months[val.m - 1][2];
                        };
                        break;
                    case 100:
                        /* 'd' day */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.d;
                                outl = fmt.length;
                                break;
                            case 3:
                                return days[val.q][0];
                            default:
                                return days[val.q][1];
                        };
                        break;
                    case 104:
                        /* 'h' 12-hour */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = 1 + (val.H + 11) % 12;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad hour format: ' + fmt;
                        };
                        break;
                    case 72:
                        /* 'H' 24-hour */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.H;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad hour format: ' + fmt;
                        };
                        break;
                    case 77:
                        /* 'M' minutes */
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val.M;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad minute format: ' + fmt;
                        };
                        break;
                    case 115:
                        /* 's' seconds */
                        if (val.u === 0)  {
                            switch (fmt) {
                                case 's':
                                case 'ss':
                                    return pad0(val.S, fmt.length);
                                case '.0':
                                case '.00':
                                case '.000':
                            };
                        }
                        ;
                        switch (fmt) {
                            case 's':
                            case 'ss':
                            case '.0':
                            case '.00':
                            case '.000':
                                if (ss0 >= 2)  {
                                    tt = ss0 === 3 ? 1000 : 100;
                                }
                                else  {
                                    tt = ss0 === 1 ? 10 : 1;
                                }
                                ;
                                ss = Math.round((tt) * (val.S + val.u));
                                if (ss >= 60 * tt)  {
                                    ss = 0;
                                }
                                ;
                                if (fmt === 's')  {
                                    return ss === 0 ? "0" : "" + ss / tt;
                                }
                                ;
                                o = pad0(ss, 2 + ss0);
                                if (fmt === 'ss')  {
                                    return o.substr(0, 2);
                                }
                                ;
                                return "." + o.substr(2, fmt.length - 1);
                            default:
                                throw 'bad second format: ' + fmt;
                        };
                    case 90:
                        /* 'Z' absolute time */
                        switch (fmt) {
                            case '[h]':
                            case '[hh]':
                                out = val.D * 24 + val.H;
                                break;
                            case '[m]':
                            case '[mm]':
                                out = (val.D * 24 + val.H) * 60 + val.M;
                                break;
                            case '[s]':
                            case '[ss]':
                                out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                                break;
                            default:
                                throw 'bad abstime format: ' + fmt;
                        };
                        outl = fmt.length === 3 ? 1 : 2;
                        break;
                    case 101:
                        /* 'e' era */
                        out = y;
                        outl = 1;
                }
                if (outl > 0)  {
                    return pad0(out, outl);
                }
                else  {
                    return "";
                }
                
            }
            /*jshint +W086 */
            function commaify(s) {
                if (s.length <= 3)  {
                    return s;
                }
                
                var j = (s.length % 3),
                    o = s.substr(0, j);
                for (; j != s.length; j += 3) o += (o.length > 0 ? "," : "") + s.substr(j, 3);
                return o;
            }
            var write_num = (function make_write_num() {
                    var pct1 = /%/g;
                    function write_num_pct(type, fmt, val) {
                        var sfmt = fmt.replace(pct1, ""),
                            mul = fmt.length - sfmt.length;
                        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
                    }
                    function write_num_cm(type, fmt, val) {
                        var idx = fmt.length - 1;
                        while (fmt.charCodeAt(idx - 1) === 44) --idx;
                        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
                    }
                    function write_num_exp(fmt, val) {
                        var o;
                        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
                        if (fmt.match(/^#+0.0E\+0$/)) {
                            var period = fmt.indexOf(".");
                            if (period === -1)  {
                                period = fmt.indexOf('E');
                            }
                            
                            var ee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) % period;
                            if (ee < 0)  {
                                ee += period;
                            }
                            
                            o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
                            if (o.indexOf("e") === -1) {
                                var fakee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E);
                                if (o.indexOf(".") === -1)  {
                                    o = o[0] + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
                                }
                                else  {
                                    o += "E+" + (fakee - ee);
                                }
                                
                                while (o.substr(0, 2) === "0.") {
                                    o = o[0] + o.substr(2, period) + "." + o.substr(2 + period);
                                    o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
                                }
                                o = o.replace(/\+-/, "-");
                            }
                            o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
                                return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
                            });
                        } else  {
                            o = val.toExponential(idx);
                        }
                        
                        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))  {
                            o = o.substr(0, o.length - 1) + "0" + o[o.length - 1];
                        }
                        
                        if (fmt.match(/E\-/) && o.match(/e\+/))  {
                            o = o.replace(/e\+/, "e");
                        }
                        
                        return o.replace("e", "E");
                    }
                    var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
                    function write_num_f1(r, aval, sign) {
                        var den = parseInt(r[4]),
                            rr = Math.round(aval * den),
                            base = Math.floor(rr / den);
                        var myn = (rr - base * den),
                            myd = den;
                        return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
                    }
                    function write_num_f2(r, aval, sign) {
                        return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
                    }
                    var dec1 = /^#*0*\.(0+)/;
                    var closeparen = /\).*[0#]/;
                    var phone = /\(###\) ###\\?-####/;
                    function hashq(str) {
                        var o = "",
                            cc;
                        for (var i = 0; i != str.length; ++i) switch ((cc = str.charCodeAt(i))) {
                            case 35:
                                break;
                            case 63:
                                o += " ";
                                break;
                            case 48:
                                o += "0";
                                break;
                            default:
                                o += String.fromCharCode(cc);
                        };
                        return o;
                    }
                    function rnd(val, d) {
                        var dd = Math.pow(10, d);
                        return "" + (Math.round(val * dd) / dd);
                    }
                    function dec(val, d) {
                        return Math.round((val - Math.floor(val)) * Math.pow(10, d));
                    }
                    function flr(val) {
                        if (val < 2147483647 && val > -2.147483648E9)  {
                            return "" + (val >= 0 ? (val | 0) : (val - 1 | 0));
                        }
                        
                        return "" + Math.floor(val);
                    }
                    function write_num_flt(type, fmt, val) {
                        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
                            var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
                            if (val >= 0)  {
                                return write_num_flt('n', ffmt, val);
                            }
                            
                            return '(' + write_num_flt('n', ffmt, -val) + ')';
                        }
                        if (fmt.charCodeAt(fmt.length - 1) === 44)  {
                            return write_num_cm(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('%') !== -1)  {
                            return write_num_pct(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('E') !== -1)  {
                            return write_num_exp(fmt, val);
                        }
                        
                        if (fmt.charCodeAt(0) === 36)  {
                            return "$" + write_num_flt(type, fmt.substr(fmt[1] == ' ' ? 2 : 1), val);
                        }
                        
                        var o, oo;
                        var r, ri, ff,
                            aval = Math.abs(val),
                            sign = val < 0 ? "-" : "";
                        if (fmt.match(/^00+$/))  {
                            return sign + pad0r(aval, fmt.length);
                        }
                        
                        if (fmt.match(/^[#?]+$/)) {
                            o = pad0r(val, 0);
                            if (o === "0")  {
                                o = "";
                            }
                            
                            return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(frac1)) !== null)  {
                            return write_num_f1(r, aval, sign);
                        }
                        
                        if (fmt.match(/^#+0+$/) !== null)  {
                            return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
                        }
                        
                        if ((r = fmt.match(dec1)) !== null) {
                            o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + r[1]).replace(/\.$/, "." + r[1]).replace(/\.(\d*)$/, function($$, $1) {
                                return "." + $1 + fill("0", r[1].length - $1.length);
                            });
                            return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
                        }
                        fmt = fmt.replace(/^#+([0.])/, "$1");
                        if ((r = fmt.match(/^(0*)\.(#*)$/)) !== null) {
                            return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
                        }
                        if ((r = fmt.match(/^#,##0(\.?)$/)) !== null)  {
                            return sign + commaify(pad0r(aval, 0));
                        }
                        
                        if ((r = fmt.match(/^#,##0\.([#0]*0)$/)) !== null) {
                            return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val))) + "." + pad0(dec(val, r[1].length), r[1].length);
                        }
                        if ((r = fmt.match(/^#,#*,#0/)) !== null)  {
                            return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
                        }
                        
                        if ((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) !== null) {
                            o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
                            ri = 0;
                            return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
                                return ri < o.length ? o[ri++] : x === '0' ? '0' : "";
                            }));
                        }
                        if (fmt.match(phone) !== null) {
                            o = write_num_flt(type, "##########", val);
                            return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
                        }
                        var oa = "";
                        if ((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(r[4].length, 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, false);
                            o = "" + sign;
                            oa = write_num("n", r[1], ff[1]);
                            if (oa[oa.length - 1] == " ")  {
                                oa = oa.substr(0, oa.length - 1) + "0";
                            }
                            
                            o += oa + r[2] + "/" + r[3];
                            oa = rpad_(ff[2], ri);
                            if (oa.length < r[4].length)  {
                                oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
                            }
                            
                            o += oa;
                            return o;
                        }
                        if ((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(Math.max(r[1].length, r[4].length), 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, true);
                            return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
                        }
                        if ((r = fmt.match(/^[#0?]+$/)) !== null) {
                            o = pad0r(val, 0);
                            if (fmt.length <= o.length)  {
                                return o;
                            }
                            
                            return hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(/^([#0?]+)\.([#0]+)$/)) !== null) {
                            o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
                            ri = o.indexOf(".");
                            var lres = fmt.indexOf(".") - ri,
                                rres = fmt.length - o.length - lres;
                            return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
                        }
                        if ((r = fmt.match(/^00,000\.([#0]*0)$/)) !== null) {
                            ri = dec(val, r[1].length);
                            return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
                                return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
                            }) + "." + pad0(ri, r[1].length);
                        }
                        switch (fmt) {
                            case "#,###":
                                var x = commaify(pad0r(aval, 0));
                                return x !== "0" ? sign + x : "";
                            default:
                        }
                        throw new Error("unsupported format |" + fmt + "|");
                    }
                    function write_num_cm2(type, fmt, val) {
                        var idx = fmt.length - 1;
                        while (fmt.charCodeAt(idx - 1) === 44) --idx;
                        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
                    }
                    function write_num_pct2(type, fmt, val) {
                        var sfmt = fmt.replace(pct1, ""),
                            mul = fmt.length - sfmt.length;
                        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
                    }
                    function write_num_exp2(fmt, val) {
                        var o;
                        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
                        if (fmt.match(/^#+0.0E\+0$/)) {
                            var period = fmt.indexOf(".");
                            if (period === -1)  {
                                period = fmt.indexOf('E');
                            }
                            
                            var ee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) % period;
                            if (ee < 0)  {
                                ee += period;
                            }
                            
                            o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
                            if (!o.match(/[Ee]/)) {
                                var fakee = Math.floor(Math.log(Math.abs(val)) * Math.LOG10E);
                                if (o.indexOf(".") === -1)  {
                                    o = o[0] + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
                                }
                                else  {
                                    o += "E+" + (fakee - ee);
                                }
                                
                                o = o.replace(/\+-/, "-");
                            }
                            o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
                                return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
                            });
                        } else  {
                            o = val.toExponential(idx);
                        }
                        
                        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))  {
                            o = o.substr(0, o.length - 1) + "0" + o[o.length - 1];
                        }
                        
                        if (fmt.match(/E\-/) && o.match(/e\+/))  {
                            o = o.replace(/e\+/, "e");
                        }
                        
                        return o.replace("e", "E");
                    }
                    function write_num_int(type, fmt, val) {
                        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
                            var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
                            if (val >= 0)  {
                                return write_num_int('n', ffmt, val);
                            }
                            
                            return '(' + write_num_int('n', ffmt, -val) + ')';
                        }
                        if (fmt.charCodeAt(fmt.length - 1) === 44)  {
                            return write_num_cm2(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('%') !== -1)  {
                            return write_num_pct2(type, fmt, val);
                        }
                        
                        if (fmt.indexOf('E') !== -1)  {
                            return write_num_exp2(fmt, val);
                        }
                        
                        if (fmt.charCodeAt(0) === 36)  {
                            return "$" + write_num_int(type, fmt.substr(fmt[1] == ' ' ? 2 : 1), val);
                        }
                        
                        var o;
                        var r, ri, ff,
                            aval = Math.abs(val),
                            sign = val < 0 ? "-" : "";
                        if (fmt.match(/^00+$/))  {
                            return sign + pad0(aval, fmt.length);
                        }
                        
                        if (fmt.match(/^[#?]+$/)) {
                            o = ("" + val);
                            if (val === 0)  {
                                o = "";
                            }
                            
                            return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(frac1)) !== null)  {
                            return write_num_f2(r, aval, sign);
                        }
                        
                        if (fmt.match(/^#+0+$/) !== null)  {
                            return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
                        }
                        
                        if ((r = fmt.match(dec1)) !== null) {
                            o = ("" + val).replace(/^([^\.]+)$/, "$1." + r[1]).replace(/\.$/, "." + r[1]).replace(/\.(\d*)$/, function($$, $1) {
                                return "." + $1 + fill("0", r[1].length - $1.length);
                            });
                            return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
                        }
                        fmt = fmt.replace(/^#+([0.])/, "$1");
                        if ((r = fmt.match(/^(0*)\.(#*)$/)) !== null) {
                            return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
                        }
                        if ((r = fmt.match(/^#,##0(\.?)$/)) !== null)  {
                            return sign + commaify(("" + aval));
                        }
                        
                        if ((r = fmt.match(/^#,##0\.([#0]*0)$/)) !== null) {
                            return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(("" + val)) + "." + fill('0', r[1].length);
                        }
                        if ((r = fmt.match(/^#,#*,#0/)) !== null)  {
                            return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
                        }
                        
                        if ((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) !== null) {
                            o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
                            ri = 0;
                            return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
                                return ri < o.length ? o[ri++] : x === '0' ? '0' : "";
                            }));
                        }
                        if (fmt.match(phone) !== null) {
                            o = write_num_int(type, "##########", val);
                            return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
                        }
                        var oa = "";
                        if ((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(r[4].length, 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, false);
                            o = "" + sign;
                            oa = write_num("n", r[1], ff[1]);
                            if (oa[oa.length - 1] == " ")  {
                                oa = oa.substr(0, oa.length - 1) + "0";
                            }
                            
                            o += oa + r[2] + "/" + r[3];
                            oa = rpad_(ff[2], ri);
                            if (oa.length < r[4].length)  {
                                oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
                            }
                            
                            o += oa;
                            return o;
                        }
                        if ((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) !== null) {
                            ri = Math.min(Math.max(r[1].length, r[4].length), 7);
                            ff = frac(aval, Math.pow(10, ri) - 1, true);
                            return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
                        }
                        if ((r = fmt.match(/^[#0?]+$/)) !== null) {
                            o = "" + val;
                            if (fmt.length <= o.length)  {
                                return o;
                            }
                            
                            return hashq(fmt.substr(0, fmt.length - o.length)) + o;
                        }
                        if ((r = fmt.match(/^([#0]+)\.([#0]+)$/)) !== null) {
                            o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
                            ri = o.indexOf(".");
                            var lres = fmt.indexOf(".") - ri,
                                rres = fmt.length - o.length - lres;
                            return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
                        }
                        if ((r = fmt.match(/^00,000\.([#0]*0)$/)) !== null) {
                            return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
                                return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
                            }) + "." + pad0(0, r[1].length);
                        }
                        switch (fmt) {
                            case "#,###":
                                var x = commaify("" + aval);
                                return x !== "0" ? sign + x : "";
                            default:
                        }
                        throw new Error("unsupported format |" + fmt + "|");
                    }
                    return function write_num(type, fmt, val) {
                        return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
                    };
                })();
            function split_fmt(fmt) {
                var out = [];
                var in_str = false,
                    cc;
                for (var i = 0,
                    j = 0; i < fmt.length; ++i) switch ((cc = fmt.charCodeAt(i))) {
                    case 34:
                        /* '"' */
                        in_str = !in_str;
                        break;
                    case 95:
                    case 42:
                    case 92:
                        /* '_' '*' '\\' */
                        ++i;
                        break;
                    case 59:
                        /* ';' */
                        out[out.length] = fmt.substr(j, i - j);
                        j = i + 1;
                };
                out[out.length] = fmt.substr(j);
                if (in_str === true)  {
                    throw new Error("Format |" + fmt + "| unterminated string ");
                }
                
                return out;
            }
            SSF._split = split_fmt;
            var abstime = /\[[HhMmSs]*\]/;
            function eval_fmt(fmt, v, opts, flen) {
                var out = [],
                    o = "",
                    i = 0,
                    c = "",
                    lst = 't',
                    q, dt, j, cc;
                var hr = 'H';
                /* Tokenize */
                while (i < fmt.length) {
                    switch ((c = fmt[i])) {
                        case 'G':
                            /* General */
                            if (!isgeneral(fmt, i))  {
                                throw new Error('unrecognized character ' + c + ' in ' + fmt);
                            }
                            ;
                            out[out.length] = {
                                t: 'G',
                                v: 'General'
                            };
                            i += 7;
                            break;
                        case '"':
                            /* Literal text */
                            for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length; ) o += String.fromCharCode(cc);
                            out[out.length] = {
                                t: 't',
                                v: o
                            };
                            ++i;
                            break;
                        case '\\':
                            var w = fmt[++i],
                                t = (w === "(" || w === ")") ? w : 't';
                            out[out.length] = {
                                t: t,
                                v: w
                            };
                            ++i;
                            break;
                        case '_':
                            out[out.length] = {
                                t: 't',
                                v: " "
                            };
                            i += 2;
                            break;
                        case '@':
                            /* Text Placeholder */
                            out[out.length] = {
                                t: 'T',
                                v: v
                            };
                            ++i;
                            break;
                        case 'B':
                        case 'b':
                            if (fmt[i + 1] === "1" || fmt[i + 1] === "2") {
                                if (dt == null) {
                                    dt = parse_date_code(v, opts, fmt[i + 1] === "2");
                                    if (dt == null)  {
                                        return "";
                                    }
                                    
                                }
                                out[out.length] = {
                                    t: 'X',
                                    v: fmt.substr(i, 2)
                                };
                                lst = c;
                                i += 2;
                                break;
                            };
                        /* falls through */
                        case 'M':
                        case 'D':
                        case 'Y':
                        case 'H':
                        case 'S':
                        case 'E':
                            c = c.toLowerCase();
                        /* falls through */
                        case 'm':
                        case 'd':
                        case 'y':
                        case 'h':
                        case 's':
                        case 'e':
                        case 'g':
                            if (v < 0)  {
                                return "";
                            }
                            ;
                            if (dt == null) {
                                dt = parse_date_code(v, opts);
                                if (dt == null)  {
                                    return "";
                                }
                                
                            };
                            o = c;
                            while (++i < fmt.length && fmt[i].toLowerCase() === c) o += c;
                            if (c === 'm' && lst.toLowerCase() === 'h')  {
                                c = 'M';
                            }
                            ;
                            /* m = minute */
                            if (c === 'h')  {
                                c = hr;
                            }
                            ;
                            out[out.length] = {
                                t: c,
                                v: o
                            };
                            lst = c;
                            break;
                        case 'A':
                            q = {
                                t: c,
                                v: "A"
                            };
                            if (dt == null)  {
                                dt = parse_date_code(v, opts);
                            }
                            ;
                            if (fmt.substr(i, 3) === "A/P") {
                                if (dt != null)  {
                                    q.v = dt.H >= 12 ? "P" : "A";
                                }
                                
                                q.t = 'T';
                                hr = 'h';
                                i += 3;
                            } else if (fmt.substr(i, 5) === "AM/PM") {
                                if (dt != null)  {
                                    q.v = dt.H >= 12 ? "PM" : "AM";
                                }
                                
                                q.t = 'T';
                                i += 5;
                                hr = 'h';
                            } else {
                                q.t = "t";
                                ++i;
                            };
                            if (dt == null && q.t === 'T')  {
                                return "";
                            }
                            ;
                            out[out.length] = q;
                            lst = c;
                            break;
                        case '[':
                            o = c;
                            while (fmt[i++] !== ']' && i < fmt.length) o += fmt[i];
                            if (o.substr(-1) !== ']')  {
                                throw 'unterminated "[" block: |' + o + '|';
                            }
                            ;
                            if (o.match(abstime)) {
                                if (dt == null) {
                                    dt = parse_date_code(v, opts);
                                    if (dt == null)  {
                                        return "";
                                    }
                                    
                                }
                                out[out.length] = {
                                    t: 'Z',
                                    v: o.toLowerCase()
                                };
                            } else {
                                o = "";
                            };
                            break;
                        /* Numbers */
                        case '.':
                            if (dt != null) {
                                o = c;
                                while ((c = fmt[++i]) === "0") o += c;
                                out[out.length] = {
                                    t: 's',
                                    v: o
                                };
                                break;
                            };
                        /* falls through */
                        case '0':
                        case '#':
                            o = c;
                            while ("0#?.,E+-%".indexOf(c = fmt[++i]) > -1 || c == '\\' && fmt[i + 1] == "-" && "0#".indexOf(fmt[i + 2]) > -1) o += c;
                            out[out.length] = {
                                t: 'n',
                                v: o
                            };
                            break;
                        case '?':
                            o = c;
                            while (fmt[++i] === c) o += c;
                            q = {
                                t: c,
                                v: o
                            };
                            out[out.length] = q;
                            lst = c;
                            break;
                        case '*':
                            ++i;
                            if (fmt[i] == ' ' || fmt[i] == '*')  {
                                ++i;
                            }
                            ;
                            break;
                        // **
                        case '(':
                        case ')':
                            out[out.length] = {
                                t: (flen === 1 ? 't' : c),
                                v: c
                            };
                            ++i;
                            break;
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            o = c;
                            while ("0123456789".indexOf(fmt[++i]) > -1) o += fmt[i];
                            out[out.length] = {
                                t: 'D',
                                v: o
                            };
                            break;
                        case ' ':
                            out[out.length] = {
                                t: c,
                                v: c
                            };
                            ++i;
                            break;
                        default:
                            if (",$-+/():!^&'~{}<>=‚Ç¨acfijklopqrtuvwxz".indexOf(c) === -1)  {
                                throw new Error('unrecognized character ' + c + ' in ' + fmt);
                            }
                            ;
                            out[out.length] = {
                                t: 't',
                                v: c
                            };
                            ++i;
                            break;
                    }
                }
                var bt = 0,
                    ss0 = 0,
                    ssm;
                for (i = out.length - 1 , lst = 't'; i >= 0; --i) {
                    switch (out[i].t) {
                        case 'h':
                        case 'H':
                            out[i].t = hr;
                            lst = 'h';
                            if (bt < 1)  {
                                bt = 1;
                            }
                            ;
                            break;
                        case 's':
                            if ((ssm = out[i].v.match(/\.0+$/)))  {
                                ss0 = Math.max(ss0, ssm[0].length - 1);
                            }
                            ;
                            if (bt < 3)  {
                                bt = 3;
                            }
                            ;
                        /* falls through */
                        case 'd':
                        case 'y':
                        case 'M':
                        case 'e':
                            lst = out[i].t;
                            break;
                        case 'm':
                            if (lst === 's') {
                                out[i].t = 'M';
                                if (bt < 2)  {
                                    bt = 2;
                                }
                                
                            };
                            break;
                        case 'X':
                            if (out[i].v === "B2")  {
                                ;
                            }
                            ;
                            break;
                        case 'Z':
                            if (bt < 1 && out[i].v.match(/[Hh]/))  {
                                bt = 1;
                            }
                            ;
                            if (bt < 2 && out[i].v.match(/[Mm]/))  {
                                bt = 2;
                            }
                            ;
                            if (bt < 3 && out[i].v.match(/[Ss]/))  {
                                bt = 3;
                            }
                            ;
                    }
                }
                switch (bt) {
                    case 0:
                        break;
                    case 1:
                        if (dt.u >= 0.5) {
                            dt.u = 0;
                            ++dt.S;
                        };
                        if (dt.S >= 60) {
                            dt.S = 0;
                            ++dt.M;
                        };
                        if (dt.M >= 60) {
                            dt.M = 0;
                            ++dt.H;
                        };
                        break;
                    case 2:
                        if (dt.u >= 0.5) {
                            dt.u = 0;
                            ++dt.S;
                        };
                        if (dt.S >= 60) {
                            dt.S = 0;
                            ++dt.M;
                        };
                        break;
                }
                /* replace fields */
                var nstr = "",
                    jj;
                for (i = 0; i < out.length; ++i) {
                    switch (out[i].t) {
                        case 't':
                        case 'T':
                        case ' ':
                        case 'D':
                            break;
                        case 'X':
                            out[i] = undefined;
                            break;
                        case 'd':
                        case 'm':
                        case 'y':
                        case 'h':
                        case 'H':
                        case 'M':
                        case 's':
                        case 'e':
                        case 'b':
                        case 'Z':
                            out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
                            out[i].t = 't';
                            break;
                        case 'n':
                        case '(':
                        case '?':
                            jj = i + 1;
                            while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === '?' || out[jj + 1].t === "t" && out[jj + 1].v === '/') || out[i].t === '(' && (c === ' ' || c === 'n' || c === ')') || c === 't' && (out[jj].v === '/' || '$‚Ç¨'.indexOf(out[jj].v) > -1 || out[jj].v === ' ' && out[jj + 1] != null && out[jj + 1].t == '?'))) {
                                out[i].v += out[jj].v;
                                out[jj] = undefined;
                                ++jj;
                            };
                            nstr += out[i].v;
                            i = jj - 1;
                            break;
                        case 'G':
                            out[i].t = 't';
                            out[i].v = general_fmt(v, opts);
                            break;
                    }
                }
                var vv = "",
                    myv, ostr;
                if (nstr.length > 0) {
                    myv = (v < 0 && nstr.charCodeAt(0) === 45 ? -v : v);
                    /* '-' */
                    ostr = write_num(nstr.charCodeAt(0) === 40 ? '(' : 'n', nstr, myv);
                    /* '(' */
                    jj = ostr.length - 1;
                    var decpt = out.length;
                    for (i = 0; i < out.length; ++i) if (out[i] != null && out[i].v.indexOf(".") > -1) {
                        decpt = i;
                        break;
                    };
                    var lasti = out.length;
                    if (decpt === out.length && ostr.indexOf("E") === -1) {
                        for (i = out.length - 1; i >= 0; --i) {
                            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1)  {
                                
                                continue;
                            }
                            
                            if (jj >= out[i].v.length - 1) {
                                jj -= out[i].v.length;
                                out[i].v = ostr.substr(jj + 1, out[i].v.length);
                            } else if (jj < 0)  {
                                out[i].v = "";
                            }
                            else {
                                out[i].v = ostr.substr(0, jj + 1);
                                jj = -1;
                            }
                            out[i].t = 't';
                            lasti = i;
                        }
                        if (jj >= 0 && lasti < out.length)  {
                            out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
                        }
                        
                    } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
                        jj = ostr.indexOf(".") - 1;
                        for (i = decpt; i >= 0; --i) {
                            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1)  {
                                
                                continue;
                            }
                            
                            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
                            vv = out[i].v.substr(j + 1);
                            for (; j >= 0; --j) {
                                if (jj >= 0 && (out[i].v[j] === "0" || out[i].v[j] === "#"))  {
                                    vv = ostr[jj--] + vv;
                                }
                                
                            }
                            out[i].v = vv;
                            out[i].t = 't';
                            lasti = i;
                        }
                        if (jj >= 0 && lasti < out.length)  {
                            out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
                        }
                        
                        jj = ostr.indexOf(".") + 1;
                        for (i = decpt; i < out.length; ++i) {
                            if (out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt)  {
                                
                                continue;
                            }
                            
                            j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
                            vv = out[i].v.substr(0, j);
                            for (; j < out[i].v.length; ++j) {
                                if (jj < ostr.length)  {
                                    vv += ostr[jj++];
                                }
                                
                            }
                            out[i].v = vv;
                            out[i].t = 't';
                            lasti = i;
                        }
                    }
                }
                for (i = 0; i < out.length; ++i) if (out[i] != null && 'n(?'.indexOf(out[i].t) > -1) {
                    myv = (flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v);
                    out[i].v = write_num(out[i].t, out[i].v, myv);
                    out[i].t = 't';
                };
                var retval = "";
                for (i = 0; i !== out.length; ++i) if (out[i] != null)  {
                    retval += out[i].v;
                }
                ;
                return retval;
            }
            SSF._eval = eval_fmt;
            var cfregex = /\[[=<>]/;
            var cfregex2 = /\[([=<>]*)(-?\d+\.?\d*)\]/;
            function chkcond(v, rr) {
                if (rr == null)  {
                    return false;
                }
                
                var thresh = parseFloat(rr[2]);
                switch (rr[1]) {
                    case "=":
                        if (v == thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case ">":
                        if (v > thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case "<":
                        if (v < thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case "<>":
                        if (v != thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case ">=":
                        if (v >= thresh)  {
                            return true;
                        }
                        ;
                        break;
                    case "<=":
                        if (v <= thresh)  {
                            return true;
                        }
                        ;
                        break;
                }
                return false;
            }
            function choose_fmt(f, v) {
                var fmt = split_fmt(f);
                var l = fmt.length,
                    lat = fmt[l - 1].indexOf("@");
                if (l < 4 && lat > -1)  {
                    --l;
                }
                
                if (fmt.length > 4)  {
                    throw "cannot find right format for |" + fmt + "|";
                }
                
                if (typeof v !== "number")  {
                    return [
                        4,
                        fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"
                    ];
                }
                
                switch (fmt.length) {
                    case 1:
                        fmt = lat > -1 ? [
                            "General",
                            "General",
                            "General",
                            fmt[0]
                        ] : [
                            fmt[0],
                            fmt[0],
                            fmt[0],
                            "@"
                        ];
                        break;
                    case 2:
                        fmt = lat > -1 ? [
                            fmt[0],
                            fmt[0],
                            fmt[0],
                            fmt[1]
                        ] : [
                            fmt[0],
                            fmt[1],
                            fmt[0],
                            "@"
                        ];
                        break;
                    case 3:
                        fmt = lat > -1 ? [
                            fmt[0],
                            fmt[1],
                            fmt[0],
                            fmt[2]
                        ] : [
                            fmt[0],
                            fmt[1],
                            fmt[2],
                            "@"
                        ];
                        break;
                    case 4:
                        break;
                }
                var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
                if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1)  {
                    return [
                        l,
                        ff
                    ];
                }
                
                if (fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
                    var m1 = fmt[0].match(cfregex2);
                    var m2 = fmt[1].match(cfregex2);
                    return chkcond(v, m1) ? [
                        l,
                        fmt[0]
                    ] : chkcond(v, m2) ? [
                        l,
                        fmt[1]
                    ] : [
                        l,
                        fmt[m1 != null && m2 != null ? 2 : 1]
                    ];
                }
                return [
                    l,
                    ff
                ];
            }
            function format(fmt, v, o) {
                fixopts(o != null ? o : (o = []));
                var sfmt = "";
                switch (typeof fmt) {
                    case "string":
                        sfmt = fmt;
                        break;
                    case "number":
                        sfmt = (o.table != null ? o.table : table_fmt)[fmt];
                        break;
                }
                if (isgeneral(sfmt, 0))  {
                    return general_fmt(v, o);
                }
                
                var f = choose_fmt(sfmt, v);
                if (isgeneral(f[1]))  {
                    return general_fmt(v, o);
                }
                
                if (v === true)  {
                    v = "TRUE";
                }
                else if (v === false)  {
                    v = "FALSE";
                }
                else if (v === "" || v == null)  {
                    return "";
                }
                
                return eval_fmt(f[1], v, o, f[0]);
            }
            SSF._table = table_fmt;
            SSF.load = function load_entry(fmt, idx) {
                table_fmt[idx] = fmt;
            };
            SSF.format = format;
            SSF.get_table = function get_table() {
                return table_fmt;
            };
            SSF.load_table = function load_table(tbl) {
                for (var i = 0; i != 392; ++i) if (tbl[i] !== undefined)  {
                    SSF.load(tbl[i], i);
                }
                ;
            };
        };
    make_ssf(SSF);
    function isval(x) {
        return x !== undefined && x !== null;
    }
    function keys(o) {
        return Object.keys(o);
    }
    function evert_key(obj, key) {
        var o = [],
            K = keys(obj);
        for (var i = 0; i !== K.length; ++i) o[obj[K[i]][key]] = K[i];
        return o;
    }
    function evert(obj) {
        var o = [],
            K = keys(obj);
        for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
        return o;
    }
    function evert_num(obj) {
        var o = [],
            K = keys(obj);
        for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i], 10);
        return o;
    }
    function evert_arr(obj) {
        var o = [],
            K = keys(obj);
        for (var i = 0; i !== K.length; ++i) {
            if (o[obj[K[i]]] == null)  {
                o[obj[K[i]]] = [];
            }
            
            o[obj[K[i]]].push(K[i]);
        }
        return o;
    }
    /* TODO: date1904 logic */
    function datenum(v, date1904) {
        if (date1904)  {
            v += 1462;
        }
        
        var epoch = Date.parse(v);
        return (epoch + 2.2091616E12) / (24 * 60 * 60 * 1000);
    }
    function cc2str(arr) {
        var o = "";
        for (var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);
        return o;
    }
    var has_buf = (typeof Buffer !== 'undefined');
    function getdata(data) {
        if (!data)  {
            return null;
        }
        
        if (data.name.substr(-4) === ".bin") {
            if (data.data)  {
                return char_codes(data.data);
            }
            
            if (data.asNodeBuffer && has_buf)  {
                return data.asNodeBuffer();
            }
            
            if (data._data && data._data.getContent)  {
                return Array.prototype.slice.call(data._data.getContent());
            }
            
        } else {
            if (data.data)  {
                return data.name.substr(-4) !== ".bin" ? debom_xml(data.data) : char_codes(data.data);
            }
            
            if (data.asNodeBuffer && has_buf)  {
                return debom_xml(data.asNodeBuffer().toString('binary'));
            }
            
            if (data.asBinary)  {
                return debom_xml(data.asBinary());
            }
            
            if (data._data && data._data.getContent)  {
                return debom_xml(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
            }
            
        }
        return null;
    }
    function safegetzipfile(zip, file) {
        var f = file;
        if (zip.files[f])  {
            return zip.files[f];
        }
        
        f = file.toLowerCase();
        if (zip.files[f])  {
            return zip.files[f];
        }
        
        f = f.replace(/\//g, '\\');
        if (zip.files[f])  {
            return zip.files[f];
        }
        
        return null;
    }
    function getzipfile(zip, file) {
        var o = safegetzipfile(zip, file);
        if (o == null)  {
            throw new Error("Cannot find file " + file + " in zip");
        }
        
        return o;
    }
    function getzipdata(zip, file, safe) {
        if (!safe)  {
            return getdata(getzipfile(zip, file));
        }
        
        if (!file)  {
            return null;
        }
        
        try {
            return getzipdata(zip, file);
        } catch (e) {
            return null;
        }
    }
    var _fs, jszip;
    if (typeof JSZip !== 'undefined')  {
        jszip = JSZip;
    }
    
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            if (has_buf && typeof jszip === 'undefined')  {
                jszip = require('js' + 'zip');
            }
            
            if (typeof jszip === 'undefined')  {
                jszip = require('./js' + 'zip').JSZip;
            }
            
            _fs = require('f' + 's');
        }
    }
    var attregexg = /\b[\w:]+=["'][^"]*['"]/g;
    var tagregex = /<[^>]*>/g;
    var nsregex = /<\w*:/,
        nsregex2 = /<(\/?)\w+:/;
    function parsexmltag(tag, skip_root) {
        var z = [];
        var eq = 0,
            c = 0;
        for (; eq !== tag.length; ++eq) if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13)  {
            break;
        }
        ;
        if (!skip_root)  {
            z[0] = tag.substr(0, eq);
        }
        
        if (eq === tag.length)  {
            return z;
        }
        
        var m = tag.match(attregexg),
            j = 0,
            w = "",
            v = "",
            i = 0,
            q = "",
            cc = "";
        if (m)  {
            for (i = 0; i != m.length; ++i) {
                cc = m[i];
                for (c = 0; c != cc.length; ++c) if (cc.charCodeAt(c) === 61)  {
                    break;
                }
                ;
                q = cc.substr(0, c);
                v = cc.substring(c + 2, cc.length - 1);
                for (j = 0; j != q.length; ++j) if (q.charCodeAt(j) === 58)  {
                    break;
                }
                ;
                if (j === q.length)  {
                    z[q] = v;
                }
                else  {
                    z[(j === 5 && q.substr(0, 5) === "xmlns" ? "xmlns" : "") + q.substr(j + 1)] = v;
                }
                
            };
        }
        
        return z;
    }
    function strip_ns(x) {
        return x.replace(nsregex2, "<$1");
    }
    var encodings = {
            '&quot;': '"',
            '&apos;': "'",
            '&gt;': '>',
            '&lt;': '<',
            '&amp;': '&'
        };
    var rencoding = evert(encodings);
    var rencstr = "&<>'\"".split("");
    // TODO: CP remap (need to read file version to determine OS)
    var encregex = /&[a-z]*;/g,
        coderegex = /_x([\da-fA-F]+)_/g;
    function unescapexml(text) {
        var s = text + '';
        return s.replace(encregex, function($$) {
            return encodings[$$];
        }).replace(coderegex, function(m, c) {
            return String.fromCharCode(parseInt(c, 16));
        });
    }
    var decregex = /[&<>'"]/g,
        charegex = /[\u0000-\u0008\u000b-\u001f]/g;
    function escapexml(text) {
        var s = text + '';
        return s.replace(decregex, function(y) {
            return rencoding[y];
        }).replace(charegex, function(s) {
            return "_x" + ("000" + s.charCodeAt(0).toString(16)).substr(-4) + "_";
        });
    }
    function parsexmlbool(value, tag) {
        switch (value) {
            case '1':
            case 'true':
            case 'TRUE':
                return true;
            /* case '0': case 'false': case 'FALSE':*/
            default:
                return false;
        }
    }
    var utf8read = function utf8reada(orig) {
            var out = "",
                i = 0,
                c = 0,
                d = 0,
                e = 0,
                f = 0,
                w = 0;
            while (i < orig.length) {
                c = orig.charCodeAt(i++);
                if (c < 128) {
                    out += String.fromCharCode(c);
                    
                    continue;
                }
                d = orig.charCodeAt(i++);
                if (c > 191 && c < 224) {
                    out += String.fromCharCode(((c & 31) << 6) | (d & 63));
                    
                    continue;
                }
                e = orig.charCodeAt(i++);
                if (c < 240) {
                    out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63));
                    
                    continue;
                }
                f = orig.charCodeAt(i++);
                w = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63)) - 65536;
                out += String.fromCharCode(55296 + ((w >>> 10) & 1023));
                out += String.fromCharCode(56320 + (w & 1023));
            }
            return out;
        };
    if (has_buf) {
        var utf8readb = function utf8readb(data) {
                var out = new Buffer(2 * data.length),
                    w, i,
                    j = 1,
                    k = 0,
                    ww = 0,
                    c;
                for (i = 0; i < data.length; i += j) {
                    j = 1;
                    if ((c = data.charCodeAt(i)) < 128)  {
                        w = c;
                    }
                    else if (c < 224) {
                        w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
                        j = 2;
                    } else if (c < 240) {
                        w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
                        j = 3;
                    } else {
                        j = 4;
                        w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
                        w -= 65536;
                        ww = 55296 + ((w >>> 10) & 1023);
                        w = 56320 + (w & 1023);
                    }
                    if (ww !== 0) {
                        out[k++] = ww & 255;
                        out[k++] = ww >>> 8;
                        ww = 0;
                    }
                    out[k++] = w % 256;
                    out[k++] = w >>> 8;
                }
                out.length = k;
                return out.toString('ucs2');
            };
        var corpus = "foo bar baz√¢¬ò¬É√∞¬ü¬ç¬£";
        if (utf8read(corpus) == utf8readb(corpus))  {
            utf8read = utf8readb;
        }
        
        var utf8readc = function utf8readc(data) {
                return Buffer(data, 'binary').toString('utf8');
            };
        if (utf8read(corpus) == utf8readc(corpus))  {
            utf8read = utf8readc;
        }
        
    }
    // matches <foo>...</foo> extracts content
    var matchtag = (function() {
            var mtcache = {};
            return function matchtag(f, g) {
                var t = f + "|" + g;
                if (mtcache[t] !== undefined)  {
                    return mtcache[t];
                }
                
                return (mtcache[t] = new RegExp('<(?:\\w+:)?' + f + '(?: xml:space="preserve")?(?:[^>]*)>([^‚òÉ]*)</(?:\\w+:)?' + f + '>', (g || "")));
            };
        })();
    var vtregex = (function() {
            var vt_cache = {};
            return function vt_regex(bt) {
                if (vt_cache[bt] !== undefined)  {
                    return vt_cache[bt];
                }
                
                return (vt_cache[bt] = new RegExp("<vt:" + bt + ">(.*?)</vt:" + bt + ">", 'g'));
            };
        })();
    var vtvregex = /<\/?vt:variant>/g,
        vtmregex = /<vt:([^>]*)>(.*)</;
    function parseVector(data) {
        var h = parsexmltag(data);
        var matches = data.match(vtregex(h.baseType)) || [];
        if (matches.length != h.size)  {
            throw "unexpected vector length " + matches.length + " != " + h.size;
        }
        
        var res = [];
        matches.forEach(function(x) {
            var v = x.replace(vtvregex, "").match(vtmregex);
            res.push({
                v: v[2],
                t: v[1]
            });
        });
        return res;
    }
    var wtregex = /(^\s|\s$|\n)/;
    function writetag(f, g) {
        return '<' + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + '>' + g + '</' + f + '>';
    }
    function wxt_helper(h) {
        return keys(h).map(function(k) {
            return " " + k + '="' + h[k] + '"';
        }).join("");
    }
    function writextag(f, g, h) {
        return '<' + f + (isval(h) ? wxt_helper(h) : "") + (isval(g) ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';
    }
    function write_w3cdtf(d, t) {
        try {
            return d.toISOString().replace(/\.\d*/, "");
        } catch (e) {
            if (t)  {
                throw e;
            }
            
        }
    }
    function write_vt(s) {
        switch (typeof s) {
            case 'string':
                return writextag('vt:lpwstr', s);
            case 'number':
                return writextag((s | 0) == s ? 'vt:i4' : 'vt:r8', String(s));
            case 'boolean':
                return writextag('vt:bool', s ? 'true' : 'false');
        }
        if (s instanceof Date)  {
            return writextag('vt:filetime', write_w3cdtf(s));
        }
        
        throw new Error("Unable to serialize " + s);
    }
    var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
    var XMLNS = {
            'dc': 'http://purl.org/dc/elements/1.1/',
            'dcterms': 'http://purl.org/dc/terms/',
            'dcmitype': 'http://purl.org/dc/dcmitype/',
            'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
            'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
            'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
            'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
            'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
            'xsd': 'http://www.w3.org/2001/XMLSchema'
        };
    XMLNS.main = [
        'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
        'http://purl.oclc.org/ooxml/spreadsheetml/main',
        'http://schemas.microsoft.com/office/excel/2006/main',
        'http://schemas.microsoft.com/office/excel/2006/2'
    ];
    function readIEEE754(buf, idx, isLE, nl, ml) {
        if (isLE === undefined)  {
            isLE = true;
        }
        
        if (!nl)  {
            nl = 8;
        }
        
        if (!ml && nl === 8)  {
            ml = 52;
        }
        
        var e, m,
            el = nl * 8 - ml - 1,
            eMax = (1 << el) - 1,
            eBias = eMax >> 1;
        var bits = -7,
            d = isLE ? -1 : 1,
            i = isLE ? (nl - 1) : 0,
            s = buf[idx + i];
        i += d;
        e = s & ((1 << (-bits)) - 1);
        s >>>= (-bits);
        bits += el;
        for (; bits > 0; e = e * 256 + buf[idx + i] , i += d , bits -= 8){}
        m = e & ((1 << (-bits)) - 1);
        e >>>= (-bits);
        bits += ml;
        for (; bits > 0; m = m * 256 + buf[idx + i] , i += d , bits -= 8){}
        if (e === eMax)  {
            return m ? NaN : ((s ? -1 : 1) * Infinity);
        }
        else if (e === 0)  {
            e = 1 - eBias;
        }
        else {
            m = m + Math.pow(2, ml);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - ml);
    }
    var __toBuffer, ___toBuffer;
    __toBuffer = ___toBuffer = function toBuffer_(bufs) {
        var x = [];
        for (var i = 0; i < bufs[0].length; ++i) {
            x.push.apply(x, bufs[0][i]);
        }
        return x;
    };
    var __double, ___double;
    __double = ___double = function(b, idx) {
        return readIEEE754(b, idx);
    };
    var is_buf = function is_buf_a(a) {
            return Array.isArray(a);
        };
    if (has_buf) {
        __toBuffer = function(bufs) {
            return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);
        };
        __double = function double_(b, i) {
            if (Buffer.isBuffer(b))  {
                return b.readDoubleLE(i);
            }
            
            return ___double(b, i);
        };
        is_buf = function is_buf_b(a) {
            return Buffer.isBuffer(a) || Array.isArray(a);
        };
    }
    var __readUInt8 = function(b, idx) {
            return b[idx];
        };
    var __readUInt16LE = function(b, idx) {
            return b[idx + 1] * (1 << 8) + b[idx];
        };
    var __readInt16LE = function(b, idx) {
            var u = b[idx + 1] * (1 << 8) + b[idx];
            return (u < 32768) ? u : (65535 - u + 1) * -1;
        };
    var __readUInt32LE = function(b, idx) {
            return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
        };
    var __readInt32LE = function(b, idx) {
            return (b[idx + 3] << 24) | (b[idx + 2] << 16) | (b[idx + 1] << 8) | b[idx];
        };
    function ReadShift(size, t) {
        var o = "",
            oo = [],
            w, vv, i, loc;
        if (t === 'dbcs') {
            loc = this.l;
            if (has_buf && Buffer.isBuffer(this))  {
                o = this.slice(this.l, this.l + 2 * size).toString("utf16le");
            }
            else  {
                for (i = 0; i != size; ++i) {
                    o += String.fromCharCode(__readUInt16LE(this, loc));
                    loc += 2;
                };
            }
            
            size *= 2;
        } else  {
            switch (size) {
                case 1:
                    o = __readUInt8(this, this.l);
                    break;
                case 2:
                    o = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l);
                    break;
                case 4:
                    o = __readUInt32LE(this, this.l);
                    break;
                case 8:
                    if (t === 'f') {
                        o = __double(this, this.l);
                        break;
                    };
            };
        }
        
        this.l += size;
        return o;
    }
    function WriteShift(t, val, f) {
        var size, i;
        if (f === 'dbcs') {
            for (i = 0; i != val.length; ++i) this.writeUInt16LE(val.charCodeAt(i), this.l + 2 * i);
            size = 2 * val.length;
        } else  {
            switch (t) {
                case 1:
                    size = 1;
                    this[this.l] = val & 255;
                    break;
                case 3:
                    size = 3;
                    this[this.l + 2] = val & 255;
                    val >>>= 8;
                    this[this.l + 1] = val & 255;
                    val >>>= 8;
                    this[this.l] = val & 255;
                    break;
                case 4:
                    size = 4;
                    this.writeUInt32LE(val, this.l);
                    break;
                case 8:
                    size = 8;
                    if (f === 'f') {
                        this.writeDoubleLE(val, this.l);
                        break;
                    };
                /* falls through */
                case 16:
                    break;
                case -4:
                    size = 4;
                    this.writeInt32LE(val, this.l);
                    break;
            };
        }
        
        this.l += size;
        return this;
    }
    function prep_blob(blob, pos) {
        blob.l = pos;
        blob.read_shift = ReadShift;
        blob.write_shift = WriteShift;
    }
    function parsenoop(blob, length) {
        blob.l += length;
    }
    function writenoop(blob, length) {
        blob.l += length;
    }
    function new_buf(sz) {
        var o = has_buf ? new Buffer(sz) : new Array(sz);
        prep_blob(o, 0);
        return o;
    }
    /* [MS-XLSB] 2.1.4 Record */
    function recordhopper(data, cb, opts) {
        var tmpbyte, cntbyte, length;
        prep_blob(data, data.l || 0);
        while (data.l < data.length) {
            var RT = data.read_shift(1);
            if (RT & 128)  {
                RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
            }
            
            var R = RecordEnum[RT] || RecordEnum[65535];
            tmpbyte = data.read_shift(1);
            length = tmpbyte & 127;
            for (cntbyte = 1; cntbyte < 4 && (tmpbyte & 128); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 127) << (7 * cntbyte);
            var d = R.f(data, length, opts);
            if (cb(d, R, RT))  {
                return;
            }
            
        }
    }
    /* control buffer usage for fixed-length buffers */
    function buf_array() {
        var bufs = [],
            blksz = 2048;
        var newblk = function ba_newblk(sz) {
                var o = new_buf(sz);
                prep_blob(o, 0);
                return o;
            };
        var curbuf = newblk(blksz);
        var endbuf = function ba_endbuf() {
                curbuf.length = curbuf.l;
                if (curbuf.length > 0)  {
                    bufs.push(curbuf);
                }
                
                curbuf = null;
            };
        var next = function ba_next(sz) {
                if (sz < curbuf.length - curbuf.l)  {
                    return curbuf;
                }
                
                endbuf();
                return (curbuf = newblk(Math.max(sz + 1, blksz)));
            };
        var end = function ba_end() {
                endbuf();
                return __toBuffer([
                    bufs
                ]);
            };
        var push = function ba_push(buf) {
                endbuf();
                curbuf = buf;
                next(blksz);
            };
        return {
            next: next,
            push: push,
            end: end,
            _bufs: bufs
        };
    }
    function write_record(ba, type, payload, length) {
        var t = evert_RE[type],
            l;
        if (!length)  {
            length = RecordEnum[t].p || (payload || []).length || 0;
        }
        
        l = 1 + (t >= 128 ? 1 : 0) + 1 + length;
        if (length >= 128)  {
            ++l;
        }
        
        if (length >= 16384)  {
            ++l;
        }
        
        if (length >= 2097152)  {
            ++l;
        }
        
        var o = ba.next(l);
        if (t <= 127)  {
            o.write_shift(1, t);
        }
        else {
            o.write_shift(1, (t & 127) + 128);
            o.write_shift(1, (t >> 7));
        }
        for (var i = 0; i != 4; ++i) {
            if (length >= 128) {
                o.write_shift(1, (length & 127) + 128);
                length >>= 7;
            } else {
                o.write_shift(1, length);
                break;
            }
        }
        if (length > 0 && is_buf(payload))  {
            ba.push(payload);
        }
        
    }
    /* [MS-XLSB] 2.5.143 */
    function parse_StrRun(data, length) {
        return {
            ich: data.read_shift(2),
            ifnt: data.read_shift(2)
        };
    }
    /* [MS-XLSB] 2.1.7.121 */
    function parse_RichStr(data, length) {
        var start = data.l;
        var flags = data.read_shift(1);
        var str = parse_XLWideString(data);
        var rgsStrRun = [];
        var z = {
                t: str,
                h: str
            };
        if ((flags & 1) !== 0) {
            /* fRichStr */
            /* TODO: formatted string */
            var dwSizeStrRun = data.read_shift(4);
            for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
            z.r = rgsStrRun;
        } else  {
            z.r = "<t>" + escapexml(str) + "</t>";
        }
        
        if ((flags & 2) !== 0) {}
        /* fExtStr */
        /* TODO: phonetic string */
        data.l = start + length;
        return z;
    }
    function write_RichStr(str, o) {
        /* TODO: formatted string */
        if (o == null)  {
            o = new_buf(5 + 2 * str.t.length);
        }
        
        o.write_shift(1, 0);
        write_XLWideString(str.t, o);
        return o;
    }
    /* [MS-XLSB] 2.5.9 */
    function parse_Cell(data) {
        var col = data.read_shift(4);
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        var fPhShow = data.read_shift(1);
        return {
            c: col,
            iStyleRef: iStyleRef
        };
    }
    function write_Cell(cell, o) {
        if (o == null)  {
            o = new_buf(8);
        }
        
        o.write_shift(-4, cell.c);
        o.write_shift(3, cell.iStyleRef === undefined ? cell.iStyleRef : cell.s);
        o.write_shift(1, 0);
        /* fPhShow */
        return o;
    }
    /* [MS-XLSB] 2.5.21 */
    function parse_CodeName(data, length) {
        return parse_XLWideString(data, length);
    }
    /* [MS-XLSB] 2.5.166 */
    function parse_XLNullableWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 || cchCharacters === 4.294967295E9 ? "" : data.read_shift(cchCharacters, 'dbcs');
    }
    function write_XLNullableWideString(data, o) {
        if (!o)  {
            o = new_buf(127);
        }
        
        o.write_shift(4, data.length > 0 ? data.length : 4.294967295E9);
        if (data.length > 0)  {
            o.write_shift(0, data, 'dbcs');
        }
        
        return o;
    }
    /* [MS-XLSB] 2.5.168 */
    function parse_XLWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
    }
    function write_XLWideString(data, o) {
        if (o == null)  {
            o = new_buf(4 + 2 * data.length);
        }
        
        o.write_shift(4, data.length);
        if (data.length > 0)  {
            o.write_shift(0, data, 'dbcs');
        }
        
        return o;
    }
    /* [MS-XLSB] 2.5.114 */
    var parse_RelID = parse_XLNullableWideString;
    var write_RelID = write_XLNullableWideString;
    /* [MS-XLSB] 2.5.122 */
    function parse_RkNumber(data) {
        var b = data.slice(data.l, data.l + 4);
        var fX100 = b[0] & 1,
            fInt = b[0] & 2;
        data.l += 4;
        b[0] &= 252;
        var RK = fInt === 0 ? __double([
                0,
                0,
                0,
                0,
                b[0],
                b[1],
                b[2],
                b[3]
            ], 0) : __readInt32LE(b, 0) >> 2;
        return fX100 ? RK / 100 : RK;
    }
    /* [MS-XLSB] 2.5.153 */
    function parse_UncheckedRfX(data) {
        var cell = {
                s: {},
                e: {}
            };
        cell.s.r = data.read_shift(4);
        cell.e.r = data.read_shift(4);
        cell.s.c = data.read_shift(4);
        cell.e.c = data.read_shift(4);
        return cell;
    }
    function write_UncheckedRfX(r, o) {
        if (!o)  {
            o = new_buf(16);
        }
        
        o.write_shift(4, r.s.r);
        o.write_shift(4, r.e.r);
        o.write_shift(4, r.s.c);
        o.write_shift(4, r.e.c);
        return o;
    }
    /* [MS-XLSB] 2.5.171 */
    function parse_Xnum(data, length) {
        return data.read_shift(8, 'f');
    }
    function write_Xnum(data, o) {
        return (o || new_buf(8)).write_shift(8, 'f', data);
    }
    /* [MS-XLSB] 2.5.198.2 */
    var BErr = {
            0: "#NULL!",
            7: "#DIV/0!",
            15: "#VALUE!",
            23: "#REF!",
            29: "#NAME?",
            36: "#NUM!",
            42: "#N/A",
            43: "#GETTING_DATA",
            255: "#WTF?"
        };
    var RBErr = evert_num(BErr);
    /* [MS-XLSB] 2.4.321 BrtColor */
    function parse_BrtColor(data, length) {
        var out = {};
        var d = data.read_shift(1);
        out.fValidRGB = d & 1;
        out.xColorType = d >>> 1;
        out.index = data.read_shift(1);
        out.nTintAndShade = data.read_shift(2, 'i');
        out.bRed = data.read_shift(1);
        out.bGreen = data.read_shift(1);
        out.bBlue = data.read_shift(1);
        out.bAlpha = data.read_shift(1);
    }
    /* [MS-XLSB] 2.5.52 */
    function parse_FontFlags(data, length) {
        var d = data.read_shift(1);
        data.l++;
        var out = {
                fItalic: d & 2,
                fStrikeout: d & 8,
                fOutline: d & 16,
                fShadow: d & 32,
                fCondense: d & 64,
                fExtend: d & 128
            };
        return out;
    }
    /* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */
    /* 12.3 Part Summary <SpreadsheetML> */
    /* 14.2 Part Summary <DrawingML> */
    /* [MS-XLSX] 2.1 Part Enumerations */
    /* [MS-XLSB] 2.1.7 Part Enumeration */
    var ct2type = {
            /* Workbook */
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
            /* Worksheet */
            "application/vnd.ms-excel.binIndexWs": "TODO",
            /* Binary Index */
            /* Chartsheet */
            "application/vnd.ms-excel.chartsheet": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "TODO",
            /* Dialogsheet */
            "application/vnd.ms-excel.dialogsheet": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "TODO",
            /* Macrosheet */
            "application/vnd.ms-excel.macrosheet": "TODO",
            "application/vnd.ms-excel.macrosheet+xml": "TODO",
            "application/vnd.ms-excel.intlmacrosheet": "TODO",
            "application/vnd.ms-excel.binIndexMs": "TODO",
            /* Binary Index */
            /* File Properties */
            "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
            "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
            "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
            /* Custom Data Properties */
            "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
            /* Comments */
            "application/vnd.ms-excel.comments": "comments",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
            /* PivotTable */
            "application/vnd.ms-excel.pivotTable": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
            /* Calculation Chain */
            "application/vnd.ms-excel.calcChain": "calcchains",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
            /* Printer Settings */
            "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
            /* ActiveX */
            "application/vnd.ms-office.activeX": "TODO",
            "application/vnd.ms-office.activeX+xml": "TODO",
            /* Custom Toolbars */
            "application/vnd.ms-excel.attachedToolbars": "TODO",
            /* External Data Connections */
            "application/vnd.ms-excel.connections": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
            /* External Links */
            "application/vnd.ms-excel.externalLink": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "TODO",
            /* Metadata */
            "application/vnd.ms-excel.sheetMetadata": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "TODO",
            /* PivotCache */
            "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
            "application/vnd.ms-excel.pivotCacheRecords": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
            /* Query Table */
            "application/vnd.ms-excel.queryTable": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
            /* Shared Workbook */
            "application/vnd.ms-excel.userNames": "TODO",
            "application/vnd.ms-excel.revisionHeaders": "TODO",
            "application/vnd.ms-excel.revisionLog": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
            /* Single Cell Table */
            "application/vnd.ms-excel.tableSingleCells": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
            /* Slicer */
            "application/vnd.ms-excel.slicer": "TODO",
            "application/vnd.ms-excel.slicerCache": "TODO",
            "application/vnd.ms-excel.slicer+xml": "TODO",
            "application/vnd.ms-excel.slicerCache+xml": "TODO",
            /* Sort Map */
            "application/vnd.ms-excel.wsSortMap": "TODO",
            /* Table */
            "application/vnd.ms-excel.table": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
            /* Themes */
            "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
            /* Timeline */
            "application/vnd.ms-excel.Timeline+xml": "TODO",
            /* verify */
            "application/vnd.ms-excel.TimelineCache+xml": "TODO",
            /* verify */
            /* VBA */
            "application/vnd.ms-office.vbaProject": "vba",
            "application/vnd.ms-office.vbaProjectSignature": "vba",
            /* Volatile Dependencies */
            "application/vnd.ms-office.volatileDependencies": "TODO",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
            /* Control Properties */
            "application/vnd.ms-excel.controlproperties+xml": "TODO",
            /* Data Model */
            "application/vnd.openxmlformats-officedocument.model+data": "TODO",
            /* Survey */
            "application/vnd.ms-excel.Survey+xml": "TODO",
            /* Drawing */
            "application/vnd.openxmlformats-officedocument.drawing+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
            "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
            /* VML */
            "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
            "application/vnd.openxmlformats-package.relationships+xml": "rels",
            "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
            "sheet": "js"
        };
    var CT_LIST = (function() {
            var o = {
                    workbooks: {
                        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
                        xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
                        xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
                        xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
                    },
                    strs: {
                        /* Shared Strings */
                        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
                        xlsb: "application/vnd.ms-excel.sharedStrings"
                    },
                    sheets: {
                        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
                        xlsb: "application/vnd.ms-excel.worksheet"
                    },
                    styles: {
                        /* Styles */
                        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
                        xlsb: "application/vnd.ms-excel.styles"
                    }
                };
            keys(o).forEach(function(k) {
                if (!o[k].xlsm)  {
                    o[k].xlsm = o[k].xlsx;
                }
                
            });
            keys(o).forEach(function(k) {
                keys(o[k]).forEach(function(v) {
                    ct2type[o[k][v]] = k;
                });
            });
            return o;
        })();
    var type2ct = evert_arr(ct2type);
    XMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';
    function parse_ct(data, opts) {
        var ctext = {};
        if (!data || !data.match)  {
            return data;
        }
        
        var ct = {
                workbooks: [],
                sheets: [],
                calcchains: [],
                themes: [],
                styles: [],
                coreprops: [],
                extprops: [],
                custprops: [],
                strs: [],
                comments: [],
                vba: [],
                TODO: [],
                rels: [],
                xmlns: ""
            };
        (data.match(tagregex) || []).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0].replace(nsregex, "<")) {
                case '<?xml':
                    break;
                case '<Types':
                    ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/) || [
                        "",
                        ""
                    ])[1]];
                    break;
                case '<Default':
                    ctext[y.Extension] = y.ContentType;
                    break;
                case '<Override':
                    if (ct[ct2type[y.ContentType]] !== undefined)  {
                        ct[ct2type[y.ContentType]].push(y.PartName);
                    }
                    else if (opts.WTF)  {
                        console.error(y);
                    }
                    ;
                    break;
            }
        });
        if (ct.xmlns !== XMLNS.CT)  {
            throw new Error("Unknown Namespace: " + ct.xmlns);
        }
        
        ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
        ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
        ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
        ct.defaults = ctext;
        delete ct.calcchains;
        return ct;
    }
    var CTYPE_XML_ROOT = writextag('Types', null, {
            'xmlns': XMLNS.CT,
            'xmlns:xsd': XMLNS.xsd,
            'xmlns:xsi': XMLNS.xsi
        });
    var CTYPE_DEFAULTS = [
            [
                'xml',
                'application/xml'
            ],
            [
                'bin',
                'application/vnd.ms-excel.sheet.binary.macroEnabled.main'
            ],
            [
                'rels',
                type2ct.rels[0]
            ]
        ].map(function(x) {
            return writextag('Default', null, {
                'Extension': x[0],
                'ContentType': x[1]
            });
        });
    function write_ct(ct, opts) {
        var o = [],
            v;
        o[o.length] = (XML_HEADER);
        o[o.length] = (CTYPE_XML_ROOT);
        o = o.concat(CTYPE_DEFAULTS);
        var f1 = function(w) {
                if (ct[w] && ct[w].length > 0) {
                    v = ct[w][0];
                    o[o.length] = (writextag('Override', null, {
                        'PartName': (v[0] == '/' ? "" : "/") + v,
                        'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
                    }));
                }
            };
        var f2 = function(w) {
                ct[w].forEach(function(v) {
                    o[o.length] = (writextag('Override', null, {
                        'PartName': (v[0] == '/' ? "" : "/") + v,
                        'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
                    }));
                });
            };
        var f3 = function(t) {
                (ct[t] || []).forEach(function(v) {
                    o[o.length] = (writextag('Override', null, {
                        'PartName': (v[0] == '/' ? "" : "/") + v,
                        'ContentType': type2ct[t][0]
                    }));
                });
            };
        f1('workbooks');
        f2('sheets');
        f3('themes');
        [
            'strs',
            'styles'
        ].forEach(f1);
        [
            'coreprops',
            'extprops',
            'custprops'
        ].forEach(f3);
        if (o.length > 2) {
            o[o.length] = ('</Types>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* 9.3.2 OPC Relationships Markup */
    var RELS = {
            WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
            SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument"
        };
    function parse_rels(data, currentFilePath) {
        if (!data)  {
            return data;
        }
        
        if (currentFilePath.charAt(0) !== '/') {
            currentFilePath = '/' + currentFilePath;
        }
        var rels = {};
        var hash = {};
        var resolveRelativePathIntoAbsolute = function(to) {
                var toksFrom = currentFilePath.split('/');
                toksFrom.pop();
                // folder path
                var toksTo = to.split('/');
                var reversed = [];
                while (toksTo.length !== 0) {
                    var tokTo = toksTo.shift();
                    if (tokTo === '..') {
                        toksFrom.pop();
                    } else if (tokTo !== '.') {
                        toksFrom.push(tokTo);
                    }
                }
                return toksFrom.join('/');
            };
        data.match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            /* 9.3.2.2 OPC_Relationships */
            if (y[0] === '<Relationship') {
                var rel = {};
                rel.Type = y.Type;
                rel.Target = y.Target;
                rel.Id = y.Id;
                rel.TargetMode = y.TargetMode;
                var canonictarget = y.TargetMode === 'External' ? y.Target : resolveRelativePathIntoAbsolute(y.Target);
                rels[canonictarget] = rel;
                hash[y.Id] = rel;
            }
        });
        rels["!id"] = hash;
        return rels;
    }
    XMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';
    var RELS_ROOT = writextag('Relationships', null, {
            //'xmlns:ns0': XMLNS.RELS,
            'xmlns': XMLNS.RELS
        });
    /* TODO */
    function write_rels(rels) {
        var o = [];
        o[o.length] = (XML_HEADER);
        o[o.length] = (RELS_ROOT);
        keys(rels['!id']).forEach(function(rid) {
            var rel = rels['!id'][rid];
            o[o.length] = (writextag('Relationship', null, rel));
        });
        if (o.length > 2) {
            o[o.length] = ('</Relationships>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* ECMA-376 Part II 11.1 Core Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var CORE_PROPS = [
            [
                "cp:category",
                "Category"
            ],
            [
                "cp:contentStatus",
                "ContentStatus"
            ],
            [
                "cp:keywords",
                "Keywords"
            ],
            [
                "cp:lastModifiedBy",
                "LastAuthor"
            ],
            [
                "cp:lastPrinted",
                "LastPrinted"
            ],
            [
                "cp:revision",
                "RevNumber"
            ],
            [
                "cp:version",
                "Version"
            ],
            [
                "dc:creator",
                "Author"
            ],
            [
                "dc:description",
                "Comments"
            ],
            [
                "dc:identifier",
                "Identifier"
            ],
            [
                "dc:language",
                "Language"
            ],
            [
                "dc:subject",
                "Subject"
            ],
            [
                "dc:title",
                "Title"
            ],
            [
                "dcterms:created",
                "CreatedDate",
                'date'
            ],
            [
                "dcterms:modified",
                "ModifiedDate",
                'date'
            ]
        ];
    XMLNS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties";
    RELS.CORE_PROPS = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';
    var CORE_PROPS_REGEX = (function() {
            var r = new Array(CORE_PROPS.length);
            for (var i = 0; i < CORE_PROPS.length; ++i) {
                var f = CORE_PROPS[i];
                var g = "(?:" + f[0].substr(0, f[0].indexOf(":")) + ":)" + f[0].substr(f[0].indexOf(":") + 1);
                r[i] = new RegExp("<" + g + "[^>]*>(.*)</" + g + ">");
            }
            return r;
        })();
    function parse_core_props(data) {
        var p = {};
        for (var i = 0; i < CORE_PROPS.length; ++i) {
            var f = CORE_PROPS[i],
                cur = data.match(CORE_PROPS_REGEX[i]);
            if (cur != null && cur.length > 0)  {
                p[f[1]] = cur[1];
            }
            
            if (f[2] === 'date' && p[f[1]])  {
                p[f[1]] = new Date(p[f[1]]);
            }
            
        }
        return p;
    }
    var CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {
            //'xmlns': XMLNS.CORE_PROPS,
            'xmlns:cp': XMLNS.CORE_PROPS,
            'xmlns:dc': XMLNS.dc,
            'xmlns:dcterms': XMLNS.dcterms,
            'xmlns:dcmitype': XMLNS.dcmitype,
            'xmlns:xsi': XMLNS.xsi
        });
    function cp_doit(f, g, h, o, p) {
        if (p[f] != null || g == null || g === "")  {
            return;
        }
        
        p[f] = g;
        o[o.length] = (h ? writextag(f, g, h) : writetag(f, g));
    }
    function write_core_props(cp, opts) {
        var o = [
                XML_HEADER,
                CORE_PROPS_XML_ROOT
            ],
            p = {};
        if (!cp)  {
            return o.join("");
        }
        
        if (cp.CreatedDate != null)  {
            cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {
                "xsi:type": "dcterms:W3CDTF"
            }, o, p);
        }
        
        if (cp.ModifiedDate != null)  {
            cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {
                "xsi:type": "dcterms:W3CDTF"
            }, o, p);
        }
        
        for (var i = 0; i != CORE_PROPS.length; ++i) {
            var f = CORE_PROPS[i];
            cp_doit(f[0], cp[f[1]], null, o, p);
        }
        if (o.length > 2) {
            o[o.length] = ('</cp:coreProperties>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* 15.2.12.3 Extended File Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var EXT_PROPS = [
            [
                "Application",
                "Application",
                "string"
            ],
            [
                "AppVersion",
                "AppVersion",
                "string"
            ],
            [
                "Company",
                "Company",
                "string"
            ],
            [
                "DocSecurity",
                "DocSecurity",
                "string"
            ],
            [
                "Manager",
                "Manager",
                "string"
            ],
            [
                "HyperlinksChanged",
                "HyperlinksChanged",
                "bool"
            ],
            [
                "SharedDoc",
                "SharedDoc",
                "bool"
            ],
            [
                "LinksUpToDate",
                "LinksUpToDate",
                "bool"
            ],
            [
                "ScaleCrop",
                "ScaleCrop",
                "bool"
            ],
            [
                "HeadingPairs",
                "HeadingPairs",
                "raw"
            ],
            [
                "TitlesOfParts",
                "TitlesOfParts",
                "raw"
            ]
        ];
    XMLNS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties";
    RELS.EXT_PROPS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';
    function parse_ext_props(data, p) {
        var q = {};
        if (!p)  {
            p = {};
        }
        
        EXT_PROPS.forEach(function(f) {
            switch (f[2]) {
                case "string":
                    p[f[1]] = (data.match(matchtag(f[0])) || [])[1];
                    break;
                case "bool":
                    p[f[1]] = (data.match(matchtag(f[0])) || [])[1] === "true";
                    break;
                case "raw":
                    var cur = data.match(new RegExp("<" + f[0] + "[^>]*>(.*)</" + f[0] + ">"));
                    if (cur && cur.length > 0)  {
                        q[f[1]] = cur[1];
                    }
                    ;
                    break;
            }
        });
        if (q.HeadingPairs && q.TitlesOfParts) {
            var v = parseVector(q.HeadingPairs);
            var j = 0,
                widx = 0;
            for (var i = 0; i !== v.length; ++i) {
                switch (v[i].v) {
                    case "Worksheets":
                        widx = j;
                        p.Worksheets = +(v[++i].v);
                        break;
                    case "Named Ranges":
                        ++i;
                        break;
                }
            }
            // TODO: Handle Named Ranges
            var parts = parseVector(q.TitlesOfParts).map(function(x) {
                    return utf8read(x.v);
                });
            p.SheetNames = parts.slice(widx, widx + p.Worksheets);
        }
        return p;
    }
    var EXT_PROPS_XML_ROOT = writextag('Properties', null, {
            'xmlns': XMLNS.EXT_PROPS,
            'xmlns:vt': XMLNS.vt
        });
    function write_ext_props(cp, opts) {
        var o = [],
            p = {},
            W = writextag;
        if (!cp)  {
            cp = {};
        }
        
        cp.Application = "SheetJS";
        o[o.length] = (XML_HEADER);
        o[o.length] = (EXT_PROPS_XML_ROOT);
        EXT_PROPS.forEach(function(f) {
            if (cp[f[1]] === undefined)  {
                return;
            }
            
            var v;
            switch (f[2]) {
                case 'string':
                    v = cp[f[1]];
                    break;
                case 'bool':
                    v = cp[f[1]] ? 'true' : 'false';
                    break;
            }
            if (v !== undefined)  {
                o[o.length] = (W(f[0], v));
            }
            
        });
        /* TODO: HeadingPairs, TitlesOfParts */
        o[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>') + W('vt:variant', W('vt:i4', String(cp.Worksheets))), {
            size: 2,
            baseType: "variant"
        })));
        o[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) {
            return "<vt:lpstr>" + s + "</vt:lpstr>";
        }).join(""), {
            size: cp.Worksheets,
            baseType: "lpstr"
        })));
        if (o.length > 2) {
            o[o.length] = ('</Properties>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* 15.2.12.2 Custom File Properties Part */
    XMLNS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties";
    RELS.CUST_PROPS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';
    var custregex = /<[^>]+>[^<]*/g;
    function parse_cust_props(data, opts) {
        var p = {},
            name;
        var m = data.match(custregex);
        if (m)  {
            for (var i = 0; i != m.length; ++i) {
                var x = m[i],
                    y = parsexmltag(x);
                switch (y[0]) {
                    case '<?xml':
                        break;
                    case '<Properties':
                        if (y.xmlns !== XMLNS.CUST_PROPS)  {
                            throw "unrecognized xmlns " + y.xmlns;
                        }
                        ;
                        if (y.xmlnsvt && y.xmlnsvt !== XMLNS.vt)  {
                            throw "unrecognized vt " + y.xmlnsvt;
                        }
                        ;
                        break;
                    case '<property':
                        name = y.name;
                        break;
                    case '</property>':
                        name = null;
                        break;
                    default:
                        if (x.indexOf('<vt:') === 0) {
                            var toks = x.split('>');
                            var type = toks[0].substring(4),
                                text = toks[1];
                            /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */
                            switch (type) {
                                case 'lpstr':
                                case 'lpwstr':
                                case 'bstr':
                                case 'lpwstr':
                                    p[name] = unescapexml(text);
                                    break;
                                case 'bool':
                                    p[name] = parsexmlbool(text, '<vt:bool>');
                                    break;
                                case 'i1':
                                case 'i2':
                                case 'i4':
                                case 'i8':
                                case 'int':
                                case 'uint':
                                    p[name] = parseInt(text, 10);
                                    break;
                                case 'r4':
                                case 'r8':
                                case 'decimal':
                                    p[name] = parseFloat(text);
                                    break;
                                case 'filetime':
                                case 'date':
                                    p[name] = new Date(text);
                                    break;
                                case 'cy':
                                case 'error':
                                    p[name] = unescapexml(text);
                                    break;
                                default:
                                    if (typeof console !== 'undefined')  {
                                        console.warn('Unexpected', x, type, toks);
                                    }
                                    ;
                            }
                        } else if (x.substr(0, 2) === "</") {} else if (opts.WTF)  {
                            throw new Error(x);
                        }
                        ;
                }
            };
        }
        
        return p;
    }
    var CUST_PROPS_XML_ROOT = writextag('Properties', null, {
            'xmlns': XMLNS.CUST_PROPS,
            'xmlns:vt': XMLNS.vt
        });
    function write_cust_props(cp, opts) {
        var o = [
                XML_HEADER,
                CUST_PROPS_XML_ROOT
            ];
        if (!cp)  {
            return o.join("");
        }
        
        var pid = 1;
        keys(cp).forEach(function custprop(k) {
            ++pid;
            o[o.length] = (writextag('property', write_vt(cp[k]), {
                'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',
                'pid': pid,
                'name': k
            }));
        });
        if (o.length > 2) {
            o[o.length] = '</Properties>';
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* 18.4.1 charset to codepage mapping */
    var CS2CP = {
            0: 1252,
            /* ANSI */
            1: 65001,
            /* DEFAULT */
            2: 65001,
            /* SYMBOL */
            77: 10000,
            /* MAC */
            128: 932,
            /* SHIFTJIS */
            129: 949,
            /* HANGUL */
            130: 1361,
            /* JOHAB */
            134: 936,
            /* GB2312 */
            136: 950,
            /* CHINESEBIG5 */
            161: 1253,
            /* GREEK */
            162: 1254,
            /* TURKISH */
            163: 1258,
            /* VIETNAMESE */
            177: 1255,
            /* HEBREW */
            178: 1256,
            /* ARABIC */
            186: 1257,
            /* BALTIC */
            204: 1251,
            /* RUSSIAN */
            222: 874,
            /* THAI */
            238: 1250,
            /* EASTEUROPE */
            255: 1252,
            /* OEM */
            69: 6969
        };
    /* MISC */
    /* Parse a list of <r> tags */
    var parse_rs = (function parse_rs_factory() {
            var tregex = matchtag("t"),
                rpregex = matchtag("rPr"),
                rregex = /<r>/g,
                rend = /<\/r>/,
                nlregex = /\r\n/g;
            /* 18.4.7 rPr CT_RPrElt */
            var parse_rpr = function parse_rpr(rpr, intro, outro) {
                    var font = {},
                        cp = 65001;
                    var m = rpr.match(tagregex),
                        i = 0;
                    if (m)  {
                        for (; i != m.length; ++i) {
                            var y = parsexmltag(m[i]);
                            switch (y[0]) {
                                /* 18.8.12 condense CT_BooleanProperty */
                                /* ** not required . */
                                case '<condense':
                                    break;
                                /* 18.8.17 extend CT_BooleanProperty */
                                /* ** not required . */
                                case '<extend':
                                    break;
                                /* 18.8.36 shadow CT_BooleanProperty */
                                /* ** not required . */
                                case '<shadow':
                                /* falls through */
                                case '<shadow/>':
                                    break;
                                /* 18.4.1 charset CT_IntProperty TODO */
                                case '<charset':
                                    if (y.val == '1')  {
                                        break;
                                    }
                                    ;
                                    cp = CS2CP[parseInt(y.val, 10)];
                                    break;
                                /* 18.4.2 outline CT_BooleanProperty TODO */
                                case '<outline':
                                /* falls through */
                                case '<outline/>':
                                    break;
                                /* 18.4.5 rFont CT_FontName */
                                case '<rFont':
                                    font.name = y.val;
                                    break;
                                /* 18.4.11 sz CT_FontSize */
                                case '<sz':
                                    font.sz = y.val;
                                    break;
                                /* 18.4.10 strike CT_BooleanProperty */
                                case '<strike':
                                    if (!y.val)  {
                                        break;
                                    }
                                    ;
                                /* falls through */
                                case '<strike/>':
                                    font.strike = 1;
                                    break;
                                case '</strike>':
                                    break;
                                /* 18.4.13 u CT_UnderlineProperty */
                                case '<u':
                                    if (!y.val)  {
                                        break;
                                    }
                                    ;
                                /* falls through */
                                case '<u/>':
                                    font.u = 1;
                                    break;
                                case '</u>':
                                    break;
                                /* 18.8.2 b */
                                case '<b':
                                    if (!y.val)  {
                                        break;
                                    }
                                    ;
                                /* falls through */
                                case '<b/>':
                                    font.b = 1;
                                    break;
                                case '</b>':
                                    break;
                                /* 18.8.26 i */
                                case '<i':
                                    if (!y.val)  {
                                        break;
                                    }
                                    ;
                                /* falls through */
                                case '<i/>':
                                    font.i = 1;
                                    break;
                                case '</i>':
                                    break;
                                /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
                                case '<color':
                                    if (y.rgb)  {
                                        font.color = y.rgb.substr(2, 6);
                                    }
                                    ;
                                    break;
                                /* 18.8.18 family ST_FontFamily */
                                case '<family':
                                    font.family = y.val;
                                    break;
                                /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
                                case '<vertAlign':
                                    break;
                                /* 18.8.35 scheme CT_FontScheme TODO */
                                case '<scheme':
                                    break;
                                default:
                                    if (y[0].charCodeAt(1) !== 47)  {
                                        throw 'Unrecognized rich format ' + y[0];
                                    }
                                    ;
                            }
                        };
                    }
                    
                    /* TODO: These should be generated styles, not inline */
                    var style = [];
                    if (font.b)  {
                        style.push("font-weight: bold;");
                    }
                    
                    if (font.i)  {
                        style.push("font-style: italic;");
                    }
                    
                    intro.push('<span style="' + style.join("") + '">');
                    outro.push("</span>");
                    return cp;
                };
            /* 18.4.4 r CT_RElt */
            function parse_r(r) {
                var terms = [
                        [],
                        "",
                        []
                    ];
                /* 18.4.12 t ST_Xstring */
                var t = r.match(tregex),
                    cp = 65001;
                if (!isval(t))  {
                    return "";
                }
                
                terms[1] = t[1];
                var rpr = r.match(rpregex);
                if (isval(rpr))  {
                    cp = parse_rpr(rpr[1], terms[0], terms[2]);
                }
                
                return terms[0].join("") + terms[1].replace(nlregex, '<br/>') + terms[2].join("");
            }
            return function parse_rs(rs) {
                return rs.replace(rregex, "").split(rend).map(parse_r).join("");
            };
        })();
    /* 18.4.8 si CT_Rst */
    var sitregex = /<t[^>]*>([^<]*)<\/t>/g,
        sirregex = /<r>/;
    function parse_si(x, opts) {
        var html = opts ? opts.cellHTML : true;
        var z = {};
        if (!x)  {
            return null;
        }
        
        var y;
        /* 18.4.12 t ST_Xstring (Plaintext String) */
        if (x.charCodeAt(1) === 116) {
            z.t = utf8read(unescapexml(x.substr(x.indexOf(">") + 1).split(/<\/t>/)[0]));
            z.r = x;
            if (html)  {
                z.h = z.t;
            }
            
        }
        /* 18.4.4 r CT_RElt (Rich Text Run) */
        else if ((y = x.match(sirregex))) {
            z.r = x;
            z.t = utf8read(unescapexml(x.match(sitregex).join("").replace(tagregex, "")));
            if (html)  {
                z.h = parse_rs(x);
            }
            
        }
        /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */
        /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */
        return z;
    }
    /* 18.4 Shared String Table */
    var sstr0 = /<sst([^>]*)>([\s\S]*)<\/sst>/;
    var sstr1 = /<(?:si|sstItem)>/g;
    var sstr2 = /<\/(?:si|sstItem)>/;
    function parse_sst_xml(data, opts) {
        var s = [],
            ss;
        /* 18.4.9 sst CT_Sst */
        var sst = data.match(sstr0);
        if (isval(sst)) {
            ss = sst[2].replace(sstr1, "").split(sstr2);
            for (var i = 0; i != ss.length; ++i) {
                var o = parse_si(ss[i], opts);
                if (o != null)  {
                    s[s.length] = o;
                }
                
            }
            sst = parsexmltag(sst[1]);
            s.Count = sst.count;
            s.Unique = sst.uniqueCount;
        }
        return s;
    }
    RELS.SST = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings";
    var straywsregex = /^\s|\s$|[\t\n\r]/;
    function write_sst_xml(sst, opts) {
        if (!opts.bookSST)  {
            return "";
        }
        
        var o = [
                XML_HEADER
            ];
        o[o.length] = (writextag('sst', null, {
            xmlns: XMLNS.main[0],
            count: sst.Count,
            uniqueCount: sst.Unique
        }));
        for (var i = 0; i != sst.length; ++i) {
            if (sst[i] == null)  {
                
                continue;
            }
            
            var s = sst[i];
            var sitag = "<si>";
            if (s.r)  {
                sitag += s.r;
            }
            else {
                sitag += "<t";
                if (s.t.match(straywsregex))  {
                    sitag += ' xml:space="preserve"';
                }
                
                sitag += ">" + escapexml(s.t) + "</t>";
            }
            sitag += "</si>";
            o[o.length] = (sitag);
        }
        if (o.length > 2) {
            o[o.length] = ('</sst>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.219 BrtBeginSst */
    function parse_BrtBeginSst(data, length) {
        return [
            data.read_shift(4),
            data.read_shift(4)
        ];
    }
    /* [MS-XLSB] 2.1.7.45 Shared Strings */
    function parse_sst_bin(data, opts) {
        var s = [];
        var pass = false;
        recordhopper(data, function hopper_sst(val, R, RT) {
            switch (R.n) {
                case 'BrtBeginSst':
                    s.Count = val[0];
                    s.Unique = val[1];
                    break;
                case 'BrtSSTItem':
                    s.push(val);
                    break;
                case 'BrtEndSst':
                    return true;
                /* TODO: produce a test case with a future record */
                case 'BrtFRTBegin':
                    pass = true;
                    break;
                case 'BrtFRTEnd':
                    pass = false;
                    break;
                default:
                    if (!pass || opts.WTF)  {
                        throw new Error("Unexpected record " + RT + " " + R.n);
                    }
                    ;
            }
        });
        return s;
    }
    function write_BrtBeginSst(sst, o) {
        if (!o)  {
            o = new_buf(8);
        }
        
        o.write_shift(4, sst.Count);
        o.write_shift(4, sst.Unique);
        return o;
    }
    var write_BrtSSTItem = write_RichStr;
    function write_sst_bin(sst, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginSst", write_BrtBeginSst(sst));
        for (var i = 0; i < sst.length; ++i) write_record(ba, "BrtSSTItem", write_BrtSSTItem(sst[i]));
        write_record(ba, "BrtEndSst");
        return ba.end();
    }
    function hex2RGB(h) {
        var o = h.substr(h[0] === "#" ? 1 : 0, 6);
        return [
            parseInt(o.substr(0, 2), 16),
            parseInt(o.substr(0, 2), 16),
            parseInt(o.substr(0, 2), 16)
        ];
    }
    function rgb2Hex(rgb) {
        for (var i = 0,
            o = 1; i != 3; ++i) o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
        return o.toString(16).toUpperCase().substr(1);
    }
    function rgb2HSL(rgb) {
        var R = rgb[0] / 255,
            G = rgb[1] / 255,
            B = rgb[2] / 255;
        var M = Math.max(R, G, B),
            m = Math.min(R, G, B),
            C = M - m;
        if (C === 0)  {
            return [
                0,
                0,
                R
            ];
        }
        
        var H6 = 0,
            S = 0,
            L2 = (M + m);
        S = C / (L2 > 1 ? 2 - L2 : L2);
        switch (M) {
            case R:
                H6 = ((G - B) / C + 6) % 6;
                break;
            case G:
                H6 = ((B - R) / C + 2);
                break;
            case B:
                H6 = ((R - G) / C + 4);
                break;
        }
        return [
            H6 / 6,
            S,
            L2 / 2
        ];
    }
    function hsl2RGB(hsl) {
        var H = hsl[0],
            S = hsl[1],
            L = hsl[2];
        var C = S * 2 * (L < 0.5 ? L : 1 - L),
            m = L - C / 2;
        var rgb = [
                m,
                m,
                m
            ],
            h6 = 6 * H;
        var X;
        if (S !== 0)  {
            switch (h6 | 0) {
                case 0:
                case 6:
                    X = C * h6;
                    rgb[0] += C;
                    rgb[1] += X;
                    break;
                case 1:
                    X = C * (2 - h6);
                    rgb[0] += X;
                    rgb[1] += C;
                    break;
                case 2:
                    X = C * (h6 - 2);
                    rgb[1] += C;
                    rgb[2] += X;
                    break;
                case 3:
                    X = C * (4 - h6);
                    rgb[1] += X;
                    rgb[2] += C;
                    break;
                case 4:
                    X = C * (h6 - 4);
                    rgb[2] += C;
                    rgb[0] += X;
                    break;
                case 5:
                    X = C * (6 - h6);
                    rgb[2] += X;
                    rgb[0] += C;
                    break;
            };
        }
        
        for (var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i] * 255);
        return rgb;
    }
    /* 18.8.3 bgColor tint algorithm */
    function rgb_tint(hex, tint) {
        if (tint === 0)  {
            return hex;
        }
        
        var hsl = rgb2HSL(hex2RGB(hex));
        if (tint < 0)  {
            hsl[2] = hsl[2] * (1 + tint);
        }
        else  {
            hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
        }
        
        return rgb2Hex(hsl2RGB(hsl));
    }
    /* 18.3.1.13 width calculations */
    var DEF_MDW = 7,
        MAX_MDW = 15,
        MIN_MDW = 1,
        MDW = DEF_MDW;
    function width2px(width) {
        return ((width + ((128 / MDW) | 0) / 256) * MDW) | 0;
    }
    function px2char(px) {
        return (((px - 5) / MDW * 100 + 0.5) | 0) / 100;
    }
    function char2width(chr) {
        return (((chr * MDW + 5) / MDW * 256) | 0) / 256;
    }
    function cycle_width(collw) {
        return char2width(px2char(width2px(collw)));
    }
    function find_mdw(collw, coll) {
        if (cycle_width(collw) != collw) {
            for (MDW = DEF_MDW; MDW > MIN_MDW; --MDW) if (cycle_width(collw) === collw)  {
                break;
            }
            ;
            if (MDW === MIN_MDW)  {
                for (MDW = DEF_MDW + 1; MDW < MAX_MDW; ++MDW) if (cycle_width(collw) === collw)  {
                    break;
                }
                ;
            }
            
            if (MDW === MAX_MDW)  {
                MDW = DEF_MDW;
            }
            
        }
    }
    var styles = {};
    // shared styles
    var themes = {};
    // shared themes
    /* 18.8.21 fills CT_Fills */
    function parse_fills(t, opts) {
        styles.Fills = [];
        var fill = {};
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0]) {
                case '<fills':
                case '<fills>':
                case '</fills>':
                    break;
                /* 18.8.20 fill CT_Fill */
                case '<fill>':
                    break;
                case '</fill>':
                    styles.Fills.push(fill);
                    fill = {};
                    break;
                /* 18.8.32 patternFill CT_PatternFill */
                case '<patternFill':
                    if (y.patternType)  {
                        fill.patternType = y.patternType;
                    }
                    ;
                    break;
                case '<patternFill/>':
                case '</patternFill>':
                    break;
                /* 18.8.3 bgColor CT_Color */
                case '<bgColor':
                    if (!fill.bgColor)  {
                        fill.bgColor = {};
                    }
                    ;
                    if (y.indexed)  {
                        fill.bgColor.indexed = parseInt(y.indexed, 10);
                    }
                    ;
                    if (y.theme)  {
                        fill.bgColor.theme = parseInt(y.theme, 10);
                    }
                    ;
                    if (y.tint)  {
                        fill.bgColor.tint = parseFloat(y.tint);
                    }
                    ;
                    /* Excel uses ARGB strings */
                    if (y.rgb)  {
                        fill.bgColor.rgb = y.rgb.substring(y.rgb.length - 6);
                    }
                    ;
                    break;
                case '<bgColor/>':
                case '</bgColor>':
                    break;
                /* 18.8.19 fgColor CT_Color */
                case '<fgColor':
                    if (!fill.fgColor)  {
                        fill.fgColor = {};
                    }
                    ;
                    if (y.theme)  {
                        fill.fgColor.theme = parseInt(y.theme, 10);
                    }
                    ;
                    if (y.tint)  {
                        fill.fgColor.tint = parseFloat(y.tint);
                    }
                    ;
                    /* Excel uses ARGB strings */
                    if (y.rgb)  {
                        fill.fgColor.rgb = y.rgb.substring(y.rgb.length - 6);
                    }
                    ;
                    break;
                case '<bgColor/>':
                case '</fgColor>':
                    break;
                default:
                    if (opts.WTF)  {
                        throw 'unrecognized ' + y[0] + ' in fills';
                    }
                    ;
            }
        });
    }
    /* 18.8.31 numFmts CT_NumFmts */
    function parse_numFmts(t, opts) {
        styles.NumberFmt = [];
        var k = keys(SSF._table);
        for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];
        var m = t[0].match(tagregex);
        for (i = 0; i < m.length; ++i) {
            var y = parsexmltag(m[i]);
            switch (y[0]) {
                case '<numFmts':
                case '</numFmts>':
                case '<numFmts/>':
                case '<numFmts>':
                    break;
                case '<numFmt':
                    {
                        var f = unescapexml(utf8read(y.formatCode)),
                            j = parseInt(y.numFmtId, 10);
                        styles.NumberFmt[j] = f;
                        if (j > 0)  {
                            SSF.load(f, j);
                        }
                        
                    };
                    break;
                default:
                    if (opts.WTF)  {
                        throw 'unrecognized ' + y[0] + ' in numFmts';
                    }
                    ;
            }
        }
    }
    function write_numFmts(NF, opts) {
        var o = [
                "<numFmts>"
            ];
        [
            [
                5,
                8
            ],
            [
                23,
                26
            ],
            [
                41,
                44
            ],
            [
                63,
                66
            ],
            [
                164,
                392
            ]
        ].forEach(function(r) {
            for (var i = r[0]; i <= r[1]; ++i) if (NF[i] !== undefined)  {
                o[o.length] = (writextag('numFmt', null, {
                    numFmtId: i,
                    formatCode: escapexml(NF[i])
                }));
            }
            ;
        });
        if (o.length === 1)  {
            return "";
        }
        
        o[o.length] = ("</numFmts>");
        o[0] = writextag('numFmts', null, {
            count: o.length - 2
        }).replace("/>", ">");
        return o.join("");
    }
    /* 18.8.10 cellXfs CT_CellXfs */
    function parse_cellXfs(t, opts) {
        styles.CellXf = [];
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0]) {
                case '<cellXfs':
                case '<cellXfs>':
                case '<cellXfs/>':
                case '</cellXfs>':
                    break;
                /* 18.8.45 xf CT_Xf */
                case '<xf':
                    delete y[0];
                    if (y.numFmtId)  {
                        y.numFmtId = parseInt(y.numFmtId, 10);
                    }
                    ;
                    if (y.fillId)  {
                        y.fillId = parseInt(y.fillId, 10);
                    }
                    ;
                    styles.CellXf.push(y);
                    break;
                case '</xf>':
                    break;
                /* 18.8.1 alignment CT_CellAlignment */
                case '<alignment':
                case '<alignment/>':
                    break;
                /* 18.8.33 protection CT_CellProtection */
                case '<protection':
                case '</protection>':
                case '<protection/>':
                    break;
                case '<extLst':
                case '</extLst>':
                    break;
                case '<ext':
                    break;
                default:
                    if (opts.WTF)  {
                        throw 'unrecognized ' + y[0] + ' in cellXfs';
                    }
                    ;
            }
        });
    }
    function write_cellXfs(cellXfs) {
        var o = [];
        o[o.length] = (writextag('cellXfs', null));
        cellXfs.forEach(function(c) {
            o[o.length] = (writextag('xf', null, c));
        });
        o[o.length] = ("</cellXfs>");
        if (o.length === 2)  {
            return "";
        }
        
        o[0] = writextag('cellXfs', null, {
            count: o.length - 2
        }).replace("/>", ">");
        return o.join("");
    }
    /* 18.8 Styles CT_Stylesheet*/
    var parse_sty_xml = (function make_pstyx() {
            var numFmtRegex = /<numFmts([^>]*)>.*<\/numFmts>/;
            var cellXfRegex = /<cellXfs([^>]*)>.*<\/cellXfs>/;
            var fillsRegex = /<fills([^>]*)>.*<\/fills>/;
            return function parse_sty_xml(data, opts) {
                /* 18.8.39 styleSheet CT_Stylesheet */
                var t;
                /* numFmts CT_NumFmts ? */
                if ((t = data.match(numFmtRegex)))  {
                    parse_numFmts(t, opts);
                }
                
                /* fonts CT_Fonts ? */
                //	if((t=data.match(/<fonts([^>]*)>.*<\/fonts>/))) parse_fonts(t, opts);
                /* fills CT_Fills */
                if ((t = data.match(fillsRegex)))  {
                    parse_fills(t, opts);
                }
                
                /* borders CT_Borders ? */
                /* cellStyleXfs CT_CellStyleXfs ? */
                /* cellXfs CT_CellXfs ? */
                if ((t = data.match(cellXfRegex)))  {
                    parse_cellXfs(t, opts);
                }
                
                /* dxfs CT_Dxfs ? */
                /* tableStyles CT_TableStyles ? */
                /* colors CT_Colors ? */
                /* extLst CT_ExtensionList ? */
                return styles;
            };
        })();
    var STYLES_XML_ROOT = writextag('styleSheet', null, {
            'xmlns': XMLNS.main[0],
            'xmlns:vt': XMLNS.vt
        });
    RELS.STY = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles";
    function write_sty_xml(wb, opts) {
        var o = [
                XML_HEADER,
                STYLES_XML_ROOT
            ],
            w;
        if ((w = write_numFmts(wb.SSF)) != null)  {
            o[o.length] = w;
        }
        
        o[o.length] = ('<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>');
        o[o.length] = ('<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>');
        o[o.length] = ('<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');
        o[o.length] = ('<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>');
        if ((w = write_cellXfs(opts.cellXfs)))  {
            o[o.length] = (w);
        }
        
        o[o.length] = ('<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>');
        o[o.length] = ('<dxfs count="0"/>');
        o[o.length] = ('<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>');
        if (o.length > 2) {
            o[o.length] = ('</styleSheet>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.651 BrtFmt */
    function parse_BrtFmt(data, length) {
        var ifmt = data.read_shift(2);
        var stFmtCode = parse_XLWideString(data, length - 2);
        return [
            ifmt,
            stFmtCode
        ];
    }
    /* [MS-XLSB] 2.4.653 BrtFont TODO */
    function parse_BrtFont(data, length) {
        var out = {
                flags: {}
            };
        out.dyHeight = data.read_shift(2);
        out.grbit = parse_FontFlags(data, 2);
        out.bls = data.read_shift(2);
        out.sss = data.read_shift(2);
        out.uls = data.read_shift(1);
        out.bFamily = data.read_shift(1);
        out.bCharSet = data.read_shift(1);
        data.l++;
        out.brtColor = parse_BrtColor(data, 8);
        out.bFontScheme = data.read_shift(1);
        out.name = parse_XLWideString(data, length - 21);
        out.flags.Bold = out.bls === 700;
        out.flags.Italic = out.grbit.fItalic;
        out.flags.Strikeout = out.grbit.fStrikeout;
        out.flags.Outline = out.grbit.fOutline;
        out.flags.Shadow = out.grbit.fShadow;
        out.flags.Condense = out.grbit.fCondense;
        out.flags.Extend = out.grbit.fExtend;
        out.flags.Sub = out.sss & 2;
        out.flags.Sup = out.sss & 1;
        return out;
    }
    /* [MS-XLSB] 2.4.816 BrtXF */
    function parse_BrtXF(data, length) {
        var ixfeParent = data.read_shift(2);
        var ifmt = data.read_shift(2);
        parsenoop(data, length - 4);
        return {
            ixfe: ixfeParent,
            ifmt: ifmt
        };
    }
    /* [MS-XLSB] 2.1.7.50 Styles */
    function parse_sty_bin(data, opts) {
        styles.NumberFmt = [];
        for (var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];
        styles.CellXf = [];
        var state = "";
        /* TODO: this should be a stack */
        var pass = false;
        recordhopper(data, function hopper_sty(val, R, RT) {
            switch (R.n) {
                case 'BrtFmt':
                    styles.NumberFmt[val[0]] = val[1];
                    SSF.load(val[1], val[0]);
                    break;
                case 'BrtFont':
                    break;
                /* TODO */
                case 'BrtKnownFonts':
                    break;
                /* TODO */
                case 'BrtFill':
                    break;
                /* TODO */
                case 'BrtBorder':
                    break;
                /* TODO */
                case 'BrtXF':
                    if (state === "CELLXFS") {
                        styles.CellXf.push(val);
                    };
                    break;
                /* TODO */
                case 'BrtStyle':
                    break;
                /* TODO */
                case 'BrtDXF':
                    break;
                /* TODO */
                case 'BrtMRUColor':
                    break;
                /* TODO */
                case 'BrtIndexedColor':
                    break;
                /* TODO */
                case 'BrtBeginStyleSheet':
                    break;
                case 'BrtEndStyleSheet':
                    break;
                case 'BrtBeginTableStyle':
                    break;
                case 'BrtTableStyleElement':
                    break;
                case 'BrtEndTableStyle':
                    break;
                case 'BrtBeginFmts':
                    state = "FMTS";
                    break;
                case 'BrtEndFmts':
                    state = "";
                    break;
                case 'BrtBeginFonts':
                    state = "FONTS";
                    break;
                case 'BrtEndFonts':
                    state = "";
                    break;
                case 'BrtACBegin':
                    state = "ACFONTS";
                    break;
                case 'BrtACEnd':
                    state = "";
                    break;
                case 'BrtBeginFills':
                    state = "FILLS";
                    break;
                case 'BrtEndFills':
                    state = "";
                    break;
                case 'BrtBeginBorders':
                    state = "BORDERS";
                    break;
                case 'BrtEndBorders':
                    state = "";
                    break;
                case 'BrtBeginCellStyleXFs':
                    state = "CELLSTYLEXFS";
                    break;
                case 'BrtEndCellStyleXFs':
                    state = "";
                    break;
                case 'BrtBeginCellXFs':
                    state = "CELLXFS";
                    break;
                case 'BrtEndCellXFs':
                    state = "";
                    break;
                case 'BrtBeginStyles':
                    state = "STYLES";
                    break;
                case 'BrtEndStyles':
                    state = "";
                    break;
                case 'BrtBeginDXFs':
                    state = "DXFS";
                    break;
                case 'BrtEndDXFs':
                    state = "";
                    break;
                case 'BrtBeginTableStyles':
                    state = "TABLESTYLES";
                    break;
                case 'BrtEndTableStyles':
                    state = "";
                    break;
                case 'BrtBeginColorPalette':
                    state = "COLORPALETTE";
                    break;
                case 'BrtEndColorPalette':
                    state = "";
                    break;
                case 'BrtBeginIndexedColors':
                    state = "INDEXEDCOLORS";
                    break;
                case 'BrtEndIndexedColors':
                    state = "";
                    break;
                case 'BrtBeginMRUColors':
                    state = "MRUCOLORS";
                    break;
                case 'BrtEndMRUColors':
                    state = "";
                    break;
                case 'BrtFRTBegin':
                    pass = true;
                    break;
                case 'BrtFRTEnd':
                    pass = false;
                    break;
                case 'BrtBeginStyleSheetExt14':
                    break;
                case 'BrtBeginSlicerStyles':
                    break;
                case 'BrtEndSlicerStyles':
                    break;
                case 'BrtBeginTimelineStylesheetExt15':
                    break;
                case 'BrtEndTimelineStylesheetExt15':
                    break;
                case 'BrtBeginTimelineStyles':
                    break;
                case 'BrtEndTimelineStyles':
                    break;
                case 'BrtEndStyleSheetExt14':
                    break;
                default:
                    if (!pass || opts.WTF)  {
                        throw new Error("Unexpected record " + RT + " " + R.n);
                    }
                    ;
            }
        });
        return styles;
    }
    /* [MS-XLSB] 2.1.7.50 Styles */
    function write_sty_bin(data, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginStyleSheet");
        /* [FMTS] */
        /* [FONTS] */
        /* [FILLS] */
        /* [BORDERS] */
        /* CELLSTYLEXFS */
        /* CELLXFS*/
        /* STYLES */
        /* DXFS */
        /* TABLESTYLES */
        /* [COLORPALETTE] */
        /* FRTSTYLESHEET*/
        write_record(ba, "BrtEndStyleSheet");
        return ba.end();
    }
    RELS.THEME = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme";
    /* 20.1.6.2 clrScheme CT_ColorScheme */
    function parse_clrScheme(t, opts) {
        themes.themeElements.clrScheme = [];
        var color = {};
        t[0].match(tagregex).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0]) {
                case '<a:clrScheme':
                case '</a:clrScheme>':
                    break;
                /* 20.1.2.3.32 srgbClr CT_SRgbColor */
                case '<a:srgbClr':
                    color.rgb = y.val;
                    break;
                /* 20.1.2.3.33 sysClr CT_SystemColor */
                case '<a:sysClr':
                    color.rgb = y.lastClr;
                    break;
                /* 20.1.4.1.9 dk1 (Dark 1) */
                case '<a:dk1>':
                case '</a:dk1>':
                /* 20.1.4.1.10 dk2 (Dark 2) */
                case '<a:dk2>':
                case '</a:dk2>':
                /* 20.1.4.1.22 lt1 (Light 1) */
                case '<a:lt1>':
                case '</a:lt1>':
                /* 20.1.4.1.23 lt2 (Light 2) */
                case '<a:lt2>':
                case '</a:lt2>':
                /* 20.1.4.1.1 accent1 (Accent 1) */
                case '<a:accent1>':
                case '</a:accent1>':
                /* 20.1.4.1.2 accent2 (Accent 2) */
                case '<a:accent2>':
                case '</a:accent2>':
                /* 20.1.4.1.3 accent3 (Accent 3) */
                case '<a:accent3>':
                case '</a:accent3>':
                /* 20.1.4.1.4 accent4 (Accent 4) */
                case '<a:accent4>':
                case '</a:accent4>':
                /* 20.1.4.1.5 accent5 (Accent 5) */
                case '<a:accent5>':
                case '</a:accent5>':
                /* 20.1.4.1.6 accent6 (Accent 6) */
                case '<a:accent6>':
                case '</a:accent6>':
                /* 20.1.4.1.19 hlink (Hyperlink) */
                case '<a:hlink>':
                case '</a:hlink>':
                /* 20.1.4.1.15 folHlink (Followed Hyperlink) */
                case '<a:folHlink>':
                case '</a:folHlink>':
                    if (y[0][1] === '/') {
                        themes.themeElements.clrScheme.push(color);
                        color = {};
                    } else {
                        color.name = y[0].substring(3, y[0].length - 1);
                    };
                    break;
                default:
                    if (opts.WTF)  {
                        throw 'unrecognized ' + y[0] + ' in clrScheme';
                    }
                    ;
            }
        });
    }
    var clrsregex = /<a:clrScheme([^>]*)>.*<\/a:clrScheme>/;
    /* 14.2.7 Theme Part */
    function parse_theme_xml(data, opts) {
        if (!data || data.length === 0)  {
            return themes;
        }
        
        themes.themeElements = {};
        var t;
        /* clrScheme CT_ColorScheme */
        if ((t = data.match(clrsregex)))  {
            parse_clrScheme(t, opts);
        }
        
        return themes;
    }
    function write_theme() {
        return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme"><a:themeElements><a:clrScheme name="Office"><a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1><a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1><a:dk2><a:srgbClr val="1F497D"/></a:dk2><a:lt2><a:srgbClr val="EEECE1"/></a:lt2><a:accent1><a:srgbClr val="4F81BD"/></a:accent1><a:accent2><a:srgbClr val="C0504D"/></a:accent2><a:accent3><a:srgbClr val="9BBB59"/></a:accent3><a:accent4><a:srgbClr val="8064A2"/></a:accent4><a:accent5><a:srgbClr val="4BACC6"/></a:accent5><a:accent6><a:srgbClr val="F79646"/></a:accent6><a:hlink><a:srgbClr val="0000FF"/></a:hlink><a:folHlink><a:srgbClr val="800080"/></a:folHlink></a:clrScheme><a:fontScheme name="Office"><a:majorFont><a:latin typeface="Cambria"/><a:ea typeface=""/><a:cs typeface=""/><a:font script="Jpan" typeface="Ôº≠Ôº≥ Ôº∞„Ç¥„Ç∑„ÉÉ„ÇØ"/><a:font script="Hang" typeface="ÎßëÏùÄ Í≥†Îîï"/><a:font script="Hans" typeface="ÂÆã‰Ωì"/><a:font script="Hant" typeface="Êñ∞Á¥∞ÊòéÈ´î"/><a:font script="Arab" typeface="Times New Roman"/><a:font script="Hebr" typeface="Times New Roman"/><a:font script="Thai" typeface="Tahoma"/><a:font script="Ethi" typeface="Nyala"/><a:font script="Beng" typeface="Vrinda"/><a:font script="Gujr" typeface="Shruti"/><a:font script="Khmr" typeface="MoolBoran"/><a:font script="Knda" typeface="Tunga"/><a:font script="Guru" typeface="Raavi"/><a:font script="Cans" typeface="Euphemia"/><a:font script="Cher" typeface="Plantagenet Cherokee"/><a:font script="Yiii" typeface="Microsoft Yi Baiti"/><a:font script="Tibt" typeface="Microsoft Himalaya"/><a:font script="Thaa" typeface="MV Boli"/><a:font script="Deva" typeface="Mangal"/><a:font script="Telu" typeface="Gautami"/><a:font script="Taml" typeface="Latha"/><a:font script="Syrc" typeface="Estrangelo Edessa"/><a:font script="Orya" typeface="Kalinga"/><a:font script="Mlym" typeface="Kartika"/><a:font script="Laoo" typeface="DokChampa"/><a:font script="Sinh" typeface="Iskoola Pota"/><a:font script="Mong" typeface="Mongolian Baiti"/><a:font script="Viet" typeface="Times New Roman"/><a:font script="Uigh" typeface="Microsoft Uighur"/><a:font script="Geor" typeface="Sylfaen"/></a:majorFont><a:minorFont><a:latin typeface="Calibri"/><a:ea typeface=""/><a:cs typeface=""/><a:font script="Jpan" typeface="Ôº≠Ôº≥ Ôº∞„Ç¥„Ç∑„ÉÉ„ÇØ"/><a:font script="Hang" typeface="ÎßëÏùÄ Í≥†Îîï"/><a:font script="Hans" typeface="ÂÆã‰Ωì"/><a:font script="Hant" typeface="Êñ∞Á¥∞ÊòéÈ´î"/><a:font script="Arab" typeface="Arial"/><a:font script="Hebr" typeface="Arial"/><a:font script="Thai" typeface="Tahoma"/><a:font script="Ethi" typeface="Nyala"/><a:font script="Beng" typeface="Vrinda"/><a:font script="Gujr" typeface="Shruti"/><a:font script="Khmr" typeface="DaunPenh"/><a:font script="Knda" typeface="Tunga"/><a:font script="Guru" typeface="Raavi"/><a:font script="Cans" typeface="Euphemia"/><a:font script="Cher" typeface="Plantagenet Cherokee"/><a:font script="Yiii" typeface="Microsoft Yi Baiti"/><a:font script="Tibt" typeface="Microsoft Himalaya"/><a:font script="Thaa" typeface="MV Boli"/><a:font script="Deva" typeface="Mangal"/><a:font script="Telu" typeface="Gautami"/><a:font script="Taml" typeface="Latha"/><a:font script="Syrc" typeface="Estrangelo Edessa"/><a:font script="Orya" typeface="Kalinga"/><a:font script="Mlym" typeface="Kartika"/><a:font script="Laoo" typeface="DokChampa"/><a:font script="Sinh" typeface="Iskoola Pota"/><a:font script="Mong" typeface="Mongolian Baiti"/><a:font script="Viet" typeface="Arial"/><a:font script="Uigh" typeface="Microsoft Uighur"/><a:font script="Geor" typeface="Sylfaen"/></a:minorFont></a:fontScheme><a:fmtScheme name="Office"><a:fillStyleLst><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:gradFill rotWithShape="1"><a:gsLst><a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs><a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs><a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs></a:gsLst><a:lin ang="16200000" scaled="1"/></a:gradFill><a:gradFill rotWithShape="1"><a:gsLst><a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs><a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs></a:gsLst><a:lin ang="16200000" scaled="0"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln><a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln><a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:gradFill rotWithShape="1"><a:gsLst><a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs><a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs><a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs></a:gsLst><a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path></a:gradFill><a:gradFill rotWithShape="1"><a:gsLst><a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs><a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs></a:gsLst><a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>';
    }
    /* 18.6 Calculation Chain */
    function parse_cc_xml(data, opts) {
        var d = [];
        var l = 0,
            i = 1;
        (data.match(tagregex) || []).forEach(function(x) {
            var y = parsexmltag(x);
            switch (y[0]) {
                case '<?xml':
                    break;
                /* 18.6.2  calcChain CT_CalcChain 1 */
                case '<calcChain':
                case '<calcChain>':
                case '</calcChain>':
                    break;
                /* 18.6.1  c CT_CalcCell 1 */
                case '<c':
                    delete y[0];
                    if (y.i)  {
                        i = y.i;
                    }
                    else  {
                        y.i = i;
                    }
                    ;
                    d.push(y);
                    break;
            }
        });
        return d;
    }
    function write_cc_xml(data, opts) {}
    /* [MS-XLSB] 2.6.4.1 */
    function parse_BrtCalcChainItem$(data, length) {
        var out = {};
        out.i = data.read_shift(4);
        var cell = {};
        cell.r = data.read_shift(4);
        cell.c = data.read_shift(4);
        out.r = encode_cell(cell);
        var flags = data.read_shift(1);
        if (flags & 2)  {
            out.l = '1';
        }
        
        if (flags & 8)  {
            out.a = '1';
        }
        
        return out;
    }
    /* 18.6 Calculation Chain */
    function parse_cc_bin(data, opts) {
        var out = [];
        var pass = false;
        recordhopper(data, function hopper_cc(val, R, RT) {
            switch (R.n) {
                case 'BrtCalcChainItem$':
                    out.push(val);
                    break;
                case 'BrtBeginCalcChain$':
                    break;
                case 'BrtEndCalcChain$':
                    break;
                default:
                    if (!pass || opts.WTF)  {
                        throw new Error("Unexpected record " + RT + " " + R.n);
                    }
                    ;
            }
        });
        return out;
    }
    function write_cc_bin(data, opts) {}
    function parse_comments(zip, dirComments, sheets, sheetRels, opts) {
        for (var i = 0; i != dirComments.length; ++i) {
            var canonicalpath = dirComments[i];
            var comments = parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\//, ''), true), canonicalpath, opts);
            if (!comments || !comments.length)  {
                
                continue;
            }
            
            // find the sheets targeted by these comments
            var sheetNames = keys(sheets);
            for (var j = 0; j != sheetNames.length; ++j) {
                var sheetName = sheetNames[j];
                var rels = sheetRels[sheetName];
                if (rels) {
                    var rel = rels[canonicalpath];
                    if (rel)  {
                        insertCommentsIntoSheet(sheetName, sheets[sheetName], comments);
                    }
                    
                }
            }
        }
    }
    function insertCommentsIntoSheet(sheetName, sheet, comments) {
        comments.forEach(function(comment) {
            var cell = sheet[comment.ref];
            if (!cell) {
                cell = {};
                sheet[comment.ref] = cell;
                var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
                var thisCell = decode_cell(comment.ref);
                if (range.s.r > thisCell.r)  {
                    range.s.r = thisCell.r;
                }
                
                if (range.e.r < thisCell.r)  {
                    range.e.r = thisCell.r;
                }
                
                if (range.s.c > thisCell.c)  {
                    range.s.c = thisCell.c;
                }
                
                if (range.e.c < thisCell.c)  {
                    range.e.c = thisCell.c;
                }
                
                var encoded = encode_range(range);
                if (encoded !== sheet["!ref"])  {
                    sheet["!ref"] = encoded;
                }
                
            }
            if (!cell.c)  {
                cell.c = [];
            }
            
            var o = {
                    a: comment.author,
                    t: comment.t,
                    r: comment.r
                };
            if (comment.h)  {
                o.h = comment.h;
            }
            
            cell.c.push(o);
        });
    }
    /* 18.7.3 CT_Comment */
    function parse_comments_xml(data, opts) {
        if (data.match(/<(?:\w+:)?comments *\/>/))  {
            return [];
        }
        
        var authors = [];
        var commentList = [];
        data.match(/<(?:\w+:)?authors>([^\u2603]*)<\/(?:\w+:)?authors>/)[1].split(/<\/\w*:?author>/).forEach(function(x) {
            if (x === "" || x.trim() === "")  {
                return;
            }
            
            authors.push(x.match(/<(?:\w+:)?author[^>]*>(.*)/)[1]);
        });
        (data.match(/<(?:\w+:)?commentList>([^\u2603]*)<\/(?:\w+:)?commentList>/) || [
            "",
            ""
        ])[1].split(/<\/\w*:?comment>/).forEach(function(x, index) {
            if (x === "" || x.trim() === "")  {
                return;
            }
            
            var y = parsexmltag(x.match(/<(?:\w+:)?comment[^>]*>/)[0]);
            var comment = {
                    author: y.authorId && authors[y.authorId] ? authors[y.authorId] : undefined,
                    ref: y.ref,
                    guid: y.guid
                };
            var cell = decode_cell(y.ref);
            if (opts.sheetRows && opts.sheetRows <= cell.r)  {
                return;
            }
            
            var textMatch = x.match(/<text>([^\u2603]*)<\/text>/);
            if (!textMatch || !textMatch[1])  {
                return;
            }
            
            // a comment may contain an empty text tag.
            var rt = parse_si(textMatch[1]);
            comment.r = rt.r;
            comment.t = rt.t;
            if (opts.cellHTML)  {
                comment.h = rt.h;
            }
            
            commentList.push(comment);
        });
        return commentList;
    }
    function write_comments_xml(data, opts) {}
    /* [MS-XLSB] 2.4.28 BrtBeginComment */
    function parse_BrtBeginComment(data, length) {
        var out = {};
        out.iauthor = data.read_shift(4);
        var rfx = parse_UncheckedRfX(data, 16);
        out.rfx = rfx.s;
        out.ref = encode_cell(rfx.s);
        data.l += 16;
        /*var guid = parse_GUID(data); */
        return out;
    }
    /* [MS-XLSB] 2.4.324 BrtCommentAuthor */
    var parse_BrtCommentAuthor = parse_XLWideString;
    /* [MS-XLSB] 2.4.325 BrtCommentText */
    var parse_BrtCommentText = parse_RichStr;
    /* [MS-XLSB] 2.1.7.8 Comments */
    function parse_comments_bin(data, opts) {
        var out = [];
        var authors = [];
        var c = {};
        var pass = false;
        recordhopper(data, function hopper_cmnt(val, R, RT) {
            switch (R.n) {
                case 'BrtCommentAuthor':
                    authors.push(val);
                    break;
                case 'BrtBeginComment':
                    c = val;
                    break;
                case 'BrtCommentText':
                    c.t = val.t;
                    c.h = val.h;
                    c.r = val.r;
                    break;
                case 'BrtEndComment':
                    c.author = authors[c.iauthor];
                    delete c.iauthor;
                    if (opts.sheetRows && opts.sheetRows <= c.rfx.r)  {
                        break;
                    }
                    ;
                    delete c.rfx;
                    out.push(c);
                    break;
                case 'BrtBeginComments':
                    break;
                case 'BrtEndComments':
                    break;
                case 'BrtBeginCommentAuthors':
                    break;
                case 'BrtEndCommentAuthors':
                    break;
                case 'BrtBeginCommentList':
                    break;
                case 'BrtEndCommentList':
                    break;
                default:
                    if (!pass || opts.WTF)  {
                        throw new Error("Unexpected record " + RT + " " + R.n);
                    }
                    ;
            }
        });
        return out;
    }
    function write_comments_bin(data, opts) {}
    /* [MS-XLSB] 2.5.97.4 CellParsedFormula TODO: use similar logic to js-xls */
    function parse_CellParsedFormula(data, length) {
        var cce = data.read_shift(4);
        return parsenoop(data, length - 4);
    }
    var strs = {};
    // shared strings
    var _ssfopts = {};
    // spreadsheet formatting options
    RELS.WS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet";
    function get_sst_id(sst, str) {
        for (var i = 0,
            len = sst.length; i < len; ++i) if (sst[i].t === str) {
            sst.Count++;
            return i;
        };
        sst[len] = {
            t: str
        };
        sst.Count++;
        sst.Unique++;
        return len;
    }
    function get_cell_style(styles, cell, opts) {
        var z = opts.revssf[cell.z != null ? cell.z : "General"];
        for (var i = 0,
            len = styles.length; i != len; ++i) if (styles[i].numFmtId === z)  {
            return i;
        }
        ;
        styles[len] = {
            numFmtId: z,
            fontId: 0,
            fillId: 0,
            borderId: 0,
            xfId: 0,
            applyNumberFormat: 1
        };
        return len;
    }
    function safe_format(p, fmtid, fillid, opts) {
        try {
            if (fmtid === 0) {
                if (p.t === 'n') {
                    if ((p.v | 0) === p.v)  {
                        p.w = SSF._general_int(p.v, _ssfopts);
                    }
                    else  {
                        p.w = SSF._general_num(p.v, _ssfopts);
                    }
                    
                } else if (p.v === undefined)  {
                    return "";
                }
                else  {
                    p.w = SSF._general(p.v, _ssfopts);
                }
                
            } else  {
                p.w = SSF.format(fmtid, p.v, _ssfopts);
            }
            
            if (opts.cellNF)  {
                p.z = SSF._table[fmtid];
            }
            
        } catch (e) {
            if (opts.WTF)  {
                throw e;
            }
            
        }
        if (fillid)  {
            try {
                p.s = styles.Fills[fillid];
                if (p.s.fgColor && p.s.fgColor.theme) {
                    p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
                    if (opts.WTF)  {
                        p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
                    }
                    
                }
                if (p.s.bgColor && p.s.bgColor.theme) {
                    p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
                    if (opts.WTF)  {
                        p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
                    }
                    
                }
            } catch (e) {
                if (opts.WTF)  {
                    throw e;
                }
                
            };
        }
        
    }
    function parse_ws_xml_dim(ws, s) {
        var d = safe_decode_range(s);
        if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0)  {
            ws["!ref"] = encode_range(d);
        }
        
    }
    var mergecregex = /<mergeCell ref="[A-Z0-9:]+"\s*\/>/g;
    var sheetdataregex = /<(?:\w+:)?sheetData>([^\u2603]*)<\/(?:\w+:)?sheetData>/;
    var hlinkregex = /<hyperlink[^>]*\/>/g;
    var dimregex = /"(\w*:\w*)"/;
    var colregex = /<col[^>]*\/>/g;
    /* 18.3 Worksheets */
    function parse_ws_xml(data, opts, rels) {
        if (!data)  {
            return data;
        }
        
        /* 18.3.1.99 worksheet CT_Worksheet */
        var s = {};
        /* 18.3.1.35 dimension CT_SheetDimension ? */
        var ridx = data.indexOf("<dimension");
        if (ridx > 0) {
            var ref = data.substr(ridx, 50).match(dimregex);
            if (ref != null)  {
                parse_ws_xml_dim(s, ref[1]);
            }
            
        }
        /* 18.3.1.55 mergeCells CT_MergeCells */
        var mergecells = [];
        if (data.indexOf("</mergeCells>") !== -1) {
            var merges = data.match(mergecregex);
            for (ridx = 0; ridx != merges.length; ++ridx) mergecells[ridx] = safe_decode_range(merges[ridx].substr(merges[ridx].indexOf("\"") + 1));
        }
        /* 18.3.1.17 cols CT_Cols */
        var columns = [];
        if (opts.cellStyles && data.indexOf("</cols>") !== -1) {
            /* 18.3.1.13 col CT_Col */
            var cols = data.match(colregex);
            parse_ws_xml_cols(columns, cols);
        }
        var refguess = {
                s: {
                    r: 1000000,
                    c: 1000000
                },
                e: {
                    r: 0,
                    c: 0
                }
            };
        /* 18.3.1.80 sheetData CT_SheetData ? */
        var mtch = data.match(sheetdataregex);
        if (mtch)  {
            parse_ws_xml_data(mtch[1], s, opts, refguess);
        }
        
        /* 18.3.1.48 hyperlinks CT_Hyperlinks */
        if (data.indexOf("</hyperlinks>") !== -1)  {
            parse_ws_xml_hlinks(s, data.match(hlinkregex), rels);
        }
        
        if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r)  {
            s["!ref"] = encode_range(refguess);
        }
        
        if (opts.sheetRows > 0 && s["!ref"]) {
            var tmpref = safe_decode_range(s["!ref"]);
            if (opts.sheetRows < +tmpref.e.r) {
                tmpref.e.r = opts.sheetRows - 1;
                if (tmpref.e.r > refguess.e.r)  {
                    tmpref.e.r = refguess.e.r;
                }
                
                if (tmpref.e.r < tmpref.s.r)  {
                    tmpref.s.r = tmpref.e.r;
                }
                
                if (tmpref.e.c > refguess.e.c)  {
                    tmpref.e.c = refguess.e.c;
                }
                
                if (tmpref.e.c < tmpref.s.c)  {
                    tmpref.s.c = tmpref.e.c;
                }
                
                s["!fullref"] = s["!ref"];
                s["!ref"] = encode_range(tmpref);
            }
        }
        if (mergecells.length > 0)  {
            s["!merges"] = mergecells;
        }
        
        if (columns.length > 0)  {
            s["!cols"] = columns;
        }
        
        return s;
    }
    function write_ws_xml_merges(merges) {
        if (merges.length == 0)  {
            return "";
        }
        
        var o = '<mergeCells count="' + merges.length + '">';
        for (var i = 0; i != merges.length; ++i) o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
        return o + '</mergeCells>';
    }
    function parse_ws_xml_hlinks(s, data, rels) {
        for (var i = 0; i != data.length; ++i) {
            var val = parsexmltag(data[i], true);
            if (!val.ref)  {
                return;
            }
            
            var rel = rels['!id'][val.id];
            if (rel) {
                val.Target = rel.Target;
                if (val.location)  {
                    val.Target += "#" + val.location;
                }
                
                val.Rel = rel;
            }
            var rng = safe_decode_range(val.ref);
            for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
                var addr = encode_cell({
                        c: C,
                        r: R
                    });
                if (!s[addr])  {
                    s[addr] = {
                        t: "str",
                        v: undefined
                    };
                }
                
                s[addr].l = val;
            }
        }
    }
    function parse_ws_xml_cols(columns, cols) {
        var seencol = false;
        for (var coli = 0; coli != cols.length; ++coli) {
            var coll = parsexmltag(cols[coli], true);
            var colm = parseInt(coll.min, 10) - 1,
                colM = parseInt(coll.max, 10) - 1;
            delete coll.min;
            delete coll.max;
            if (!seencol && coll.width) {
                seencol = true;
                find_mdw(+coll.width, coll);
            }
            if (coll.width) {
                coll.wpx = width2px(+coll.width);
                coll.wch = px2char(coll.wpx);
                coll.MDW = MDW;
            }
            while (colm <= colM) columns[colm++] = coll;
        }
    }
    function write_ws_xml_cols(ws, cols) {
        var o = [
                "<cols>"
            ],
            col, width;
        for (var i = 0; i != cols.length; ++i) {
            if (!(col = cols[i]))  {
                
                continue;
            }
            
            var p = {
                    min: i + 1,
                    max: i + 1
                };
            /* wch (chars), wpx (pixels) */
            width = -1;
            if (col.wpx)  {
                width = px2char(col.wpx);
            }
            else if (col.wch)  {
                width = col.wch;
            }
            
            if (width > -1) {
                p.width = char2width(width);
                p.customWidth = 1;
            }
            o[o.length] = (writextag('col', null, p));
        }
        o[o.length] = "</cols>";
        return o.join("");
    }
    function write_ws_xml_cell(cell, ref, ws, opts, idx, wb) {
        if (cell.v === undefined)  {
            return "";
        }
        
        var vv = "";
        switch (cell.t) {
            case 'b':
                vv = cell.v ? "1" : "0";
                break;
            case 'n':
            case 'e':
                vv = '' + cell.v;
                break;
            default:
                vv = cell.v;
                break;
        }
        var v = writetag('v', escapexml(vv)),
            o = {
                r: ref
            };
        /* TODO: cell style */
        var os = get_cell_style(opts.cellXfs, cell, opts);
        if (os !== 0)  {
            o.s = os;
        }
        
        switch (cell.t) {
            case 'n':
                break;
            case 'b':
                o.t = "b";
                break;
            case 'e':
                o.t = "e";
                break;
            default:
                if (opts.bookSST) {
                    v = writetag('v', '' + get_sst_id(opts.Strings, cell.v));
                    o.t = "s";
                    break;
                };
                o.t = "str";
                break;
        }
        return writextag('c', v, o);
    }
    var parse_ws_xml_data = (function parse_ws_xml_data_factory() {
            var cellregex = /<(?:\w+:)?c[ >]/,
                rowregex = /<\/(?:\w+:)?row>/;
            var rregex = /r=["']([^"']*)["']/,
                isregex = /<is>([\S\s]*?)<\/is>/;
            var match_v = matchtag("v"),
                match_f = matchtag("f");
            return function parse_ws_xml_data(sdata, s, opts, guess) {
                var ri = 0,
                    x = "",
                    cells = [],
                    cref = [],
                    idx = 0,
                    i = 0,
                    cc = 0,
                    d = "",
                    p;
                var tag,
                    tagr = 0,
                    tagc = 0;
                var sstr;
                var fmtid = 0,
                    fillid = 0,
                    do_format = Array.isArray(styles.CellXf),
                    cf;
                for (var marr = sdata.split(rowregex),
                    mt = 0,
                    marrlen = marr.length; mt != marrlen; ++mt) {
                    x = marr[mt].trim();
                    var xlen = x.length;
                    if (xlen === 0)  {
                        
                        continue;
                    }
                    
                    /* 18.3.1.73 row CT_Row */
                    for (ri = 0; ri < xlen; ++ri) if (x.charCodeAt(ri) === 62)  {
                        break;
                    }
                    ;
                    ++ri;
                    tag = parsexmltag(x.substr(0, ri), true);
                    /* SpreadSheetGear uses implicit r/c */
                    tagr = typeof tag.r !== 'undefined' ? parseInt(tag.r, 10) : tagr + 1;
                    tagc = -1;
                    if (opts.sheetRows && opts.sheetRows < tagr)  {
                        
                        continue;
                    }
                    
                    if (guess.s.r > tagr - 1)  {
                        guess.s.r = tagr - 1;
                    }
                    
                    if (guess.e.r < tagr - 1)  {
                        guess.e.r = tagr - 1;
                    }
                    
                    /* 18.3.1.4 c CT_Cell */
                    cells = x.substr(ri).split(cellregex);
                    for (ri = typeof tag.r === 'undefined' ? 0 : 1; ri != cells.length; ++ri) {
                        x = cells[ri].trim();
                        if (x.length === 0)  {
                            
                            continue;
                        }
                        
                        cref = x.match(rregex);
                        idx = ri;
                        i = 0;
                        cc = 0;
                        x = "<c " + (x.substr(0, 1) == "<" ? ">" : "") + x;
                        if (cref !== null && cref.length === 2) {
                            idx = 0;
                            d = cref[1];
                            for (i = 0; i != d.length; ++i) {
                                if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26)  {
                                    break;
                                }
                                
                                idx = 26 * idx + cc;
                            }
                            --idx;
                            tagc = idx;
                        } else  {
                            ++tagc;
                        }
                        
                        for (i = 0; i != x.length; ++i) if (x.charCodeAt(i) === 62)  {
                            break;
                        }
                        ;
                        ++i;
                        tag = parsexmltag(x.substr(0, i), true);
                        if (!tag.r)  {
                            tag.r = utils.encode_cell({
                                r: tagr - 1,
                                c: tagc
                            });
                        }
                        
                        d = x.substr(i);
                        p = {
                            t: ""
                        };
                        if ((cref = d.match(match_v)) !== null && cref[1] !== '')  {
                            p.v = unescapexml(cref[1]);
                        }
                        
                        if (opts.cellFormula && (cref = d.match(match_f)) !== null)  {
                            p.f = unescapexml(cref[1]);
                        }
                        
                        /* SCHEMA IS ACTUALLY INCORRECT HERE.  IF A CELL HAS NO T, EMIT "" */
                        if (tag.t === undefined && p.v === undefined) {
                            if (!opts.sheetStubs)  {
                                
                                continue;
                            }
                            
                            p.t = "str";
                        } else  {
                            p.t = tag.t || "n";
                        }
                        
                        if (guess.s.c > idx)  {
                            guess.s.c = idx;
                        }
                        
                        if (guess.e.c < idx)  {
                            guess.e.c = idx;
                        }
                        
                        /* 18.18.11 t ST_CellType */
                        switch (p.t) {
                            case 'n':
                                p.v = parseFloat(p.v);
                                break;
                            case 's':
                                sstr = strs[parseInt(p.v, 10)];
                                p.v = sstr.t;
                                p.r = sstr.r;
                                if (opts.cellHTML)  {
                                    p.h = sstr.h;
                                }
                                ;
                                break;
                            case 'str':
                                if (p.v != null)  {
                                    p.v = utf8read(p.v);
                                }
                                else  {
                                    p.v = "";
                                }
                                ;
                                break;
                            case 'inlineStr':
                                cref = d.match(isregex);
                                p.t = 'str';
                                if (cref !== null) {
                                    sstr = parse_si(cref[1]);
                                    p.v = sstr.t;
                                } else  {
                                    p.v = "";
                                }
                                ;
                                break;
                            // inline string
                            case 'b':
                                p.v = parsexmlbool(p.v);
                                break;
                            case 'd':
                                p.v = datenum(p.v);
                                p.t = 'n';
                                break;
                            /* in case of error, stick value in .raw */
                            case 'e':
                                p.raw = RBErr[p.v];
                                break;
                        }
                        /* formatting */
                        fmtid = fillid = 0;
                        if (do_format && tag.s !== undefined) {
                            cf = styles.CellXf[tag.s];
                            if (cf != null) {
                                if (cf.numFmtId != null)  {
                                    fmtid = cf.numFmtId;
                                }
                                
                                if (opts.cellStyles && cf.fillId != null)  {
                                    fillid = cf.fillId;
                                }
                                
                            }
                        }
                        safe_format(p, fmtid, fillid, opts);
                        s[tag.r] = p;
                    }
                }
            };
        })();
    function write_ws_xml_data(ws, opts, idx, wb) {
        var o = [],
            r = [],
            range = safe_decode_range(ws['!ref']),
            cell, ref,
            rr = "",
            cols = [],
            R, C;
        for (C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
        for (R = range.s.r; R <= range.e.r; ++R) {
            r = [];
            rr = encode_row(R);
            for (C = range.s.c; C <= range.e.c; ++C) {
                ref = cols[C] + rr;
                if (ws[ref] === undefined)  {
                    
                    continue;
                }
                
                if ((cell = write_ws_xml_cell(ws[ref], ref, ws, opts, idx, wb)) != null)  {
                    r.push(cell);
                }
                
            }
            if (r.length > 0)  {
                o[o.length] = (writextag('row', r.join(""), {
                    r: rr
                }));
            }
            
        }
        return o.join("");
    }
    var WS_XML_ROOT = writextag('worksheet', null, {
            'xmlns': XMLNS.main[0],
            'xmlns:r': XMLNS.r
        });
    function write_ws_xml(idx, opts, wb) {
        var o = [
                XML_HEADER,
                WS_XML_ROOT
            ];
        var s = wb.SheetNames[idx],
            sidx = 0,
            rdata = "";
        var ws = wb.Sheets[s];
        if (ws === undefined)  {
            ws = {};
        }
        
        var ref = ws['!ref'];
        if (ref === undefined)  {
            ref = 'A1';
        }
        
        o[o.length] = (writextag('dimension', null, {
            'ref': ref
        }));
        if (ws['!cols'] !== undefined && ws['!cols'].length > 0)  {
            o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));
        }
        
        o[sidx = o.length] = '<sheetData/>';
        if (ws['!ref'] !== undefined) {
            rdata = write_ws_xml_data(ws, opts, idx, wb);
            if (rdata.length > 0)  {
                o[o.length] = (rdata);
            }
            
        }
        if (o.length > sidx + 1) {
            o[o.length] = ('</sheetData>');
            o[sidx] = o[sidx].replace("/>", ">");
        }
        if (ws['!merges'] !== undefined && ws['!merges'].length > 0)  {
            o[o.length] = (write_ws_xml_merges(ws['!merges']));
        }
        
        if (o.length > 2) {
            o[o.length] = ('</worksheet>');
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.718 BrtRowHdr */
    function parse_BrtRowHdr(data, length) {
        var z = [];
        z.r = data.read_shift(4);
        data.l += length - 4;
        return z;
    }
    /* [MS-XLSB] 2.4.812 BrtWsDim */
    var parse_BrtWsDim = parse_UncheckedRfX;
    var write_BrtWsDim = write_UncheckedRfX;
    /* [MS-XLSB] 2.4.815 BrtWsProp */
    function parse_BrtWsProp(data, length) {
        var z = {};
        /* TODO: pull flags */
        data.l += 19;
        z.name = parse_CodeName(data, length - 19);
        return z;
    }
    /* [MS-XLSB] 2.4.303 BrtCellBlank */
    function parse_BrtCellBlank(data, length) {
        var cell = parse_Cell(data);
        return [
            cell
        ];
    }
    function write_BrtCellBlank(cell, val, o) {
        if (o == null)  {
            o = new_buf(8);
        }
        
        return write_Cell(val, o);
    }
    /* [MS-XLSB] 2.4.304 BrtCellBool */
    function parse_BrtCellBool(data, length) {
        var cell = parse_Cell(data);
        var fBool = data.read_shift(1);
        return [
            cell,
            fBool,
            'b'
        ];
    }
    /* [MS-XLSB] 2.4.305 BrtCellError */
    function parse_BrtCellError(data, length) {
        var cell = parse_Cell(data);
        var fBool = data.read_shift(1);
        return [
            cell,
            fBool,
            'e'
        ];
    }
    /* [MS-XLSB] 2.4.308 BrtCellIsst */
    function parse_BrtCellIsst(data, length) {
        var cell = parse_Cell(data);
        var isst = data.read_shift(4);
        return [
            cell,
            isst,
            's'
        ];
    }
    /* [MS-XLSB] 2.4.310 BrtCellReal */
    function parse_BrtCellReal(data, length) {
        var cell = parse_Cell(data);
        var value = parse_Xnum(data);
        return [
            cell,
            value,
            'n'
        ];
    }
    /* [MS-XLSB] 2.4.311 BrtCellRk */
    function parse_BrtCellRk(data, length) {
        var cell = parse_Cell(data);
        var value = parse_RkNumber(data);
        return [
            cell,
            value,
            'n'
        ];
    }
    /* [MS-XLSB] 2.4.314 BrtCellSt */
    function parse_BrtCellSt(data, length) {
        var cell = parse_Cell(data);
        var value = parse_XLWideString(data);
        return [
            cell,
            value,
            'str'
        ];
    }
    /* [MS-XLSB] 2.4.647 BrtFmlaBool */
    function parse_BrtFmlaBool(data, length, opts) {
        var cell = parse_Cell(data);
        var value = data.read_shift(1);
        var o = [
                cell,
                value,
                'b'
            ];
        if (opts.cellFormula) {
            var formula = parse_CellParsedFormula(data, length - 9);
            o[3] = "";
        } else  {
            /* TODO */
            data.l += length - 9;
        }
        
        return o;
    }
    /* [MS-XLSB] 2.4.648 BrtFmlaError */
    function parse_BrtFmlaError(data, length, opts) {
        var cell = parse_Cell(data);
        var value = data.read_shift(1);
        var o = [
                cell,
                value,
                'e'
            ];
        if (opts.cellFormula) {
            var formula = parse_CellParsedFormula(data, length - 9);
            o[3] = "";
        } else  {
            /* TODO */
            data.l += length - 9;
        }
        
        return o;
    }
    /* [MS-XLSB] 2.4.649 BrtFmlaNum */
    function parse_BrtFmlaNum(data, length, opts) {
        var cell = parse_Cell(data);
        var value = parse_Xnum(data);
        var o = [
                cell,
                value,
                'n'
            ];
        if (opts.cellFormula) {
            var formula = parse_CellParsedFormula(data, length - 16);
            o[3] = "";
        } else  {
            /* TODO */
            data.l += length - 16;
        }
        
        return o;
    }
    /* [MS-XLSB] 2.4.650 BrtFmlaString */
    function parse_BrtFmlaString(data, length, opts) {
        var start = data.l;
        var cell = parse_Cell(data);
        var value = parse_XLWideString(data);
        var o = [
                cell,
                value,
                'str'
            ];
        if (opts.cellFormula) {
            var formula = parse_CellParsedFormula(data, start + length - data.l);
        } else  {
            data.l = start + length;
        }
        
        return o;
    }
    /* [MS-XLSB] 2.4.676 BrtMergeCell */
    var parse_BrtMergeCell = parse_UncheckedRfX;
    /* [MS-XLSB] 2.4.656 BrtHLink */
    function parse_BrtHLink(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var relId = parse_XLNullableWideString(data);
        var loc = parse_XLWideString(data);
        var tooltip = parse_XLWideString(data);
        var display = parse_XLWideString(data);
        data.l = end;
        return {
            rfx: rfx,
            relId: relId,
            loc: loc,
            tooltip: tooltip,
            display: display
        };
    }
    /* [MS-XLSB] 2.1.7.61 Worksheet */
    function parse_ws_bin(data, opts, rels) {
        if (!data)  {
            return data;
        }
        
        if (!rels)  {
            rels = {
                '!id': {}
            };
        }
        
        var s = {};
        var ref;
        var refguess = {
                s: {
                    r: 1000000,
                    c: 1000000
                },
                e: {
                    r: 0,
                    c: 0
                }
            };
        var pass = false,
            end = false;
        var row, p, cf, R, C, addr, sstr, rr;
        var mergecells = [];
        recordhopper(data, function ws_parse(val, R) {
            if (end)  {
                return;
            }
            
            switch (R.n) {
                case 'BrtWsDim':
                    ref = val;
                    break;
                case 'BrtRowHdr':
                    row = val;
                    if (opts.sheetRows && opts.sheetRows <= row.r)  {
                        end = true;
                    }
                    ;
                    rr = encode_row(row.r);
                    break;
                case 'BrtFmlaBool':
                case 'BrtFmlaError':
                case 'BrtFmlaNum':
                case 'BrtFmlaString':
                case 'BrtCellBool':
                case 'BrtCellError':
                case 'BrtCellIsst':
                case 'BrtCellReal':
                case 'BrtCellRk':
                case 'BrtCellSt':
                    p = {
                        t: val[2]
                    };
                    switch (val[2]) {
                        case 'n':
                            p.v = val[1];
                            break;
                        case 's':
                            sstr = strs[val[1]];
                            p.v = sstr.t;
                            p.r = sstr.r;
                            break;
                        case 'b':
                            p.v = val[1] ? true : false;
                            break;
                        case 'e':
                            p.raw = val[1];
                            p.v = BErr[p.raw];
                            break;
                        case 'str':
                            p.v = utf8read(val[1]);
                            break;
                    };
                    if (opts.cellFormula && val.length > 3)  {
                        p.f = val[3];
                    }
                    ;
                    if ((cf = styles.CellXf[val[0].iStyleRef]))  {
                        safe_format(p, cf.ifmt, null, opts);
                    }
                    ;
                    s[encode_col(C = val[0].c) + rr] = p;
                    if (refguess.s.r > row.r)  {
                        refguess.s.r = row.r;
                    }
                    ;
                    if (refguess.s.c > C)  {
                        refguess.s.c = C;
                    }
                    ;
                    if (refguess.e.r < row.r)  {
                        refguess.e.r = row.r;
                    }
                    ;
                    if (refguess.e.c < C)  {
                        refguess.e.c = C;
                    }
                    ;
                    break;
                case 'BrtCellBlank':
                    if (!opts.sheetStubs)  {
                        break;
                    }
                    ;
                    p = {
                        t: 'str',
                        v: undefined
                    };
                    s[encode_col(C = val[0].c) + rr] = p;
                    if (refguess.s.r > row.r)  {
                        refguess.s.r = row.r;
                    }
                    ;
                    if (refguess.s.c > C)  {
                        refguess.s.c = C;
                    }
                    ;
                    if (refguess.e.r < row.r)  {
                        refguess.e.r = row.r;
                    }
                    ;
                    if (refguess.e.c < C)  {
                        refguess.e.c = C;
                    }
                    ;
                    break;
                /* Merge Cells */
                case 'BrtBeginMergeCells':
                    break;
                case 'BrtEndMergeCells':
                    break;
                case 'BrtMergeCell':
                    mergecells.push(val);
                    break;
                case 'BrtHLink':
                    var rel = rels['!id'][val.relId];
                    if (rel) {
                        val.Target = rel.Target;
                        if (val.loc)  {
                            val.Target += "#" + val.loc;
                        }
                        
                        val.Rel = rel;
                    };
                    for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {
                        addr = encode_cell({
                            c: C,
                            r: R
                        });
                        if (!s[addr])  {
                            s[addr] = {
                                t: "str",
                                v: undefined
                            };
                        }
                        
                        s[addr].l = val;
                    };
                    break;
                case 'BrtArrFmla':
                    break;
                // TODO
                case 'BrtShrFmla':
                    break;
                // TODO
                case 'BrtBeginSheet':
                    break;
                case 'BrtWsProp':
                    break;
                // TODO
                case 'BrtSheetCalcProp':
                    break;
                // TODO
                case 'BrtBeginWsViews':
                    break;
                // TODO
                case 'BrtBeginWsView':
                    break;
                // TODO
                case 'BrtPane':
                    break;
                // TODO
                case 'BrtSel':
                    break;
                // TODO
                case 'BrtEndWsView':
                    break;
                // TODO
                case 'BrtEndWsViews':
                    break;
                // TODO
                case 'BrtACBegin':
                    break;
                // TODO
                case 'BrtRwDescent':
                    break;
                // TODO
                case 'BrtACEnd':
                    break;
                // TODO
                case 'BrtWsFmtInfoEx14':
                    break;
                // TODO
                case 'BrtWsFmtInfo':
                    break;
                // TODO
                case 'BrtBeginColInfos':
                    break;
                // TODO
                case 'BrtColInfo':
                    break;
                // TODO
                case 'BrtEndColInfos':
                    break;
                // TODO
                case 'BrtBeginSheetData':
                    break;
                // TODO
                case 'BrtEndSheetData':
                    break;
                // TODO
                case 'BrtSheetProtection':
                    break;
                // TODO
                case 'BrtPrintOptions':
                    break;
                // TODO
                case 'BrtMargins':
                    break;
                // TODO
                case 'BrtPageSetup':
                    break;
                // TODO
                case 'BrtFRTBegin':
                    pass = true;
                    break;
                case 'BrtFRTEnd':
                    pass = false;
                    break;
                case 'BrtEndSheet':
                    break;
                // TODO
                case 'BrtDrawing':
                    break;
                // TODO
                case 'BrtLegacyDrawing':
                    break;
                // TODO
                case 'BrtLegacyDrawingHF':
                    break;
                // TODO
                case 'BrtPhoneticInfo':
                    break;
                // TODO
                case 'BrtBeginHeaderFooter':
                    break;
                // TODO
                case 'BrtEndHeaderFooter':
                    break;
                // TODO
                case 'BrtBrk':
                    break;
                // TODO
                case 'BrtBeginRwBrk':
                    break;
                // TODO
                case 'BrtEndRwBrk':
                    break;
                // TODO
                case 'BrtBeginColBrk':
                    break;
                // TODO
                case 'BrtEndColBrk':
                    break;
                // TODO
                case 'BrtBeginUserShViews':
                    break;
                // TODO
                case 'BrtBeginUserShView':
                    break;
                // TODO
                case 'BrtEndUserShView':
                    break;
                // TODO
                case 'BrtEndUserShViews':
                    break;
                // TODO
                case 'BrtBkHim':
                    break;
                // TODO
                case 'BrtBeginOleObjects':
                    break;
                // TODO
                case 'BrtOleObject':
                    break;
                // TODO
                case 'BrtEndOleObjects':
                    break;
                // TODO
                case 'BrtBeginListParts':
                    break;
                // TODO
                case 'BrtListPart':
                    break;
                // TODO
                case 'BrtEndListParts':
                    break;
                // TODO
                case 'BrtBeginSortState':
                    break;
                // TODO
                case 'BrtBeginSortCond':
                    break;
                // TODO
                case 'BrtEndSortCond':
                    break;
                // TODO
                case 'BrtEndSortState':
                    break;
                // TODO
                case 'BrtBeginConditionalFormatting':
                    break;
                // TODO
                case 'BrtEndConditionalFormatting':
                    break;
                // TODO
                case 'BrtBeginCFRule':
                    break;
                // TODO
                case 'BrtEndCFRule':
                    break;
                // TODO
                case 'BrtBeginDVals':
                    break;
                // TODO
                case 'BrtDVal':
                    break;
                // TODO
                case 'BrtEndDVals':
                    break;
                // TODO
                case 'BrtRangeProtection':
                    break;
                // TODO
                case 'BrtBeginDCon':
                    break;
                // TODO
                case 'BrtEndDCon':
                    break;
                // TODO
                case 'BrtBeginDRefs':
                    break;
                case 'BrtDRef':
                    break;
                case 'BrtEndDRefs':
                    break;
                /* ActiveX */
                case 'BrtBeginActiveXControls':
                    break;
                case 'BrtActiveX':
                    break;
                case 'BrtEndActiveXControls':
                    break;
                /* AutoFilter */
                case 'BrtBeginAFilter':
                    break;
                case 'BrtEndAFilter':
                    break;
                case 'BrtBeginFilterColumn':
                    break;
                case 'BrtBeginFilters':
                    break;
                case 'BrtFilter':
                    break;
                case 'BrtEndFilters':
                    break;
                case 'BrtEndFilterColumn':
                    break;
                case 'BrtDynamicFilter':
                    break;
                case 'BrtTop10Filter':
                    break;
                case 'BrtBeginCustomFilters':
                    break;
                case 'BrtCustomFilter':
                    break;
                case 'BrtEndCustomFilters':
                    break;
                /* Smart Tags */
                case 'BrtBeginSmartTags':
                    break;
                case 'BrtBeginCellSmartTags':
                    break;
                case 'BrtBeginCellSmartTag':
                    break;
                case 'BrtCellSmartTagProperty':
                    break;
                case 'BrtEndCellSmartTag':
                    break;
                case 'BrtEndCellSmartTags':
                    break;
                case 'BrtEndSmartTags':
                    break;
                /* Cell Watch */
                case 'BrtBeginCellWatches':
                    break;
                case 'BrtCellWatch':
                    break;
                case 'BrtEndCellWatches':
                    break;
                /* Table */
                case 'BrtTable':
                    break;
                /* Ignore Cell Errors */
                case 'BrtBeginCellIgnoreECs':
                    break;
                case 'BrtCellIgnoreEC':
                    break;
                case 'BrtEndCellIgnoreECs':
                    break;
                default:
                    if (!pass || opts.WTF)  {
                        throw new Error("Unexpected record " + R.n);
                    }
                    ;
            }
        }, opts);
        if (!s["!ref"] && (refguess.s.r < 1000000 || ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))  {
            s["!ref"] = encode_range(ref);
        }
        
        if (opts.sheetRows && s["!ref"]) {
            var tmpref = safe_decode_range(s["!ref"]);
            if (opts.sheetRows < +tmpref.e.r) {
                tmpref.e.r = opts.sheetRows - 1;
                if (tmpref.e.r > refguess.e.r)  {
                    tmpref.e.r = refguess.e.r;
                }
                
                if (tmpref.e.r < tmpref.s.r)  {
                    tmpref.s.r = tmpref.e.r;
                }
                
                if (tmpref.e.c > refguess.e.c)  {
                    tmpref.e.c = refguess.e.c;
                }
                
                if (tmpref.e.c < tmpref.s.c)  {
                    tmpref.s.c = tmpref.e.c;
                }
                
                s["!fullref"] = s["!ref"];
                s["!ref"] = encode_range(tmpref);
            }
        }
        if (mergecells.length > 0)  {
            s["!merges"] = mergecells;
        }
        
        return s;
    }
    /* TODO: something useful -- this is a stub */
    function write_ws_bin_cell(ba, cell, R, C, opts) {
        if (cell.v === undefined)  {
            return "";
        }
        
        var vv = "";
        switch (cell.t) {
            case 'b':
                vv = cell.v ? "1" : "0";
                break;
            case 'n':
            case 'e':
                vv = '' + cell.v;
                break;
            default:
                vv = cell.v;
                break;
        }
        var o = {
                r: R,
                c: C
            };
        /* TODO: cell style */
        o.s = get_cell_style(opts.cellXfs, cell, opts);
        switch (cell.t) {
            case 's':
            case 'str':
                if (opts.bookSST) {
                    vv = get_sst_id(opts.Strings, cell.v);
                    o.t = "s";
                    break;
                };
                o.t = "str";
                break;
            case 'n':
                break;
            case 'b':
                o.t = "b";
                break;
            case 'e':
                o.t = "e";
                break;
        }
        write_record(ba, "BrtCellBlank", write_BrtCellBlank(cell, o));
    }
    function write_CELLTABLE(ba, ws, idx, opts, wb) {
        var range = safe_decode_range(ws['!ref'] || "A1"),
            ref,
            rr = "",
            cols = [];
        write_record(ba, 'BrtBeginSheetData');
        for (var R = range.s.r; R <= range.e.r; ++R) {
            rr = encode_row(R);
            /* [ACCELLTABLE] */
            /* BrtRowHdr */
            for (var C = range.s.c; C <= range.e.c; ++C) {
                /* *16384CELL */
                if (R === range.s.r)  {
                    cols[C] = encode_col(C);
                }
                
                ref = cols[C] + rr;
                if (!ws[ref])  {
                    
                    continue;
                }
                
                /* write cell */
                write_ws_bin_cell(ba, ws[ref], R, C, opts);
            }
        }
        write_record(ba, 'BrtEndSheetData');
    }
    function write_ws_bin(idx, opts, wb) {
        var ba = buf_array();
        var s = wb.SheetNames[idx],
            ws = wb.Sheets[s] || {};
        var r = safe_decode_range(ws['!ref'] || "A1");
        write_record(ba, "BrtBeginSheet");
        /* [BrtWsProp] */
        write_record(ba, "BrtWsDim", write_BrtWsDim(r));
        /* [WSVIEWS2] */
        /* [WSFMTINFO] */
        /* *COLINFOS */
        write_CELLTABLE(ba, ws, idx, opts, wb);
        /* [BrtSheetCalcProp] */
        /* [[BrtSheetProtectionIso] BrtSheetProtection] */
        /* *([BrtRangeProtectionIso] BrtRangeProtection) */
        /* [SCENMAN] */
        /* [AUTOFILTER] */
        /* [SORTSTATE] */
        /* [DCON] */
        /* [USERSHVIEWS] */
        /* [MERGECELLS] */
        /* [BrtPhoneticInfo] */
        /* *CONDITIONALFORMATTING */
        /* [DVALS] */
        /* *BrtHLink */
        /* [BrtPrintOptions] */
        /* [BrtMargins] */
        /* [BrtPageSetup] */
        /* [HEADERFOOTER] */
        /* [RWBRK] */
        /* [COLBRK] */
        /* *BrtBigName */
        /* [CELLWATCHES] */
        /* [IGNOREECS] */
        /* [SMARTTAGS] */
        /* [BrtDrawing] */
        /* [BrtLegacyDrawing] */
        /* [BrtLegacyDrawingHF] */
        /* [BrtBkHim] */
        /* [OLEOBJECTS] */
        /* [ACTIVEXCONTROLS] */
        /* [WEBPUBITEMS] */
        /* [LISTPARTS] */
        /* FRTWORKSHEET */
        write_record(ba, "BrtEndSheet");
        return ba.end();
    }
    /* 18.2.28 (CT_WorkbookProtection) Defaults */
    var WBPropsDef = [
            [
                'allowRefreshQuery',
                '0'
            ],
            [
                'autoCompressPictures',
                '1'
            ],
            [
                'backupFile',
                '0'
            ],
            [
                'checkCompatibility',
                '0'
            ],
            [
                'codeName',
                ''
            ],
            [
                'date1904',
                '0'
            ],
            [
                'dateCompatibility',
                '1'
            ],
            //['defaultThemeVersion', '0'],
            [
                'filterPrivacy',
                '0'
            ],
            [
                'hidePivotFieldList',
                '0'
            ],
            [
                'promptedSolutions',
                '0'
            ],
            [
                'publishItems',
                '0'
            ],
            [
                'refreshAllConnections',
                false
            ],
            [
                'saveExternalLinkValues',
                '1'
            ],
            [
                'showBorderUnselectedTables',
                '1'
            ],
            [
                'showInkAnnotation',
                '1'
            ],
            [
                'showObjects',
                'all'
            ],
            [
                'showPivotChartFilter',
                '0'
            ]
        ];
    //['updateLinks', 'userSet']
    /* 18.2.30 (CT_BookView) Defaults */
    var WBViewDef = [
            [
                'activeTab',
                '0'
            ],
            [
                'autoFilterDateGrouping',
                '1'
            ],
            [
                'firstSheet',
                '0'
            ],
            [
                'minimized',
                '0'
            ],
            [
                'showHorizontalScroll',
                '1'
            ],
            [
                'showSheetTabs',
                '1'
            ],
            [
                'showVerticalScroll',
                '1'
            ],
            [
                'tabRatio',
                '600'
            ],
            [
                'visibility',
                'visible'
            ]
        ];
    //window{Height,Width}, {x,y}Window
    /* 18.2.19 (CT_Sheet) Defaults */
    var SheetDef = [
            [
                'state',
                'visible'
            ]
        ];
    /* 18.2.2  (CT_CalcPr) Defaults */
    var CalcPrDef = [
            [
                'calcCompleted',
                'true'
            ],
            [
                'calcMode',
                'auto'
            ],
            [
                'calcOnSave',
                'true'
            ],
            [
                'concurrentCalc',
                'true'
            ],
            [
                'fullCalcOnLoad',
                'false'
            ],
            [
                'fullPrecision',
                'true'
            ],
            [
                'iterate',
                'false'
            ],
            [
                'iterateCount',
                '100'
            ],
            [
                'iterateDelta',
                '0.001'
            ],
            [
                'refMode',
                'A1'
            ]
        ];
    /* 18.2.3 (CT_CustomWorkbookView) Defaults */
    var CustomWBViewDef = [
            [
                'autoUpdate',
                'false'
            ],
            [
                'changesSavedWin',
                'false'
            ],
            [
                'includeHiddenRowCol',
                'true'
            ],
            [
                'includePrintSettings',
                'true'
            ],
            [
                'maximized',
                'false'
            ],
            [
                'minimized',
                'false'
            ],
            [
                'onlySync',
                'false'
            ],
            [
                'personalView',
                'false'
            ],
            [
                'showComments',
                'commIndicator'
            ],
            [
                'showFormulaBar',
                'true'
            ],
            [
                'showHorizontalScroll',
                'true'
            ],
            [
                'showObjects',
                'all'
            ],
            [
                'showSheetTabs',
                'true'
            ],
            [
                'showStatusbar',
                'true'
            ],
            [
                'showVerticalScroll',
                'true'
            ],
            [
                'tabRatio',
                '600'
            ],
            [
                'xWindow',
                '0'
            ],
            [
                'yWindow',
                '0'
            ]
        ];
    function push_defaults_array(target, defaults) {
        for (var j = 0; j != target.length; ++j) {
            var w = target[j];
            for (var i = 0; i != defaults.length; ++i) {
                var z = defaults[i];
                if (w[z[0]] == null)  {
                    w[z[0]] = z[1];
                }
                
            }
        }
    }
    function push_defaults(target, defaults) {
        for (var i = 0; i != defaults.length; ++i) {
            var z = defaults[i];
            if (target[z[0]] == null)  {
                target[z[0]] = z[1];
            }
            
        }
    }
    function parse_wb_defaults(wb) {
        push_defaults(wb.WBProps, WBPropsDef);
        push_defaults(wb.CalcPr, CalcPrDef);
        push_defaults_array(wb.WBView, WBViewDef);
        push_defaults_array(wb.Sheets, SheetDef);
        _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, 'date1904');
    }
    /* 18.2 Workbook */
    var wbnsregex = /<\w+:workbook/;
    function parse_wb_xml(data, opts) {
        var wb = {
                AppVersion: {},
                WBProps: {},
                WBView: [],
                Sheets: [],
                CalcPr: {},
                xmlns: ""
            };
        var pass = false,
            xmlns = "xmlns";
        data.match(tagregex).forEach(function xml_wb(x) {
            var y = parsexmltag(x);
            switch (strip_ns(y[0])) {
                case '<?xml':
                    break;
                /* 18.2.27 workbook CT_Workbook 1 */
                case '<workbook':
                    if (x.match(wbnsregex))  {
                        xmlns = "xmlns" + x.match(/<(\w+):/)[1];
                    }
                    ;
                    wb.xmlns = y[xmlns];
                    break;
                case '</workbook>':
                    break;
                /* 18.2.13 fileVersion CT_FileVersion ? */
                case '<fileVersion':
                    delete y[0];
                    wb.AppVersion = y;
                    break;
                case '<fileVersion/>':
                    break;
                /* 18.2.12 fileSharing CT_FileSharing ? */
                case '<fileSharing':
                case '<fileSharing/>':
                    break;
                /* 18.2.28 workbookPr CT_WorkbookPr ? */
                case '<workbookPr':
                    delete y[0];
                    wb.WBProps = y;
                    break;
                case '<workbookPr/>':
                    delete y[0];
                    wb.WBProps = y;
                    break;
                /* 18.2.29 workbookProtection CT_WorkbookProtection ? */
                case '<workbookProtection':
                    break;
                case '<workbookProtection/>':
                    break;
                /* 18.2.1  bookViews CT_BookViews ? */
                case '<bookViews>':
                case '</bookViews>':
                    break;
                /* 18.2.30   workbookView CT_BookView + */
                case '<workbookView':
                    delete y[0];
                    wb.WBView.push(y);
                    break;
                /* 18.2.20 sheets CT_Sheets 1 */
                case '<sheets>':
                case '</sheets>':
                    break;
                // aggregate sheet
                /* 18.2.19   sheet CT_Sheet + */
                case '<sheet':
                    delete y[0];
                    y.name = utf8read(y.name);
                    wb.Sheets.push(y);
                    break;
                /* 18.2.15 functionGroups CT_FunctionGroups ? */
                case '<functionGroups':
                case '<functionGroups/>':
                    break;
                /* 18.2.14   functionGroup CT_FunctionGroup + */
                case '<functionGroup':
                    break;
                /* 18.2.9  externalReferences CT_ExternalReferences ? */
                case '<externalReferences':
                case '</externalReferences>':
                case '<externalReferences>':
                    break;
                /* 18.2.8    externalReference CT_ExternalReference + */
                case '<externalReference':
                    break;
                /* 18.2.6  definedNames CT_DefinedNames ? */
                case '<definedNames/>':
                    break;
                case '<definedNames>':
                case '<definedNames':
                    pass = true;
                    break;
                case '</definedNames>':
                    pass = false;
                    break;
                /* 18.2.5    definedName CT_DefinedName + */
                case '<definedName':
                case '<definedName/>':
                case '</definedName>':
                    break;
                /* 18.2.2  calcPr CT_CalcPr ? */
                case '<calcPr':
                    delete y[0];
                    wb.CalcPr = y;
                    break;
                case '<calcPr/>':
                    delete y[0];
                    wb.CalcPr = y;
                    break;
                /* 18.2.16 oleSize CT_OleSize ? (ref required) */
                case '<oleSize':
                    break;
                /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
                case '<customWorkbookViews>':
                case '</customWorkbookViews>':
                case '<customWorkbookViews':
                    break;
                /* 18.2.3    customWorkbookView CT_CustomWorkbookView + */
                case '<customWorkbookView':
                case '</customWorkbookView>':
                    break;
                /* 18.2.18 pivotCaches CT_PivotCaches ? */
                case '<pivotCaches>':
                case '</pivotCaches>':
                case '<pivotCaches':
                    break;
                /* 18.2.17 pivotCache CT_PivotCache ? */
                case '<pivotCache':
                    break;
                /* 18.2.21 smartTagPr CT_SmartTagPr ? */
                case '<smartTagPr':
                case '<smartTagPr/>':
                    break;
                /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
                case '<smartTagTypes':
                case '<smartTagTypes>':
                case '</smartTagTypes>':
                    break;
                /* 18.2.22   smartTagType CT_SmartTagType ? */
                case '<smartTagType':
                    break;
                /* 18.2.24 webPublishing CT_WebPublishing ? */
                case '<webPublishing':
                case '<webPublishing/>':
                    break;
                /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
                case '<fileRecoveryPr':
                case '<fileRecoveryPr/>':
                    break;
                /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
                case '<webPublishObjects>':
                case '<webPublishObjects':
                case '</webPublishObjects>':
                    break;
                /* 18.2.25 webPublishObject CT_WebPublishObject ? */
                case '<webPublishObject':
                    break;
                /* 18.2.10 extLst CT_ExtensionList ? */
                case '<extLst>':
                case '</extLst>':
                case '<extLst/>':
                    break;
                /* 18.2.7    ext CT_Extension + */
                case '<ext':
                    pass = true;
                    break;
                //TODO: check with versions of excel
                case '</ext>':
                    pass = false;
                    break;
                /* Others */
                case '<ArchID':
                    break;
                case '<AlternateContent':
                    pass = true;
                    break;
                case '</AlternateContent>':
                    pass = false;
                    break;
                default:
                    if (!pass && opts.WTF)  {
                        throw 'unrecognized ' + y[0] + ' in workbook';
                    }
                    ;
            }
        });
        if (XMLNS.main.indexOf(wb.xmlns) === -1)  {
            throw new Error("Unknown Namespace: " + wb.xmlns);
        }
        
        parse_wb_defaults(wb);
        return wb;
    }
    var WB_XML_ROOT = writextag('workbook', null, {
            'xmlns': XMLNS.main[0],
            //'xmlns:mx': XMLNS.mx,
            //'xmlns:s': XMLNS.main[0],
            'xmlns:r': XMLNS.r
        });
    function safe1904(wb) {
        /* TODO: store date1904 somewhere else */
        try {
            return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
        } catch (e) {
            return "false";
        }
    }
    function write_wb_xml(wb, opts) {
        var o = [
                XML_HEADER
            ];
        o[o.length] = WB_XML_ROOT;
        o[o.length] = (writextag('workbookPr', null, {
            date1904: safe1904(wb)
        }));
        o[o.length] = "<sheets>";
        for (var i = 0; i != wb.SheetNames.length; ++i) o[o.length] = (writextag('sheet', null, {
            name: wb.SheetNames[i].substr(0, 31),
            sheetId: "" + (i + 1),
            "r:id": "rId" + (i + 1)
        }));
        o[o.length] = "</sheets>";
        if (o.length > 2) {
            o[o.length] = '</workbook>';
            o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
    }
    /* [MS-XLSB] 2.4.301 BrtBundleSh */
    function parse_BrtBundleSh(data, length) {
        var z = {};
        z.hsState = data.read_shift(4);
        //ST_SheetState
        z.iTabID = data.read_shift(4);
        z.strRelID = parse_RelID(data, length - 8);
        z.name = parse_XLWideString(data);
        return z;
    }
    function write_BrtBundleSh(data, o) {
        if (!o)  {
            o = new_buf(127);
        }
        
        o.write_shift(4, data.hsState);
        o.write_shift(4, data.iTabID);
        write_RelID(data.strRelID, o);
        write_XLWideString(data.name.substr(0, 31), o);
        return o;
    }
    /* [MS-XLSB] 2.4.807 BrtWbProp */
    function parse_BrtWbProp(data, length) {
        data.read_shift(4);
        var dwThemeVersion = data.read_shift(4);
        var strName = (length > 8) ? parse_XLWideString(data) : "";
        return [
            dwThemeVersion,
            strName
        ];
    }
    function write_BrtWbProp(data, o) {
        if (!o)  {
            o = new_buf(8);
        }
        
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
    }
    function parse_BrtFRTArchID$(data, length) {
        var o = {};
        data.read_shift(4);
        o.ArchID = data.read_shift(4);
        data.l += length - 8;
        return o;
    }
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function parse_wb_bin(data, opts) {
        var wb = {
                AppVersion: {},
                WBProps: {},
                WBView: [],
                Sheets: [],
                CalcPr: {},
                xmlns: ""
            };
        var pass = false,
            z;
        recordhopper(data, function hopper_wb(val, R) {
            switch (R.n) {
                case 'BrtBundleSh':
                    wb.Sheets.push(val);
                    break;
                case 'BrtBeginBook':
                    break;
                case 'BrtFileVersion':
                    break;
                case 'BrtWbProp':
                    break;
                case 'BrtACBegin':
                    break;
                case 'BrtAbsPath15':
                    break;
                case 'BrtACEnd':
                    break;
                case 'BrtWbFactoid':
                    break;
                /*case 'BrtBookProtectionIso': break;*/
                case 'BrtBookProtection':
                    break;
                case 'BrtBeginBookViews':
                    break;
                case 'BrtBookView':
                    break;
                case 'BrtEndBookViews':
                    break;
                case 'BrtBeginBundleShs':
                    break;
                case 'BrtEndBundleShs':
                    break;
                case 'BrtBeginFnGroup':
                    break;
                case 'BrtEndFnGroup':
                    break;
                case 'BrtBeginExternals':
                    break;
                case 'BrtSupSelf':
                    break;
                case 'BrtSupBookSrc':
                    break;
                case 'BrtExternSheet':
                    break;
                case 'BrtEndExternals':
                    break;
                case 'BrtName':
                    break;
                case 'BrtCalcProp':
                    break;
                case 'BrtUserBookView':
                    break;
                case 'BrtBeginPivotCacheIDs':
                    break;
                case 'BrtBeginPivotCacheID':
                    break;
                case 'BrtEndPivotCacheID':
                    break;
                case 'BrtEndPivotCacheIDs':
                    break;
                case 'BrtWebOpt':
                    break;
                case 'BrtFileRecover':
                    break;
                case 'BrtFileSharing':
                    break;
                /*case 'BrtBeginWebPubItems': break;
			case 'BrtBeginWebPubItem': break;
			case 'BrtEndWebPubItem': break;
			case 'BrtEndWebPubItems': break;*/
                /* Smart Tags */
                case 'BrtBeginSmartTagTypes':
                    break;
                case 'BrtSmartTagType':
                    break;
                case 'BrtEndSmartTagTypes':
                    break;
                case 'BrtFRTBegin':
                    pass = true;
                    break;
                case 'BrtFRTArchID$':
                    break;
                case 'BrtWorkBookPr15':
                    break;
                case 'BrtFRTEnd':
                    pass = false;
                    break;
                case 'BrtEndBook':
                    break;
                default:
                    if (!pass || opts.WTF)  {
                        throw new Error("Unexpected record " + R.n);
                    }
                    ;
            }
        });
        parse_wb_defaults(wb);
        return wb;
    }
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function write_BUNDLESHS(ba, wb, opts) {
        write_record(ba, "BrtBeginBundleShs");
        for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
            var d = {
                    hsState: 0,
                    iTabID: idx + 1,
                    strRelID: 'rId' + (idx + 1),
                    name: wb.SheetNames[idx]
                };
            write_record(ba, "BrtBundleSh", write_BrtBundleSh(d));
        }
        write_record(ba, "BrtEndBundleShs");
    }
    /* [MS-XLSB] 2.4.643 BrtFileVersion */
    function write_BrtFileVersion(data, o) {
        if (!o)  {
            o = new_buf(127);
        }
        
        for (var i = 0; i != 4; ++i) o.write_shift(4, 0);
        write_XLWideString("SheetJS", o);
        write_XLWideString(XLSX.version, o);
        write_XLWideString(XLSX.version, o);
        write_XLWideString("7262", o);
        o.length = o.l;
        return o;
    }
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function write_BOOKVIEWS(ba, wb, opts) {
        write_record(ba, "BrtBeginBookViews");
        /* 1*(BrtBookView *FRT) */
        write_record(ba, "BrtEndBookViews");
    }
    /* [MS-XLSB] 2.4.302 BrtCalcProp */
    function write_BrtCalcProp(data, o) {
        if (!o)  {
            o = new_buf(26);
        }
        
        o.write_shift(4, 0);
        /* force recalc */
        o.write_shift(4, 1);
        o.write_shift(4, 0);
        write_Xnum(0, o);
        o.write_shift(-4, 1023);
        o.write_shift(1, 51);
        o.write_shift(1, 0);
        return o;
    }
    function write_BrtFileRecover(data, o) {
        if (!o)  {
            o = new_buf(1);
        }
        
        o.write_shift(1, 0);
        return o;
    }
    /* [MS-XLSB] 2.1.7.60 Workbook */
    function write_wb_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, "BrtBeginBook");
        write_record(ba, "BrtFileVersion", write_BrtFileVersion());
        /* [[BrtFileSharingIso] BrtFileSharing] */
        write_record(ba, "BrtWbProp", write_BrtWbProp());
        /* [ACABSPATH] */
        /* [[BrtBookProtectionIso] BrtBookProtection] */
        write_BOOKVIEWS(ba, wb, opts);
        write_BUNDLESHS(ba, wb, opts);
        /* [FNGROUP] */
        /* [EXTERNALS] */
        /* *BrtName */
        write_record(ba, "BrtCalcProp", write_BrtCalcProp());
        /* [BrtOleSize] */
        /* *(BrtUserBookView *FRT) */
        /* [PIVOTCACHEIDS] */
        /* [BrtWbFactoid] */
        /* [SMARTTAGTYPES] */
        /* [BrtWebOpt] */
        write_record(ba, "BrtFileRecover", write_BrtFileRecover());
        /* [WEBPUBITEMS] */
        /* [CRERRS] */
        /* FRTWORKBOOK */
        write_record(ba, "BrtEndBook");
        return ba.end();
    }
    function parse_wb(data, name, opts) {
        return (name.substr(-4) === ".bin" ? parse_wb_bin : parse_wb_xml)(data, opts);
    }
    function parse_ws(data, name, opts, rels) {
        return (name.substr(-4) === ".bin" ? parse_ws_bin : parse_ws_xml)(data, opts, rels);
    }
    function parse_sty(data, name, opts) {
        return (name.substr(-4) === ".bin" ? parse_sty_bin : parse_sty_xml)(data, opts);
    }
    function parse_theme(data, name, opts) {
        return parse_theme_xml(data, opts);
    }
    function parse_sst(data, name, opts) {
        return (name.substr(-4) === ".bin" ? parse_sst_bin : parse_sst_xml)(data, opts);
    }
    function parse_cmnt(data, name, opts) {
        return (name.substr(-4) === ".bin" ? parse_comments_bin : parse_comments_xml)(data, opts);
    }
    function parse_cc(data, name, opts) {
        return (name.substr(-4) === ".bin" ? parse_cc_bin : parse_cc_xml)(data, opts);
    }
    function write_wb(wb, name, opts) {
        return (name.substr(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
    }
    function write_ws(data, name, opts, wb) {
        return (name.substr(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb);
    }
    function write_sty(data, name, opts) {
        return (name.substr(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
    }
    function write_sst(data, name, opts) {
        return (name.substr(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
    }
    /*
function write_cmnt(data, name, opts) {
	return (name.substr(-4)===".bin" ? write_comments_bin : write_comments_xml)(data, opts);
}

function write_cc(data, name, opts) {
	return (name.substr(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
}
*/
    /* [MS-XLSB] 2.3 Record Enumeration */
    var RecordEnum = {
            0: {
                n: "BrtRowHdr",
                f: parse_BrtRowHdr
            },
            1: {
                n: "BrtCellBlank",
                f: parse_BrtCellBlank
            },
            2: {
                n: "BrtCellRk",
                f: parse_BrtCellRk
            },
            3: {
                n: "BrtCellError",
                f: parse_BrtCellError
            },
            4: {
                n: "BrtCellBool",
                f: parse_BrtCellBool
            },
            5: {
                n: "BrtCellReal",
                f: parse_BrtCellReal
            },
            6: {
                n: "BrtCellSt",
                f: parse_BrtCellSt
            },
            7: {
                n: "BrtCellIsst",
                f: parse_BrtCellIsst
            },
            8: {
                n: "BrtFmlaString",
                f: parse_BrtFmlaString
            },
            9: {
                n: "BrtFmlaNum",
                f: parse_BrtFmlaNum
            },
            10: {
                n: "BrtFmlaBool",
                f: parse_BrtFmlaBool
            },
            11: {
                n: "BrtFmlaError",
                f: parse_BrtFmlaError
            },
            16: {
                n: "BrtFRTArchID$",
                f: parse_BrtFRTArchID$
            },
            19: {
                n: "BrtSSTItem",
                f: parse_RichStr
            },
            20: {
                n: "BrtPCDIMissing",
                f: parsenoop
            },
            21: {
                n: "BrtPCDINumber",
                f: parsenoop
            },
            22: {
                n: "BrtPCDIBoolean",
                f: parsenoop
            },
            23: {
                n: "BrtPCDIError",
                f: parsenoop
            },
            24: {
                n: "BrtPCDIString",
                f: parsenoop
            },
            25: {
                n: "BrtPCDIDatetime",
                f: parsenoop
            },
            26: {
                n: "BrtPCDIIndex",
                f: parsenoop
            },
            27: {
                n: "BrtPCDIAMissing",
                f: parsenoop
            },
            28: {
                n: "BrtPCDIANumber",
                f: parsenoop
            },
            29: {
                n: "BrtPCDIABoolean",
                f: parsenoop
            },
            30: {
                n: "BrtPCDIAError",
                f: parsenoop
            },
            31: {
                n: "BrtPCDIAString",
                f: parsenoop
            },
            32: {
                n: "BrtPCDIADatetime",
                f: parsenoop
            },
            33: {
                n: "BrtPCRRecord",
                f: parsenoop
            },
            34: {
                n: "BrtPCRRecordDt",
                f: parsenoop
            },
            35: {
                n: "BrtFRTBegin",
                f: parsenoop
            },
            36: {
                n: "BrtFRTEnd",
                f: parsenoop
            },
            37: {
                n: "BrtACBegin",
                f: parsenoop
            },
            38: {
                n: "BrtACEnd",
                f: parsenoop
            },
            39: {
                n: "BrtName",
                f: parsenoop
            },
            40: {
                n: "BrtIndexRowBlock",
                f: parsenoop
            },
            42: {
                n: "BrtIndexBlock",
                f: parsenoop
            },
            43: {
                n: "BrtFont",
                f: parse_BrtFont
            },
            44: {
                n: "BrtFmt",
                f: parse_BrtFmt
            },
            45: {
                n: "BrtFill",
                f: parsenoop
            },
            46: {
                n: "BrtBorder",
                f: parsenoop
            },
            47: {
                n: "BrtXF",
                f: parse_BrtXF
            },
            48: {
                n: "BrtStyle",
                f: parsenoop
            },
            49: {
                n: "BrtCellMeta",
                f: parsenoop
            },
            50: {
                n: "BrtValueMeta",
                f: parsenoop
            },
            51: {
                n: "BrtMdb",
                f: parsenoop
            },
            52: {
                n: "BrtBeginFmd",
                f: parsenoop
            },
            53: {
                n: "BrtEndFmd",
                f: parsenoop
            },
            54: {
                n: "BrtBeginMdx",
                f: parsenoop
            },
            55: {
                n: "BrtEndMdx",
                f: parsenoop
            },
            56: {
                n: "BrtBeginMdxTuple",
                f: parsenoop
            },
            57: {
                n: "BrtEndMdxTuple",
                f: parsenoop
            },
            58: {
                n: "BrtMdxMbrIstr",
                f: parsenoop
            },
            59: {
                n: "BrtStr",
                f: parsenoop
            },
            60: {
                n: "BrtColInfo",
                f: parsenoop
            },
            62: {
                n: "BrtCellRString",
                f: parsenoop
            },
            63: {
                n: "BrtCalcChainItem$",
                f: parse_BrtCalcChainItem$
            },
            64: {
                n: "BrtDVal",
                f: parsenoop
            },
            65: {
                n: "BrtSxvcellNum",
                f: parsenoop
            },
            66: {
                n: "BrtSxvcellStr",
                f: parsenoop
            },
            67: {
                n: "BrtSxvcellBool",
                f: parsenoop
            },
            68: {
                n: "BrtSxvcellErr",
                f: parsenoop
            },
            69: {
                n: "BrtSxvcellDate",
                f: parsenoop
            },
            70: {
                n: "BrtSxvcellNil",
                f: parsenoop
            },
            128: {
                n: "BrtFileVersion",
                f: parsenoop
            },
            129: {
                n: "BrtBeginSheet",
                f: parsenoop
            },
            130: {
                n: "BrtEndSheet",
                f: parsenoop
            },
            131: {
                n: "BrtBeginBook",
                f: parsenoop,
                p: 0
            },
            132: {
                n: "BrtEndBook",
                f: parsenoop
            },
            133: {
                n: "BrtBeginWsViews",
                f: parsenoop
            },
            134: {
                n: "BrtEndWsViews",
                f: parsenoop
            },
            135: {
                n: "BrtBeginBookViews",
                f: parsenoop
            },
            136: {
                n: "BrtEndBookViews",
                f: parsenoop
            },
            137: {
                n: "BrtBeginWsView",
                f: parsenoop
            },
            138: {
                n: "BrtEndWsView",
                f: parsenoop
            },
            139: {
                n: "BrtBeginCsViews",
                f: parsenoop
            },
            140: {
                n: "BrtEndCsViews",
                f: parsenoop
            },
            141: {
                n: "BrtBeginCsView",
                f: parsenoop
            },
            142: {
                n: "BrtEndCsView",
                f: parsenoop
            },
            143: {
                n: "BrtBeginBundleShs",
                f: parsenoop
            },
            144: {
                n: "BrtEndBundleShs",
                f: parsenoop
            },
            145: {
                n: "BrtBeginSheetData",
                f: parsenoop
            },
            146: {
                n: "BrtEndSheetData",
                f: parsenoop
            },
            147: {
                n: "BrtWsProp",
                f: parse_BrtWsProp
            },
            148: {
                n: "BrtWsDim",
                f: parse_BrtWsDim,
                p: 16
            },
            151: {
                n: "BrtPane",
                f: parsenoop
            },
            152: {
                n: "BrtSel",
                f: parsenoop
            },
            153: {
                n: "BrtWbProp",
                f: parse_BrtWbProp
            },
            154: {
                n: "BrtWbFactoid",
                f: parsenoop
            },
            155: {
                n: "BrtFileRecover",
                f: parsenoop
            },
            156: {
                n: "BrtBundleSh",
                f: parse_BrtBundleSh
            },
            157: {
                n: "BrtCalcProp",
                f: parsenoop
            },
            158: {
                n: "BrtBookView",
                f: parsenoop
            },
            159: {
                n: "BrtBeginSst",
                f: parse_BrtBeginSst
            },
            160: {
                n: "BrtEndSst",
                f: parsenoop
            },
            161: {
                n: "BrtBeginAFilter",
                f: parsenoop
            },
            162: {
                n: "BrtEndAFilter",
                f: parsenoop
            },
            163: {
                n: "BrtBeginFilterColumn",
                f: parsenoop
            },
            164: {
                n: "BrtEndFilterColumn",
                f: parsenoop
            },
            165: {
                n: "BrtBeginFilters",
                f: parsenoop
            },
            166: {
                n: "BrtEndFilters",
                f: parsenoop
            },
            167: {
                n: "BrtFilter",
                f: parsenoop
            },
            168: {
                n: "BrtColorFilter",
                f: parsenoop
            },
            169: {
                n: "BrtIconFilter",
                f: parsenoop
            },
            170: {
                n: "BrtTop10Filter",
                f: parsenoop
            },
            171: {
                n: "BrtDynamicFilter",
                f: parsenoop
            },
            172: {
                n: "BrtBeginCustomFilters",
                f: parsenoop
            },
            173: {
                n: "BrtEndCustomFilters",
                f: parsenoop
            },
            174: {
                n: "BrtCustomFilter",
                f: parsenoop
            },
            175: {
                n: "BrtAFilterDateGroupItem",
                f: parsenoop
            },
            176: {
                n: "BrtMergeCell",
                f: parse_BrtMergeCell
            },
            177: {
                n: "BrtBeginMergeCells",
                f: parsenoop
            },
            178: {
                n: "BrtEndMergeCells",
                f: parsenoop
            },
            179: {
                n: "BrtBeginPivotCacheDef",
                f: parsenoop
            },
            180: {
                n: "BrtEndPivotCacheDef",
                f: parsenoop
            },
            181: {
                n: "BrtBeginPCDFields",
                f: parsenoop
            },
            182: {
                n: "BrtEndPCDFields",
                f: parsenoop
            },
            183: {
                n: "BrtBeginPCDField",
                f: parsenoop
            },
            184: {
                n: "BrtEndPCDField",
                f: parsenoop
            },
            185: {
                n: "BrtBeginPCDSource",
                f: parsenoop
            },
            186: {
                n: "BrtEndPCDSource",
                f: parsenoop
            },
            187: {
                n: "BrtBeginPCDSRange",
                f: parsenoop
            },
            188: {
                n: "BrtEndPCDSRange",
                f: parsenoop
            },
            189: {
                n: "BrtBeginPCDFAtbl",
                f: parsenoop
            },
            190: {
                n: "BrtEndPCDFAtbl",
                f: parsenoop
            },
            191: {
                n: "BrtBeginPCDIRun",
                f: parsenoop
            },
            192: {
                n: "BrtEndPCDIRun",
                f: parsenoop
            },
            193: {
                n: "BrtBeginPivotCacheRecords",
                f: parsenoop
            },
            194: {
                n: "BrtEndPivotCacheRecords",
                f: parsenoop
            },
            195: {
                n: "BrtBeginPCDHierarchies",
                f: parsenoop
            },
            196: {
                n: "BrtEndPCDHierarchies",
                f: parsenoop
            },
            197: {
                n: "BrtBeginPCDHierarchy",
                f: parsenoop
            },
            198: {
                n: "BrtEndPCDHierarchy",
                f: parsenoop
            },
            199: {
                n: "BrtBeginPCDHFieldsUsage",
                f: parsenoop
            },
            200: {
                n: "BrtEndPCDHFieldsUsage",
                f: parsenoop
            },
            201: {
                n: "BrtBeginExtConnection",
                f: parsenoop
            },
            202: {
                n: "BrtEndExtConnection",
                f: parsenoop
            },
            203: {
                n: "BrtBeginECDbProps",
                f: parsenoop
            },
            204: {
                n: "BrtEndECDbProps",
                f: parsenoop
            },
            205: {
                n: "BrtBeginECOlapProps",
                f: parsenoop
            },
            206: {
                n: "BrtEndECOlapProps",
                f: parsenoop
            },
            207: {
                n: "BrtBeginPCDSConsol",
                f: parsenoop
            },
            208: {
                n: "BrtEndPCDSConsol",
                f: parsenoop
            },
            209: {
                n: "BrtBeginPCDSCPages",
                f: parsenoop
            },
            210: {
                n: "BrtEndPCDSCPages",
                f: parsenoop
            },
            211: {
                n: "BrtBeginPCDSCPage",
                f: parsenoop
            },
            212: {
                n: "BrtEndPCDSCPage",
                f: parsenoop
            },
            213: {
                n: "BrtBeginPCDSCPItem",
                f: parsenoop
            },
            214: {
                n: "BrtEndPCDSCPItem",
                f: parsenoop
            },
            215: {
                n: "BrtBeginPCDSCSets",
                f: parsenoop
            },
            216: {
                n: "BrtEndPCDSCSets",
                f: parsenoop
            },
            217: {
                n: "BrtBeginPCDSCSet",
                f: parsenoop
            },
            218: {
                n: "BrtEndPCDSCSet",
                f: parsenoop
            },
            219: {
                n: "BrtBeginPCDFGroup",
                f: parsenoop
            },
            220: {
                n: "BrtEndPCDFGroup",
                f: parsenoop
            },
            221: {
                n: "BrtBeginPCDFGItems",
                f: parsenoop
            },
            222: {
                n: "BrtEndPCDFGItems",
                f: parsenoop
            },
            223: {
                n: "BrtBeginPCDFGRange",
                f: parsenoop
            },
            224: {
                n: "BrtEndPCDFGRange",
                f: parsenoop
            },
            225: {
                n: "BrtBeginPCDFGDiscrete",
                f: parsenoop
            },
            226: {
                n: "BrtEndPCDFGDiscrete",
                f: parsenoop
            },
            227: {
                n: "BrtBeginPCDSDTupleCache",
                f: parsenoop
            },
            228: {
                n: "BrtEndPCDSDTupleCache",
                f: parsenoop
            },
            229: {
                n: "BrtBeginPCDSDTCEntries",
                f: parsenoop
            },
            230: {
                n: "BrtEndPCDSDTCEntries",
                f: parsenoop
            },
            231: {
                n: "BrtBeginPCDSDTCEMembers",
                f: parsenoop
            },
            232: {
                n: "BrtEndPCDSDTCEMembers",
                f: parsenoop
            },
            233: {
                n: "BrtBeginPCDSDTCEMember",
                f: parsenoop
            },
            234: {
                n: "BrtEndPCDSDTCEMember",
                f: parsenoop
            },
            235: {
                n: "BrtBeginPCDSDTCQueries",
                f: parsenoop
            },
            236: {
                n: "BrtEndPCDSDTCQueries",
                f: parsenoop
            },
            237: {
                n: "BrtBeginPCDSDTCQuery",
                f: parsenoop
            },
            238: {
                n: "BrtEndPCDSDTCQuery",
                f: parsenoop
            },
            239: {
                n: "BrtBeginPCDSDTCSets",
                f: parsenoop
            },
            240: {
                n: "BrtEndPCDSDTCSets",
                f: parsenoop
            },
            241: {
                n: "BrtBeginPCDSDTCSet",
                f: parsenoop
            },
            242: {
                n: "BrtEndPCDSDTCSet",
                f: parsenoop
            },
            243: {
                n: "BrtBeginPCDCalcItems",
                f: parsenoop
            },
            244: {
                n: "BrtEndPCDCalcItems",
                f: parsenoop
            },
            245: {
                n: "BrtBeginPCDCalcItem",
                f: parsenoop
            },
            246: {
                n: "BrtEndPCDCalcItem",
                f: parsenoop
            },
            247: {
                n: "BrtBeginPRule",
                f: parsenoop
            },
            248: {
                n: "BrtEndPRule",
                f: parsenoop
            },
            249: {
                n: "BrtBeginPRFilters",
                f: parsenoop
            },
            250: {
                n: "BrtEndPRFilters",
                f: parsenoop
            },
            251: {
                n: "BrtBeginPRFilter",
                f: parsenoop
            },
            252: {
                n: "BrtEndPRFilter",
                f: parsenoop
            },
            253: {
                n: "BrtBeginPNames",
                f: parsenoop
            },
            254: {
                n: "BrtEndPNames",
                f: parsenoop
            },
            255: {
                n: "BrtBeginPName",
                f: parsenoop
            },
            256: {
                n: "BrtEndPName",
                f: parsenoop
            },
            257: {
                n: "BrtBeginPNPairs",
                f: parsenoop
            },
            258: {
                n: "BrtEndPNPairs",
                f: parsenoop
            },
            259: {
                n: "BrtBeginPNPair",
                f: parsenoop
            },
            260: {
                n: "BrtEndPNPair",
                f: parsenoop
            },
            261: {
                n: "BrtBeginECWebProps",
                f: parsenoop
            },
            262: {
                n: "BrtEndECWebProps",
                f: parsenoop
            },
            263: {
                n: "BrtBeginEcWpTables",
                f: parsenoop
            },
            264: {
                n: "BrtEndECWPTables",
                f: parsenoop
            },
            265: {
                n: "BrtBeginECParams",
                f: parsenoop
            },
            266: {
                n: "BrtEndECParams",
                f: parsenoop
            },
            267: {
                n: "BrtBeginECParam",
                f: parsenoop
            },
            268: {
                n: "BrtEndECParam",
                f: parsenoop
            },
            269: {
                n: "BrtBeginPCDKPIs",
                f: parsenoop
            },
            270: {
                n: "BrtEndPCDKPIs",
                f: parsenoop
            },
            271: {
                n: "BrtBeginPCDKPI",
                f: parsenoop
            },
            272: {
                n: "BrtEndPCDKPI",
                f: parsenoop
            },
            273: {
                n: "BrtBeginDims",
                f: parsenoop
            },
            274: {
                n: "BrtEndDims",
                f: parsenoop
            },
            275: {
                n: "BrtBeginDim",
                f: parsenoop
            },
            276: {
                n: "BrtEndDim",
                f: parsenoop
            },
            277: {
                n: "BrtIndexPartEnd",
                f: parsenoop
            },
            278: {
                n: "BrtBeginStyleSheet",
                f: parsenoop
            },
            279: {
                n: "BrtEndStyleSheet",
                f: parsenoop
            },
            280: {
                n: "BrtBeginSXView",
                f: parsenoop
            },
            281: {
                n: "BrtEndSXVI",
                f: parsenoop
            },
            282: {
                n: "BrtBeginSXVI",
                f: parsenoop
            },
            283: {
                n: "BrtBeginSXVIs",
                f: parsenoop
            },
            284: {
                n: "BrtEndSXVIs",
                f: parsenoop
            },
            285: {
                n: "BrtBeginSXVD",
                f: parsenoop
            },
            286: {
                n: "BrtEndSXVD",
                f: parsenoop
            },
            287: {
                n: "BrtBeginSXVDs",
                f: parsenoop
            },
            288: {
                n: "BrtEndSXVDs",
                f: parsenoop
            },
            289: {
                n: "BrtBeginSXPI",
                f: parsenoop
            },
            290: {
                n: "BrtEndSXPI",
                f: parsenoop
            },
            291: {
                n: "BrtBeginSXPIs",
                f: parsenoop
            },
            292: {
                n: "BrtEndSXPIs",
                f: parsenoop
            },
            293: {
                n: "BrtBeginSXDI",
                f: parsenoop
            },
            294: {
                n: "BrtEndSXDI",
                f: parsenoop
            },
            295: {
                n: "BrtBeginSXDIs",
                f: parsenoop
            },
            296: {
                n: "BrtEndSXDIs",
                f: parsenoop
            },
            297: {
                n: "BrtBeginSXLI",
                f: parsenoop
            },
            298: {
                n: "BrtEndSXLI",
                f: parsenoop
            },
            299: {
                n: "BrtBeginSXLIRws",
                f: parsenoop
            },
            300: {
                n: "BrtEndSXLIRws",
                f: parsenoop
            },
            301: {
                n: "BrtBeginSXLICols",
                f: parsenoop
            },
            302: {
                n: "BrtEndSXLICols",
                f: parsenoop
            },
            303: {
                n: "BrtBeginSXFormat",
                f: parsenoop
            },
            304: {
                n: "BrtEndSXFormat",
                f: parsenoop
            },
            305: {
                n: "BrtBeginSXFormats",
                f: parsenoop
            },
            306: {
                n: "BrtEndSxFormats",
                f: parsenoop
            },
            307: {
                n: "BrtBeginSxSelect",
                f: parsenoop
            },
            308: {
                n: "BrtEndSxSelect",
                f: parsenoop
            },
            309: {
                n: "BrtBeginISXVDRws",
                f: parsenoop
            },
            310: {
                n: "BrtEndISXVDRws",
                f: parsenoop
            },
            311: {
                n: "BrtBeginISXVDCols",
                f: parsenoop
            },
            312: {
                n: "BrtEndISXVDCols",
                f: parsenoop
            },
            313: {
                n: "BrtEndSXLocation",
                f: parsenoop
            },
            314: {
                n: "BrtBeginSXLocation",
                f: parsenoop
            },
            315: {
                n: "BrtEndSXView",
                f: parsenoop
            },
            316: {
                n: "BrtBeginSXTHs",
                f: parsenoop
            },
            317: {
                n: "BrtEndSXTHs",
                f: parsenoop
            },
            318: {
                n: "BrtBeginSXTH",
                f: parsenoop
            },
            319: {
                n: "BrtEndSXTH",
                f: parsenoop
            },
            320: {
                n: "BrtBeginISXTHRws",
                f: parsenoop
            },
            321: {
                n: "BrtEndISXTHRws",
                f: parsenoop
            },
            322: {
                n: "BrtBeginISXTHCols",
                f: parsenoop
            },
            323: {
                n: "BrtEndISXTHCols",
                f: parsenoop
            },
            324: {
                n: "BrtBeginSXTDMPS",
                f: parsenoop
            },
            325: {
                n: "BrtEndSXTDMPs",
                f: parsenoop
            },
            326: {
                n: "BrtBeginSXTDMP",
                f: parsenoop
            },
            327: {
                n: "BrtEndSXTDMP",
                f: parsenoop
            },
            328: {
                n: "BrtBeginSXTHItems",
                f: parsenoop
            },
            329: {
                n: "BrtEndSXTHItems",
                f: parsenoop
            },
            330: {
                n: "BrtBeginSXTHItem",
                f: parsenoop
            },
            331: {
                n: "BrtEndSXTHItem",
                f: parsenoop
            },
            332: {
                n: "BrtBeginMetadata",
                f: parsenoop
            },
            333: {
                n: "BrtEndMetadata",
                f: parsenoop
            },
            334: {
                n: "BrtBeginEsmdtinfo",
                f: parsenoop
            },
            335: {
                n: "BrtMdtinfo",
                f: parsenoop
            },
            336: {
                n: "BrtEndEsmdtinfo",
                f: parsenoop
            },
            337: {
                n: "BrtBeginEsmdb",
                f: parsenoop
            },
            338: {
                n: "BrtEndEsmdb",
                f: parsenoop
            },
            339: {
                n: "BrtBeginEsfmd",
                f: parsenoop
            },
            340: {
                n: "BrtEndEsfmd",
                f: parsenoop
            },
            341: {
                n: "BrtBeginSingleCells",
                f: parsenoop
            },
            342: {
                n: "BrtEndSingleCells",
                f: parsenoop
            },
            343: {
                n: "BrtBeginList",
                f: parsenoop
            },
            344: {
                n: "BrtEndList",
                f: parsenoop
            },
            345: {
                n: "BrtBeginListCols",
                f: parsenoop
            },
            346: {
                n: "BrtEndListCols",
                f: parsenoop
            },
            347: {
                n: "BrtBeginListCol",
                f: parsenoop
            },
            348: {
                n: "BrtEndListCol",
                f: parsenoop
            },
            349: {
                n: "BrtBeginListXmlCPr",
                f: parsenoop
            },
            350: {
                n: "BrtEndListXmlCPr",
                f: parsenoop
            },
            351: {
                n: "BrtListCCFmla",
                f: parsenoop
            },
            352: {
                n: "BrtListTrFmla",
                f: parsenoop
            },
            353: {
                n: "BrtBeginExternals",
                f: parsenoop
            },
            354: {
                n: "BrtEndExternals",
                f: parsenoop
            },
            355: {
                n: "BrtSupBookSrc",
                f: parsenoop
            },
            357: {
                n: "BrtSupSelf",
                f: parsenoop
            },
            358: {
                n: "BrtSupSame",
                f: parsenoop
            },
            359: {
                n: "BrtSupTabs",
                f: parsenoop
            },
            360: {
                n: "BrtBeginSupBook",
                f: parsenoop
            },
            361: {
                n: "BrtPlaceholderName",
                f: parsenoop
            },
            362: {
                n: "BrtExternSheet",
                f: parsenoop
            },
            363: {
                n: "BrtExternTableStart",
                f: parsenoop
            },
            364: {
                n: "BrtExternTableEnd",
                f: parsenoop
            },
            366: {
                n: "BrtExternRowHdr",
                f: parsenoop
            },
            367: {
                n: "BrtExternCellBlank",
                f: parsenoop
            },
            368: {
                n: "BrtExternCellReal",
                f: parsenoop
            },
            369: {
                n: "BrtExternCellBool",
                f: parsenoop
            },
            370: {
                n: "BrtExternCellError",
                f: parsenoop
            },
            371: {
                n: "BrtExternCellString",
                f: parsenoop
            },
            372: {
                n: "BrtBeginEsmdx",
                f: parsenoop
            },
            373: {
                n: "BrtEndEsmdx",
                f: parsenoop
            },
            374: {
                n: "BrtBeginMdxSet",
                f: parsenoop
            },
            375: {
                n: "BrtEndMdxSet",
                f: parsenoop
            },
            376: {
                n: "BrtBeginMdxMbrProp",
                f: parsenoop
            },
            377: {
                n: "BrtEndMdxMbrProp",
                f: parsenoop
            },
            378: {
                n: "BrtBeginMdxKPI",
                f: parsenoop
            },
            379: {
                n: "BrtEndMdxKPI",
                f: parsenoop
            },
            380: {
                n: "BrtBeginEsstr",
                f: parsenoop
            },
            381: {
                n: "BrtEndEsstr",
                f: parsenoop
            },
            382: {
                n: "BrtBeginPRFItem",
                f: parsenoop
            },
            383: {
                n: "BrtEndPRFItem",
                f: parsenoop
            },
            384: {
                n: "BrtBeginPivotCacheIDs",
                f: parsenoop
            },
            385: {
                n: "BrtEndPivotCacheIDs",
                f: parsenoop
            },
            386: {
                n: "BrtBeginPivotCacheID",
                f: parsenoop
            },
            387: {
                n: "BrtEndPivotCacheID",
                f: parsenoop
            },
            388: {
                n: "BrtBeginISXVIs",
                f: parsenoop
            },
            389: {
                n: "BrtEndISXVIs",
                f: parsenoop
            },
            390: {
                n: "BrtBeginColInfos",
                f: parsenoop
            },
            391: {
                n: "BrtEndColInfos",
                f: parsenoop
            },
            392: {
                n: "BrtBeginRwBrk",
                f: parsenoop
            },
            393: {
                n: "BrtEndRwBrk",
                f: parsenoop
            },
            394: {
                n: "BrtBeginColBrk",
                f: parsenoop
            },
            395: {
                n: "BrtEndColBrk",
                f: parsenoop
            },
            396: {
                n: "BrtBrk",
                f: parsenoop
            },
            397: {
                n: "BrtUserBookView",
                f: parsenoop
            },
            398: {
                n: "BrtInfo",
                f: parsenoop
            },
            399: {
                n: "BrtCUsr",
                f: parsenoop
            },
            400: {
                n: "BrtUsr",
                f: parsenoop
            },
            401: {
                n: "BrtBeginUsers",
                f: parsenoop
            },
            403: {
                n: "BrtEOF",
                f: parsenoop
            },
            404: {
                n: "BrtUCR",
                f: parsenoop
            },
            405: {
                n: "BrtRRInsDel",
                f: parsenoop
            },
            406: {
                n: "BrtRREndInsDel",
                f: parsenoop
            },
            407: {
                n: "BrtRRMove",
                f: parsenoop
            },
            408: {
                n: "BrtRREndMove",
                f: parsenoop
            },
            409: {
                n: "BrtRRChgCell",
                f: parsenoop
            },
            410: {
                n: "BrtRREndChgCell",
                f: parsenoop
            },
            411: {
                n: "BrtRRHeader",
                f: parsenoop
            },
            412: {
                n: "BrtRRUserView",
                f: parsenoop
            },
            413: {
                n: "BrtRRRenSheet",
                f: parsenoop
            },
            414: {
                n: "BrtRRInsertSh",
                f: parsenoop
            },
            415: {
                n: "BrtRRDefName",
                f: parsenoop
            },
            416: {
                n: "BrtRRNote",
                f: parsenoop
            },
            417: {
                n: "BrtRRConflict",
                f: parsenoop
            },
            418: {
                n: "BrtRRTQSIF",
                f: parsenoop
            },
            419: {
                n: "BrtRRFormat",
                f: parsenoop
            },
            420: {
                n: "BrtRREndFormat",
                f: parsenoop
            },
            421: {
                n: "BrtRRAutoFmt",
                f: parsenoop
            },
            422: {
                n: "BrtBeginUserShViews",
                f: parsenoop
            },
            423: {
                n: "BrtBeginUserShView",
                f: parsenoop
            },
            424: {
                n: "BrtEndUserShView",
                f: parsenoop
            },
            425: {
                n: "BrtEndUserShViews",
                f: parsenoop
            },
            426: {
                n: "BrtArrFmla",
                f: parsenoop
            },
            427: {
                n: "BrtShrFmla",
                f: parsenoop
            },
            428: {
                n: "BrtTable",
                f: parsenoop
            },
            429: {
                n: "BrtBeginExtConnections",
                f: parsenoop
            },
            430: {
                n: "BrtEndExtConnections",
                f: parsenoop
            },
            431: {
                n: "BrtBeginPCDCalcMems",
                f: parsenoop
            },
            432: {
                n: "BrtEndPCDCalcMems",
                f: parsenoop
            },
            433: {
                n: "BrtBeginPCDCalcMem",
                f: parsenoop
            },
            434: {
                n: "BrtEndPCDCalcMem",
                f: parsenoop
            },
            435: {
                n: "BrtBeginPCDHGLevels",
                f: parsenoop
            },
            436: {
                n: "BrtEndPCDHGLevels",
                f: parsenoop
            },
            437: {
                n: "BrtBeginPCDHGLevel",
                f: parsenoop
            },
            438: {
                n: "BrtEndPCDHGLevel",
                f: parsenoop
            },
            439: {
                n: "BrtBeginPCDHGLGroups",
                f: parsenoop
            },
            440: {
                n: "BrtEndPCDHGLGroups",
                f: parsenoop
            },
            441: {
                n: "BrtBeginPCDHGLGroup",
                f: parsenoop
            },
            442: {
                n: "BrtEndPCDHGLGroup",
                f: parsenoop
            },
            443: {
                n: "BrtBeginPCDHGLGMembers",
                f: parsenoop
            },
            444: {
                n: "BrtEndPCDHGLGMembers",
                f: parsenoop
            },
            445: {
                n: "BrtBeginPCDHGLGMember",
                f: parsenoop
            },
            446: {
                n: "BrtEndPCDHGLGMember",
                f: parsenoop
            },
            447: {
                n: "BrtBeginQSI",
                f: parsenoop
            },
            448: {
                n: "BrtEndQSI",
                f: parsenoop
            },
            449: {
                n: "BrtBeginQSIR",
                f: parsenoop
            },
            450: {
                n: "BrtEndQSIR",
                f: parsenoop
            },
            451: {
                n: "BrtBeginDeletedNames",
                f: parsenoop
            },
            452: {
                n: "BrtEndDeletedNames",
                f: parsenoop
            },
            453: {
                n: "BrtBeginDeletedName",
                f: parsenoop
            },
            454: {
                n: "BrtEndDeletedName",
                f: parsenoop
            },
            455: {
                n: "BrtBeginQSIFs",
                f: parsenoop
            },
            456: {
                n: "BrtEndQSIFs",
                f: parsenoop
            },
            457: {
                n: "BrtBeginQSIF",
                f: parsenoop
            },
            458: {
                n: "BrtEndQSIF",
                f: parsenoop
            },
            459: {
                n: "BrtBeginAutoSortScope",
                f: parsenoop
            },
            460: {
                n: "BrtEndAutoSortScope",
                f: parsenoop
            },
            461: {
                n: "BrtBeginConditionalFormatting",
                f: parsenoop
            },
            462: {
                n: "BrtEndConditionalFormatting",
                f: parsenoop
            },
            463: {
                n: "BrtBeginCFRule",
                f: parsenoop
            },
            464: {
                n: "BrtEndCFRule",
                f: parsenoop
            },
            465: {
                n: "BrtBeginIconSet",
                f: parsenoop
            },
            466: {
                n: "BrtEndIconSet",
                f: parsenoop
            },
            467: {
                n: "BrtBeginDatabar",
                f: parsenoop
            },
            468: {
                n: "BrtEndDatabar",
                f: parsenoop
            },
            469: {
                n: "BrtBeginColorScale",
                f: parsenoop
            },
            470: {
                n: "BrtEndColorScale",
                f: parsenoop
            },
            471: {
                n: "BrtCFVO",
                f: parsenoop
            },
            472: {
                n: "BrtExternValueMeta",
                f: parsenoop
            },
            473: {
                n: "BrtBeginColorPalette",
                f: parsenoop
            },
            474: {
                n: "BrtEndColorPalette",
                f: parsenoop
            },
            475: {
                n: "BrtIndexedColor",
                f: parsenoop
            },
            476: {
                n: "BrtMargins",
                f: parsenoop
            },
            477: {
                n: "BrtPrintOptions",
                f: parsenoop
            },
            478: {
                n: "BrtPageSetup",
                f: parsenoop
            },
            479: {
                n: "BrtBeginHeaderFooter",
                f: parsenoop
            },
            480: {
                n: "BrtEndHeaderFooter",
                f: parsenoop
            },
            481: {
                n: "BrtBeginSXCrtFormat",
                f: parsenoop
            },
            482: {
                n: "BrtEndSXCrtFormat",
                f: parsenoop
            },
            483: {
                n: "BrtBeginSXCrtFormats",
                f: parsenoop
            },
            484: {
                n: "BrtEndSXCrtFormats",
                f: parsenoop
            },
            485: {
                n: "BrtWsFmtInfo",
                f: parsenoop
            },
            486: {
                n: "BrtBeginMgs",
                f: parsenoop
            },
            487: {
                n: "BrtEndMGs",
                f: parsenoop
            },
            488: {
                n: "BrtBeginMGMaps",
                f: parsenoop
            },
            489: {
                n: "BrtEndMGMaps",
                f: parsenoop
            },
            490: {
                n: "BrtBeginMG",
                f: parsenoop
            },
            491: {
                n: "BrtEndMG",
                f: parsenoop
            },
            492: {
                n: "BrtBeginMap",
                f: parsenoop
            },
            493: {
                n: "BrtEndMap",
                f: parsenoop
            },
            494: {
                n: "BrtHLink",
                f: parse_BrtHLink
            },
            495: {
                n: "BrtBeginDCon",
                f: parsenoop
            },
            496: {
                n: "BrtEndDCon",
                f: parsenoop
            },
            497: {
                n: "BrtBeginDRefs",
                f: parsenoop
            },
            498: {
                n: "BrtEndDRefs",
                f: parsenoop
            },
            499: {
                n: "BrtDRef",
                f: parsenoop
            },
            500: {
                n: "BrtBeginScenMan",
                f: parsenoop
            },
            501: {
                n: "BrtEndScenMan",
                f: parsenoop
            },
            502: {
                n: "BrtBeginSct",
                f: parsenoop
            },
            503: {
                n: "BrtEndSct",
                f: parsenoop
            },
            504: {
                n: "BrtSlc",
                f: parsenoop
            },
            505: {
                n: "BrtBeginDXFs",
                f: parsenoop
            },
            506: {
                n: "BrtEndDXFs",
                f: parsenoop
            },
            507: {
                n: "BrtDXF",
                f: parsenoop
            },
            508: {
                n: "BrtBeginTableStyles",
                f: parsenoop
            },
            509: {
                n: "BrtEndTableStyles",
                f: parsenoop
            },
            510: {
                n: "BrtBeginTableStyle",
                f: parsenoop
            },
            511: {
                n: "BrtEndTableStyle",
                f: parsenoop
            },
            512: {
                n: "BrtTableStyleElement",
                f: parsenoop
            },
            513: {
                n: "BrtTableStyleClient",
                f: parsenoop
            },
            514: {
                n: "BrtBeginVolDeps",
                f: parsenoop
            },
            515: {
                n: "BrtEndVolDeps",
                f: parsenoop
            },
            516: {
                n: "BrtBeginVolType",
                f: parsenoop
            },
            517: {
                n: "BrtEndVolType",
                f: parsenoop
            },
            518: {
                n: "BrtBeginVolMain",
                f: parsenoop
            },
            519: {
                n: "BrtEndVolMain",
                f: parsenoop
            },
            520: {
                n: "BrtBeginVolTopic",
                f: parsenoop
            },
            521: {
                n: "BrtEndVolTopic",
                f: parsenoop
            },
            522: {
                n: "BrtVolSubtopic",
                f: parsenoop
            },
            523: {
                n: "BrtVolRef",
                f: parsenoop
            },
            524: {
                n: "BrtVolNum",
                f: parsenoop
            },
            525: {
                n: "BrtVolErr",
                f: parsenoop
            },
            526: {
                n: "BrtVolStr",
                f: parsenoop
            },
            527: {
                n: "BrtVolBool",
                f: parsenoop
            },
            528: {
                n: "BrtBeginCalcChain$",
                f: parsenoop
            },
            529: {
                n: "BrtEndCalcChain$",
                f: parsenoop
            },
            530: {
                n: "BrtBeginSortState",
                f: parsenoop
            },
            531: {
                n: "BrtEndSortState",
                f: parsenoop
            },
            532: {
                n: "BrtBeginSortCond",
                f: parsenoop
            },
            533: {
                n: "BrtEndSortCond",
                f: parsenoop
            },
            534: {
                n: "BrtBookProtection",
                f: parsenoop
            },
            535: {
                n: "BrtSheetProtection",
                f: parsenoop
            },
            536: {
                n: "BrtRangeProtection",
                f: parsenoop
            },
            537: {
                n: "BrtPhoneticInfo",
                f: parsenoop
            },
            538: {
                n: "BrtBeginECTxtWiz",
                f: parsenoop
            },
            539: {
                n: "BrtEndECTxtWiz",
                f: parsenoop
            },
            540: {
                n: "BrtBeginECTWFldInfoLst",
                f: parsenoop
            },
            541: {
                n: "BrtEndECTWFldInfoLst",
                f: parsenoop
            },
            542: {
                n: "BrtBeginECTwFldInfo",
                f: parsenoop
            },
            548: {
                n: "BrtFileSharing",
                f: parsenoop
            },
            549: {
                n: "BrtOleSize",
                f: parsenoop
            },
            550: {
                n: "BrtDrawing",
                f: parsenoop
            },
            551: {
                n: "BrtLegacyDrawing",
                f: parsenoop
            },
            552: {
                n: "BrtLegacyDrawingHF",
                f: parsenoop
            },
            553: {
                n: "BrtWebOpt",
                f: parsenoop
            },
            554: {
                n: "BrtBeginWebPubItems",
                f: parsenoop
            },
            555: {
                n: "BrtEndWebPubItems",
                f: parsenoop
            },
            556: {
                n: "BrtBeginWebPubItem",
                f: parsenoop
            },
            557: {
                n: "BrtEndWebPubItem",
                f: parsenoop
            },
            558: {
                n: "BrtBeginSXCondFmt",
                f: parsenoop
            },
            559: {
                n: "BrtEndSXCondFmt",
                f: parsenoop
            },
            560: {
                n: "BrtBeginSXCondFmts",
                f: parsenoop
            },
            561: {
                n: "BrtEndSXCondFmts",
                f: parsenoop
            },
            562: {
                n: "BrtBkHim",
                f: parsenoop
            },
            564: {
                n: "BrtColor",
                f: parsenoop
            },
            565: {
                n: "BrtBeginIndexedColors",
                f: parsenoop
            },
            566: {
                n: "BrtEndIndexedColors",
                f: parsenoop
            },
            569: {
                n: "BrtBeginMRUColors",
                f: parsenoop
            },
            570: {
                n: "BrtEndMRUColors",
                f: parsenoop
            },
            572: {
                n: "BrtMRUColor",
                f: parsenoop
            },
            573: {
                n: "BrtBeginDVals",
                f: parsenoop
            },
            574: {
                n: "BrtEndDVals",
                f: parsenoop
            },
            577: {
                n: "BrtSupNameStart",
                f: parsenoop
            },
            578: {
                n: "BrtSupNameValueStart",
                f: parsenoop
            },
            579: {
                n: "BrtSupNameValueEnd",
                f: parsenoop
            },
            580: {
                n: "BrtSupNameNum",
                f: parsenoop
            },
            581: {
                n: "BrtSupNameErr",
                f: parsenoop
            },
            582: {
                n: "BrtSupNameSt",
                f: parsenoop
            },
            583: {
                n: "BrtSupNameNil",
                f: parsenoop
            },
            584: {
                n: "BrtSupNameBool",
                f: parsenoop
            },
            585: {
                n: "BrtSupNameFmla",
                f: parsenoop
            },
            586: {
                n: "BrtSupNameBits",
                f: parsenoop
            },
            587: {
                n: "BrtSupNameEnd",
                f: parsenoop
            },
            588: {
                n: "BrtEndSupBook",
                f: parsenoop
            },
            589: {
                n: "BrtCellSmartTagProperty",
                f: parsenoop
            },
            590: {
                n: "BrtBeginCellSmartTag",
                f: parsenoop
            },
            591: {
                n: "BrtEndCellSmartTag",
                f: parsenoop
            },
            592: {
                n: "BrtBeginCellSmartTags",
                f: parsenoop
            },
            593: {
                n: "BrtEndCellSmartTags",
                f: parsenoop
            },
            594: {
                n: "BrtBeginSmartTags",
                f: parsenoop
            },
            595: {
                n: "BrtEndSmartTags",
                f: parsenoop
            },
            596: {
                n: "BrtSmartTagType",
                f: parsenoop
            },
            597: {
                n: "BrtBeginSmartTagTypes",
                f: parsenoop
            },
            598: {
                n: "BrtEndSmartTagTypes",
                f: parsenoop
            },
            599: {
                n: "BrtBeginSXFilters",
                f: parsenoop
            },
            600: {
                n: "BrtEndSXFilters",
                f: parsenoop
            },
            601: {
                n: "BrtBeginSXFILTER",
                f: parsenoop
            },
            602: {
                n: "BrtEndSXFilter",
                f: parsenoop
            },
            603: {
                n: "BrtBeginFills",
                f: parsenoop
            },
            604: {
                n: "BrtEndFills",
                f: parsenoop
            },
            605: {
                n: "BrtBeginCellWatches",
                f: parsenoop
            },
            606: {
                n: "BrtEndCellWatches",
                f: parsenoop
            },
            607: {
                n: "BrtCellWatch",
                f: parsenoop
            },
            608: {
                n: "BrtBeginCRErrs",
                f: parsenoop
            },
            609: {
                n: "BrtEndCRErrs",
                f: parsenoop
            },
            610: {
                n: "BrtCrashRecErr",
                f: parsenoop
            },
            611: {
                n: "BrtBeginFonts",
                f: parsenoop
            },
            612: {
                n: "BrtEndFonts",
                f: parsenoop
            },
            613: {
                n: "BrtBeginBorders",
                f: parsenoop
            },
            614: {
                n: "BrtEndBorders",
                f: parsenoop
            },
            615: {
                n: "BrtBeginFmts",
                f: parsenoop
            },
            616: {
                n: "BrtEndFmts",
                f: parsenoop
            },
            617: {
                n: "BrtBeginCellXFs",
                f: parsenoop
            },
            618: {
                n: "BrtEndCellXFs",
                f: parsenoop
            },
            619: {
                n: "BrtBeginStyles",
                f: parsenoop
            },
            620: {
                n: "BrtEndStyles",
                f: parsenoop
            },
            625: {
                n: "BrtBigName",
                f: parsenoop
            },
            626: {
                n: "BrtBeginCellStyleXFs",
                f: parsenoop
            },
            627: {
                n: "BrtEndCellStyleXFs",
                f: parsenoop
            },
            628: {
                n: "BrtBeginComments",
                f: parsenoop
            },
            629: {
                n: "BrtEndComments",
                f: parsenoop
            },
            630: {
                n: "BrtBeginCommentAuthors",
                f: parsenoop
            },
            631: {
                n: "BrtEndCommentAuthors",
                f: parsenoop
            },
            632: {
                n: "BrtCommentAuthor",
                f: parse_BrtCommentAuthor
            },
            633: {
                n: "BrtBeginCommentList",
                f: parsenoop
            },
            634: {
                n: "BrtEndCommentList",
                f: parsenoop
            },
            635: {
                n: "BrtBeginComment",
                f: parse_BrtBeginComment
            },
            636: {
                n: "BrtEndComment",
                f: parsenoop
            },
            637: {
                n: "BrtCommentText",
                f: parse_BrtCommentText
            },
            638: {
                n: "BrtBeginOleObjects",
                f: parsenoop
            },
            639: {
                n: "BrtOleObject",
                f: parsenoop
            },
            640: {
                n: "BrtEndOleObjects",
                f: parsenoop
            },
            641: {
                n: "BrtBeginSxrules",
                f: parsenoop
            },
            642: {
                n: "BrtEndSxRules",
                f: parsenoop
            },
            643: {
                n: "BrtBeginActiveXControls",
                f: parsenoop
            },
            644: {
                n: "BrtActiveX",
                f: parsenoop
            },
            645: {
                n: "BrtEndActiveXControls",
                f: parsenoop
            },
            646: {
                n: "BrtBeginPCDSDTCEMembersSortBy",
                f: parsenoop
            },
            648: {
                n: "BrtBeginCellIgnoreECs",
                f: parsenoop
            },
            649: {
                n: "BrtCellIgnoreEC",
                f: parsenoop
            },
            650: {
                n: "BrtEndCellIgnoreECs",
                f: parsenoop
            },
            651: {
                n: "BrtCsProp",
                f: parsenoop
            },
            652: {
                n: "BrtCsPageSetup",
                f: parsenoop
            },
            653: {
                n: "BrtBeginUserCsViews",
                f: parsenoop
            },
            654: {
                n: "BrtEndUserCsViews",
                f: parsenoop
            },
            655: {
                n: "BrtBeginUserCsView",
                f: parsenoop
            },
            656: {
                n: "BrtEndUserCsView",
                f: parsenoop
            },
            657: {
                n: "BrtBeginPcdSFCIEntries",
                f: parsenoop
            },
            658: {
                n: "BrtEndPCDSFCIEntries",
                f: parsenoop
            },
            659: {
                n: "BrtPCDSFCIEntry",
                f: parsenoop
            },
            660: {
                n: "BrtBeginListParts",
                f: parsenoop
            },
            661: {
                n: "BrtListPart",
                f: parsenoop
            },
            662: {
                n: "BrtEndListParts",
                f: parsenoop
            },
            663: {
                n: "BrtSheetCalcProp",
                f: parsenoop
            },
            664: {
                n: "BrtBeginFnGroup",
                f: parsenoop
            },
            665: {
                n: "BrtFnGroup",
                f: parsenoop
            },
            666: {
                n: "BrtEndFnGroup",
                f: parsenoop
            },
            667: {
                n: "BrtSupAddin",
                f: parsenoop
            },
            668: {
                n: "BrtSXTDMPOrder",
                f: parsenoop
            },
            669: {
                n: "BrtCsProtection",
                f: parsenoop
            },
            671: {
                n: "BrtBeginWsSortMap",
                f: parsenoop
            },
            672: {
                n: "BrtEndWsSortMap",
                f: parsenoop
            },
            673: {
                n: "BrtBeginRRSort",
                f: parsenoop
            },
            674: {
                n: "BrtEndRRSort",
                f: parsenoop
            },
            675: {
                n: "BrtRRSortItem",
                f: parsenoop
            },
            676: {
                n: "BrtFileSharingIso",
                f: parsenoop
            },
            677: {
                n: "BrtBookProtectionIso",
                f: parsenoop
            },
            678: {
                n: "BrtSheetProtectionIso",
                f: parsenoop
            },
            679: {
                n: "BrtCsProtectionIso",
                f: parsenoop
            },
            680: {
                n: "BrtRangeProtectionIso",
                f: parsenoop
            },
            1024: {
                n: "BrtRwDescent",
                f: parsenoop
            },
            1025: {
                n: "BrtKnownFonts",
                f: parsenoop
            },
            1026: {
                n: "BrtBeginSXTupleSet",
                f: parsenoop
            },
            1027: {
                n: "BrtEndSXTupleSet",
                f: parsenoop
            },
            1028: {
                n: "BrtBeginSXTupleSetHeader",
                f: parsenoop
            },
            1029: {
                n: "BrtEndSXTupleSetHeader",
                f: parsenoop
            },
            1030: {
                n: "BrtSXTupleSetHeaderItem",
                f: parsenoop
            },
            1031: {
                n: "BrtBeginSXTupleSetData",
                f: parsenoop
            },
            1032: {
                n: "BrtEndSXTupleSetData",
                f: parsenoop
            },
            1033: {
                n: "BrtBeginSXTupleSetRow",
                f: parsenoop
            },
            1034: {
                n: "BrtEndSXTupleSetRow",
                f: parsenoop
            },
            1035: {
                n: "BrtSXTupleSetRowItem",
                f: parsenoop
            },
            1036: {
                n: "BrtNameExt",
                f: parsenoop
            },
            1037: {
                n: "BrtPCDH14",
                f: parsenoop
            },
            1038: {
                n: "BrtBeginPCDCalcMem14",
                f: parsenoop
            },
            1039: {
                n: "BrtEndPCDCalcMem14",
                f: parsenoop
            },
            1040: {
                n: "BrtSXTH14",
                f: parsenoop
            },
            1041: {
                n: "BrtBeginSparklineGroup",
                f: parsenoop
            },
            1042: {
                n: "BrtEndSparklineGroup",
                f: parsenoop
            },
            1043: {
                n: "BrtSparkline",
                f: parsenoop
            },
            1044: {
                n: "BrtSXDI14",
                f: parsenoop
            },
            1045: {
                n: "BrtWsFmtInfoEx14",
                f: parsenoop
            },
            1046: {
                n: "BrtBeginConditionalFormatting14",
                f: parsenoop
            },
            1047: {
                n: "BrtEndConditionalFormatting14",
                f: parsenoop
            },
            1048: {
                n: "BrtBeginCFRule14",
                f: parsenoop
            },
            1049: {
                n: "BrtEndCFRule14",
                f: parsenoop
            },
            1050: {
                n: "BrtCFVO14",
                f: parsenoop
            },
            1051: {
                n: "BrtBeginDatabar14",
                f: parsenoop
            },
            1052: {
                n: "BrtBeginIconSet14",
                f: parsenoop
            },
            1053: {
                n: "BrtDVal14",
                f: parsenoop
            },
            1054: {
                n: "BrtBeginDVals14",
                f: parsenoop
            },
            1055: {
                n: "BrtColor14",
                f: parsenoop
            },
            1056: {
                n: "BrtBeginSparklines",
                f: parsenoop
            },
            1057: {
                n: "BrtEndSparklines",
                f: parsenoop
            },
            1058: {
                n: "BrtBeginSparklineGroups",
                f: parsenoop
            },
            1059: {
                n: "BrtEndSparklineGroups",
                f: parsenoop
            },
            1061: {
                n: "BrtSXVD14",
                f: parsenoop
            },
            1062: {
                n: "BrtBeginSxview14",
                f: parsenoop
            },
            1063: {
                n: "BrtEndSxview14",
                f: parsenoop
            },
            1066: {
                n: "BrtBeginPCD14",
                f: parsenoop
            },
            1067: {
                n: "BrtEndPCD14",
                f: parsenoop
            },
            1068: {
                n: "BrtBeginExtConn14",
                f: parsenoop
            },
            1069: {
                n: "BrtEndExtConn14",
                f: parsenoop
            },
            1070: {
                n: "BrtBeginSlicerCacheIDs",
                f: parsenoop
            },
            1071: {
                n: "BrtEndSlicerCacheIDs",
                f: parsenoop
            },
            1072: {
                n: "BrtBeginSlicerCacheID",
                f: parsenoop
            },
            1073: {
                n: "BrtEndSlicerCacheID",
                f: parsenoop
            },
            1075: {
                n: "BrtBeginSlicerCache",
                f: parsenoop
            },
            1076: {
                n: "BrtEndSlicerCache",
                f: parsenoop
            },
            1077: {
                n: "BrtBeginSlicerCacheDef",
                f: parsenoop
            },
            1078: {
                n: "BrtEndSlicerCacheDef",
                f: parsenoop
            },
            1079: {
                n: "BrtBeginSlicersEx",
                f: parsenoop
            },
            1080: {
                n: "BrtEndSlicersEx",
                f: parsenoop
            },
            1081: {
                n: "BrtBeginSlicerEx",
                f: parsenoop
            },
            1082: {
                n: "BrtEndSlicerEx",
                f: parsenoop
            },
            1083: {
                n: "BrtBeginSlicer",
                f: parsenoop
            },
            1084: {
                n: "BrtEndSlicer",
                f: parsenoop
            },
            1085: {
                n: "BrtSlicerCachePivotTables",
                f: parsenoop
            },
            1086: {
                n: "BrtBeginSlicerCacheOlapImpl",
                f: parsenoop
            },
            1087: {
                n: "BrtEndSlicerCacheOlapImpl",
                f: parsenoop
            },
            1088: {
                n: "BrtBeginSlicerCacheLevelsData",
                f: parsenoop
            },
            1089: {
                n: "BrtEndSlicerCacheLevelsData",
                f: parsenoop
            },
            1090: {
                n: "BrtBeginSlicerCacheLevelData",
                f: parsenoop
            },
            1091: {
                n: "BrtEndSlicerCacheLevelData",
                f: parsenoop
            },
            1092: {
                n: "BrtBeginSlicerCacheSiRanges",
                f: parsenoop
            },
            1093: {
                n: "BrtEndSlicerCacheSiRanges",
                f: parsenoop
            },
            1094: {
                n: "BrtBeginSlicerCacheSiRange",
                f: parsenoop
            },
            1095: {
                n: "BrtEndSlicerCacheSiRange",
                f: parsenoop
            },
            1096: {
                n: "BrtSlicerCacheOlapItem",
                f: parsenoop
            },
            1097: {
                n: "BrtBeginSlicerCacheSelections",
                f: parsenoop
            },
            1098: {
                n: "BrtSlicerCacheSelection",
                f: parsenoop
            },
            1099: {
                n: "BrtEndSlicerCacheSelections",
                f: parsenoop
            },
            1100: {
                n: "BrtBeginSlicerCacheNative",
                f: parsenoop
            },
            1101: {
                n: "BrtEndSlicerCacheNative",
                f: parsenoop
            },
            1102: {
                n: "BrtSlicerCacheNativeItem",
                f: parsenoop
            },
            1103: {
                n: "BrtRangeProtection14",
                f: parsenoop
            },
            1104: {
                n: "BrtRangeProtectionIso14",
                f: parsenoop
            },
            1105: {
                n: "BrtCellIgnoreEC14",
                f: parsenoop
            },
            1111: {
                n: "BrtList14",
                f: parsenoop
            },
            1112: {
                n: "BrtCFIcon",
                f: parsenoop
            },
            1113: {
                n: "BrtBeginSlicerCachesPivotCacheIDs",
                f: parsenoop
            },
            1114: {
                n: "BrtEndSlicerCachesPivotCacheIDs",
                f: parsenoop
            },
            1115: {
                n: "BrtBeginSlicers",
                f: parsenoop
            },
            1116: {
                n: "BrtEndSlicers",
                f: parsenoop
            },
            1117: {
                n: "BrtWbProp14",
                f: parsenoop
            },
            1118: {
                n: "BrtBeginSXEdit",
                f: parsenoop
            },
            1119: {
                n: "BrtEndSXEdit",
                f: parsenoop
            },
            1120: {
                n: "BrtBeginSXEdits",
                f: parsenoop
            },
            1121: {
                n: "BrtEndSXEdits",
                f: parsenoop
            },
            1122: {
                n: "BrtBeginSXChange",
                f: parsenoop
            },
            1123: {
                n: "BrtEndSXChange",
                f: parsenoop
            },
            1124: {
                n: "BrtBeginSXChanges",
                f: parsenoop
            },
            1125: {
                n: "BrtEndSXChanges",
                f: parsenoop
            },
            1126: {
                n: "BrtSXTupleItems",
                f: parsenoop
            },
            1128: {
                n: "BrtBeginSlicerStyle",
                f: parsenoop
            },
            1129: {
                n: "BrtEndSlicerStyle",
                f: parsenoop
            },
            1130: {
                n: "BrtSlicerStyleElement",
                f: parsenoop
            },
            1131: {
                n: "BrtBeginStyleSheetExt14",
                f: parsenoop
            },
            1132: {
                n: "BrtEndStyleSheetExt14",
                f: parsenoop
            },
            1133: {
                n: "BrtBeginSlicerCachesPivotCacheID",
                f: parsenoop
            },
            1134: {
                n: "BrtEndSlicerCachesPivotCacheID",
                f: parsenoop
            },
            1135: {
                n: "BrtBeginConditionalFormattings",
                f: parsenoop
            },
            1136: {
                n: "BrtEndConditionalFormattings",
                f: parsenoop
            },
            1137: {
                n: "BrtBeginPCDCalcMemExt",
                f: parsenoop
            },
            1138: {
                n: "BrtEndPCDCalcMemExt",
                f: parsenoop
            },
            1139: {
                n: "BrtBeginPCDCalcMemsExt",
                f: parsenoop
            },
            1140: {
                n: "BrtEndPCDCalcMemsExt",
                f: parsenoop
            },
            1141: {
                n: "BrtPCDField14",
                f: parsenoop
            },
            1142: {
                n: "BrtBeginSlicerStyles",
                f: parsenoop
            },
            1143: {
                n: "BrtEndSlicerStyles",
                f: parsenoop
            },
            1144: {
                n: "BrtBeginSlicerStyleElements",
                f: parsenoop
            },
            1145: {
                n: "BrtEndSlicerStyleElements",
                f: parsenoop
            },
            1146: {
                n: "BrtCFRuleExt",
                f: parsenoop
            },
            1147: {
                n: "BrtBeginSXCondFmt14",
                f: parsenoop
            },
            1148: {
                n: "BrtEndSXCondFmt14",
                f: parsenoop
            },
            1149: {
                n: "BrtBeginSXCondFmts14",
                f: parsenoop
            },
            1150: {
                n: "BrtEndSXCondFmts14",
                f: parsenoop
            },
            1152: {
                n: "BrtBeginSortCond14",
                f: parsenoop
            },
            1153: {
                n: "BrtEndSortCond14",
                f: parsenoop
            },
            1154: {
                n: "BrtEndDVals14",
                f: parsenoop
            },
            1155: {
                n: "BrtEndIconSet14",
                f: parsenoop
            },
            1156: {
                n: "BrtEndDatabar14",
                f: parsenoop
            },
            1157: {
                n: "BrtBeginColorScale14",
                f: parsenoop
            },
            1158: {
                n: "BrtEndColorScale14",
                f: parsenoop
            },
            1159: {
                n: "BrtBeginSxrules14",
                f: parsenoop
            },
            1160: {
                n: "BrtEndSxrules14",
                f: parsenoop
            },
            1161: {
                n: "BrtBeginPRule14",
                f: parsenoop
            },
            1162: {
                n: "BrtEndPRule14",
                f: parsenoop
            },
            1163: {
                n: "BrtBeginPRFilters14",
                f: parsenoop
            },
            1164: {
                n: "BrtEndPRFilters14",
                f: parsenoop
            },
            1165: {
                n: "BrtBeginPRFilter14",
                f: parsenoop
            },
            1166: {
                n: "BrtEndPRFilter14",
                f: parsenoop
            },
            1167: {
                n: "BrtBeginPRFItem14",
                f: parsenoop
            },
            1168: {
                n: "BrtEndPRFItem14",
                f: parsenoop
            },
            1169: {
                n: "BrtBeginCellIgnoreECs14",
                f: parsenoop
            },
            1170: {
                n: "BrtEndCellIgnoreECs14",
                f: parsenoop
            },
            1171: {
                n: "BrtDxf14",
                f: parsenoop
            },
            1172: {
                n: "BrtBeginDxF14s",
                f: parsenoop
            },
            1173: {
                n: "BrtEndDxf14s",
                f: parsenoop
            },
            1177: {
                n: "BrtFilter14",
                f: parsenoop
            },
            1178: {
                n: "BrtBeginCustomFilters14",
                f: parsenoop
            },
            1180: {
                n: "BrtCustomFilter14",
                f: parsenoop
            },
            1181: {
                n: "BrtIconFilter14",
                f: parsenoop
            },
            1182: {
                n: "BrtPivotCacheConnectionName",
                f: parsenoop
            },
            2048: {
                n: "BrtBeginDecoupledPivotCacheIDs",
                f: parsenoop
            },
            2049: {
                n: "BrtEndDecoupledPivotCacheIDs",
                f: parsenoop
            },
            2050: {
                n: "BrtDecoupledPivotCacheID",
                f: parsenoop
            },
            2051: {
                n: "BrtBeginPivotTableRefs",
                f: parsenoop
            },
            2052: {
                n: "BrtEndPivotTableRefs",
                f: parsenoop
            },
            2053: {
                n: "BrtPivotTableRef",
                f: parsenoop
            },
            2054: {
                n: "BrtSlicerCacheBookPivotTables",
                f: parsenoop
            },
            2055: {
                n: "BrtBeginSxvcells",
                f: parsenoop
            },
            2056: {
                n: "BrtEndSxvcells",
                f: parsenoop
            },
            2057: {
                n: "BrtBeginSxRow",
                f: parsenoop
            },
            2058: {
                n: "BrtEndSxRow",
                f: parsenoop
            },
            2060: {
                n: "BrtPcdCalcMem15",
                f: parsenoop
            },
            2067: {
                n: "BrtQsi15",
                f: parsenoop
            },
            2068: {
                n: "BrtBeginWebExtensions",
                f: parsenoop
            },
            2069: {
                n: "BrtEndWebExtensions",
                f: parsenoop
            },
            2070: {
                n: "BrtWebExtension",
                f: parsenoop
            },
            2071: {
                n: "BrtAbsPath15",
                f: parsenoop
            },
            2072: {
                n: "BrtBeginPivotTableUISettings",
                f: parsenoop
            },
            2073: {
                n: "BrtEndPivotTableUISettings",
                f: parsenoop
            },
            2075: {
                n: "BrtTableSlicerCacheIDs",
                f: parsenoop
            },
            2076: {
                n: "BrtTableSlicerCacheID",
                f: parsenoop
            },
            2077: {
                n: "BrtBeginTableSlicerCache",
                f: parsenoop
            },
            2078: {
                n: "BrtEndTableSlicerCache",
                f: parsenoop
            },
            2079: {
                n: "BrtSxFilter15",
                f: parsenoop
            },
            2080: {
                n: "BrtBeginTimelineCachePivotCacheIDs",
                f: parsenoop
            },
            2081: {
                n: "BrtEndTimelineCachePivotCacheIDs",
                f: parsenoop
            },
            2082: {
                n: "BrtTimelineCachePivotCacheID",
                f: parsenoop
            },
            2083: {
                n: "BrtBeginTimelineCacheIDs",
                f: parsenoop
            },
            2084: {
                n: "BrtEndTimelineCacheIDs",
                f: parsenoop
            },
            2085: {
                n: "BrtBeginTimelineCacheID",
                f: parsenoop
            },
            2086: {
                n: "BrtEndTimelineCacheID",
                f: parsenoop
            },
            2087: {
                n: "BrtBeginTimelinesEx",
                f: parsenoop
            },
            2088: {
                n: "BrtEndTimelinesEx",
                f: parsenoop
            },
            2089: {
                n: "BrtBeginTimelineEx",
                f: parsenoop
            },
            2090: {
                n: "BrtEndTimelineEx",
                f: parsenoop
            },
            2091: {
                n: "BrtWorkBookPr15",
                f: parsenoop
            },
            2092: {
                n: "BrtPCDH15",
                f: parsenoop
            },
            2093: {
                n: "BrtBeginTimelineStyle",
                f: parsenoop
            },
            2094: {
                n: "BrtEndTimelineStyle",
                f: parsenoop
            },
            2095: {
                n: "BrtTimelineStyleElement",
                f: parsenoop
            },
            2096: {
                n: "BrtBeginTimelineStylesheetExt15",
                f: parsenoop
            },
            2097: {
                n: "BrtEndTimelineStylesheetExt15",
                f: parsenoop
            },
            2098: {
                n: "BrtBeginTimelineStyles",
                f: parsenoop
            },
            2099: {
                n: "BrtEndTimelineStyles",
                f: parsenoop
            },
            2100: {
                n: "BrtBeginTimelineStyleElements",
                f: parsenoop
            },
            2101: {
                n: "BrtEndTimelineStyleElements",
                f: parsenoop
            },
            2102: {
                n: "BrtDxf15",
                f: parsenoop
            },
            2103: {
                n: "BrtBeginDxfs15",
                f: parsenoop
            },
            2104: {
                n: "brtEndDxfs15",
                f: parsenoop
            },
            2105: {
                n: "BrtSlicerCacheHideItemsWithNoData",
                f: parsenoop
            },
            2106: {
                n: "BrtBeginItemUniqueNames",
                f: parsenoop
            },
            2107: {
                n: "BrtEndItemUniqueNames",
                f: parsenoop
            },
            2108: {
                n: "BrtItemUniqueName",
                f: parsenoop
            },
            2109: {
                n: "BrtBeginExtConn15",
                f: parsenoop
            },
            2110: {
                n: "BrtEndExtConn15",
                f: parsenoop
            },
            2111: {
                n: "BrtBeginOledbPr15",
                f: parsenoop
            },
            2112: {
                n: "BrtEndOledbPr15",
                f: parsenoop
            },
            2113: {
                n: "BrtBeginDataFeedPr15",
                f: parsenoop
            },
            2114: {
                n: "BrtEndDataFeedPr15",
                f: parsenoop
            },
            2115: {
                n: "BrtTextPr15",
                f: parsenoop
            },
            2116: {
                n: "BrtRangePr15",
                f: parsenoop
            },
            2117: {
                n: "BrtDbCommand15",
                f: parsenoop
            },
            2118: {
                n: "BrtBeginDbTables15",
                f: parsenoop
            },
            2119: {
                n: "BrtEndDbTables15",
                f: parsenoop
            },
            2120: {
                n: "BrtDbTable15",
                f: parsenoop
            },
            2121: {
                n: "BrtBeginDataModel",
                f: parsenoop
            },
            2122: {
                n: "BrtEndDataModel",
                f: parsenoop
            },
            2123: {
                n: "BrtBeginModelTables",
                f: parsenoop
            },
            2124: {
                n: "BrtEndModelTables",
                f: parsenoop
            },
            2125: {
                n: "BrtModelTable",
                f: parsenoop
            },
            2126: {
                n: "BrtBeginModelRelationships",
                f: parsenoop
            },
            2127: {
                n: "BrtEndModelRelationships",
                f: parsenoop
            },
            2128: {
                n: "BrtModelRelationship",
                f: parsenoop
            },
            2129: {
                n: "BrtBeginECTxtWiz15",
                f: parsenoop
            },
            2130: {
                n: "BrtEndECTxtWiz15",
                f: parsenoop
            },
            2131: {
                n: "BrtBeginECTWFldInfoLst15",
                f: parsenoop
            },
            2132: {
                n: "BrtEndECTWFldInfoLst15",
                f: parsenoop
            },
            2133: {
                n: "BrtBeginECTWFldInfo15",
                f: parsenoop
            },
            2134: {
                n: "BrtFieldListActiveItem",
                f: parsenoop
            },
            2135: {
                n: "BrtPivotCacheIdVersion",
                f: parsenoop
            },
            2136: {
                n: "BrtSXDI15",
                f: parsenoop
            },
            65535: {
                n: "",
                f: parsenoop
            }
        };
    var evert_RE = evert_key(RecordEnum, 'n');
    /* Helper function to call out to ODS parser */
    function parse_ods(zip, opts) {
        if (typeof module !== "undefined" && typeof require !== 'undefined' && typeof ODS === 'undefined')  {
            ODS = require('./dist/od' + 's');
        }
        
        if (typeof ODS === 'undefined' || !ODS.parse_ods)  {
            throw new Error("Unsupported ODS");
        }
        
        return ODS.parse_ods(zip, opts);
    }
    function fix_opts_func(defaults) {
        return function fix_opts(opts) {
            for (var i = 0; i != defaults.length; ++i) {
                var d = defaults[i];
                if (opts[d[0]] === undefined)  {
                    opts[d[0]] = d[1];
                }
                
                if (d[2] === 'n')  {
                    opts[d[0]] = Number(opts[d[0]]);
                }
                
            }
        };
    }
    var fix_read_opts = fix_opts_func([
            [
                'cellNF',
                false
            ],
            /* emit cell number format string as .z */
            [
                'cellHTML',
                true
            ],
            /* emit html string as .h */
            [
                'cellFormula',
                true
            ],
            /* emit formulae as .f */
            [
                'cellStyles',
                false
            ],
            /* emits style/theme as .s */
            [
                'sheetStubs',
                false
            ],
            /* emit empty cells */
            [
                'sheetRows',
                0,
                'n'
            ],
            /* read n rows (0 = read all rows) */
            [
                'bookDeps',
                false
            ],
            /* parse calculation chains */
            [
                'bookSheets',
                false
            ],
            /* only try to get sheet names (no Sheets) */
            [
                'bookProps',
                false
            ],
            /* only try to get properties (no Sheets) */
            [
                'bookFiles',
                false
            ],
            /* include raw file structure (keys, files) */
            [
                'bookVBA',
                false
            ],
            /* include vba raw data (vbaraw) */
            [
                'WTF',
                false
            ]
        ]);
    /* WTF mode (throws errors) */
    var fix_write_opts = fix_opts_func([
            [
                'bookSST',
                false
            ],
            /* Generate Shared String Table */
            [
                'bookType',
                'xlsx'
            ],
            /* Type of workbook (xlsx/m/b) */
            [
                'WTF',
                false
            ]
        ]);
    /* WTF mode (throws errors) */
    function safe_parse_wbrels(wbrels, sheets) {
        if (!wbrels)  {
            return 0;
        }
        
        try {
            wbrels = sheets.map(function pwbr(w) {
                return [
                    w.name,
                    wbrels['!id'][w.id].Target
                ];
            });
        } catch (e) {
            return null;
        }
        return !wbrels || wbrels.length === 0 ? null : wbrels;
    }
    function safe_parse_ws(zip, path, relsPath, sheet, sheetRels, sheets, opts) {
        try {
            sheetRels[sheet] = parse_rels(getzipdata(zip, relsPath, true), path);
            sheets[sheet] = parse_ws(getzipdata(zip, path), path, opts, sheetRels[sheet]);
        } catch (e) {
            if (opts.WTF)  {
                throw e;
            }
            
        }
    }
    var nodirs = function nodirs(x) {
            return x.substr(-1) != '/';
        };
    function parse_zip(zip, opts) {
        make_ssf(SSF);
        opts = opts || {};
        fix_read_opts(opts);
        reset_cp();
        /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */
        if (safegetzipfile(zip, 'META-INF/manifest.xml'))  {
            return parse_ods(zip, opts);
        }
        
        var entries = keys(zip.files).filter(nodirs).sort();
        var dir = parse_ct(getzipdata(zip, '[Content_Types].xml'), opts);
        var xlsb = false;
        var sheets, binname;
        if (dir.workbooks.length === 0) {
            binname = "xl/workbook.xml";
            if (getzipdata(zip, binname, true))  {
                dir.workbooks.push(binname);
            }
            
        }
        if (dir.workbooks.length === 0) {
            binname = "xl/workbook.bin";
            if (!getzipfile(zip, binname, true))  {
                throw new Error("Could not find workbook");
            }
            
            dir.workbooks.push(binname);
            xlsb = true;
        }
        if (dir.workbooks[0].substr(-3) == "bin")  {
            xlsb = true;
        }
        
        if (xlsb)  {
            set_cp(1200);
        }
        
        if (!opts.bookSheets && !opts.bookProps) {
            strs = [];
            if (dir.sst)  {
                strs = parse_sst(getzipdata(zip, dir.sst.replace(/^\//, '')), dir.sst, opts);
            }
            
            styles = {};
            if (dir.style)  {
                styles = parse_sty(getzipdata(zip, dir.style.replace(/^\//, '')), dir.style, opts);
            }
            
            themes = {};
            if (opts.cellStyles && dir.themes.length)  {
                themes = parse_theme(getzipdata(zip, dir.themes[0].replace(/^\//, ''), true), dir.themes[0], opts);
            }
            
        }
        var wb = parse_wb(getzipdata(zip, dir.workbooks[0].replace(/^\//, '')), dir.workbooks[0], opts);
        var props = {},
            propdata = "";
        if (dir.coreprops.length !== 0) {
            propdata = getzipdata(zip, dir.coreprops[0].replace(/^\//, ''), true);
            if (propdata)  {
                props = parse_core_props(propdata);
            }
            
            if (dir.extprops.length !== 0) {
                propdata = getzipdata(zip, dir.extprops[0].replace(/^\//, ''), true);
                if (propdata)  {
                    parse_ext_props(propdata, props);
                }
                
            }
        }
        var custprops = {};
        if (!opts.bookSheets || opts.bookProps) {
            if (dir.custprops.length !== 0) {
                propdata = getzipdata(zip, dir.custprops[0].replace(/^\//, ''), true);
                if (propdata)  {
                    custprops = parse_cust_props(propdata, opts);
                }
                
            }
        }
        var out = {};
        if (opts.bookSheets || opts.bookProps) {
            if (props.Worksheets && props.SheetNames.length > 0)  {
                sheets = props.SheetNames;
            }
            else if (wb.Sheets)  {
                sheets = wb.Sheets.map(function pluck(x) {
                    return x.name;
                });
            }
            
            if (opts.bookProps) {
                out.Props = props;
                out.Custprops = custprops;
            }
            if (typeof sheets !== 'undefined')  {
                out.SheetNames = sheets;
            }
            
            if (opts.bookSheets ? out.SheetNames : opts.bookProps)  {
                return out;
            }
            
        }
        sheets = {};
        var deps = {};
        if (opts.bookDeps && dir.calcchain)  {
            deps = parse_cc(getzipdata(zip, dir.calcchain.replace(/^\//, '')), dir.calcchain, opts);
        }
        
        var i = 0;
        var sheetRels = {};
        var path, relsPath;
        if (!props.Worksheets) {
            var wbsheets = wb.Sheets;
            props.Worksheets = wbsheets.length;
            props.SheetNames = [];
            for (var j = 0; j != wbsheets.length; ++j) {
                props.SheetNames[j] = wbsheets[j].name;
            }
        }
        var wbext = xlsb ? "bin" : "xml";
        var wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
        var wbrels = parse_rels(getzipdata(zip, wbrelsfile, true), wbrelsfile);
        if (wbrels)  {
            wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
        }
        
        /* Numbers iOS hack */
        var nmode = (getzipdata(zip, "xl/worksheets/sheet.xml", true)) ? 1 : 0;
        for (i = 0; i != props.Worksheets; ++i) {
            if (wbrels)  {
                path = 'xl/' + (wbrels[i][1]).replace(/[\/]?xl\//, "");
            }
            else {
                path = 'xl/worksheets/sheet' + (i + 1 - nmode) + "." + wbext;
                path = path.replace(/sheet0\./, "sheet.");
            }
            relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
            safe_parse_ws(zip, path, relsPath, props.SheetNames[i], sheetRels, sheets, opts);
        }
        if (dir.comments)  {
            parse_comments(zip, dir.comments, sheets, sheetRels, opts);
        }
        
        out = {
            Directory: dir,
            Workbook: wb,
            Props: props,
            Custprops: custprops,
            Deps: deps,
            Sheets: sheets,
            SheetNames: props.SheetNames,
            Strings: strs,
            Styles: styles,
            Themes: themes,
            SSF: SSF.get_table()
        };
        if (opts.bookFiles) {
            out.keys = entries;
            out.files = zip.files;
        }
        if (opts.bookVBA) {
            if (dir.vba.length > 0)  {
                out.vbaraw = getzipdata(zip, dir.vba[0], true);
            }
            else if (dir.defaults.bin === 'application/vnd.ms-office.vbaProject')  {
                out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin', true);
            }
            
        }
        return out;
    }
    function add_rels(rels, rId, f, type, relobj) {
        if (!relobj)  {
            relobj = {};
        }
        
        if (!rels['!id'])  {
            rels['!id'] = {};
        }
        
        relobj.Id = 'rId' + rId;
        relobj.Type = type;
        relobj.Target = f;
        if (rels['!id'][relobj.Id])  {
            throw new Error("Cannot rewrite rId " + rId);
        }
        
        rels['!id'][relobj.Id] = relobj;
        rels[('/' + relobj.Target).replace("//", "/")] = relobj;
    }
    function write_zip(wb, opts) {
        if (wb && !wb.SSF) {
            wb.SSF = SSF.get_table();
        }
        if (wb && wb.SSF) {
            make_ssf(SSF);
            SSF.load_table(wb.SSF);
            opts.revssf = evert_num(wb.SSF);
            opts.revssf[wb.SSF[65535]] = 0;
        }
        opts.rels = {};
        opts.wbrels = {};
        opts.Strings = [];
        opts.Strings.Count = 0;
        opts.Strings.Unique = 0;
        var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
        var ct = {
                workbooks: [],
                sheets: [],
                calcchains: [],
                themes: [],
                styles: [],
                coreprops: [],
                extprops: [],
                custprops: [],
                strs: [],
                comments: [],
                vba: [],
                TODO: [],
                rels: [],
                xmlns: ""
            };
        fix_write_opts(opts = opts || {});
        var zip = new jszip();
        var f = "",
            rId = 0;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, {
            revssf: {
                "General": 0
            }
        });
        f = "docProps/core.xml";
        zip.file(f, write_core_props(wb.Props, opts));
        ct.coreprops.push(f);
        add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
        f = "docProps/app.xml";
        if (!wb.Props)  {
            wb.Props = {};
        }
        
        wb.Props.SheetNames = wb.SheetNames;
        wb.Props.Worksheets = wb.SheetNames.length;
        zip.file(f, write_ext_props(wb.Props, opts));
        ct.extprops.push(f);
        add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
        if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
            f = "docProps/custom.xml";
            zip.file(f, write_cust_props(wb.Custprops, opts));
            ct.custprops.push(f);
            add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
        }
        f = "xl/workbook." + wbext;
        zip.file(f, write_wb(wb, f, opts));
        ct.workbooks.push(f);
        add_rels(opts.rels, 1, f, RELS.WB);
        for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
            f = "xl/worksheets/sheet" + rId + "." + wbext;
            zip.file(f, write_ws(rId - 1, f, opts, wb));
            ct.sheets.push(f);
            add_rels(opts.wbrels, rId, "worksheets/sheet" + rId + "." + wbext, RELS.WS);
        }
        if (opts.Strings != null && opts.Strings.length > 0) {
            f = "xl/sharedStrings." + wbext;
            zip.file(f, write_sst(opts.Strings, f, opts));
            ct.strs.push(f);
            add_rels(opts.wbrels, ++rId, "sharedStrings." + wbext, RELS.SST);
        }
        /* TODO: something more intelligent with themes */
        f = "xl/theme/theme1.xml";
        zip.file(f, write_theme());
        ct.themes.push(f);
        add_rels(opts.wbrels, ++rId, "theme/theme1.xml", RELS.THEME);
        /* TODO: something more intelligent with styles */
        f = "xl/styles." + wbext;
        zip.file(f, write_sty(wb, f, opts));
        ct.styles.push(f);
        add_rels(opts.wbrels, ++rId, "styles." + wbext, RELS.STY);
        zip.file("[Content_Types].xml", write_ct(ct, opts));
        zip.file('_rels/.rels', write_rels(opts.rels));
        zip.file('xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));
        return zip;
    }
    function readSync(data, opts) {
        var zip,
            d = data;
        var o = opts || {};
        if (!o.type)  {
            o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
        }
        
        switch (o.type) {
            case "base64":
                zip = new jszip(d, {
                    base64: true
                });
                break;
            case "binary":
                zip = new jszip(d, {
                    base64: false
                });
                break;
            case "buffer":
                zip = new jszip(d);
                break;
            case "file":
                zip = new jszip(d = _fs.readFileSync(data));
                break;
            default:
                throw new Error("Unrecognized type " + o.type);
        }
        return parse_zip(zip, o);
    }
    function readFileSync(data, opts) {
        var o = opts || {};
        o.type = 'file';
        return readSync(data, o);
    }
    function writeSync(wb, opts) {
        var o = opts || {};
        var z = write_zip(wb, o);
        switch (o.type) {
            case "base64":
                return z.generate({
                    type: "base64"
                });
            case "binary":
                return z.generate({
                    type: "string"
                });
            case "buffer":
                return z.generate({
                    type: "nodebuffer"
                });
            case "file":
                return _fs.writeFileSync(o.file, z.generate({
                    type: "nodebuffer"
                }));
            default:
                throw new Error("Unrecognized type " + o.type);
        }
    }
    function writeFileSync(wb, filename, opts) {
        var o = opts || {};
        o.type = 'file';
        o.file = filename;
        switch (o.file.substr(-5).toLowerCase()) {
            case '.xlsm':
                o.bookType = 'xlsm';
                break;
            case '.xlsb':
                o.bookType = 'xlsb';
                break;
        }
        return writeSync(wb, o);
    }
    function decode_row(rowstr) {
        return parseInt(unfix_row(rowstr), 10) - 1;
    }
    function encode_row(row) {
        return "" + (row + 1);
    }
    function fix_row(cstr) {
        return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
    }
    function unfix_row(cstr) {
        return cstr.replace(/\$(\d+)$/, "$1");
    }
    function decode_col(colstr) {
        var c = unfix_col(colstr),
            d = 0,
            i = 0;
        for (; i !== c.length; ++i) d = 26 * d + c.charCodeAt(i) - 64;
        return d - 1;
    }
    function encode_col(col) {
        var s = "";
        for (++col; col; col = Math.floor((col - 1) / 26)) s = String.fromCharCode(((col - 1) % 26) + 65) + s;
        return s;
    }
    function fix_col(cstr) {
        return cstr.replace(/^([A-Z])/, "$$$1");
    }
    function unfix_col(cstr) {
        return cstr.replace(/^\$([A-Z])/, "$1");
    }
    function split_cell(cstr) {
        return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
    }
    function decode_cell(cstr) {
        var splt = split_cell(cstr);
        return {
            c: decode_col(splt[0]),
            r: decode_row(splt[1])
        };
    }
    function encode_cell(cell) {
        return encode_col(cell.c) + encode_row(cell.r);
    }
    function fix_cell(cstr) {
        return fix_col(fix_row(cstr));
    }
    function unfix_cell(cstr) {
        return unfix_col(unfix_row(cstr));
    }
    function decode_range(range) {
        var x = range.split(":").map(decode_cell);
        return {
            s: x[0],
            e: x[x.length - 1]
        };
    }
    function encode_range(cs, ce) {
        if (ce === undefined || typeof ce === 'number')  {
            return encode_range(cs.s, cs.e);
        }
        
        if (typeof cs !== 'string')  {
            cs = encode_cell(cs);
        }
        
        if (typeof ce !== 'string')  {
            ce = encode_cell(ce);
        }
        
        return cs == ce ? cs : cs + ":" + ce;
    }
    function safe_decode_range(range) {
        var o = {
                s: {
                    c: 0,
                    r: 0
                },
                e: {
                    c: 0,
                    r: 0
                }
            };
        var idx = 0,
            i = 0,
            cc = 0;
        var len = range.length;
        for (idx = 0; i < len; ++i) {
            if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26)  {
                break;
            }
            
            idx = 26 * idx + cc;
        }
        o.s.c = --idx;
        for (idx = 0; i < len; ++i) {
            if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9)  {
                break;
            }
            
            idx = 10 * idx + cc;
        }
        o.s.r = --idx;
        if (i === len || range.charCodeAt(++i) === 58) {
            o.e.c = o.s.c;
            o.e.r = o.s.r;
            return o;
        }
        for (idx = 0; i != len; ++i) {
            if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26)  {
                break;
            }
            
            idx = 26 * idx + cc;
        }
        o.e.c = --idx;
        for (idx = 0; i != len; ++i) {
            if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9)  {
                break;
            }
            
            idx = 10 * idx + cc;
        }
        o.e.r = --idx;
        return o;
    }
    function safe_format_cell(cell, v) {
        if (cell.z !== undefined)  {
            try {
                return (cell.w = SSF.format(cell.z, v));
            } catch (e) {};
        }
        
        if (!cell.XF)  {
            return v;
        }
        
        try {
            return (cell.w = SSF.format(cell.XF.ifmt || 0, v));
        } catch (e) {
            return '' + v;
        }
    }
    function format_cell(cell, v) {
        if (cell == null || cell.t == null)  {
            return "";
        }
        
        if (cell.w !== undefined)  {
            return cell.w;
        }
        
        if (v === undefined)  {
            return safe_format_cell(cell, cell.v);
        }
        
        return safe_format_cell(cell, v);
    }
    function sheet_to_json(sheet, opts) {
        var val, row, range,
            header = 0,
            offset = 1,
            r,
            hdr = [],
            isempty, R, C, v;
        var o = opts != null ? opts : {};
        var raw = o.raw;
        if (sheet == null || sheet["!ref"] == null)  {
            return [];
        }
        
        range = o.range !== undefined ? o.range : sheet["!ref"];
        if (o.header === 1)  {
            header = 1;
        }
        else if (o.header === "A")  {
            header = 2;
        }
        else if (Array.isArray(o.header))  {
            header = 3;
        }
        
        switch (typeof range) {
            case 'string':
                r = safe_decode_range(range);
                break;
            case 'number':
                r = safe_decode_range(sheet["!ref"]);
                r.s.r = range;
                break;
            default:
                r = range;
        }
        if (header > 0)  {
            offset = 0;
        }
        
        var rr = encode_row(r.s.r);
        var cols = new Array(r.e.c - r.s.c + 1);
        var out = new Array(r.e.r - r.s.r - offset + 1);
        var outi = 0;
        for (C = r.s.c; C <= r.e.c; ++C) {
            cols[C] = encode_col(C);
            val = sheet[cols[C] + rr];
            switch (header) {
                case 1:
                    hdr[C] = C;
                    break;
                case 2:
                    hdr[C] = cols[C];
                    break;
                case 3:
                    hdr[C] = o.header[C - r.s.c];
                    break;
                default:
                    if (val === undefined)  {
                        
                        continue;
                    }
                    ;
                    hdr[C] = format_cell(val);
            }
        }
        for (R = r.s.r + offset; R <= r.e.r; ++R) {
            rr = encode_row(R);
            isempty = true;
            row = header === 1 ? [] : Object.create({
                __rowNum__: R
            });
            for (C = r.s.c; C <= r.e.c; ++C) {
                val = sheet[cols[C] + rr];
                if (val === undefined || val.t === undefined)  {
                    
                    continue;
                }
                
                v = val.v;
                switch (val.t) {
                    case 'e':
                        
                        continue;
                    case 's':
                    case 'str':
                        break;
                    case 'b':
                    case 'n':
                        break;
                    default:
                        throw 'unrecognized type ' + val.t;
                }
                if (v !== undefined) {
                    row[hdr[C]] = raw ? v : format_cell(val, v);
                    isempty = false;
                }
            }
            if (isempty === false)  {
                out[outi++] = row;
            }
            
        }
        out.length = outi;
        return out;
    }
    function sheet_to_row_object_array(sheet, opts) {
        return sheet_to_json(sheet, opts != null ? opts : {});
    }
    function sheet_to_csv(sheet, opts) {
        var out = "",
            txt = "",
            qreg = /"/g;
        var o = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null)  {
            return "";
        }
        
        var r = safe_decode_range(sheet["!ref"]);
        var FS = o.FS !== undefined ? o.FS : ",",
            fs = FS.charCodeAt(0);
        var RS = o.RS !== undefined ? o.RS : "\n",
            rs = RS.charCodeAt(0);
        var row = "",
            rr = "",
            cols = [];
        var i = 0,
            cc = 0,
            val;
        var R = 0,
            C = 0;
        for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
        for (R = r.s.r; R <= r.e.r; ++R) {
            row = "";
            rr = encode_row(R);
            for (C = r.s.c; C <= r.e.c; ++C) {
                val = sheet[cols[C] + rr];
                txt = val !== undefined ? '' + format_cell(val) : "";
                for (i = 0 , cc = 0; i !== txt.length; ++i) if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {
                    txt = "\"" + txt.replace(qreg, '""') + "\"";
                    break;
                };
                row += (C === r.s.c ? "" : FS) + txt;
            }
            out += row + RS;
        }
        return out;
    }
    var make_csv = sheet_to_csv;
    function sheet_to_formulae(sheet) {
        var cmds,
            y = "",
            x,
            val = "";
        if (sheet == null || sheet["!ref"] == null)  {
            return "";
        }
        
        var r = safe_decode_range(sheet['!ref']),
            rr = "",
            cols = [],
            C;
        cmds = new Array((r.e.r - r.s.r + 1) * (r.e.c - r.s.c + 1));
        var i = 0;
        for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
        for (var R = r.s.r; R <= r.e.r; ++R) {
            rr = encode_row(R);
            for (C = r.s.c; C <= r.e.c; ++C) {
                y = cols[C] + rr;
                x = sheet[y];
                val = "";
                if (x === undefined)  {
                    
                    continue;
                }
                
                if (x.f != null)  {
                    val = x.f;
                }
                else if (x.w !== undefined)  {
                    val = "'" + x.w;
                }
                else if (x.v === undefined)  {
                    
                    continue;
                }
                else  {
                    val = "" + x.v;
                }
                
                cmds[i++] = y + "=" + val;
            }
        }
        cmds.length = i;
        return cmds;
    }
    var utils = {
            encode_col: encode_col,
            encode_row: encode_row,
            encode_cell: encode_cell,
            encode_range: encode_range,
            decode_col: decode_col,
            decode_row: decode_row,
            split_cell: split_cell,
            decode_cell: decode_cell,
            decode_range: decode_range,
            format_cell: format_cell,
            get_formulae: sheet_to_formulae,
            make_csv: sheet_to_csv,
            make_json: sheet_to_json,
            make_formulae: sheet_to_formulae,
            sheet_to_csv: sheet_to_csv,
            sheet_to_json: sheet_to_json,
            sheet_to_formulae: sheet_to_formulae,
            sheet_to_row_object_array: sheet_to_row_object_array
        };
    XLSX.parseZip = parse_zip;
    XLSX.read = readSync;
    XLSX.readFile = readFileSync;
    XLSX.write = writeSync;
    XLSX.writeFile = writeFileSync;
    XLSX.utils = utils;
    XLSX.SSF = SSF;
})(typeof exports !== 'undefined' ? exports : XLSX);

/**
 * @class sl.panel.Panel
 */
Ext.define('sl.panel.Panel', {
    extend: 'Ext.panel.Panel',
    alias: [
        'widget.slpanel'
    ],
    uses: [
        'Ext.toolbar.Spacer',
        'sl.panel.StatusBar',
        'sl.utils.Utilities'
    ],
    defaults: {
        sortable: true
    },
    /**
     * @cfg {Boolean} [useStatusBar=true]
     * Set false to disable the default status bar toolbar
     */
    useStatusBar: true,
    /**
     * @cfg {String} [statusBarPosition="bottom"]
     * Status Bar's location ("bottom", "top", "left", "right")
     */
    statusBarPosition: 'bottom',
    /**
     * @cfg {Boolean} includeValidationStatus
     * Set false to disable the validation plugin in the status bar
     */
    includeValidationStatus: false,
    /**
     * @property {String} defaultTitle
     * The unmodified, original title
     */
    defaultTitle: '',
    initComponent: function() {
        var me = this,
            config = {
                plugins: me.createPlugins(),
                features: me.createFeatures()
            };
        me.defaultTitle = me.defaultTitle || me.title;
        if (me.useStatusBar) {
            me.on({
                scope: me,
                afterrender: me.configureStatusBar
            });
        }
        // overwrite local config options with param-config options defined here
        Ext.apply(me, config);
        me.callParent(arguments);
    },
    createPlugins: function() {
        var panel = this,
            plugins = panel.plugins || [];
        return plugins;
    },
    createFeatures: function() {
        var panel = this,
            features = panel.features || [];
        return features;
    },
    configureStatusBar: function() {
        var me = this;
        if (me.createStatusBar()) {
            var itemArr = me.getItemsForStatusBar() || [];
            if (itemArr.length) {
                me.addItemsToStatusBar(itemArr);
            }
        }
    },
    // must be defined
    // returns the toolbar that will be used as the status bar.  may build a toolbar if there isn't one at the desired location
    createStatusBar: function() {
        var panel = this,
            toolbarQryStr = (panel.statusBarId ? '[id="' + panel.statusBarId + '"]' : (panel.statusBarPosition ? '[dock="' + panel.statusBarPosition + '"]' : '')) || '',
            toolbarQuery = Ext.String.format('toolbar{0}', toolbarQryStr);
        // gets the first toolbar that matches toolbar query
        panel.statusBar = panel.statusBar || panel.getDockedItems(toolbarQuery)[0] || undefined;
        // if doesn't exist, create new one at defined position
        if (!panel.statusBar) {
            if (sl.utils.IsObjectChainDefined(Ext, "ux.statusbar.StatusBar")) {
                var tempStatusBar = Ext.create('sl.panel.StatusBar', Ext.apply({
                        panel: panel,
                        enableOverflow: true,
                        dock: panel.statusBarPosition || 'bottom',
                        hidden: true
                    }, panel.statusBarConfig));
                panel.statusBar = panel.addDocked(tempStatusBar)[0];
            } else {
                if (panel.includeValidationStatus) {
                    sl.consoleWarn('[' + panel.$className + '] Ext.ux.statusbar.StatusBar is not defined; Validation Status Message is disabled for panel.', {
                        panel: panel
                    });
                    // force to false, b/c validation requires sl.StatusBar
                    panel.includeValidationStatus = false;
                }
                // if doesn't exist, creates new one at defined position
                panel.statusBar = panel.addDocked({
                    xtype: 'toolbar',
                    dock: panel.statusBarPosition,
                    hidden: true,
                    enableOverflow: true,
                    items: []
                })[0];
            }
            panel.statusBar.on({
                single: true,
                'add': function() {
                    panel.statusBar.show();
                }
            });
        }
        return panel.statusBar;
    },
    getItemsForStatusBar: function() {
        return [];
    },
    addItemsToStatusBar: function(itemArr) {
        var me = this,
            sb = me.statusBar,
            hasTBFill = false,
            toRemove = [],
            existingItems;
        if (sb.fireEvent('beforeaddallitems', sb, itemArr) !== false) {
            // remove multiple tbspacer/tbfill from the default itemArr
            Ext.Array.forEach(itemArr, function(element, index, array) {
                if (sl.utils.isTBFill(element)) {
                    if (hasTBFill) {
                        toRemove.push(index);
                    } else {
                        hasTBFill = true;
                    }
                }
            }, itemArr);
            if (toRemove.length > 0) {
                // go in reverse order else the index gets screwed up as you delete elements
                for (var rIdx = toRemove.length - 1; rIdx >= 0; rIdx--) {
                    Ext.Array.removeAt(itemArr, toRemove[rIdx]);
                }
            }
            // the statusbar already has items.  we need to reorganize those items in conjuction with the typical tb items
            if (sb.items.getCount()) {
                existingItems = Ext.Array.clone(sb.items.items);
                Ext.Array.insert(existingItems, 0, [
                    {
                        xtype: 'tbspacer',
                        flex: 1
                    }
                ]);
                sb.removeAll(false);
                for (var j = 0; j < itemArr.length; j++) {
                    // if there's a spacer, then the prior tb items will be added immediately before that it
                    // else, the prior items will be added after sb's typical items
                    if (sl.utils.isTBFill(itemArr[j])) {
                        break;
                    }
                }
                Ext.Array.insert(itemArr, j, existingItems);
            }
            // test if 1st item is tbseparator
            if (sl.utils.isTBSeparator(itemArr[0])) {
                // if true, then remove
                Ext.Array.erase(itemArr, 0);
            }
            for (var i = 0; i < itemArr.length; i++) {
                me.addItemToStatusBar(itemArr[i]);
            }
            sb.fireEvent('addallitems', me.statusBar, itemArr);
        }
    },
    // adds each item to the status bar
    // if '->' and '-' are next to each other, it will remove the '-'
    addItemToStatusBar: function(item) {
        var me = this,
            sb = me.statusBar,
            addedItem;
        if (me.statusBar.fireEvent('beforeadditem', sb, item) !== false) {
            if (!Ext.isEmpty(item)) {
                var isItemTBFill = sl.utils.isTBFill(item),
                    isItemTBSeparator = sl.utils.isTBSeparator(item),
                    previousItem = sb.items.getAt(sb.items.getCount() - 1),
                    wasPreviousItemTBFill = sl.utils.isTBFill(previousItem),
                    wasPreviousItemTBSeparator = sl.utils.isTBSeparator(previousItem);
                if (isItemTBFill) {
                    // if we're adding a '->' and the last item was '-', remove the unneccessary '-'
                    if (wasPreviousItemTBSeparator) {
                        sb.remove(previousItem);
                    }
                } else if (isItemTBSeparator) {
                    if (wasPreviousItemTBSeparator || wasPreviousItemTBFill || Ext.isEmpty(previousItem)) {
                        return false;
                    } else if (item.removePriorTBSeparator) {
                        sb.remove(previousItem);
                    }
                }
                addedItem = sb.add(item);
            }
            sb.fireEvent('additem', sb, item, Ext.isEmpty(addedItem));
        }
    }
});

/**
 * @class sl.panel.ReportPanel
 */
Ext.define('sl.panel.ReportPanel', {
    extend: 'Ext.panel.Panel',
    alias: [
        'widget.reportpanel'
    ],
    config: {
        /**
          * @cfg {String} url
          * url of the report class to display in the iframe.
          */
        url: '',
        /**
          * @cfg {String} [displayMode='pdf']
          * Define the displayMode property and give it a default.
          */
        displayMode: 'pdf',
        /**
          * @cfg {Object} reportParams
          * Report parameters that will be sent in the url of the report..
          */
        reportParams: {}
    },
    /**
      * @private
      */
    constructor: function(config) {
        me = this;
        config = config || {};
        config.html = '<iframe class="rpt-display-frame " style="width:100%;height:100%;" />';
        //me = Ext.applyIf(me, config);
        me.callParent(arguments);
    },
    /**
      * Run and render the report in the desired formate to the iframe
      * @param {Object} reportParams Object containing the parameters to the report
      * @param {String} dsiplayMode String to specify the output type of the report
      */
    renderReport: function(reportParams, displayMode) {
        me = this;
        // css copied from stewarts-all.css for splashscreen
        // this was the easiest approach I could find for styling an iFrame
        var splashStyle = "position:absolute;margin:auto;top:0;bottom:0;left:0;right:0;height:0px;";
        splashStyle += "background-repeat:no-repeat,no-repeat;background-position:top,bottom;font:normal15pxtahoma,arial,verdana,sans-serif;";
        splashStyle += "font-style:normal;font-variant:normal;font-weight: normal;font-stretch: normal;font-size:15px;line-height:normal;";
        splashStyle += "font-family:tahoma,arial,verdana,sans-serif;color:#222;text-align:center;";
        // Grabbing all of the report parameters and putting them together
        reportParams = Ext.apply(me.reportParams, reportParams);
        reportParams.$MODE = displayMode = displayMode || me.displayMode;
        // Grab the iframe that is in this component to display the report.
        displayPane = Ext.dom.Query.select('iframe.rpt-display-frame', me.getEl().dom, "select", true)[0];
        //doc = displayPane.contentDocument || displayPane.contentWindow;
        // Display a visual cue that the report is running.
        displayPane.setAttribute('src', 'about:blank');
        Ext.defer(function() {
            displayPane.contentDocument.documentElement.innerHTML = "<div id=\"stewarts-splashscreen\" class=\"centered-on-page\" style=\"" + splashStyle + "\">" + "<img src=\"/resources/images/ajax-loader.gif\" /><br>Report Loading...</div>";
            switch (displayMode) {
                case 'pdfprint':
                case 'toexcel':
                    // Not supported from the web interface
                    break;
                case 'html':
                case 'xml':
                case 'tohtml':
                case 'toxslfo':
                case 'xslfo':
                case 'ps':
                    // Make an ajax call and display the contents in the iframe
                    Ext.Ajax.request({
                        url: me.url,
                        scope: me,
                        params: reportParams,
                        callback: function(opts, success, response) {
                            if (success) {
                                // Display the contents of the desired displayMode.
                                displayPane.setAttribute('src', 'about:blank');
                                Ext.defer(function() {
                                    displayPane.contentDocument.documentElement.innerHTML = (displayMode == 'html' ? response.responseText : '<pre>' + Ext.htmlEncode(response.responseText) + '</pre>');
                                }, 200);
                            }
                        }
                    });
                    break;
                case 'displayxlsx':
                case 'xlsx':
                case 'excel':
                case 'fo2pdf':
                case 'foandpdf':
                case 'pdf':
                case 'tiff':
                    // Convert the parameter object to a url string
                    queryString = Ext.Object.toQueryString(reportParams);
                    // Set the source attribute and wait for the report to finish
                    // and display
                    displayPane.setAttribute('src', me.url + '?' + queryString);
            }
        }, 200);
    }
});

/**
 * @class sl.panel.StatusBar
 */
Ext.define("sl.panel.StatusBar", {
    extend: 'Ext.toolbar.Toolbar',
    alias: 'widget.slstatusbar',
    mixins: {
        sbar: 'Ext.ux.statusbar.StatusBar'
    },
    uses: [
        'Ext.toolbar.Spacer',
        'Ext.toolbar.TextItem',
        'sl.utils.Toast',
        'sl.utils.Utilities'
    ],
    isStewarts: true,
    /**
     * @cfg {String} cls
     * The base class applied to the containing element for this component on render.
     */
    cls: 'x-statusbar',
    /**
     * @cfg {String} busyIconCls
     * The default {@link #iconCls} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showBusy}.
     */
    busyIconCls: 'x-status-busy',
    /**
     * @cfg {String} busyText
     * The default {@link #text} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `text` argument into {@link #showBusy}.
     */
    busyText: 'Loading...',
    /**
     * @cfg {Number} autoClear
     * The number of milliseconds to wait after setting the status via
     * {@link #setStatus} before automatically clearing the status text and icon.
     * Note that this only applies when passing the `clear` argument to {@link #setStatus}
     * since that is the only way to defer clearing the status.  This can
     * be overridden by specifying a different `wait` value in {@link #setStatus}.
     * Calls to {@link #clearStatus} always clear the status bar immediately and ignore this value.
     */
    autoClear: 5000,
    /**
     * @cfg {String} emptyText
     * The text string to use if no text has been set. If there are no other items in
     * the toolbar using an empty string (`''`) for this value would end up in the toolbar
     * height collapsing since the empty string will not maintain the toolbar height.
     * Use `''` if the toolbar should collapse in height vertically when no text is
     * specified and there are no other items in the toolbar.
     */
    emptyText: '&#160;',
    /**
     * @cfg {String} validIconCls
     * The default {@link Ext.ux.statusbar.StatusBar#iconCls} applied when calling {@link #showValid}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showValid}.
     */
    validIconCls: 'x-status-valid',
    /**
     * @cfg {String} validText
     * The default {@link #text} applied when calling {@link #showValid}.
     * It can be overridden at any time by passing the `text` argument into {@link #showValid}.
     */
    validText: '&nbsp;',
    /**
     * @cfg {String} warningIconCls
     * The default {@link Ext.ux.statusbar.StatusBar#iconCls} applied when calling {@link #showWarning}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showWarning}.
     */
    warningIconCls: 'x-status-warning',
    /**
     * @cfg {String} warningText
     * The default {@link #text} applied when calling {@link #showWarning}.
     * It can be overridden at any time by passing the `text` argument into {@link #showWarning}.
     */
    warningText: '',
    /**
     * @cfg {String} errorIconCls
     * The default {@link Ext.ux.statusbar.StatusBar#iconCls} applied when calling {@link #showError}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showError}.
     */
    errorIconCls: 'x-status-error',
    /**
     * @cfg {String} errorText
     * The default {@link #text} applied when calling {@link #showError}.
     * It can be overridden at any time by passing the `text` argument into {@link #showError}.
     */
    errorText: 'Error',
    /**
     * @cfg {String} savingIconCls
     * The default {@link Ext.ux.statusbar.StatusBar#iconCls} applied when calling {@link #showSaving}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showSaving}.
     */
    savingIconCls: 'x-status-saving',
    /**
     * @cfg {String} savingText
     * The default {@link #text} applied when calling {@link #showSaving}.
     * It can be overridden at any time by passing the `text` argument into {@link #showSaving}.
     */
    savingText: '&nbsp;',
    /**
     * @cfg {String} savedIconCls
     * The default {@link Ext.ux.statusbar.StatusBar#iconCls} applied when calling {@link #showSaved}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showSaved}.
     */
    savedIconCls: 'x-status-saved',
    /**
     * @cfg {String} savedText
     * The default {@link #text} applied when calling {@link #showSaved}.
     * It can be overridden at any time by passing the `text` argument into {@link #showSaved}.
     */
    savedText: 'Saved',
    /**
     * @cfg {Boolean} addToolbarItems
     * If `true` will add components to status bar rather than wait for displaygrid's function
     */
    addToolbarItems: true,
    // private
    activeThreadId: 0,
    constructor: function(config) {
        var me = this;
        config = config || {};
        // add Ext.ux.statusbar.StatusBar functions to the sl statusbar
        me = Ext.applyIf(me, me.mixins.sbar);
        // purposely using statusbar's constructor, and not the toolbar's
        me.mixins.sbar.constructor.apply(me, arguments);
    },
    // based on Ext.ux.statusbar.StatusBar
    initComponent: function() {
        var me = this;
        // need to skip Ext.ux.statusbar.StatusBar's initComponent because it will add validation status & right-align everything else
        // we're using the grid to add all of the items to the StatusBar
        // sl.panel.StatusBar.superclass.initComponent.apply(this, arguments);
        me.callParent(arguments);
        /////////////////////////////////////////
        // CUSTOM CODE
        //
        me.currIconCls = me.iconCls || me.defaultIconCls;
        me.statusEl = Ext.create('Ext.toolbar.TextItem', {
            cls: 'x-status-text ' + (me.currIconCls || ''),
            text: me.text || me.defaultText || '&nbsp;'
        });
        me.statusMsg = me.statusEl;
        if (me.addToolbarItems) {
            me.addItemsToToolbar();
        }
    },
    //
    // END CUSTOM CODE
    /////////////////////////////////////////
    // will set the "status" property ('valid', 'error', 'warning', etc.) and will hide the '-' if necessary
    setStatus: function(o) {
        var me = this;
        o = o || {};
        Ext.suspendLayouts();
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        if (o.text !== undefined) {
            me.setText(o.text);
        }
        if (o.iconCls !== undefined) {
            me.setIcon(o.iconCls);
        }
        if (o.clear) {
            var c = o.clear,
                wait = me.autoClear,
                defaults = {
                    useDefaults: true,
                    anim: true
                };
            if (Ext.isObject(c)) {
                c = Ext.applyIf(c, defaults);
                if (c.wait) {
                    wait = c.wait;
                }
            } else if (Ext.isNumber(c)) {
                wait = c;
                c = defaults;
            } else if (Ext.isBoolean(c)) {
                c = defaults;
            }
            c.threadId = this.activeThreadId;
            Ext.defer(me.clearStatus, wait, me, [
                c
            ]);
        }
        /////////////////////////////////////////
        // CUSTOM CODE
        //  formatting improvements
        //
        if (!Ext.isString(o)) {
            me.status = o.status;
        }
        var isEmptyString = Ext.isEmpty(o.text, false) || (o.text === ' ') || (o.text === '&nbsp;'),
            statusMsgIdx = me.items.indexOf(me.statusMsg),
            nextItem = me.items.getAt(statusMsgIdx + 1);
        // if status has no text, it will hide the '-' that is to the right of the status msg
        if (nextItem && sl.utils.isTBSeparator(nextItem)) {
            nextItem.setVisible(!isEmptyString);
        }
        Ext.resumeLayouts(true);
        // delay the firing so that new rendering will be finished (needed for grid's rowCount)
        Ext.defer(function() {
            me.fireEvent('statusupdated', me, o);
        }, 10);
        //
        // END CUSTOM CODE
        /////////////////////////////////////////
        return me;
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "valid" state
     *
     * @param {Object/String} [o] A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #validIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #validIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showValid: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.validText || '&nbsp;',
            iconCls: this.validIconCls,
            status: 'valid'
        });
        return this.setStatus(o);
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "warning" state
     *
     * @param {Object/String} [o] A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #warningIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #warningIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showWarning: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.warningText || '&nbsp;',
            iconCls: this.warningIconCls,
            status: 'warning'
        });
        return this.setStatus(o);
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "error" state
     *
     * @param {Object/String} [o] A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #errorText}
     * and {@link #errorIconCls} settings. If the config argument is not specified, {@link #errorText} and
     * {@link #errorIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showError: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.errorText || '&nbsp;',
            iconCls: this.errorIconCls,
            status: 'error'
        });
        return this.setStatus(o);
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "saving" state
     *
     * @param {Object/String} [o] A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #savingText}
     * and {@link #savingIconCls} settings. If the config argument is not specified, {@link #savingText} and
     * {@link #savingIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showSaving: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.savingText || '&nbsp;',
            iconCls: this.savingIconCls,
            status: 'saving'
        });
        return this.setStatus(o);
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "saved" state
     *
     * @param {Object/String} [o] A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #savedText}
     * and {@link #savedIconCls} settings. If the config argument is not specified, {@link #savedText} and
     * {@link #savedIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showSaved: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.savedText || '&nbsp;',
            iconCls: this.savedIconCls,
            status: 'saved'
        });
        return this.setStatus(o);
    },
    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "busy" state, usually for loading or processing activities.
     *
     * @param {Object/String} [o] A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #busyIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #busyIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showBusy: function(o) {
        if (Ext.isString(o)) {
            o = {
                text: o
            };
        }
        o = Ext.applyIf(o || {}, {
            text: this.busyText,
            iconCls: this.busyIconCls,
            status: 'busy'
        });
        return this.setStatus(o);
    },
    addItemsToToolbar: function() {
        var insertLoc = this.insertLoc || 0,
            itemArr = this.getItemsForToolbar();
        for (var i = itemArr.length - 1; i >= 0; i--) {
            this.insert(insertLoc, itemArr[i]);
        }
    },
    // builds ordered array of all items that will be added to toolbar
    getItemsForToolbar: function() {
        var itemArr = [];
        var right = this.statusAlign === 'right';
        if (right) {
            this.cls += ' x-status-right';
            itemArr.push({
                xtype: 'tbspacer',
                flex: 1
            });
        }
        itemArr.push(this.statusEl);
        return itemArr;
    }
});

/**
 * @class sl.panel.grid.DisplayGrid
 */
Ext.define('sl.panel.grid.DisplayGrid', {
    extend: 'Ext.grid.Panel',
    alias: [
        'widget.displaygrid'
    ],
    mixins: {
        panel: 'sl.panel.Panel'
    },
    requires: [
        'sl.field.button.RefreshButton',
        'sl.field.button.ExcelButton'
    ],
    uses: [
        'sl.utils.ExportData',
        'sl.panel.grid.GridRenderers',
        'sl.panel.grid.plugin.GridRowCount',
        'sl.panel.grid.plugin.GridStateViewPanel',
        'sl.panel.grid.plugin.GridFilterField',
        'sl.panel.grid.plugin.GridValidationStatus',
        'sl.panel.grid.plugin.GridStatusBar',
        'Ext.util.HashMap',
        'Ext.state.Manager',
        'Ext.state.LocalStorageProvider',
        'Ext.util.Format',
        'Ext.grid.column.Column',
        'Ext.grid.Panel',
        'Ext.toolbar.Separator'
    ],
    config: {
        /**
             * @cfg {Boolean} [includeSearch=true]
             * Set `false` to disable the bottom toolbar search box
             */
        includeSearch: true,
        /**
             * @cfg {Boolean} [includeRowCount=true]
             * Set `false` to disable row counter that displays how many total rows, viewable rows, and selected rows are
             *     in grid
             */
        includeRowCount: true,
        /**
             * @cfg {Boolean} [includeBufferedRenderer=false]
             * *** BUGGY IN EXT JS 5.0.1 & 5.1.0 ***
             * Set `false` to disable buffered renderer
             */
        includeBufferedRenderer: false,
        /**
             * @cfg {Boolean} [includeFilters=false]
             * Set `false` to disable column-level filtering
             */
        includeFilters: false,
        /**
             * @cfg {Boolean} [includeStateViewPanel=false]
             * Set `true` to include a panel to manage saved views
             */
        includeStateViewPanel: false,
        /**
             * @cfg {Boolean} [useStewartsRenderer=true]
             * Set `false` to disable setting a renderer for every column (renderer is specific to the editor {if defined})
             *
             * Renderering Call Order:
             *
             *  1.) column-defined renderer
             *
             *  2.) display grid's default renderer
             *
             *  Converts value based on the editor type, e.g. {@link sl.field.ComboBox#method-renderer}
             *
             *  3.) editor grid's default renderer
             *
             *  Adds visual error highlighting (if necessary)
             */
        useStewartsRenderer: true,
        /**
             * @cfg {Boolean} [includeRefreshBtn=true]
             * Set `false` to disable the bottom toolbar's refresh button
             */
        includeRefreshBtn: true,
        /**
             * @cfg {Boolean} [includeExcelBtn=false]
             * Set `false` to disable the bottom toolbar's export to {@link sl.field.button.ExcelButton excel button}
             */
        includeExcelBtn: false,
        /**
             * @cfg {Boolean} [isLocalExcelExport=true]
             * Set `false` to export from Cach√© instead of from the store's local data
             */
        isLocalExcelExport: true,
        /**
             * @cfg {Boolean} [includeValidationStatus=false]
             * Set `false` to disable the validation plugin in the status bar
             */
        includeValidationStatus: false,
        /**
             * @cfg {String} singleName
             * Used for identifying single rows, like in the "Delete selected rows?" confirmation or the grid row counter
             */
        singleName: '',
        /**
             * @cfg {String} pluralName
             * Used for identifying multiple rows. Defaults to {@link #singleName} text + 's'
             */
        pluralName: ''
    },
    /**
         * @cfg {Object} rowCountConfig
         * Config options for grid row counter
         */
    rowCountConfig: {},
    /**
         * @cfg {String} [searchAlign='right']
         * Toolbar location for search.  Possible options are "left" or "right" (defaults to "right")
         */
    searchAlign: 'right',
    /**
         * @cfg {Number} [searchWidth=200]
         * Width of gridFilterField's field in pixels
         */
    searchWidth: 200,
    /**
         * @cfg {Number} searchMinChars
         * @inheritdoc sl.panel.grid.plugin.GridFilterField#minChars
         *
         */
    /**
         * @cfg {Object} searchConfig
         * Config options for grid search
         */
    /**
         * @cfg {Boolean} [filterEncode=false]
         * Specify true for buildQuery to use Ext.util.JSON.encode to encode the filter query parameter sent with a remote
         *     request. Defaults to false.
         */
    filterEncode: false,
    /**
         * @cfg {Boolean} [filterLocal=true]
         * true to use Ext.data.Store filter functions (local filtering) instead of the server-side filtering.
         */
    filterLocal: true,
    /**
         * @cfg {Number} [filterUpdateBuffer=550]
         * Number of milliseconds to defer store updates since the last filter change.
         */
    filterUpdateBuffer: 550,
    /**
         * @cfg {String} [filterParamPrefix='filter']
         * The url parameter prefix for the filters.
         */
    filterParamPrefix: 'filter',
    /**
         * @cfg {Object} filterConfig
         * Config options for column filters
         */
    /**
         * @cfg {Boolean} [stateful=false]
         * A flag which causes the object to attempt to restore the state of internal properties (column widths,
         *     visibility, etc.) from a saved state on startup. The object must have a stateId for state to be managed.
         *     Auto-generated ids are not guaranteed to be stable across page loads and cannot be relied upon to save and
         *     restore the same state for a object.
         */
    stateful: false,
    /**
         * @cfg {String} statusBarId
         * Statusbar to use
         */
    /**
         * @cfg {String} statusBarPosition
         * toolbar location (top, bottom, right, left)
         */
    /**
         * @cfg {String} [selModelMode="MULTI"]
         * Mode of selection.  Valid values are:
         *
         * - **"SINGLE"** - Only allows selecting one item at a time.  Use {@link Ext.selection.Model#allowDeselect
         *     allowDeselect} to allow deselecting that item.  Also see {@link Ext.selection.Model#toggleOnClick
         *     toggleOnClick}. This is the default.
         * - **"SIMPLE"** - Allows simple selection of multiple items one-by-one. Each click in grid will either
         *   select or deselect an item.
         * - **"MULTI"** - Allows complex selection of multiple items using Ctrl and Shift keys.
         */
    selModelMode: 'MULTI',
    /**
         * @cfg {Boolean} [columnLines=true]
         */
    columnLines: true,
    /**
         * @cfg {Object} [columnDefaults]
         * Default configuration for each column.  Will not overwrite the column's definition.
         */
    /**
         * @cfg {Boolean} [enableKeyNav]
         * If `true`, will monitor key events when grid has focus in order to trigger various button clicks (refresh, save, delete, etc.)
         */
    /**
         * @cfg {Boolean} [keepSelectedInView=false]
         * Set `true` to keep a selected row in view on resize event
         */
    keepSelectedInView: false,
    disableCellWrappedColumns: false,
    /**
         * @event beforeuiupdate
         * @preventable
         * @param {sl.panel.grid.DisplayGrid} grid
         * @param {Object} [loadParams={}] Parameters used to retrieve the data from the server
         */
    /**
         * @event uiupdate
         * @param {sl.panel.grid.DisplayGrid} grid
         * @param {Ext.data.Model[]} updatedRecords Array of records that were modified by values from Cach√©
         * @param {Ext.data.Model[]} insertedRecords Array of records that only existed in Cach√©, so where added on client
         * @param {Ext.data.Model[]} deletedRecords Array of records that did not exist in Cach√©, so were deleted on client
         */
    /**
         * @private
         */
    constructor: function(config) {
        var grid = this;
        config = config || {};
        if (!config.selModel && !grid.selModel) {
            config.selModel = {
                selType: 'rowmodel',
                mode: config.selModelMode || grid.selModelMode || 'SINGLE'
            };
        }
        // add sl.panel.Panel functions to the grid
        grid = Ext.applyIf(grid, grid.mixins.panel);
        grid.callParent(arguments);
    },
    initComponent: function() {
        var grid = this,
            config = {
                plugins: grid.createPlugins(),
                features: grid.createFeatures()
            },
            columns = grid.getColumns();
        grid.setDefaultTitle(grid.getDefaultTitle() || grid.getTitle());
        if (grid.stateful) {
            grid.configureStateful();
        }
        // merge all properties whose value is an array (useful for plugin or features config options)
        grid.concatPropertyArrays(config, grid, true);
        if (Ext.isArray(columns)) {
            grid.configureColumns(columns);
        }
        // overwrite local config options with param-config options defined here
        Ext.apply(grid, config);
        grid.callParent(arguments);
        // exclude all nested grids that were created on-the-fly because
        // `lockable` grid mixin is being used due to locked columns.
        // only 1 grid should have the default buttons
        if (!grid.ownerLockable) {
            if (grid.useStewartsRenderer) {
                grid.addStewartsRendererToColumns();
                grid.on({
                    'beforereconfigure': function(myGrid, store, columns) {
                        grid.addStewartsRendererToColumns(columns);
                    }
                });
            }
            if (grid.keepSelectedInView) {
                grid.getView().on({
                    buffer: 500,
                    'resize': grid.onResizeKeepSelectedInView
                });
            }
            // include export to excel button
            if (grid.includeExcelBtn) {
                grid.configureExcelButton();
            }
            // include grid refresh button
            if (grid.includeRefreshBtn) {
                grid.configureRefreshButton();
            }
            if (grid.useStatusBar) {
                grid.on({
                    scope: grid,
                    afterrender: grid.configureStatusBar
                });
            }
        } else {
            this.showLockedGridError();
        }
    },
    onRender: function() {
        var me = this;
        me.callParent(arguments);
        if (me.enableKeyNav) {
            me.initKeyNav();
        }
    },
    /**
         * @localdoc STEWARTS OVERRIDE
         * @inheritdoc Ext.panel.Table#method-bindStore
         * Add `beforeload` and `load` store events to the grid
         * @overrideVersion ExtJS 5.1.2.748
         */
    bindStore: function(store, initial) {
        var me = this,
            view = me.getView();
        // Normally, this method will always be called with a valid store (because there is a symmetric
        // .unbindStore method), but there are cases where this method will be called and passed a null
        // value, i.e., a panel is used as a pickerfield. See EXTJS-13089.
        if (store) {
            // Bind to store immediately because subsequent processing looks for grid's store property
            me.store = store;
            if (view.store !== store) {
                // If coming from a reconfigure, we need to set the actual store property on the view. Setting the
                // store will then also set the dataSource.
                //
                // Note that if it's a grid feature then this is sorted out in view.bindStore(), and it's own
                // implementation of .bindStore() will be called.
                view.bindStore(store, false);
            }
            me.mon(store, {
                load: me.onStoreLoad,
                scope: me
            });
            me.storeRelayers = me.relayEvents(store, [
                /**
                     * @event filterchange
                     * @inheritdoc Ext.data.Store#filterchange
                     */
                'filterchange',
                /**
                     * @event groupchange
                     * @inheritdoc Ext.data.Store#groupchange
                     */
                'groupchange',
                /////////////////////////////////////////
                // CUSTOM CODE
                //  add `beforeload` and `load` events to the grid
                //
                /**
                     * @event beforeload
                     * @inheritdoc Ext.data.ProxyStore#beforeload
                     */
                'beforeload',
                /**
                     * @event load
                     * @inheritdoc Ext.data.ProxyStore#load
                     */
                'load',
                /**
                     * @event clear
                     * @inheritdoc Ext.data.AbstractStore#clear
                     */
                'clear',
                /**
                     * @event datachanged
                     * @inheritdoc Ext.data.AbstractStore#datachanged
                     */
                'datachanged'
            ]);
        } else //
        // END CUSTOM CODE
        /////////////////////////////////////////
        {
            me.unbindStore();
        }
    },
    /**
         * adds custom Stewarts plugins to the grid
         * @private
         */
    createPlugins: function() {
        var grid = this,
            plugins = grid.plugins || [];
        if (grid.stateful && grid.includeStateViewPanel) {
            // view panel in toolbar
            grid.gridStateViewPanel = Ext.create(Ext.apply({
                xclass: 'sl.panel.grid.plugin.GridStateViewPanel'
            }, grid.viewPanelConfig));
            plugins.push(grid.gridStateViewPanel);
        } else if (grid.includeStateViewPanel && !grid.stateful) {
            sl.consoleWarn('[' + grid.$className + '] Grid\'s State View Panel was not built because grid is not stateful', {
                grid: grid
            });
            grid.includeStateViewPanel = false;
        }
        // search box in toolbar
        if (grid.includeSearch) {
            grid.search = Ext.create(Ext.apply({
                xclass: 'sl.panel.grid.plugin.GridFilterField',
                iconCls: false,
                dateFormat: 'm/d/Y',
                align: grid.searchAlign,
                fieldWidth: grid.searchWidth,
                minChars: grid.searchMinChars
            }, grid.searchConfig));
            plugins.push(grid.search);
        }
        // row counter in toolbar
        if (grid.includeRowCount) {
            grid.rowCount = Ext.create(Ext.apply({
                xclass: 'sl.panel.grid.plugin.GridRowCount'
            }, grid.rowCountConfig));
            plugins.push(grid.rowCount);
        }
        // buffered renderer
        if (grid.includeBufferedRenderer) {
            grid.bufferedRenderer = Ext.create(Ext.apply({
                xclass: 'Ext.grid.plugin.BufferedRenderer'
            }, grid.bufferedRendererConfig));
            plugins.push(grid.bufferedRenderer);
            if (grid.enableLocking || (!grid.isLocked && grid.getColumnIndexByProperty('locked', undefined, true) >= 0)) {
                sl.utils.consoleLogWithTrace('grid may experience errors when there are locked columns and has a buffered renderer, especially if grid is hidden initially', {
                    grid: grid
                });
            }
        }
        return plugins;
    },
    /**
         * @private
         * adds custom Stewarts features to the grid
         */
    createFeatures: function() {
        var grid = this,
            features = grid.features || [];
        if (grid.includeFilters) {
            grid.includeFilters = false;
            Ext.log.warn(('Ext.ux.grid.filter.Filter') + ': Does not exist yet.  `includeFilters` is now disabled');
        }
        // column filters
        /*if (grid.includeFilters) {
             var filters = Ext.apply({
             ftype: 'filters',
             encode: grid.filterEncode,
             local: grid.filterLocal,
             paramPrefix: grid.filterParamPrefix,
             updateBuffer: grid.filterUpdateBuffer,
             anyMatch: true,
             itemId: 'filters'
             }, grid.filterConfig);

             features.push(filters);

             // filtering on a column that changes the display value via a renderer will not work correctly (gsf, combo)
             var columns = grid.getColumns();
             Ext.Array.forEach(columns, function (col, index, array) {
             if (!col.filter) {
             // instead of specifying filter config just specify filterable=true to use store's field's type property
             // (if type property not explicitly specified in store config it will be 'auto' which uses the model's type for that field
             col.filterable = Ext.isDefined(col.filterable) ? col.filterable : true;
             }
             });

             grid.on({
             'beforesearch': function () {
             var feature = grid.findFeature(filters.ftype);
             if (feature) {
             feature.clearFilters();
             }
             }
             });
             }
             */
        return features;
    },
    /**
         * @private
         * @return {sl.panel.StatusBar} Toolbar that will be used as the status bar.
         *
         * It will build a toolbar if there isn't one at the desired location
         */
    createStatusBar: function() {
        var grid = this,
            toolbarQuery, tempStatusBar, tbCount;
        if (grid.statusBarId) {
            toolbarQuery = 'toolbar[id="' + grid.statusBarId + '"]';
        } else if (grid.statusBarPosition) {
            toolbarQuery = 'toolbar[dock="' + grid.statusBarPosition + '"]';
        }
        // gets the first toolbar that matches toolbar query
        if (toolbarQuery) {
            grid.statusBar = grid.statusBar || grid.getDockedItems(toolbarQuery)[0];
        }
        // if doesn't exist, create new one at defined position
        if (!grid.statusBar) {
            grid.statusBarPosition = grid.statusBarPosition || 'bottom';
            if (Ext.isDefined(sl.panel.grid.plugin.GridStatusBar)) {
                var gridValidation = grid.includeValidationStatus ? Ext.create('sl.panel.grid.plugin.GridValidationStatus', {
                        grid: grid
                    }) : undefined;
                tempStatusBar = Ext.create('sl.panel.grid.plugin.GridStatusBar', Ext.apply({
                    grid: grid,
                    enableOverflow: true,
                    addToolbarItems: false,
                    dock: grid.statusBarPosition,
                    hidden: true,
                    plugins: (gridValidation ? [
                        gridValidation
                    ] : undefined)
                }, grid.statusBarConfig));
            } else {
                if (grid.includeValidationStatus) {
                    sl.utils.consoleLogWithTrace('sl.panel.grid.plugin.GridStatusBar is not defined; Validation Status Message is disabled for grid.', {
                        grid: grid
                    });
                    // force to false, b/c validation requires sl.StatusBar
                    grid.includeValidationStatus = false;
                }
                tempStatusBar = {
                    xtype: 'toolbar',
                    dock: grid.statusBarPosition,
                    hidden: true,
                    enableOverflow: true,
                    items: []
                };
            }
            if (tempStatusBar) {
                tbCount = (grid.getToolbars(grid.statusBarPosition) || []).length;
                grid.statusBar = grid.addDocked(tempStatusBar, tbCount)[0];
                grid.statusBar.on({
                    scope: grid,
                    single: true,
                    'add': function() {
                        grid.statusBar.show();
                    }
                });
            }
        }
        return grid.statusBar;
    },
    /**
         * @private
         * Adds items to the status bar in the preferred & organized order
         * @return {Array} Array of added items
         */
    getItemsForStatusBar: function() {
        var grid = this,
            itemArr = [];
        if (!grid.hasListeners.beforegetstatusbaritems || grid.fireEvent('beforegetstatusbaritems', grid, itemArr) !== false) {
            var i = 0,
                arr = [],
                // if array index is empty, item is added there
                // else if index has a value, puts new item in that index and pushes everything else back a spot
                addItemToArray = function(item, index) {
                    if (itemArr[index]) {
                        itemArr.splice(index, 0, item);
                    } else {
                        itemArr[index] = item;
                    }
                };
            if (grid.includeExcelBtn) {
                addItemToArray(grid.excelButton, grid.excelButton.insertLoc || 0);
                if (itemArr.length) {
                    addItemToArray('->', grid.excelButton.insertLoc || 0);
                }
            }
            if (grid.includeSearch) {
                arr = grid.search.getItemsForToolbar() || [];
                for (i = arr.length - 1; i >= 0; i--) {
                    addItemToArray(arr[i], grid.search.insertLoc || 0);
                }
                if (itemArr.length && arr.length) {
                    addItemToArray({
                        xtype: 'tbseparator',
                        cls: 'includeSearch'
                    }, grid.search.insertLoc || 0);
                }
            }
            if (grid.includeStateViewPanel) {
                arr = grid.gridStateViewPanel.getItemsForToolbar() || [];
                for (i = arr.length - 1; i >= 0; i--) {
                    addItemToArray(arr[i], grid.gridStateViewPanel.insertLoc || 0);
                }
                if (itemArr.length && arr.length) {
                    addItemToArray({
                        xtype: 'tbseparator',
                        cls: 'includeStateViewPanel'
                    }, grid.gridStateViewPanel.insertLoc || 0);
                }
            }
            if (grid.includeRowCount) {
                arr = grid.rowCount.getItemsForToolbar() || [];
                for (i = arr.length - 1; i >= 0; i--) {
                    addItemToArray(arr[i], grid.rowCount.insertLoc || 0);
                }
                if (itemArr.length && arr.length) {
                    addItemToArray({
                        xtype: 'tbseparator',
                        cls: 'includeRowCount'
                    }, grid.rowCount.insertLoc || 0);
                }
            }
            if (grid.includeValidationStatus) {
                if (sl.utils.hasAlias(grid.statusBar, 'slstatusbar')) {
                    arr = grid.statusBar.getItemsForToolbar();
                    for (i = arr.length - 1; i >= 0; i--) {
                        addItemToArray(arr[i], grid.statusBar.insertLoc || 0);
                    }
                    if (itemArr.length && arr.length) {
                        addItemToArray({
                            xtype: 'tbseparator',
                            cls: 'includeValidationStatus'
                        }, grid.statusBar.insertLoc || 0);
                    }
                }
            }
            if (grid.includeRefreshBtn) {
                var refreshBtn = grid.getRefreshButton();
                addItemToArray(refreshBtn, refreshBtn.insertLoc || 0);
                if (itemArr.length) {
                    addItemToArray({
                        xtype: 'tbseparator',
                        cls: 'selectionCountSeparator'
                    }, refreshBtn.insertLoc || 0);
                }
            }
            grid.fireEvent('getstatusbaritems', grid, itemArr);
        }
        return itemArr;
    },
    /**
         * @param {Boolean} [createIfUndefined=true] If can't find defined button and is `true`, then creates new button
         * @return {sl.field.button.RefreshButton} Refresh button
         */
    getRefreshButton: function(createIfUndefined) {
        var ttip = Ext.String.format('<b>Refresh Grid\'s Contents{0}</b><br/><br/><i>You will lose any unsaved changes</i>', this.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>R</kbd>)' : '');
        return this.getButtonByType('refreshButton', 'refreshbutton', createIfUndefined, {
            text: '',
            tooltip: ttip,
            overflowText: 'Refresh',
            iconCls: Ext.baseCSSPrefix + 'tbar-loading'
        });
    },
    /**
         * @param {Boolean} [createIfUndefined=true] If can't find defined button and is `true`, then creates new button
         * @return {sl.field.button.ExcelButton} Excel button
         */
    getExcelButton: function(createIfUndefined) {
        var ttip = Ext.String.format('<b>Excel Export{0}</b><br/><br/>Exports the Grid\'s Contents to New Excel File', this.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>E</kbd>)' : '');
        return this.getButtonByType('excelButton', 'excelbutton', createIfUndefined, {
            tooltip: ttip
        });
    },
    /**
         * @private
         * Creates a {@link sl.field.button.RefreshButton Refresh Button} if one doesn't exist.
         * Will only define the click event behavior if it has not been defined before.
         */
    configureRefreshButton: function() {
        var grid = this,
            refreshBtn = grid.getRefreshButton();
        // don't let this function get called multiple times on the same grid
        if (!grid._refreshEventsAttached) {
            refreshBtn.on({
                scope: grid,
                'click': function() {
                    grid.refreshGridData();
                }
            });
            grid.getStore().on({
                load: function() {
                    grid.getRefreshButton().enable();
                },
                exception: function() {
                    grid.getRefreshButton().enable();
                },
                beforeload: function() {
                    var refreshBtn = grid.getRefreshButton();
                    if (grid.rendered && refreshBtn) {
                        refreshBtn.disable();
                    }
                }
            });
            grid._refreshEventsAttached = true;
        } else {
            sl.utils.consoleWarningWithTrace('[configureRefreshButton] Already been called for this grid.  Ignoring this call...');
        }
    },
    /**
         * @private
         * Creates a {@link sl.field.button.ExcelButton Export to Excel Button} if one doesn't exist.
         * Will only define the click event behavior if it has not been defined before.
         */
    configureExcelButton: function() {
        var grid = this;
        // don't let this function get called multiple times on the same grid
        if (!grid._excelEventsAttached) {
            grid.getExcelButton().on({
                scope: grid,
                'click': function(btn, evt) {
                    var isLocalExport = grid.isLocalExcelExport;
                    sl.utils.ExportData.gridToExcel(grid, isLocalExport);
                }
            });
            grid.getStore().on({
                load: function() {
                    grid.getExcelButton().enable();
                },
                exception: function() {
                    grid.getExcelButton().enable();
                },
                beforeload: function() {
                    var excelBtn = grid.getExcelButton();
                    if (grid.rendered && excelBtn) {
                        excelBtn.disable();
                    }
                }
            });
            grid._excelEventsAttached = true;
        } else {
            sl.utils.consoleWarningWithTrace('[configureExcelButton] Already been called for this grid.  Ignoring this call...');
        }
    },
    /**
         * @private
         * Used to combine properties that are arrays since Ext.apply/applyIf with either overwrite or ignore.
         * Useful for plugin and features arrays,
         * since we want both the grid's initial plugins and the passed-in config's added plugins
         * Does not overwrite or replace any objects in either array
         * If Pref=[1,2,3] and Alt=[3,2,1,0] -> concat Arr = [1,2,3,3,2,1,0]
         */
    concatPropertyArrays: function(preferredConfig, altConfig, noDuplicates) {
        for (var property in preferredConfig) {
            if (altConfig[property]) {
                // only merge if it's an array
                if (Ext.isArray(altConfig[property])) {
                    preferredConfig[property] = preferredConfig[property].concat(altConfig[property]);
                    if (noDuplicates) {
                        for (var i = 0; i < preferredConfig[property].length; ++i) {
                            for (var j = i + 1; j < preferredConfig[property].length; ++j) {
                                if (preferredConfig[property][i] === preferredConfig[property][j]) {
                                    preferredConfig[property].splice(j--, 1);
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    /**
         * Will either add/remove a class on a cell.
         * Useful if want to change the background of a particular cell on the fly
         * @param {Boolean} isAdded if `true`, it will add the class; if false, it will remove the class
         * @param {Number} rowIndex row containing the cell
         * @param {Number} columnIndex column containing the cell
         * @param {String} [className='highlighted'] CSS class to add/remove
         */
    modifyCellClass: function(isAdded, rowIndex, columnIndex, className) {
        className = className || 'highlighted';
        var cell;
        if (rowIndex >= 0 && columnIndex >= 0) {
            cell = this.getView().getCellByPosition({
                row: rowIndex,
                column: columnIndex
            });
            if (isAdded) {
                cell.addCls(className);
            } else {
                cell.removeCls(className);
            }
        }
        return cell;
    },
    /**
         * Renderer designed to convert the value based on the editor-type/field-type
         * See {@link Ext.grid.column.Column#cfg-renderer} for more information about parameters
         */
    stewartsRenderer: function(value, metadata, record, rowIndex, colIndex, store, view) {
        //noinspection UnnecessaryLocalVariableJS
        var grid = this,
            originalValue = value,
            column, editor, modelField, isDate, viewPlugins, draggable;
        try {
            column = metadata.column;
            editor = column.getColumnEditor();
            modelField = record.getField(column.dataIndex) || {};
            isDate = false;
            viewPlugins = Ext.Array.from(view.plugins);
            if (editor) {
                // some editor fields have default renderers like sl.field.ComboBox
                if (Ext.isFunction(editor.renderer)) {
                    value = editor.renderer.apply(grid, arguments);
                } else if (sl.utils.hasAlias(editor, 'datefield')) {
                    isDate = true;
                }
                // temp property for renderers
                column._isColumnEditable = grid.isColumnEditable(column, record);
                if (grid.showEditCursor) {
                    view.cellValues.tdCls = String(view.cellValues.tdCls || '') + ((column._isColumnEditable === true) ? ' can-edit-cell' : ' cannot-edit-cell');
                }
            } else if (Ext.isDate(value) || (Ext.isFunction(modelField.getType) && modelField.getType() === 'date')) {
                isDate = true;
            }
            if (isDate) {
                value = Ext.util.Format.date(value, (column.format || modelField.dateFormat || Ext.Date.defaultFormat || 'm/d/Y'));
            }
            value = sl.panel.grid.GridRenderers.highlightMatchesRenderer.apply(grid, arguments);
            if (!grid.disableTooltipRenderer && !column.disableTooltipRenderer && // don't have tooltip when column is the checkcolumn from CheckboxModelView
            !Ext.isDefined(column.isCheckerHd)) {
                value = sl.panel.grid.GridRenderers.tooltipRenderer.apply(grid, arguments);
            }
            for (var i = 0; i < viewPlugins.length; i++) {
                var plugin = viewPlugins[i];
                if (plugin && plugin.ptype === 'gridviewdragdrop' && plugin.dragZone) {
                    draggable = true;
                    break;
                }
            }
            // add row & cursor styling
            if (draggable) {
                view.cellValues.tdCls = String(view.cellValues.tdCls || '') + ' can-drag-view';
                if (grid.isFirstVisibleColumn(column)) {
                    view.cellValues.tdCls = String(view.cellValues.tdCls || '') + ' first-visible-column';
                }
            }
            // cleaning up temporary value
            delete column._isColumnEditable;
        } catch (error) {
            value = originalValue;
            console.error('[' + grid.$className + '] Renderer Error', {
                error: error,
                args: arguments
            });
        }
        return value;
    },
    /**
         * Refreshes a grid store's data without actually reloading the store. Updates store's records in place.
         *
         * {@link sl.data.CacheStore#method-syncRecordData} handles updating the store's data.
         * `syncRecordData` handles updating the store's records with the Cach√©'s most-recent data.
         *
         * Best used on unmodified client-side data, but modified, dirty data can be preserved if necessary.
         * * Otherwise, this function ***WILL OVERWRITE CLIENT-SIDE EDITS & CHANGES***.
         *
         *
         * @param {Object} [loadParams={}] An object of override parameters used to retrieve the data from the server
         * If passed as undefined or an empty object then the grid store's last-used parameters will be used.
         * @param {Boolean} [setDirty=true] Used to tell if the modified field will be put in the model's modified array
         *     and show as dirty. If `false`, then will not mark the record as modified.
         *
         * *** NOTE: If the field is not marked dirty then any changes to the field will not be committed to the server
         *     if and when a save is attempted***
         * @param {Boolean} [deleteUnsavedRecords=false] If `true`, new store records that are not saved will be deleted
         * @param {Boolean} [overwriteModifiedValues=false] If `true`, store record values that have been modified but not
         *     yet saved will be replaced with Cach√©'s data
         * @param {Function} [callbackFn] Called after store has been updated and grid row highlighting has taken place
         * Function will be passed modified records, inserted records, and deleted records
         * @param {Object} [cbScope=grid] The scope the callbackFn function will be called with
         * @param {Object} [eOpts]
         * @param {String} [eOpts.idField] Record's unique value to link store record to Cach√© record
         */
    updateUI: function(loadParams, setDirty, deleteUnsavedRecords, overwriteModifiedValues, callbackFn, cbScope, eOpts) {
        var grid = this,
            store;
        // default configurations
        loadParams = Ext.apply({}, loadParams);
        setDirty = Ext.valueFrom(setDirty, true);
        deleteUnsavedRecords = Ext.valueFrom(deleteUnsavedRecords, false);
        overwriteModifiedValues = Ext.valueFrom(overwriteModifiedValues, false);
        callbackFn = Ext.isFunction(callbackFn) ? callbackFn : Ext.emptyFn;
        cbScope = Ext.valueFrom(cbScope, grid);
        eOpts = Ext.apply({
            "_delegateDeleteHandling": true,
            "updatedColor": undefined,
            "insertedColor": undefined,
            "deletedColor": "#D80000"
        }, eOpts);
        // Fire before event on the grid so the programmer can determine if we want to go through with it.
        // Event should return false to cancel.
        if (grid.fireEvent('beforeuiupdate', grid, loadParams) !== false) {
            // Is Grid already updating? Could be called from a timer or other functions...
            if (!grid._isUpdatingUI) {
                grid._isUpdatingUI = true;
                store = grid.getStore();
                // if the grid is using a `chainedstore`, point to source
                if (store.getSource) {
                    store = store.getSource() || store;
                }
                if (!store.syncRecordData(loadParams, setDirty, deleteUnsavedRecords, overwriteModifiedValues, function(updatedRecords, insertedRecords, deletedRecords) {
                    if (updatedRecords.length) {
                        updatedRecords.forEach(function(rec) {
                            // `store.syncRecordData` may have changed an individual property,
                            // so highlight the proper cell in the grid
                            (rec._updateProperties || []).forEach(function(property) {
                                var column = grid.getColumnForDataIndex(property);
                                if (column) {
                                    // highlight the changed column
                                    Ext.Function.defer(grid.highlightRecord, 100, grid, [
                                        rec,
                                        column,
                                        eOpts.updatedColor,
                                        {
                                            duration: 5000
                                        }
                                    ]);
                                }
                            });
                        });
                    }
                    if (insertedRecords.length) {
                        // Cach√© had a record that the store did not, so highlight the new grid row
                        insertedRecords.forEach(function(rec) {
                            // highlight the new grid row
                            Ext.Function.defer(grid.highlightRecord, 500, grid, [
                                rec,
                                undefined,
                                eOpts.insertedColor
                            ]);
                        });
                    }
                    if (deletedRecords.length) {
                        // Cach√© did not have the record that the store did, so highlight the deleted grid row
                        deletedRecords.forEach(function(rec) {
                            Ext.Function.defer(// highlight the deleted grid row, then remove from store
                            grid.highlightRecord, 500, grid, [
                                rec,
                                undefined,
                                eOpts.deletedColor,
                                {
                                    callback: Ext.Function.pass(store.remove, [
                                        rec
                                    ], store)
                                }
                            ]);
                        });
                    }
                    grid.view.refresh();
                    grid.fireEvent('uiupdate', grid, updatedRecords, insertedRecords, deletedRecords);
                    callbackFn.call(cbScope, grid, updatedRecords, insertedRecords, deletedRecords);
                    delete grid._isUpdatingUI;
                }, cbScope, eOpts)) {
                    // store.syncRecordData returned `false`
                    delete grid._isUpdatingUI;
                }
            }
        }
    },
    /**
         * @private
         * attach custom Stewarts renderer to columns
         * @param {Ext.grid.column.Column[]} [columns] Columns to attach renderer to
         */
    addStewartsRendererToColumns: function(columns) {
        var grid = this,
            addRendererToCol = function(c) {
                if (c._stewartsRendererAttached && !Ext.isFunction(c.renderer)) {
                    // clean up: stewarts renderer isn't actually attached is there's no `renderer` function
                    delete c._stewartsRendererAttached;
                }
                if (!c.disableStewartsRenderer && !c._stewartsRendererAttached) {
                    grid.addStewartsRendererToColumn(c);
                }
                return c;
            };
        Ext.Array.forEach((columns || grid.getColumns(false, true)), function(column, index, array) {
            if (column.columns) {
                column.columns.forEach(function(col) {
                    addRendererToCol(col);
                });
            } else {
                addRendererToCol(column);
            }
        });
    },
    /**
         * @private
         * Adds custom Stewarts renderer to column.
         * If the column has an existing renderer, it will merge the two renderers.
         * @param {Ext.grid.column.Column} col
         */
    addStewartsRendererToColumn: function(col) {
        var me = this,
            assignedColRendererFn = (Ext.isFunction(col.renderer) ? col.renderer : (Ext.isFunction(col.defaultRenderer) ? col.defaultRenderer : false));
        // column hasn't been instantiated yet & it doesn't have a custom renderer,
        // but its future class might have an assigned renderer so we need to look it up
        if (!col.renderer && Ext.isSimpleObject(col)) {
            assignedColRendererFn = me.getRendererForSimpleColumnObject(col);
        }
        // Our Stewarts Default Renderer:
        //  * calls column's existing renderer first, then calls the display grid's renderer
        //  * see `useStewartsRenderer` property config for more details
        col.renderer = function(value, metaData, record, rowIndex, colIndex, store, view) {
            var me = this,
                originalValue = value,
                callerFn, assignedColRendererScope, grid, column;
            try {
                // get the function that called this function
                callerFn = ((arguments || {}).callee || {}).caller;
                if (sl.utils.isInstanceOf(me, Ext.grid.Panel)) {
                    grid = me;
                    column = col;
                } else if (sl.utils.isInstanceOf(me, Ext.grid.column.Column)) {
                    column = me;
                    grid = ((column.ownerCt.isColumn ? column.ownerCt.ownerCt : column.ownerCt) || {}).grid;
                    // Ext.view.Table:handleUpdate hardcodes the col & row indices to 0,
                    // so we cannot trust that those values are accurate.
                    rowIndex = rowIndex === 0 ? store.indexOf(record) : rowIndex;
                    colIndex = colIndex === 0 ? column.getIndex() : colIndex;
                } else {
                    console.error('[' + grid.$className + ': col.renderer] Unknown Scope', {
                        args: arguments,
                        scopeClassName: this.$className,
                        scope: this
                    });
                }
                // don't allow renderer to get stuck in endless loop by calling
                // the function that called current `col.renderer` function
                if (assignedColRendererFn && callerFn !== assignedColRendererFn) {
                    assignedColRendererScope = column.usingDefaultRenderer ? column : column.scope || grid || me;
                    value = assignedColRendererFn.apply(assignedColRendererScope, [
                        value,
                        metaData,
                        record,
                        rowIndex,
                        colIndex,
                        store,
                        view
                    ]);
                }
                value = grid.stewartsRenderer.apply(grid, [
                    value,
                    metaData,
                    record,
                    rowIndex,
                    colIndex,
                    store,
                    view
                ]);
            } catch (error) {
                value = originalValue;
                console.error('[' + grid.$className + '] Default Renderer Error', {
                    error: error,
                    args: arguments,
                    scopeClassName: this.$className,
                    scope: this
                });
            }
            return value;
        };
        // don't let `col` have our renderer more than once
        col._stewartsRendererAttached = true;
        // needed for {@link Ext.view.Table#method-shouldUpdateCell} to properly redraw cell (esp for combo/combogrid)
        col.hasCustomRenderer = true;
    },
    /**
         * Designed to get a renderer for a column that hasn't been instantiated yet.
         * Affects following column xtypes: widget/template/date/check/number/action/boolean/rownumberer/cost
         */
    getRendererForSimpleColumnObject: function(colObj) {
        var colXType = colObj.xtype,
            colRenderer = false,
            futureClass, futureProto;
        try {
            // ignore basic column because it has no renderer
            if (colXType && 'gridcolumn' !== colXType) {
                if (colXType.indexOf('.') < 0) {
                    colXType = 'widget.' + colXType;
                }
                futureClass = Ext.ClassManager.getByAlias(colXType);
                if (futureClass) {
                    futureProto = futureClass.prototype;
                    if (Ext.isFunction(futureProto.renderer)) {
                        colRenderer = futureProto.renderer;
                    } else if (Ext.isFunction(futureProto.defaultRenderer)) {
                        colRenderer = futureProto.defaultRenderer;
                        colObj.usingDefaultRenderer = true;
                    }
                }
            }
        } catch (error) {
            colRenderer = false;
            console.error('[getRendererForSimpleColumnObject] Error', {
                error: error,
                args: arguments
            });
        }
        return colRenderer;
    },
    /**
         * adds key-listener for:
         *  - Refresh Button
         *  - Excel Button
         */
    initKeyNav: function() {
        var me = this,
            shortcutCfg = [
                {
                    // Ctrl + Alt + r = 'Refresh'
                    key: 'rR',
                    alt: true,
                    ctrl: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        var btn = me.getRefreshButton(false);
                        if (btn) {
                            btn.fireEvent('click', btn);
                        }
                    }
                },
                {
                    // Ctrl + Alt + e = 'Excel'
                    key: 'eE',
                    alt: true,
                    ctrl: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        var btn = me.getExcelButton(false);
                        if (btn) {
                            btn.fireEvent('click', btn);
                        }
                    }
                }
            ];
        me.keyNav = new Ext.util.KeyMap(me.el, shortcutCfg);
    },
    /**
         * @param {String} propName name of property on grid that is this button
         * @param {String|String[]} btnXType xtype of button.  If it is an array and if `createIfUndefined` is `true`,
         * then will use first element in array as the type of button to create.
         * e.g., `['deletewithundobutton', 'deletebutton']` => `'deletewithundobutton'`
         * @param {Boolean} [createIfUndefined=true] If `true` and button isn't defined, it will generate new button
         * @param {Object} [newBtnProperties] properties to assign to new button
         */
    getButtonByType: function(propName, btnXType, createIfUndefined, newBtnProperties) {
        var grid = this,
            btn, selectorQuery;
        btnXType = Ext.Array.from(btnXType);
        // force as an array b/c sometimes there are multiple allowed xtypes
        // will be "toolbar x,toolbar y,toolbar z" so that xtypes x,y, & z are looked for in a toolbar
        selectorQuery = btnXType.map(function(xtype) {
            return 'toolbar ' + xtype;
        }).join(',');
        btn = grid[propName] || grid.down(selectorQuery);
        createIfUndefined = Ext.valueFrom(createIfUndefined, true);
        if (Ext.isEmpty(btn) && createIfUndefined) {
            btn = Ext.widget(btnXType[0], newBtnProperties);
        }
        grid[propName] = btn;
        return btn;
    },
    configureStateful: function() {
        var grid = this,
            currProvider;
        if (grid.enableLocking || (!grid.isLocked && grid.getColumnIndexByProperty('locked', undefined, true) >= 0)) {
            sl.utils.consoleLogWithTrace('[' + grid.$className + '] Grid cannot have locked columns and be stateful', {
                grid: grid
            });
            grid.stateful = false;
        } else {
            // stateId must have a value, the more unique the better
            grid.stateId = grid.stateId || grid.name || grid.itemId || grid.id;
            if (!grid.includeStateViewPanel) {
                currProvider = Ext.state.Manager.getProvider();
                if (currProvider && !(currProvider instanceof Ext.state.LocalStorageProvider)) {
                    Ext.state.Manager.setProvider(new Ext.state.LocalStorageProvider());
                }
            }
        }
    },
    // update the columns
    // 1.) apply columnDefaults
    // 2.) add stateId if missing
    configureColumns: function(columns) {
        var grid = this,
            addColumnDefault = (Ext.isObject(grid.columnDefaults) && !Ext.Object.isEmpty(grid.columnDefaults));
        Ext.Array.forEach(columns, function(col, index, array) {
            if (addColumnDefault) {
                Ext.applyIf(col, grid.columnDefaults);
            }
            if (grid.stateful && Ext.isEmpty(col.stateId)) {
                col.stateId = col.dataIndex + '-' + grid.stateId;
            }
            if (!grid.disableCellWrappedColumns) {
                col.cellWrap = true;
            }
        });
    },
    onResizeKeepSelectedInView: function(grid, event, eOpts) {
        // ExtJS 5.1.2 has bug where `resize` passes in a `Ext.view.Table` instead of a `sl.panel.grid.DisplayGrid`
        grid = (grid.ownerGrid ? grid.ownerGrid : grid);
        var selRec = grid.getSelection()[0];
        if (selRec) {
            grid.scrollToRecord(selRec);
        }
    },
    /**
         * @param {Ext.data.Model} record
         * @param {Ext.grid.column.Column|Number} [column] If provided, highlights only the single cell that matches
         *  the provided record & column; else highlights entire row.
         * @param {String} [color] The highlight color.
         *   Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
         * @param {Object} [opts] Object literal with any of the Ext.fx.Anim config options
         */
    highlightRecord: function(record, column, color, opts) {
        var grid = this,
            domNode;
        opts = Ext.apply({}, opts);
        // highlighting hidden cells could cause interface-breaking styling bugs,
        // so now only highlights visible cells
        if (grid.rendered && !grid.isCollapsed() && grid.isVisible(true)) {
            grid.bufferedScollToRecord(record, function() {
                if (column) {
                    // column specified, will highlight only a single cell
                    domNode = grid.getView().getCellByPosition({
                        record: record,
                        column: column
                    }, true);
                } else {
                    // will highlight entire row
                    domNode = grid.getView().getRow(record);
                }
                if (Ext.isElement(domNode)) {
                    Ext.fly(domNode, Date.now().toString()).select('.x-grid-cell-inner').highlight(color, opts);
                }
            });
        }
    },
    showLockedGridError: function() {
        // Using a locked column will convert your original grid into 2 synced grids in an hbox
        //
        // This introduces issues with inconsistent column indexes; sometimes it refers to the index in the local grid,
        // other times it refers to the index among all locked & normal columns.  This is especially problematic for the Stewarts renderer.
        //
        // Our Stewarts code will also have problems knowing which `editingPlugin` (EP) to use. A lockable grid has
        // 3 different EPs (the main grid's, the locked grid's, and the normal grid's).  The EP on the main grid
        // is largely useless since it provides no context, activeRecord, activeColumn, activeEditor, etc.
        // Therefore, you have a 50/50 guess which grid has the relevant EP.
        //
        // GWM tried to allow a lockable Stewarts grid, but could not find a proper solution for an unneccesary feature (at that time).
        // You can find his work in Perforce Changelist #23698.
        console.error('[' + this.$className + '] `Lockable` Stewarts grids are not supported.  Please remove any `locked` columns.');
    }
}, function(DisplayGrid) {
    DisplayGrid.createAlias({
        /**
             * Old alias to {@link #configureRefreshButton}
             * @deprecated 5.0.0 Use {@link #configureRefreshButton} instead
             * @method
             * @member sl.panel.grid.DisplayGrid
             * @inheritdoc #configureRefreshButton
             */
        'buildRefreshButton': 'configureRefreshButton',
        /**
             * Old alias to {@link #configureExcelButton}
             * @deprecated 5.0.0 Use {@link #configureExcelButton} instead
             * @method
             * @member sl.panel.grid.DisplayGrid
             * @inheritdoc #configureExcelButton
             */
        'buildExcelButton': 'configureExcelButton'
    });
});

/**
 * @class sl.panel.grid.EditorGrid
 */
Ext.define('sl.panel.grid.EditorGrid', {
    extend: 'sl.panel.grid.DisplayGrid',
    alias: [
        'widget.editorgrid'
    ],
    requires: [
        'sl.field.button.SaveButton',
        'sl.field.button.NewButton',
        'sl.field.button.DeleteButton'
    ],
    uses: [
        'Ext.event.Event',
        'Ext.grid.plugin.RowEditing',
        'Ext.grid.plugin.CellEditing'
    ],
    /**
     * @private
     * @property {Boolean} isEditable
     **/
    isEditable: true,
    /**
     * @cfg {"cell"/"row"} [editType='cell']
     * Choose what type of editable grid you want. Valid values are:
     *
     * - **"cell"** - only opens the cell's editor.  Uses {@link Ext.grid.plugin.CellEditing}
     * - **"row"** - opens all editors on row for inline row-based editing. Uses {@link Ext.grid.plugin.RowEditing}
     */
    editType: 'cell',
    /**
     * @cfg {Number} [clicksToEdit=2]
     * @inheritdoc Ext.grid.plugin.Editing#clicksToEdit
     */
    clicksToEdit: 2,
    /**
     * @cfg {Boolean} [autoCancel=true]
     * @inheritdoc Ext.grid.plugin.RowEditing#autoCancel
     */
    autoCancel: true,
    /**
     * @cfg {Number} [clicksToMoveEditor=2]
     * @inheritdoc Ext.grid.plugin.RowEditing#clicksToMoveEditor
     */
    clicksToMoveEditor: 1,
    /**
     * @cfg {Boolean} [errorSummary=true]
     * @inheritdoc Ext.grid.plugin.RowEditing#errorSummary
     */
    errorSummary: true,
    /**
     * @cfg {Boolean} [includeRefreshBtn=true]
     * Set `false` to disable the bottom toolbar's refresh button
     */
    includeRefreshBtn: true,
    /**
     * @cfg {Boolean/Object} [useDefaultButtons=true]
     * If `true`, will create save button, new button, & delete button
     *
     * It will only create buttons if one with that name doesn't already exist and each button's config is set to
     *     `true` [{@link #useDefaultSaveConfig}, {@link #useDefaultNewConfig}, {@link #useDefaultDeleteConfig},
     *     {@link #useDefaultUndoDeleteConfig}])
     *
     * To specify which toolbar to use, set `useDefaultButtons` to an object.
     *
     *      useDefaultButtons: {
     *          toolbarId: 'myToolbarId', // optional
     *          toolbarPosition: 'top' // optional
     *      }
     */
    useDefaultButtons: true,
    /**
     * @cfg {Boolean} [useDefaultSaveConfig=true]
     * Set `true` to use the generic {@link #method-configureSaveButton save setup}.
     *
     * {@link #useDefaultButtons} must be `true`.
     */
    useDefaultSaveConfig: true,
    /**
     * @cfg {Boolean} [useDefaultDeleteConfig=true]
     * Set `true` to use the generic {@link #method-configureDeleteButton delete setup}.
     *
     * {@link #useDefaultButtons} must be `true`.
     */
    useDefaultDeleteConfig: true,
    /**
     * @cfg {Boolean} [useDefaultUndoDeleteConfig=true]
     * Set `true` to use the generic {@link #method-configureUndoDeleteButton undo-delete setup}.
     *
     * {@link #useDefaultButtons} must be `true`.
     */
    useDefaultUndoDeleteConfig: true,
    /**
     * @cfg {Boolean} [useDefaultNewConfig=true]
     * Set `true` to use the generic {@link #method-configureNewButton record-creation setup}.
     *
     * {@link #useDefaultButtons} must be `true`.
     */
    useDefaultNewConfig: true,
    /**
     * @cfg {Boolean} [neverShowToast=false]
     * If `true`, grid will never show popup toast notification in the SL save, new, delete default functions
     */
    neverShowToast: false,
    /**
     * @cfg {Boolean} [moveEditorOnEnter=true]
     * *** Code that uses this config is in EditorOverride.js ***
     * When an cell's editor is open and user hits `ENTER`, it will move up/down to the next editor in that colum
     * There are special settings for GridSearchFields and ComboBoxes to handle the `ENTER` key based on the scenario
     **/
    moveEditorOnEnter: true,
    /**
     * @cfg {Boolean} [useDefaultEnterKeyHandler=true]
     * If `true`, when `ENTER` is hit while in an editor, it will first look to see if editor has special
     * `onEnterKeyInGrid` function. If that function is not defined on the editor, it will use the default handling
     * for `ENTER` keys. The editor's `onEnterKeyInGrid` is useful for components like combos, where you do not want
     * to move the focus while the combo is expanded
     **/
    useDefaultEnterKeyHandler: true,
    /**
     * @cfg {Object} editConfig
     * Configuration for {@link Ext.grid.plugin.RowEditing}/{@link Ext.grid.plugin.CellEditing} plugin
     */
    /**
     * @cfg {Boolean} [includeValidationStatus=true]
     * Set `false` to disable the validation plugin in the status bar
     */
    includeValidationStatus: true,
    /**
     * @cfg {Boolean} [showEditCursor=true]
     * If `true`, cursor will turn into an `editing` icon when hovering over a cell with an editor.
     */
    showEditCursor: true,
    disableBeforeEditValidation: false,
    /**
     * @event beforerecordcreated
     * @preventable
     * Fired when the new button is clicked, before a new record is created
     * @param {sl.panel.grid.EditorGrid} grid
     * @param {Object} defaultProperties Object containing all default property values for a new record, such as
     *     required hidden id's
     */
    /**
     * @event beforedelete
     * @preventable
     * Fired when delete button is clicked, before the records are deleted
     * @param {sl.panel.grid.EditorGrid} grid
     */
    /**
     * @event beforeundodelete
     * @preventable
     * Fired when undo delete button is clicked, before the records are restored
     * @param {sl.panel.grid.EditorGrid} grid
     */
    /**
     * @private
     */
    initComponent: function() {
        var grid = this,
            config = {
                plugins: grid.getEditorGridPlugins(),
                features: grid.getEditorGridFeatures()
            };
        Ext.apply(grid, config);
        grid.callParent(arguments);
        // exclude all nested grids that were created on-the-fly because
        // `lockable` grid mixin is being used due to locked columns.
        // only 1 grid should have the default buttons
        if (!grid.ownerLockable) {
            if (grid.useDefaultButtons || !Ext.Object.isEmpty(grid.useDefaultButtons)) {
                grid.configureDefaultButtons();
                grid.addDefaultButtonsToToolbar();
            }
            grid.configureEditingPlugin();
            if (grid.useDefaultEnterKeyHandler) {
                grid.on({
                    'render': grid.handleEnterKeyInEditor,
                    'reconfigure': grid.handleEnterKeyInEditor
                });
            }
        }
    },
    /**
     * Gets all neccessary plugins for an editing grid to work, including the plugins for comboboxes & gridsearchfields
     * being used as editors
     * @return {Array} Array of plugins
     * @private
     */
    getEditorGridPlugins: function() {
        var grid = this,
            plugins = Ext.Array.from(grid.plugins);
        // find the editing plugin if already defined (e.g. plugin dropped onto Grid in Architect)
        for (var i = 0; i < plugins.length; i++) {
            var plugin = plugins[i];
            if ([
                'cellediting',
                'rowediting'
            ].indexOf(plugin.ptype) === 0) {
                grid.editingPlugin = plugin;
                break;
            }
        }
        grid.editingPlugin = grid.getEditingPlugin() || grid.createEditingPlugin();
        if (grid.editingPlugin) {
            plugins = Ext.Array.merge(plugins, [
                grid.editingPlugin
            ]);
        }
        return plugins;
    },
    /**
     * Creates the {@link Ext.grid.plugin.Editing grid-editing plugin} for an Editor Grid
     * @param {"CELL"/"ROW"} [editType=grid.editType || 'CELL'] The type of editing plugin to use. Defaults to {@link
     *     Ext.grid.plugin.CellEditing cell}
     * @return {Object} The grid's editing plugin
     * @private
     */
    createEditingPlugin: function(editType) {
        var grid = this,
            editingPlugin;
        editType = (editType || grid.editType || 'CELL').toUpperCase();
        switch (editType) {
            case 'CELL':
                editingPlugin = Ext.create(Ext.apply({
                    xclass: 'Ext.grid.plugin.CellEditing',
                    clicksToEdit: grid.clicksToEdit
                }, grid.editConfig));
                break;
            case 'ROW':
                editingPlugin = Ext.create(Ext.apply({
                    xclass: 'Ext.grid.plugin.RowEditing',
                    autoCancel: grid.autoCancel,
                    clicksToEdit: grid.clicksToEdit,
                    clicksToMoveEditor: grid.clicksToMoveEditor,
                    errorSummary: grid.errorSummary
                }, grid.editConfig));
                break;
            default:
                console.error('sl Editor Grid not configured to work with <b>' + grid.editType + '</b>');
                break;
        }
        return editingPlugin;
    },
    /**
     * Initializes the editing plugin, so that neccessary events are caught and helpful variables are defined
     * @private
     */
    configureEditingPlugin: function() {
        var grid = this,
            editingPlugin = grid.getEditingPlugin();
        if (!Ext.isFunction(editingPlugin.on)) {
            // editingPlugin was most likely created in Architect and has not been fully created when it gets here,
            // so don't run code until editingPlugin has been initialized
            grid.on({
                single: true,
                'beforerender': function() {
                    grid.configureEditingPlugin.apply(grid, arguments);
                }
            });
        } else {
            if (editingPlugin && !editingPlugin._editEventsAttached && editingPlugin.ptype === "cellediting") {
                editingPlugin.setActiveEditor = Ext.Function.createSequence(function(newEditor) {
                    var oldEditor = this.activeEditor,
                        ctx = this.context,
                        focusCls = 'has-editor-focus',
                        action = oldEditor ? 'removeCls' : 'addCls',
                        activeCell = ((oldEditor || newEditor) ? ctx.view.getCellByPosition({
                            row: ctx.rowIdx,
                            column: ctx.colIdx
                        }, false) : false);
                    if (activeCell) {
                        activeCell[action](focusCls);
                    }
                }, editingPlugin.setActiveEditor);
                editingPlugin.showEditor = Ext.Function.createSequence(editingPlugin.showEditor, function() {
                    var lastEd = editingPlugin.getLastActiveEditor(),
                        currEd = editingPlugin.getActiveEditor();
                    editingPlugin.setLastActiveColumn(editingPlugin.getActiveColumn());
                    editingPlugin.setLastActiveEditor(editingPlugin.getActiveEditor());
                    editingPlugin.setLastActiveRecord(editingPlugin.getActiveRecord());
                    // when move editor up/down a row, it doesn't fire a `focus` event because it stayed in the same editor.
                    // we need that `focus` event for the combogrid
                    if (lastEd === currEd) {
                        Ext.defer(function() {
                            currEd.fireEvent('focus', currEd);
                        }, 5);
                    }
                });
                // editing a sorted column can be very buggy as row jumps around based on newly entered text
                // the following code removes the active column's sorter or all sorters based on the context,
                // This will stop the edited record's rowIndex from changing after edit
                grid.on({
                    'beforeedit': function(editor, context) {
                        var store = grid.getStore(),
                            rec = (context || {}).record,
                            col = (context || {}).column,
                            colDataIndex = col ? col.dataIndex : false,
                            isEditable = true,
                            removedSorter;
                        if (!grid.disableBeforeEditValidation) {
                            isEditable = (grid.isColumnEditable(col, rec) === true);
                        }
                        if (isEditable && colDataIndex) {
                            removedSorter = grid.getStore().getSorters().removeAtKey(colDataIndex);
                            if (removedSorter) {
                                // updates grid column's UI that was previously marked as sorted
                                store.fireEvent('refresh', store);
                            }
                        }
                        return isEditable;
                    },
                    'beforerecordcreated': function(grid, defaultProperties, eOpts) {
                        var store = grid.getStore();
                        if (!store.isEmptyStore) {
                            store.removeSorters();
                        }
                    },
                    // the following events are `preventable`, so make them very late in the listener stack,
                    // so if the event is cancelled, grid sorters won't be removed (hopefully)
                    priority: -100
                });
                editingPlugin._editEventsAttached = true;
            }
        }
    },
    /**
     * Returns all grid {@link Ext.grid.feature.Feature features}
     * @return {Array} Array of all grid {@link Ext.grid.feature.Feature features}
     * @private
     */
    getEditorGridFeatures: function() {
        var grid = this,
            features = Ext.Array.from(grid.features);
        return features;
    },
    handleEnterKeyInEditor: function() {
        var grid = this,
            editors = grid.getEditors();
        Ext.Array.forEach(editors, function(editor, index, array) {
            if (grid.getEditingPlugin().ptype === 'rowediting') {
                if (editor.name === editor.getInputId()) {
                    editor.name = editor.column.dataIndex;
                }
            }
            if (Ext.isFunction(editor.on) && !editor._enterKeyEventsAttached) {
                editor.on({
                    scope: grid,
                    'specialkey': function(field, e, eOpts) {
                        // neccessary in case the grid is lockable (there will be 2 grids nested in original grid)
                        var grid = field.getParentGrid();
                        if (e.keyCode === e.ENTER) {
                            // treat the enter key as special when in an editor
                            if (Ext.isFunction(field.onEnterKeyInGrid)) {
                                field.onEnterKeyInGrid(field, e, eOpts);
                            } else if (!field.isXType('checkbox')) {
                                grid.getSelectionModel().onKeyEnter(grid.getEditingPlugin(), e, eOpts);
                            }
                        }
                    }
                });
                editor._enterKeyEventsAttached = true;
            }
        });
    },
    // returns the record for the editor (if combo, then combo.store's record; if gsf, then gsf.win.grid.store's
    // selected record)
    getEditorRecord: function(editor) {
        var rec,
            // this is not the grid's record, this is the record that the combo/gsf selected
            xtype = editor.getXType() || editor.xtype;
        switch (xtype) {
            case 'gridsearchfield':
                rec = editor.recordSelected;
                break;
            case 'combo':
            case 'slcombo':
                if (editor.multiSelect) {
                    sl.utils.consoleWarningWithTrace('combo multiSelect has not been configured yet');
                };
                rec = editor.findRecordByValue(editor.getValue());
                break;
            default:
                break;
        }
        return rec;
    },
    /**
     * Puts errors in cells that have errors based on provided record array
     * @param {Ext.data.Model[]} [records=grid.store.data.items] Array of records to validate
     * @private
     */
    setAllColumnErrorsByRecords: function(records) {
        var grid = this,
            store = grid.getStore();
        records = records || store.getRecords(true);
        records = Ext.Array.from(records);
        Ext.Array.forEach(records, function(rec, index, array) {
            var rowIndex = grid.getIndexForRecord(rec),
                errors = rec.getValidation().getErrors();
            grid.setAllColumnErrors(rowIndex, errors);
        });
    },
    /**
     * Puts errors in any cell that has one
     * @param {Number} rowIndex
     * @param {Object} errors The errors object (Object defined in {@link Ext.data.Validation#method-getErrors}
     * @private
     */
    setAllColumnErrors: function(rowIndex, errors) {
        var grid = this,
            dataIndexesArr = grid.getDataIndexes();
        errors = Ext.Array.from(errors);
        // grid.suspendLayout = true;
        Ext.Array.forEach(dataIndexesArr, function(dataIndex, colIndex, array) {
            // errors for the current cell (by dataIndex) only
            var errorsForDataIndex = errors.filter(function(err) {
                    return err.id === dataIndex;
                });
            grid.setCellError(colIndex, rowIndex, errorsForDataIndex);
        });
    },
    // grid.suspendLayout = false;
    /**
     * @param {Number} colIndex Index of column
     * @param {Number} rowIndex Index of row
     * @param {Object[]} cellErrors Each error object contains the following properties:
     *
     *  - field (data index, will already match the column[colIndex].dataIndex)
     *  - message (error string to show in cell)
     */
    setCellError: function(colIndex, rowIndex, cellErrors) {
        var grid = this,
            view = grid.getView(),
            cell = view.getCellByPosition({
                row: rowIndex,
                column: colIndex
            }),
            errorCls = 'x-form-invalid-field';
        if (!Ext.isEmpty(cellErrors)) {
            var messages = [];
            Ext.Array.forEach(cellErrors, function(cellError, index, array) {
                messages.push(cellError.msg);
            });
            if (cell) {
                cell.addCls(errorCls);
                // set error tooltip attribute
                cell.set({
                    'data-errorqtip': Ext.String.format('<ul><li class="last">{0}</li></ul>', messages.join('<br/>'))
                });
            }
        } else {
            if (cell) {
                cell.set({
                    'data-errorqtip': ''
                });
                cell.removeCls(errorCls);
            }
        }
        return cell || false;
    },
    /**
     * Begins editing the row in the grid at the specified location.
     * Will open the first editor on that row, unless a column is specified.
     * Works with {@link Ext.grid.plugin.CellEditing} and {@link Ext.grid.plugin.RowEditing} grid editors.
     * @param {Ext.data.Model/Number} row The record or index of the record to edit in grid
     * @param {Object} [eOpts]      An object containing function configuration options
     * This may contain any of the following properties:
     * @param {Number} [eOpts.colIndex=0] The starting column index for finding a column with an editor.  The first
     *     editor found will be column the edited column
     * @return {Boolean} `true` if now editing specified row
     */
    editRow: function(row, eOpts) {
        eOpts = eOpts || {};
        var grid = this,
            store = grid.getStore(),
            colIndex = eOpts.colIndex || 0,
            isEditing = false,
            ePlugin, editStyle, editorColIndex, rowIndex, lockedGrids;
        if (grid.lockable) {
            lockedGrids = grid.getLockingViewConfig();
            editorColIndex = lockedGrids.locked.getIndexOfNextEditor(colIndex);
            if (editorColIndex < 0) {
                editorColIndex = lockedGrids.normal.getIndexOfNextEditor(colIndex);
                grid = lockedGrids.normal;
            } else {
                grid = lockedGrids.locked;
            }
            if (editorColIndex < 0) {
                editorColIndex = 0;
            }
        } else {
            editorColIndex = grid.getIndexOfNextEditor(colIndex) || 0;
        }
        ePlugin = grid.getEditingPlugin();
        editStyle = ePlugin.getEditStyle() || 'cell';
        if (Ext.isNumber(row)) {
            rowIndex = row;
        } else if (sl.utils.isRecord(row)) {
            rowIndex = store.indexOf(row);
        }
        if (rowIndex >= 0 && editorColIndex >= 0 && ePlugin) {
            grid.getSelectionModel().select(rowIndex);
            switch (editStyle) {
                case 'row':
                    isEditing = ePlugin.startEdit(rowIndex, editorColIndex);
                    break;
                case 'cell':
                    isEditing = ePlugin.startEditByPosition({
                        row: rowIndex,
                        column: editorColIndex
                    });
                    break;
                default:
                    sl.consoleWarn('[' + grid.$className + '] Grid\'s startEdit handler for grid->editingPlugin->editStyle has not been defined yet', {
                        grid: grid,
                        style: editStyle,
                        plugin: ePlugin
                    });
                    isEditing = false;
            }
        }
        return isEditing;
    },
    /**
     * Renderer designed to convert the value based on the editor-type/field-type
     * and add visual errors to cells
     */
    stewartsRenderer: function(value, metadata, record, rowIndex, colIndex, store, view) {
        //noinspection UnnecessaryLocalVariableJS
        var grid = this,
            originalValue = value;
        // if using grouping feature, the `store` here will be a grouping store
        // and it'll throw off our custom rendering
        store = store.isFeatureStore ? store.store : store;
        try {
            value = grid.callParent(arguments);
            if (store && store.isRecordChangeValidated && !Ext.isEmpty(colIndex)) {
                grid.addVisualErrorDuringRender(value, metadata, record, rowIndex, colIndex, store, view);
            }
        } catch (error) {
            value = originalValue;
            console.error('[' + grid.$className + '] Renderer Error', {
                error: error,
                args: arguments,
                scopeClassName: this.$className,
                scope: this
            });
        }
        return value;
    },
    // if the data for the field that populates this cell is invalid, this will style the cell to have a visual error
    addVisualErrorDuringRender: function(value, metadata, record, rowIndex, colIndex, store, view) {
        var addedError = false;
        if (!Ext.isEmpty(record) && !Ext.isEmpty(colIndex)) {
            var grid = this,
                column = metadata.column,
                dataIndex = column.dataIndex,
                errors = record.getValidation().getErrors(),
                isValid = errors.length === 0,
                cellErrors = [];
            if (!isValid) {
                cellErrors = errors.filter(function(err) {
                    return err.id === dataIndex;
                });
            }
            if (cellErrors.length > 0) {
                var messages = [],
                    errFormat = (cellErrors.length > 1 ? '<li class=&quot;last&quot;>{0}</li>' : '{0}'),
                    allFormat = (cellErrors.length > 1 ? '<ul>{0}</ul>' : '{0}'),
                    errorCls = 'error-cell',
                    tooltip = 'data-errorqtip="{0}"',
                    errorMessage;
                Ext.Array.forEach(cellErrors, function(err, index, array) {
                    messages.push(Ext.String.format(errFormat, err.msg));
                });
                errorMessage = Ext.String.format(allFormat, messages.join(''));
                metadata = metadata || {};
                metadata.tdAttr = Ext.String.format(tooltip, errorMessage);
                metadata.tdCls = String(metadata.tdCls || '') + ' ' + errorCls;
                addedError = true;
            }
        }
        // if not adding error styling to cell, make sure that any previous error tooltips are removed
        if (!addedError) {
            var cell = view.getCellByPosition({
                    record: record,
                    column: column
                });
            if (cell) {
                cell.set({
                    'data-errorqtip': ''
                });
            }
        }
    },
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////// BUTTON CONFIG /////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    addDefaultButtonsToToolbar: function() {
        var grid = this,
            tbOptions = Ext.apply({}, grid.useDefaultButtons),
            tbId = tbOptions.toolbarId,
            tbPosition = tbOptions.toolbarPosition || 'top',
            tb = grid.getMatchingToolbar(tbId, tbPosition),
            createNewButton = grid.useDefaultNewConfig,
            createSaveButton = grid.useDefaultSaveConfig,
            // createUndoButton = grid.useDefaultUndoDeleteConfig,
            createDeleteButton = grid.useDefaultDeleteConfig;
        if (createNewButton || createSaveButton || createDeleteButton) {
            if (!tb) {
                tb = grid.addDocked({
                    xtype: 'toolbar',
                    dock: 'top',
                    enableOverflow: true,
                    items: []
                })[0];
            }
            if (createSaveButton) {
                tb.insert(0, grid.getSaveButton());
            }
            if (createNewButton) {
                tb.insert(1, grid.getNewButton());
            }
            if (createDeleteButton) {
                tb.insert(2, grid.getDeleteButton());
            }
        }
    },
    /**
     * @param {boolean} [createIfUndefined=true] If can't find defined button and is `true`, then creates new button
     * @return {sl.field.button.SaveButton}
     */
    getSaveButton: function(createIfUndefined) {
        var ttip = Ext.String.format('<b>Save Changes{0}</b>', this.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd>)' : '');
        return this.getButtonByType('saveButton', 'savebutton', createIfUndefined, {
            tooltip: ttip
        });
    },
    /**
     * @param {boolean} [createIfUndefined=true] If can't find defined button and is `true`, then creates new button
     * @return {sl.field.button.NewButton}
     */
    getNewButton: function(createIfUndefined) {
        var ttip = Ext.String.format('<b>Create New Row{0}</b>', this.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>N</kbd>)' : '');
        return this.getButtonByType('newButton', 'newbutton', createIfUndefined, {
            tooltip: ttip
        });
    },
    /**
     * @param {boolean} [createIfUndefined=true] If can't find defined button and is `true`, then creates new button
     * @return {sl.field.button.DeleteWithUndoButton}
     */
    getDeleteButton: function(createIfUndefined) {
        var grid = this,
            deleteBtn = grid.getButtonByType('deleteButton', [
                'deletewithundobutton',
                'deletebutton'
            ], createIfUndefined);
        if (deleteBtn && !Ext.isFunction(deleteBtn.setDisabledConditionally)) {
            deleteBtn.setDisabledConditionally = function() {
                var selectedRecs = grid.getSelectionModel().getSelection(),
                    ttip = Ext.String.format('<b>Delete Selection{0}</b><br/><br/>{1} record{2} will be deleted.', grid.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>D</kbd>)' : '', selectedRecs.length, selectedRecs.length === 1 ? '' : 's'),
                    isDisabled = false,
                    deletedRecs = [],
                    undoDeleteBtn = grid.getUndoDeleteButton(),
                    undoTooltip = '',
                    isUndoDeleteBtnDisabled = true;
                if (undoDeleteBtn) {
                    deletedRecs = Ext.isFunction(grid.getStore().getDeletedRecords) ? grid.getStore().getDeletedRecords() : [];
                    isUndoDeleteBtnDisabled = Ext.isFunction(undoDeleteBtn.setDisabledConditionally) ? undoDeleteBtn.setDisabledConditionally() : undoDeleteBtn.isDisabled();
                    isDisabled = (selectedRecs.length === 0 && isUndoDeleteBtnDisabled);
                    if (!isUndoDeleteBtnDisabled) {
                        undoTooltip = Ext.String.format('<hr/><b>Undo Delete Submenu{0}</b><br/><br/>{1} deleted record{2} can be restored', grid.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd>)' : '', deletedRecs.length, deletedRecs.length === 1 ? '' : 's');
                    }
                } else {
                    isDisabled = (selectedRecs.length === 0);
                }
                deleteBtn.setDisabled(isDisabled);
                deleteBtn.setTooltip(ttip + undoTooltip);
                return isDisabled;
            };
        }
        return deleteBtn;
    },
    /**
     * @param {boolean} [createIfUndefined=true] If can't find defined button and is `true`, then creates new button
     * @return {Ext.button.Button}
     */
    getUndoDeleteButton: function(createIfUndefined) {
        var grid = this,
            deleteBtn = grid.getDeleteButton(createIfUndefined),
            undoDeleteBtn = grid.undoDeleteButton || (Ext.isDefined(deleteBtn) ? (deleteBtn.undoDeleteButton || (Ext.isFunction(deleteBtn.down) ? deleteBtn.down('#undodeletebutton') : undefined)) : undefined);
        grid.undoDeleteButton = undoDeleteBtn;
        if (undoDeleteBtn && !Ext.isFunction(undoDeleteBtn.setDisabledConditionally)) {
            undoDeleteBtn.setDisabledConditionally = function() {
                var deletedRecs = Ext.isFunction(grid.getStore().getDeletedRecords) ? grid.getStore().getDeletedRecords() : [],
                    isDisabled = deletedRecs.length === 0,
                    ttip = Ext.String.format('<b>Undo Delete{0}</b><br/><br/>{1} deleted record{2} can be restored', grid.enableKeyNav ? ' (<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd>)' : '', deletedRecs.length, deletedRecs.length === 1 ? '' : 's');
                // if there's no removed records, then set button as disabled
                undoDeleteBtn.setDisabled(isDisabled);
                undoDeleteBtn.setTooltip(isDisabled ? '' : ttip);
                return isDisabled;
            };
        }
        return undoDeleteBtn;
    },
    /**
     * Builds and configures the Save, New, Delete, and Undo buttons.
     * It automatically creates any that do not exist
     */
    configureDefaultButtons: function() {
        var grid = this;
        if (grid.useDefaultSaveConfig) {
            grid.configureSaveButton();
        }
        if (grid.useDefaultNewConfig) {
            grid.configureNewButton();
        }
        if (grid.useDefaultUndoDeleteConfig) {
            grid.configureUndoDeleteButton();
        }
        if (grid.useDefaultDeleteConfig) {
            grid.configureDeleteButton();
        }
    },
    /**
     * Typical Save Button definition that will work with an EditorGrid, CacheStore, and modified records.
     *
     * When the Save Btn is clicked, it will get all modified records and try to save all that don't have validation
     * errors. After all valid records' AJAX save attempts return, it will report to use the results.
     *
     * For more information about save process, look at {@link #method-saveButtonClicked}.
     */
    configureSaveButton: function() {
        var grid = this,
            store = grid.getStore(),
            saveOpts = grid.saveOptions || {},
            saveBtnOptions = Ext.Object.merge({}, saveOpts, (saveOpts.saveBtnOptions || {})),
            updateOptions = Ext.Object.merge({}, saveOpts, (saveOpts.updateOptions || {}));
        // don't let this function get called multiple times on the same grid
        if (!grid._saveEventsAttached) {
            // commits changes to any modified records {NOTE: records that fail rec.isValid() will not be committed}
            grid.getSaveButton().on({
                'click': function(button, evt, saveOpts) {
                    Ext.apply(saveBtnOptions, saveOpts);
                    grid.saveButtonClicked(button, evt, saveBtnOptions);
                }
            });
            // GWM 11-2014: commented out because there might be too much overhead. getModifiedRecords() will re-validate every record
            // at some later date when I can remember how to get all modified records to save without revalidating everything, I'll re-enable it
            // var updateSaveButtonDisabledState = function() {
            //     var isDisabled = false,
            //         unsavedRecs = ['some value'];
            //     try {
            //         unsavedRecs = Ext.Array.merge(store.getModifiedRecords(), store.getUnsavedRecords(false, false));
            //         isDisabled = unsavedRecs.length === 0;
            //     } catch (error) {
            //         isDisabled = false;
            //         console.error('[' + grid.$className + '] updateSaveButtonDisabledState', {
            //             error: error,
            //             args: arguments,
            //             unsavedRecs: unsavedRecs,
            //             scopeClassName: this.$className,
            //             scope: this
            //         });
            //     }
            //     // disable button when there's no modified/unsaved records
            //     saveButton.setDisabled(isDisabled);
            // };
            var onSaving = function(myStore) {
                    grid.beforeStoreSave(myStore);
                },
                onSave = function(myStore, showedNotification) {
                    // updateSaveButtonDisabledState();
                    grid.afterStoreSave(myStore, showedNotification);
                },
                onLoad = function() {},
                // updateSaveButtonDisabledState();
                onUpdate = function(myStore, record, op) {
                    if (myStore.saveIndividually) {
                        myStore.onRecordCommit(record, op, updateOptions);
                    }
                },
                /*
                 * if a new record that is selected is saved, then fire a "selectionchange" event
                 * generally, if a new, unsaved rec is selected and something like a child grid depends on it,
                 * then it will be waiting for the selectionchange event in order to load that child grid's store
                 */
                onNewRecordSaved = function(store, record, newID) {
                    var selModel = grid.getSelectionModel(),
                        isSelected = selModel.isSelected(record);
                    if (isSelected) {
                        grid.fireEvent('selectionchange', selModel, selModel.getSelection());
                    }
                },
                configureStoreListeners = function(newStore, oldStore) {
                    oldStore = oldStore || newStore;
                    if (oldStore) {
                        oldStore.un({
                            scope: grid,
                            'saving': onSaving,
                            'save': onSave,
                            'load': onLoad,
                            'update': onUpdate,
                            'newrecordsaved': onNewRecordSaved
                        });
                    }
                    if (newStore) {
                        newStore.on({
                            scope: grid,
                            'saving': onSaving,
                            'save': onSave,
                            'load': onLoad,
                            'update': onUpdate,
                            'newrecordsaved': onNewRecordSaved
                        });
                    }
                };
            configureStoreListeners(store);
            grid.on('reconfigure', function(myGrid, newStore, newColumns, oldStore, oldColumns, eOpts) {
                configureStoreListeners(newStore, oldStore);
            }, grid);
            /*grid.on({
                scope: grid,
                'beforeedit': {
                    buffer: 200,
                    fn: function() {
                        saveButton.enable();
                    }
                },
                'edit': {
                    buffer: 100,
                    fn: function() {
                        updateSaveButtonDisabledState();
                    }
                }
            });*/
            grid._saveEventsAttached = true;
        } else {
            sl.utils.consoleWarningWithTrace('[configureSaveButton] Already been called for this grid.  Ignoring this call...');
        }
    },
    /**
     * Typical New Button definition that will work with an EditorGrid and CacheStore.
     *
     * When the New Btn is clicked, it will add a new record to the grid's store
     * and open the editor in the first editable cell.
     *
     * For more information about creating new records, look at {@link #method-newButtonClicked}.
     */
    configureNewButton: function() {
        var grid = this,
            newOpts = grid.newOptions || {};
        // don't let this function get called multiple times on the same grid
        if (!grid._newEventsAttached) {
            // commits changes to any modified records {NOTE: records that fail rec.isValid() will not be committed}
            grid.getNewButton().on({
                'click': function(button, evt, eOpts) {
                    var options = {};
                    Ext.apply(options, newOpts, eOpts);
                    grid.newButtonClicked(button, evt, options);
                }
            });
            grid._newEventsAttached = true;
        } else {
            sl.utils.consoleWarningWithTrace('[configureNewButton] Already been called for this grid.  Ignoring this call...');
        }
    },
    /**
     * Typical Delete Button definition that will work with an EditorGrid, CacheStore, and selected records.
     *
     * When the Delete Btn is clicked, it will attempt to delete all selected records.
     * The button is only enabled when there is at least 1 selected record in the grid.
     *
     * For more information about deleting selected records, look at {@link #method-deleteButtonClicked}.
     */
    configureDeleteButton: function() {
        var grid = this,
            store = grid.getStore(),
            deleteOpts = grid.deleteOptions || {};
        // don't let this function get called multiple times on the same grid
        if (!grid._deleteEventsAttached) {
            // commits changes to any modified records {NOTE: records that fail rec.isValid() will not be committed}
            grid.getDeleteButton().on({
                'click': function(button, evt, eOpts) {
                    var options = Ext.Object.merge({}, deleteOpts, eOpts);
                    grid.deleteButtonClicked(button, evt, options);
                }
            });
            var configureStoreListeners = function(newStore, oldStore) {
                    oldStore = oldStore || newStore;
                    if (oldStore) {
                        oldStore.un({
                            scope: grid,
                            'deleting': grid.beforeStoreDelete,
                            'delete': grid.afterStoreDelete,
                            'load': grid.getDeleteButton().setDisabledConditionally
                        });
                    }
                    if (newStore) {
                        newStore.on({
                            scope: grid,
                            'deleting': grid.beforeStoreDelete,
                            'delete': grid.afterStoreDelete,
                            'load': grid.getDeleteButton().setDisabledConditionally
                        });
                    }
                };
            configureStoreListeners(store);
            grid.on('reconfigure', function(myGrid, newStore, newColumns, oldStore, oldColumns, eOpts) {
                configureStoreListeners(newStore, oldStore);
            }, grid);
            grid.on({
                scope: grid,
                selectionchange: function(selModel, selected, eOpts) {
                    grid.getDeleteButton().setDisabledConditionally();
                }
            });
            grid.getDeleteButton().setDisabledConditionally();
            grid._deleteEventsAttached = true;
        } else {
            sl.utils.consoleWarningWithTrace('[configureDeleteButton] Already been called for this grid.  Ignoring this call...');
        }
    },
    /**
     * Typical Undo Button definition that will work with an EditorGrid, CacheStore, and recently deleted records.
     *
     * When the Undo Btn is clicked, it will attempt to restore any records that were deleted
     * the last time the Delete Btn was clicked.
     * The restored records will not be saved in Cach√© and have no {@link Ext.data.Model#clientIdProperty} value.
     *
     * For more information about deleting selected records, look at {@link #method-undoDeleteButtonClicked}.
     */
    configureUndoDeleteButton: function() {
        var grid = this,
            store = grid.getStore(),
            undoDeleteBtn = grid.getUndoDeleteButton(),
            undoOpts = grid.undoDeleteOptions || {};
        if (!undoDeleteBtn) {
            sl.utils.consoleWarningWithTrace('Cannot Find UndoButton, so cannot configure button', {
                deleteBtn: grid.getDeleteButton()
            });
        }
        // don't let this function get called multiple times on the same grid
        else if (!grid._undoDeleteEventsAttached) {
            // commits changes to any modified records {NOTE: records that fail rec.isValid() will not be committed}
            undoDeleteBtn.on({
                'click': function(button, evt, eOpts) {
                    var options = Ext.Object.merge({}, undoOpts, eOpts);
                    grid.undoDeleteButtonClicked(button, evt, options);
                }
            });
            var configureStoreListeners = function(newStore, oldStore) {
                    oldStore = oldStore || newStore;
                    if (oldStore) {
                        oldStore.un({
                            scope: grid,
                            'undodelete': grid.afterStoreUndoDelete
                        });
                    }
                    if (newStore) {
                        newStore.on({
                            scope: grid,
                            'undodelete': grid.afterStoreUndoDelete
                        });
                    }
                };
            configureStoreListeners(store);
            grid.on('reconfigure', function(myGrid, newStore, newColumns, oldStore, oldColumns, eOpts) {
                configureStoreListeners(newStore, oldStore);
            }, grid);
            grid._undoDeleteEventsAttached = true;
        } else {
            sl.utils.consoleWarningWithTrace('[configureUndoDeleteButton] Already been called for this grid.  Ignoring this call...');
        }
    },
    /**
     * Generic function to handle grid's save button's click event.  Uses default functions to save record.
     * Calls {@link sl.data.CacheStore#saveModifiedRecords}.
     *
     * @param {sl.field.button.SaveButton} button Clicked button
     * @param {Object} evt The click event
     * @param {Object} [eOpts] An object containing function configuration options.
     *
     * It will be passed to & used by:
     * {@link sl.data.CacheStore#saveModifiedRecords}, {@link sl.data.CacheStore#initBeforeSave},
     * {@link sl.data.CacheStore#onRecordCommit}, {@link sl.data.CacheStore#showSaveNotification}
     **/
    saveButtonClicked: function(button, evt, eOpts) {
        eOpts = eOpts || {};
        var grid = this,
            store = grid.getStore();
        store.saveModifiedRecords(undefined, eOpts);
    },
    /**
     * Generic function designed to add a new row in a grid when the 'new button' is clicked.
     * Calls {@link sl.data.CacheStore#createNewRecord}.
     *
     * @param {sl.field.button.NewButton} button Clicked button
     * @param {Object} evt The click event
     * @param {Object} [eOpts] An object containing function configuration options.
     *
     * It will be passed to and used by:
     * {@link sl.data.CacheStore#createNewRecord}, {@link sl.data.CacheStore#canRecordBeAdded}, and {@link #editRow}.
     *
     * The following properties are used in this method:
     * @param {Number} [eOpts.newRowIndex=0] Index of new row.
     * @param {Number} [eOpts.colIndex] Index of grid's editor column that should be opened after row is added to store
     * (if no editor at location, will check columns to right until editor is found or no more editors on selected row)
     * @param {Object} [eOpts.defaultProperties] Object containing all default property values for a new record,
     * such as required hidden id's
     * @param {Boolean} [eOpts.dontStartEdit=false] If `true`, won't begin editing in the grid after record insert.
     **/
    newButtonClicked: function(button, evt, eOpts) {
        eOpts = eOpts || {};
        var grid = this,
            store = grid.getStore(),
            newRowIndex = eOpts.newRowIndex || 0,
            dontStartEdit = eOpts.dontStartEdit || false,
            defaultProperties = eOpts.defaultProperties || {},
            groupingFeature = grid.findFeature('grouping'),
            isAddAllowed, newRec, addedRecCount;
        button.grid = button.grid || grid;
        Ext.apply(eOpts, {
            grid: grid,
            store: store,
            newButton: button,
            newRowIndex: newRowIndex
        });
        // if an editor has an initExpression value, then use that as the default value (unless the default is already
        // set)
        Ext.Array.forEach(grid.getEditors(), function(editor, index, array) {
            var col = Ext.isFunction(editor.getColumn) ? editor.getColumn() : false;
            if (col && editor.initExpr && Ext.isEmpty(defaultProperties[col.dataIndex])) {
                defaultProperties[col.dataIndex] = editor.initExpr;
            }
        });
        if (grid.fireEvent('beforerecordcreated', grid, defaultProperties, eOpts) !== false) {
            newRec = store.createNewRecord(defaultProperties, eOpts);
            isAddAllowed = store.canRecordBeAdded(newRec, eOpts);
            if (isAddAllowed) {
                // when `autoSort:true`, new record's rowIndex will based on sorting rules
                // we want the record at a specific location, so disable auto sorting
                store.setAutoSort(false);
                addedRecCount = store.insert(newRowIndex, newRec);
                // if the new record is filtered so that it isn't visible, clear filters
                if (addedRecCount && store.indexOf(newRec) < 0 && store.isFiltered()) {
                    store.fireEvent('needfilterremoval', store);
                    // record is still not visible
                    if (store.indexOf(newRec) < 0 && store.isFiltered()) {
                        sl.consoleLog('[' + grid.$className + '] New Record Is Not Visible. Removing All Filters', {
                            grid: grid,
                            store: grid.getStore(),
                            filters: store.getFilters()
                        });
                        store.getFilters().removeAll();
                    }
                }
            }
            if (store.isGrouped() && groupingFeature) {
                // code ripped from groupingFeature.collapseAll().
                // w/o it, when a new group was formed, it would occassionally create duplicate groups for some reason
                // bug is unique to Stewart's lib, not in Ext.panel.Grid,
                // at least according to my fiddle: https://fiddle.sencha.com/#fiddle/pd3
                Ext.suspendLayouts();
                groupingFeature.dataSource.onRefresh();
                Ext.resumeLayouts(true);
            }
            if (!dontStartEdit) {
                grid.scrollToRecord(newRec, function() {
                    grid.editRow(newRec, eOpts);
                });
            }
        }
    },
    /**
     * Generic function to handle grid's delete button's click event.  Uses default functions to delete selected
     * records
     * Calls {@link sl.data.CacheStore#createNewRecord}.
     *
     * @param {sl.field.button.DeleteWithUndoButton} button Clicked button
     * @param {Object} evt The click event
     * @param {Object} [eOpts]      An object containing function configuration options
     *
     * This may contain any of the following properties:
     * @param {sl.panel.grid.EditorGrid} [eOpts.grid] Source grid of objs being deleted. Defaults to this (scope)
     * @param {String} [eOpts.delName] Text for the "what is being deleted" prompt.
     * If empty, will use grid's {@link #defaultTitle. If that is empty, uses default "item"
     * @param {Boolean} [eOpts.noConfirmation]    True means no delete confirmation prompt
     * @param {Function} [eOpts.deleteRecordsFn]  Function that will make call to database to delete the records and
     *     then handle ajax callback
     * @param {String} [eOpts.addlDelMsg]         Additional string of text to be added to the next line of the delete
     *     confirmation message
     * @param {Object} [eOpts.undoOpts]           Object of options to be passed to the UndoDelete function if the user
     *     clicked the undo button
     *                                          (See CacheStore.UndoDelete for details)
     **/
    deleteButtonClicked: function(button, evt, eOpts) {
        eOpts = eOpts || {};
        var grid = this,
            store = grid.getStore(),
            records, delName, delNamePlural, deleteCount, deleteMsg, noConfirmation;
        if (grid.fireEvent('beforedelete', grid, eOpts) !== false) {
            records = Ext.Array.from(eOpts.records || grid.getSelectionModel().getSelection());
            delName = eOpts.delName || grid.singleName || grid.defaultTitle || grid.title || 'item';
            delNamePlural = eOpts.delNamePlural || grid.pluralName || '';
            deleteCount = records.length;
            deleteMsg = Ext.String.format('Delete {0} <b>{1}</b>?<br/>', (deleteCount === 1 ? 'this ' : 'these '), Ext.util.Format.plural(deleteCount, delName, delNamePlural));
            noConfirmation = eOpts.noConfirmation || false;
            if (noConfirmation || records.length === 0) {
                store.deleteRecords(records, eOpts);
            } else {
                // focus on 'No' button
                Ext.Msg.defaultButton = 'no';
                Ext.Msg.show({
                    title: 'Confirm Delete?',
                    msg: '<br>' + deleteMsg,
                    buttons: Ext.Msg.YESNO,
                    scope: store,
                    icon: Ext.MessageBox.QUESTION,
                    fn: function(btn) {
                        if (btn === 'yes') {
                            store.deleteRecords(records, eOpts);
                        }
                    }
                });
                // put messagebox next to the delete button
                var btnXY = Ext.isFunction(((button || {}).el || {}).getXY) ? button.el.getXY() : undefined;
                sl.utils.alignMessageBoxToParent(btnXY);
            }
        }
    },
    /**
     * Generic function to handle grid's undo button's click event.
     * Uses default functions to restore recently deleted records.
     * Calls {@link sl.data.CacheStore#method-undoDeleteRecords}.
     *
     * @param {sl.field.button.DeleteWithUndoButton} button Clicked button
     * @param {Object} evt The click event
     * @param {Object} [eOpts] An object containing function configuration options.
     *
     * It will be passed to & used by:
     * {@link sl.data.CacheStore#undoDeleteRecords}
     **/
    undoDeleteButtonClicked: function(button, evt, eOpts) {
        eOpts = eOpts || {};
        var grid = this,
            store = grid.getStore(),
            records;
        /*, delName, delNamePlural, deleteCount, deleteMsg, noConfirmation*/
        if (grid.fireEvent('beforeundodelete', grid, eOpts) !== false) {
            records = Ext.Array.from(eOpts.records || store.getDeletedRecords());
            // delName = eOpts.delName || grid.singleName || grid.defaultTitle || grid.title || 'item';
            // delNamePlural = eOpts.delNamePlural || grid.pluralName || '';
            // deleteCount = records.length;
            // deleteMsg = Ext.String.format('Delete {0} <b>{1}</b>?<br/>', (deleteCount === 1 ? 'this ' : 'these '),
            // Ext.util.Format.plural(deleteCount, delName, delNamePlural));
            // noConfirmation = eOpts.noConfirmation || false;
            store.undoDeleteRecords(records, eOpts);
        }
    },
    /**
     * Begins editing the cell in the grid at the specified location.
     * Works with {@link Ext.grid.plugin.CellEditing} and {@link Ext.grid.plugin.RowEditing} grid editors.
     * @param {Ext.data.Model/Number} row The record or index of the record to edit in grid
     * @param {Ext.grid.column.Column/Number} column The column or index of the column to edit in grid
     * @param {Object} [eOpts]
     * @return {Boolean} `true` if now editing specified cell
     */
    editCell: function(row, column, eOpts) {
        eOpts = eOpts || {};
        var grid = this,
            colIndex, editorColIndex,
            isEditing = false;
        if (Ext.isNumber(column)) {
            colIndex = column;
        } else if (column instanceof Ext.grid.column.Column) {
            colIndex = grid.getColumnIndex(column);
        }
        if (Ext.isNumber(colIndex)) {
            editorColIndex = grid.getIndexOfNextEditor(colIndex);
            if (colIndex !== editorColIndex) {
                sl.utils.consoleWarningWithTrace('The to-be-edited cell does not have an editor', {
                    grid: grid,
                    col: column,
                    colIndex: colIndex,
                    row: row
                });
                isEditing = false;
            } else {
                Ext.apply(eOpts, {
                    colIndex: colIndex
                });
                isEditing = grid.editRow(row, eOpts);
            }
        }
        return isEditing;
    },
    beforeStoreSave: function(store) {
        if (store._showSaveMask) {
            this.mask("Saving...", "x-mask-loading");
        }
    },
    afterStoreSave: function(store, showedNotification) {
        var grid = this,
            errorRecords = Ext.Array.from(store.getUnsavedRecords());
        // GWM 6/18/2015
        // Removed because buggy: when a column was sorted and a **new record** was saved,
        // it would sometimes cause the scrollable area in grid to get way too large if lots
        // of whitespace.  removing the view refresh does not seem to have any negative consequences yet.
        // grid.getView().refresh();
        grid.setAllColumnErrorsByRecords(errorRecords);
        if (store._showSaveMask) {
            grid.el.unmask();
            delete store._showSaveMask;
        }
    },
    beforeStoreDelete: function(store) {
        if (store._showDeleteMask) {
            this.mask("Deleting...", "x-mask-loading");
        }
    },
    afterStoreDelete: function(store, showedNotification) {
        var grid = this,
            errorRecords = Ext.Array.from(store.getNotDeletedRecords());
        // grid.getView().refresh();
        if (store._showDeleteMask) {
            grid.unmask();
            delete store._showDeleteMask;
        }
        grid.setAllColumnErrorsByRecords(errorRecords);
        if (Ext.isFunction(grid.getDeleteButton().setDisabledConditionally)) {
            grid.getDeleteButton().setDisabledConditionally();
        } else {
            sl.consoleWarn('[afterStoreDelete] grid.getDeleteButton().setDisabledConditionally not defined');
        }
    },
    afterStoreUndoDelete: function(store, restoredRecs, undoRecs, recordsToRestore) {
        var grid = this;
        Ext.Array.forEach(restoredRecs, function(rec, index, array) {
            grid.highlightRecord(rec);
        });
        if (Ext.isFunction(grid.getDeleteButton().setDisabledConditionally)) {
            grid.getDeleteButton().setDisabledConditionally();
        } else {
            sl.consoleWarn('[afterStoreUndoDelete] grid.getDeleteButton().setDisabledConditionally not defined');
        }
    },
    afterNewRecord: Ext.emptyFn,
    initKeyNav: function() {
        var me = this,
            shortcutCfg = [
                {
                    // Ctrl + Alt + s = 'Save'
                    key: 'sS',
                    alt: true,
                    ctrl: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        var btn = me.getSaveButton(false);
                        if (btn) {
                            btn.fireEvent('click', btn);
                        }
                    }
                },
                {
                    // Ctrl + Alt + d = 'Delete'
                    key: 'dD',
                    alt: true,
                    ctrl: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        var btn = me.getDeleteButton(false);
                        if (btn) {
                            btn.fireEvent('click', btn);
                        }
                    }
                },
                {
                    // Ctrl + Alt + n = 'New'
                    key: 'nN',
                    alt: true,
                    ctrl: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        var btn = me.getNewButton(false);
                        if (btn) {
                            btn.fireEvent('click', btn);
                        }
                    }
                },
                {
                    // Ctrl + Alt + u = 'Undo Delete'
                    key: 'uU',
                    alt: true,
                    ctrl: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        var btn = me.getUndoDeleteButton(false);
                        if (btn) {
                            btn.fireEvent('click', btn);
                        }
                    }
                }
            ];
        me.callParent(arguments);
        // DisplayGrid's initKeyNav
        me.keyNav.addBinding(shortcutCfg);
    }
});

/**
 * @class sl.panel.grid.GridRenderers
 * @singleton
 */
Ext.define('sl.panel.grid.GridRenderers', {
    singleton: true,
    uses: [
        'sl.utils.Utilities'
    ],
    /**
     * Adds a qtip tooltip to the cell.
     * It will concatenate the cell's value with any previously entered tooltip.
     *
     * See {@link Ext.grid.column.Column#cfg-renderer} for more information about parameters
     * @param {Object} value
     * @param {Object} metadata
     * @param {Ext.data.Model} record
     * @param {Number} rowIndex
     * @param {Number} colIndex
     * @param {Ext.data.Store} store
     * @param {Ext.view.View} view
     * @return {String} The HTML string to be rendered.
     */
    tooltipRenderer: function(value, metadata, record, rowIndex, colIndex, store, view) {
        metadata = (Ext.isDefined(metadata) && !Ext.isEmpty(metadata)) ? metadata : {};
        var originalValue = value,
            tooltipValue = '',
            editMsg = '',
            existingTooltip = metadata.tdAttr || '',
            column = metadata.column || false,
            isEditable;
        try {
            value = String(Ext.isDefined(value) && !Ext.isEmpty(value) ? value : '');
            if (metadata) {
                // create tooltip if value has any other characters besides ' '
                if (!Ext.isEmpty(sl.utils.AllTrim(value))) {
                    tooltipValue = Ext.String.htmlEncode(Ext.String.htmlDecode(Ext.util.Format.stripTags(value)));
                }
                if (column) {
                    isEditable = column._isColumnEditable;
                    if (Ext.isDefined(isEditable) && isEditable !== true) {
                        editMsg = Ext.String.format('<div class=&quot;cannot-edit-cell-msg&quot;>Cell Is Not Editable{0}</div>', (Ext.isString(isEditable) ? ':<ul><li>' + isEditable + '</li></ul>' : ''));
                        tooltipValue += (tooltipValue.length ? '<hr>' : '') + editMsg;
                    }
                }
            }
            // is there already an existing tooltip?
            if (!Ext.isEmpty(existingTooltip)) {
                if (Ext.isString(existingTooltip) && existingTooltip.indexOf('data-qtip="') >= 0) {
                    // get only the text between the double quotes (removes the data-qtip... piece)
                    existingTooltip = existingTooltip.match(/"(.*?)"/)[1];
                    tooltipValue += (tooltipValue.length > 0 ? "<hr>" : "") + existingTooltip;
                } else {
                    sl.consoleWarn('[tooltip] Has Existing Tooltip, but Cannot Strip Its Text', {
                        'existing': existingTooltip,
                        'tooltipValue': tooltipValue,
                        'value': value
                    });
                }
            }
            metadata.tdAttr = 'data-qtip="' + tooltipValue + '"';
            if (Ext.versions.extjs.getMajor() === 4 && Ext.versions.extjs.getMinor() < 2) {
                // seems to be a bug that if cell had a value before, but now doesn't (value=""), the old value remains
                // to fix, set it to ' '
                value = value || ' ';
            }
        } catch (error) {
            console.error('[tooltip] Renderer Error', {
                error: error,
                value: value,
                originalValue: originalValue,
                args: arguments,
                scopeClassName: this.$className,
                scope: this
            });
            value = originalValue;
        }
        return value;
    },
    /**
     * Automatically converts value to rendered text by using the combo's store
     * to find a record in order to transform an internal value to a displayable text.
     * Uses the combo's {@link Ext.form.field.ComboBox#cfg-valueField valueField} &
     * {@link Ext.form.field.ComboBox#cfg-displayField displayField} to detect proper translation.
     *
     * See {@link Ext.grid.column.Column#cfg-renderer} for more information about parameters
     * @param {Object} value
     * @param {Object} metadata
     * @param {Ext.data.Model} record
     * @param {Number} rowIndex
     * @param {Number} colIndex
     * @param {Ext.data.Store} store from the grid
     * @param {Ext.view.View} view
     * @return {String} The HTML string to be rendered.
     */
    comboRenderer: function(value, metadata, record, rowIndex, colIndex, store, view) {
        var combo = this,
            cStore = combo.getStore(),
            originalValue = value;
        if (!Ext.isEmpty(value)) {
            if (!store) {
                store = combo.getParentGrid().getStore();
            }
            try {
                combo.rendererValueNotFoundText = combo.rendererValueNotFoundText || "";
                // Custom function defined in the combo that will return a custom string to render
                // the combo with when the value cannot be found in the store
                combo.valueNotFoundFn = combo.valueNotFoundFn || Ext.emptyFn;
                value = String(value || "");
                var hash = Ext.isFunction(combo.getValueToDisplayHash) ? combo.getValueToDisplayHash() : undefined,
                    displayTxt = '',
                    rec;
                if (cStore.isFiltered()) {
                    var filter = combo.queryFilter;
                    // doing combo.store.clearFilter(true) made the combo out of sync (wasn't displaying proper data afterwards).
                    // now, it is doing same thing as combo.beforeBlur() when `clearFilterOnBlur` is enabled
                    if (filter && !filter.disabled && combo.queryMode === 'local') {
                        filter.disabled = true;
                        cStore.filter();
                        if (!combo.clearFilterOnBlur) {
                            console.warning('[combo renderer] combo store\'s filter has been reset.  Renderer may not work if the combo\'s store is filtered', {
                                combo: combo,
                                args: arguments,
                                scopeClassName: this.$className,
                                scope: this
                            });
                        }
                    }
                }
                rec = cStore.findRecord(combo.valueField, value, 0, false, true, true);
                if (rec) {
                    displayTxt = rec.get(combo.displayField);
                } else if (hash && combo.gridDisplayField) {
                    // if the grid's store has records and the hash doesn't have the value yet, try to add it
                    if (!Ext.isEmpty(value) && store.getCount() > 0 && Ext.isFunction(store.getRecords) && (hash.getCount() === 0 || Ext.isEmpty(hash.get(value), true))) {
                        hash.addRecords(store.getRecords(), combo.column.dataIndex, combo.gridDisplayField);
                    }
                    displayTxt = hash.get(value);
                }
                // if valuenotfoundtext exists, add it to the empty displayTxt. also include "(value)" to tell them what ID doesn't have a matching record
                if (Ext.isEmpty(displayTxt)) {
                    // if the value is text & no record was found, set display to the text value
                    if (Ext.isString(value) && !Ext.isNumeric(value)) {
                        displayTxt = value;
                    }
                    // Check if there is a special function to call if the rawValue can't be found
                    else if (value && combo.valueNotFoundFn !== Ext.emptyFn) {
                        displayTxt = combo.valueNotFoundFn.call(this.valueNotFoundFnScope || this, combo, value);
                    }
                    // show the "not found" text
                    else if (value && combo.rendererValueNotFoundText) {
                        displayTxt = combo.rendererValueNotFoundText + " (" + value + ")";
                    }
                }
                value = displayTxt;
            } catch (error) {
                console.error('[combo] Renderer Error', {
                    error: error,
                    value: value,
                    originalValue: originalValue,
                    args: arguments,
                    scopeClassName: this.$className,
                    scope: this
                });
                value = originalValue;
            }
        }
        return value;
    },
    /**
     * Emphasizes the text in the cell that matches the grid store's {@link Ext.data.Store#searchedText searchedText}.
     *
     * See {@link Ext.grid.column.Column#cfg-renderer} for more information about parameters
     * @param {Object} value
     * @param {Object} metadata
     * @param {Ext.data.Model} record
     * @param {Number} rowIndex
     * @param {Number} colIndex
     * @param {Ext.data.Store} store
     * @param {Ext.view.View} view
     * @return {String} The HTML string to be rendered.
     */
    highlightMatchesRenderer: function(value, metadata, record, rowIndex, colIndex, store, view) {
        var me = this,
            // jshint ignore:line
            originalValue = String(Ext.isDefined(value) && !Ext.isEmpty(value) ? value : ''),
            markupValue = originalValue,
            formattedValue = '',
            searchMatchCls = 'x-search-match',
            filterMatchCls = 'x-filter-match',
            // all characters in the original value are split into individual array elements
            // if an char needs to be styled, its element will the required cls to apply to it
            // once a cls is set on a char, it won't be overwriten
            // this way, search matches, filter matches, etc. can all be added to the same string without conflicts
            allCharsArr = [],
            searchAnyOrder = false,
            filteredTextArray, searchText;
        if (!Ext.isEmpty(markupValue)) {
            try {
                searchText = Ext.isFunction(store.getSearchedText) ? sl.utils.AllTrim(store.getSearchedText()) : '';
                filteredTextArray = Ext.isFunction(store.getFilteredTextArray) ? store.getFilteredTextArray() : [];
                hasSearchText = !Ext.isEmpty(searchText);
                hasFilteredTextArray = Boolean((filteredTextArray || []).length > 0);
                if (hasSearchText || hasFilteredTextArray) {
                    allCharsArr = markupValue.split('').map(function(aChar) {
                        return {
                            character: aChar,
                            cls: ''
                        };
                    });
                    if (Ext.isFunction(store.getExtraParam)) {
                        searchAnyOrder = store.getExtraParam('searchAnyOrder') || false;
                    }
                    // check all words in the toFind[] to see if they are in the textToAlter string
                    // toFind words will ignore non-alphanumeric characters in their matching
                    // so if it is looking for "2/12 pk" it will highlight both "212pk" & 2/12 pk"
                    var updateAllCharsArray = function(toFind, textToAlter, cls) {
                            textToAlter = String(Ext.isDefined(textToAlter) ? textToAlter : '');
                            toFind = Ext.Array.from(toFind) || [];
                            // update styleArr so that characters that are part of a match are set to true
                            Ext.Array.forEach(toFind, function(str, toFind_index, toFind_array) {
                                var matchesArr = sl.utils.getAllMatchesInString(str, textToAlter, true);
                                Ext.Array.forEach(matchesArr, function(m, matches_index, matches_array) {
                                    // set styleArr[x]=true if it is part of a match
                                    for (var i = 0; i < m.toString().length; i++) {
                                        var currCharObj = allCharsArr[m.index + i];
                                        currCharObj.cls += cls + " ";
                                    }
                                });
                            });
                        };
                    if (hasSearchText) {
                        if (searchAnyOrder) {
                            if (sl.utils.doesStringContainAllPieces(markupValue, searchText, false)) {
                                var wordArr = sl.utils.convertToIgnoreNonAlphanumericInRegEx(Ext.String.splitWords(searchText));
                                if (Ext.isArray(wordArr) && wordArr.length > 0) {
                                    updateAllCharsArray(wordArr, markupValue, searchMatchCls);
                                }
                            }
                        } else {
                            // order matters, so find searchStr's **exact** match in the value
                            updateAllCharsArray(searchText, markupValue, searchMatchCls);
                        }
                    }
                    // do colfilter matches here
                    if (hasFilteredTextArray) {
                        Ext.Array.forEach(filteredTextArray, function(filterTxt, index, array) {
                            if (sl.utils.doesStringContainAllPieces(markupValue, filterTxt, false)) {
                                updateAllCharsArray(filterTxt, markupValue, filterMatchCls);
                            }
                        });
                    }
                    var prevCharStyleCls = "";
                    Ext.Array.forEach(allCharsArr, function(myChar, index, array) {
                        var styleCls = String(myChar.cls || '').trim(),
                            isCharStyled = !Ext.isEmpty(styleCls),
                            aChar = myChar.character;
                        // character should be stylized
                        if (isCharStyled) {
                            // previous char was styled with different cls
                            if (prevCharStyleCls && prevCharStyleCls !== styleCls) {
                                formattedValue += "</mark>";
                            }
                            if (prevCharStyleCls !== styleCls) {
                                // add <mark> before the character
                                formattedValue += '<mark class="' + styleCls + '">';
                                prevCharStyleCls = styleCls;
                            }
                        }
                        // if it is currently in a stylized <mark>, but the current char should not be stylized, end the mark
                        else if (prevCharStyleCls) {
                            formattedValue += "</mark>";
                            prevCharStyleCls = "";
                        }
                        formattedValue += aChar;
                    });
                    // it ended the loop and is still stylized, then end the mark
                    if (prevCharStyleCls) {
                        formattedValue += "</mark>";
                        prevCharStyleCls = "";
                    }
                    value = formattedValue;
                }
            } catch (error) {
                console.error('[highlightMatches] Renderer Error', {
                    error: error,
                    value: value,
                    originalValue: originalValue,
                    markupValue: markupValue,
                    formattedValue: formattedValue,
                    args: arguments,
                    scopeClassName: this.$className,
                    scope: this
                });
                value = originalValue;
            }
        }
        return value;
    }
});

/**
 * @class sl.panel.grid.ParentChildGridPairing
 * Helper class to sync a child (detail) grid to a parent (master) grid's row selection.
 * It will update the childGrid's title, data, and masking when the user changes parent rows.
 *
 * It will also help with the childGrid's new row creation (links to parent's ID).
 */
Ext.define('sl.panel.grid.ParentChildGridPairing', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.parentchild',
    pluginId: 'parentchild',
    mixins: [
        'Ext.mixin.Observable'
    ],
    uses: [
        'Ext.tree.Panel',
        'sl.utils.Utilities'
    ],
    config: {
        /**
         * @cfg {String} parentGridReference (required)
         * Parent (master) grid's {@link Ext.grid.Panel#cfg-reference}
         */
        parentGridReference: null,
        /**
         * @cfg {String} childGridReference (required)
         * Child (detail) grid's {@link Ext.grid.Panel#cfg-reference}
         */
        childGridReference: null,
        /**
         * @cfg {String} [parentFieldName="ID"] (required)
         * Field name on the parentRecord that contains Cach√© value neccessary for
         * childGrid to load from Cach√© query
         *
         */
        parentFieldName: "ID",
        /**
         * @cfg {String} cacheParamName (required)
         * Cach√© Query parameter that represents parent record's ID
         */
        cacheParamName: null,
        /**
         * @cfg {String} childForeignKeyFieldName
         * Field name in the child record that holds the parentRecord's ID value.
         * It is used when a new child record is created, so that the new record will be linked to the parent class.
         */
        childForeignKeyFieldName: null,
        /**
         * @cfg {Boolean} [childGridTitleSyncDisabled]
         * Set `true` to disable live-updating of the child panel's title from the parent record's data
         */
        childGridTitleSyncDisabled: false,
        /**
         * @private
         */
        parentRecord: null,
        /**
         * @private
         */
        parentGrid: null,
        /**
         * @private
         */
        childGrid: null,
        /**
         * @cfg {String} childMaskText
         * Text to use when masking the child grid.  Defaults to the parent grid's default title
         */
        childMaskText: null,
        /**
         * @cfg {String} directionArrow
         * If set, includes graphic arrow intended to point at parent grid.
         *
         * Possible values: 'up', 'down', 'left', 'right',
         * 'topleft' ('tl'), 'topright' ('tr'), 'bottomleft' ('bl'), 'bottomright' ('br')
         */
        directionArrow: null,
        /**
         * @cfg {Array} parentFieldsForChildGridTitle
         * Display Field names that are in {@link #cfg-parentRecord} to copy into the childGrid's title,
         * whenever the childGrid is synced to it.
         *
         * ***Order is significant. Will be the order that fields are included into the title.***
         *
         * See {@link #method-updateChildPanelTitle} for how it is used.
         */
        parentFieldsForChildGridTitle: [],
        /**
         * @cfg {Boolean} [monitorUIUpdate=true]
         * If `true`, child grid's UI updates whenever the parent grid fires `uiupdate`
         */
        monitorUIUpdate: true
    },
    /**
     * @property {Boolean} hasMaskedChild
     * If `true`, ParentChildPlugin is responsible for the child being masked
     */
    hasMaskedChild: false,
    /**
     * @cfg {Number} selectionChangeBuffer
     * Parent-Child Pairing will wait this long before updating UI and data when parent row selection changes.
     * This allows user to arrow down 5 times in the parent grid and not have child grid update 5 times (only on the last selection).
     * Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds.
     * If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place.
     */
    selectionChangeBuffer: 500,
    /**
     * @event updatechild
     * Fired by the {@link #parentGrid} to cause a childGrid to update its data
     */
    /**
     * @event resetparentchild
     * Fired by the {@link #parentGrid} the plugin to force updates to the `parentRecord` and the child panel's data & visuals
     */
    /**
     * @private
     */
    constructor: function(config) {
        var me = this;
        // The Observable constructor copies all of the properties of `config` on
        // to `this` using Ext.apply. Further, the `listeners` property is
        // processed to add listeners.
        me.mixins.observable.constructor.call(me, config);
        me.selectionTask = new Ext.util.DelayedTask(me.setParentRecordFromSelection, me);
        me.childVisualsTask = new Ext.util.DelayedTask(me.updateChildPanelVisuals, me);
    },
    /**
     * @private
     * @param {Ext.panel.Panel} panel reference to panel this plugin is used for
     */
    init: function(panel) {
        var me = this,
            parentRef = me.getParentGridReference(),
            childRef = me.getChildGridReference(),
            parentGrid, childGrid;
        // `me.panel` cannot already be defined
        Ext.Assert.falsey(me.panel);
        me.panel = panel;
        me.setParentGrid(parentGrid = me.getPanelForReference(parentRef, panel));
        me.setChildGrid(childGrid = me.getPanelForReference(childRef, panel));
        if (!me.getParentFieldName()) {
            sl.consoleWarn('[' + me.$className + '] Missing required value for parentFieldName');
        }
        if (!me.getCacheParamName()) {
            sl.consoleWarn('[' + me.$className + '] Missing required value for cacheParamName');
        }
        if (parentGrid && childGrid) {
            me.forceChildSync();
        }
    },
    /**
     * @private
     * Updates child panel so that its data and visuals match the current `parentRecord`.
     * This method is automatically called when the monitored `parentRecord` is updated using `setParentRecord`.
     */
    syncChildPanelToParentRecord: function() {
        var me = this;
        me.updateChildPanelData();
        me.updateChildPanelVisuals();
    },
    /**
     * @private
     * Add listeners to the parent grid
     */
    bindParentGridListeners: function() {
        var me = this,
            parentGrid = me.getParentGrid();
        me.parentGridListeners = Ext.apply({}, me.parentGridListeners, // defaults
        {
            scope: me,
            'destroy': me.destroyParentChildRelationship,
            'reconfigure': me.onParentGridReconfigure,
            // keep store listeners accurate
            'selectionchange': me.setParentRecordAfterSelectionChange,
            'resetparentchild': me.onResetParentChild,
            'updatechild': me.updateChildPanelData,
            'uiupdate': me.monitorUIUpdate ? me.updateChildGridUI : Ext.emptyFn,
            // allows pending mask to flow through a group of connected grids
            'updatechildpendingmask': me.updateChildPendingMask
        });
        parentGrid.on(me.parentGridListeners);
    },
    /**
     * @private
     * Add listeners to the child grid
     */
    bindChildGridListeners: function() {
        var me = this,
            childGrid = me.getChildGrid();
        me.childGridListeners = Ext.apply({}, me.childGridListeners, // defaults
        {
            scope: me,
            'destroy': me.destroyParentChildRelationship,
            // keep store listeners accurate
            'reconfigure': me.onChildGridReconfigure,
            // update child's UI on initial rendering
            'boxready': me.useDelayedChildPanelVisualUpdate,
            // update child's UI when it is resized (fixes mask msg location)
            'resize': me.useDelayedChildPanelVisualUpdate,
            // panel that contains childGrid was resized, so redraw mask message
            // (childGrid is not considered as resized when containing panel expands/collapses)
            'ancestorresize': me.useDelayedChildPanelVisualUpdate
        });
        childGrid.on(me.childGridListeners);
    },
    useDelayedChildPanelVisualUpdate: function() {
        var me = this;
        me.childVisualsTask.delay(50);
    },
    /**
     * @private
     * Add listeners to the parent grid's store
     */
    bindParentStoreListeners: function() {
        var me = this,
            parentGrid = me.getParentGrid(),
            parentStore = parentGrid.getStore();
        me.parentStoreListeners = Ext.apply({}, me.parentStoreListeners, // defaults
        {
            scope: me,
            'load': me.setParentRecordAfterEvent,
            'delete': me.setParentRecordAfterEvent,
            'clear': me.setParentRecordAfterEvent,
            'undodelete': me.setParentRecordAfterEvent,
            'newrecordsaved': me.onParentStoreNewRecordSaved
        });
        parentStore.on(me.parentStoreListeners);
    },
    /**
     * @private
     * Add listeners to the child grid's store
     */
    bindChildStoreListeners: function() {
        var me = this,
            childGrid = me.getChildGrid(),
            childStore = childGrid.getStore();
        me.childStoreListeners = Ext.apply({}, me.childStoreListeners, // defaults
        {
            scope: me,
            'beforerecordcreated': me.onChildStoreBeforeRecordCreated,
            'beforesave': {
                priority: 1,
                fn: me.onChildGridBeforeSave
            }
        });
        childStore.on(me.childStoreListeners);
    },
    unbindListeners: function(oldObject, oldListeners) {
        if (oldListeners && oldObject) {
            oldObject.removeListener(oldListeners);
        }
    },
    /**
     * @private
     * Whenever the {@link #cfg-parentRecord} changes via `setParentRecord`,
     * this method will automatically be called so that the childGrid stays up-to-date.
     * @param {Ext.data.Model} newParentRec The new `parentRecord`
     * @param {Ext.data.Model} oldParentRec The old `parentRecord`
     */
    updateParentRecord: function(newParentRec, oldParentRec) {
        // if `old`=null & `new`=undefined, this update gets called even though record hasn't actually been changed
        // verify that it is indeed a different actual record
        if (!sl.utils.areValuesEquivalent(newParentRec, oldParentRec)) {
            this.syncChildPanelToParentRecord();
        }
    },
    /**
     * @private
     * Finds panel with a matching reference.
     * @param {String} myReference Reference to compare against all components in application.
     * @param {Ext.container.Container} [ownerCt] Container that (at some level) contains the desired reference.
     * This will only be used if there are duplicate matching components.
     */
    getPanelForReference: function(myReference, ownerCt) {
        var me = this,
            grid;
        if (myReference) {
            grid = sl.utils.findByReference(myReference, ownerCt);
            if (!grid) {
                sl.consoleWarn('[' + me.$className + '] Could not find `' + myReference + '` grid.\n\nKnown References:\t' + Object.keys(sl.utils.getAllReferences()).join(), {
                    'references': sl.utils.getAllReferences(),
                    'referenced components': Ext.ComponentManager.references
                });
            }
        }
        return grid;
    },
    /**
     * @private
     * When {@link #cfg-parentGrid} changes via `setParentGrid`,
     * this is automatically called in order to attach this plugin to the new grid and remove link from old grid
     */
    updateParentGrid: function(newGrid, oldGrid) {
        var me = this,
            oldStore;
        if (oldGrid) {
            oldStore = oldGrid.getStore();
            if (oldStore) {
                me.unbindListeners(oldStore, me.parentStoreListeners);
            }
            me.unbindListeners(oldGrid, me.parentGridListeners);
            delete oldGrid.parentToChildPlugin;
        }
        if (newGrid) {
            newGrid.parentToChildPlugin = me;
            me.bindParentStoreListeners();
            me.bindParentGridListeners();
        }
    },
    /**
     * @private
     * When {@link #cfg-childGrid} changes via `setChildGrid`,
     * this is automatically called in order to attach this plugin to the new grid and remove link from old grid
     */
    updateChildGrid: function(newGrid, oldGrid) {
        var me = this,
            oldStore;
        if (oldGrid) {
            oldStore = oldGrid.getStore();
            if (oldStore) {
                me.unbindListeners(oldStore, me.childStoreListeners);
            }
            me.unbindListeners(oldGrid, me.childGridListeners);
            delete oldGrid.childToParentPlugin;
        }
        if (newGrid) {
            newGrid.childToParentPlugin = me;
            me.bindChildStoreListeners();
            me.bindChildGridListeners();
        }
    },
    /**
     * @private
     * If a new store is attached to the grid via `reconfigure`,
     * stop monitoring old store and focus only on the new store
     */
    onParentGridReconfigure: function(parentGrid, parentStore, parentColumns, oldParentStore) {
        var me = this;
        if (parentStore && oldParentStore !== parentStore) {
            me.unbindListeners(oldParentStore, me.parentStoreListeners);
            me.bindParentStoreListeners();
        }
    },
    /**
     * @private
     * If a new store is attached to the grid via `reconfigure`,
     * stop monitoring old store and focus only on the new store
     */
    onChildGridReconfigure: function(childGrid, childStore, childColumns, oldChildStore) {
        var me = this;
        // new store attached to grid so only monitor this new store
        if (childStore && oldChildStore !== childStore) {
            me.unbindListeners(oldChildStore, me.childStoreListeners);
            me.bindChildStoreListeners();
            if (!oldChildStore.isEmptyStore && !childStore.isEmptyStore) {
                me.forceChildSync();
            }
        }
    },
    /**
     * @private
     * Before a new record is created in the childGrid's store, this will set the foreign key
     * to the parent record's {@link #cfg-parentFieldName ID field}.
     * @param {Ext.data.Store} childStore
     * @param {Object} defaultProperties Values to seed new record with
     */
    onChildStoreBeforeRecordCreated: function(childStore, defaultProperties) {
        var me = this,
            fkIdProperty = me.getChildForeignKeyFieldName(),
            selRec = me.getParentRecord(),
            parentFieldName = me.getParentFieldName();
        if (selRec && fkIdProperty && parentFieldName) {
            defaultProperties[fkIdProperty] = selRec.get(parentFieldName);
        }
    },
    /**
     * @private
     * Prior to a record being saved, this updates its data so that it is properly linked to the parentRecord.
     * @param {Ext.data.Store} childStore
     * @param {Ext.data.Model[]} recordsToSave
     */
    onChildGridBeforeSave: function(childStore, recordsToSave, eOpts) {
        var me = this,
            fkIdProperty = me.getChildForeignKeyFieldName(),
            parentFieldName, parentRec;
        recordsToSave = Ext.Array.from(recordsToSave) || [];
        Ext.Array.forEach(recordsToSave, function(record, index, array) {
            me.setChildRecordPropertiesBeforeSave(childStore, record, eOpts);
            if (fkIdProperty && Ext.isEmpty(record.get(fkIdProperty))) {
                parentFieldName = me.getParentFieldName();
                parentRec = me.getParentRecord();
                if (parentRec && parentFieldName) {
                    record.set(fkIdProperty, parentRec.get(parentFieldName));
                }
            }
        });
        return true;
    },
    /**
     * Wrapper method for {@link #method-setParentRecordFromSelection}
     * to be used with events because it does not return anything.
     *
     * Having a method return a boolean causes issues with events like `load`.
     */
    setParentRecordAfterEvent: function() {
        this.selectionTask.delay(50);
    },
    setParentRecordAfterSelectionChange: function(selModel, selected) {
        var me = this,
            parentRec = Ext.valueFrom(me.getParentRecord(), false),
            selRec = (Ext.isArray(selected) ? (selected.length === 1 ? selected[0] : -1) : selected),
            noPendingChange = parentRec && parentRec === selRec;
        // selected record is the same as the existing `parentRecord`
        // immediately update child grid's visuals so it looks like something will be done to it
        me.updateChildPendingMask(me.getParentGrid(), !noPendingChange);
        // buffer the selectionchange so we don't constantly change `parentRecord` when user hits down arrow 10 times
        me.selectionTask.delay(me.selectionChangeBuffer);
    },
    /**
     * @private
     * Updates `parentRecord` to parentGrid's selected record
     * if and only if there is only 1 record selected.
     *
     * When `parentRecord` {@link #method-updateParentRecord changes},
     * it triggers the child grid to update.
     * @return {Boolean} `true` if {@link #cfg-parentRecord} changed
     */
    setParentRecordFromSelection: function() {
        var me = this,
            selected = me.getParentGrid().getSelection(),
            selRec = (selected.length === 1 ? selected[0] : null);
        return me.changeParentRecord(selRec);
    },
    /**
     * @private
     * Calls `setParentRecord` and returns if the `parentRecord` successfully changed values
     * @param {Ext.data.Model} newParentRec
     * @return {Boolean} Did the record change values?
     */
    changeParentRecord: function(newParentRec) {
        var me = this,
            prevParentRecord = me.getParentRecord();
        me.setParentRecord(newParentRec);
        return !sl.utils.areValuesEquivalent(prevParentRecord, me.getParentRecord());
    },
    /**
     * @private
     * When a parent record is saved and that record is already selected,
     * then the `childGrid` must {@link #method-syncChildPanelToParentRecord update}.
     */
    onParentStoreNewRecordSaved: function(parentStore, savedRec) {
        var me = this,
            currentParentRec = me.getParentRecord();
        // cannot call `setParentRecord` because it's already pointed at `savedRec`,
        // so it won't trigger child update process
        if (savedRec === currentParentRec) {
            me.syncChildPanelToParentRecord();
        }
    },
    onResetParentChild: function() {
        return this.forceChildSync();
    },
    /**
     * @private
     * Forces the child panel to update its data and its visuals to the current `parentRecord`
     * @param {Ext.data.Model} [newParentRec] If provided, will update the `parentRecord` to this record
     */
    forceChildSync: function(newParentRec) {
        var me = this,
            forceSync = true;
        if (newParentRec) {
            forceSync = !me.changeParentRecord(newParentRec);
        }
        if (forceSync) {
            forceSync = !me.setParentRecordFromSelection();
        }
        if (forceSync) {
            // parent record didn't change, but we want to force start the child panel update process anyway...
            me.syncChildPanelToParentRecord();
        }
    },
    /**
     * @private
     * Used to limit the available arrow directions because there are many equivalent words
     * @return {"up"/"down"/"left"/"right"}
     */
    getDirectionArrow: function() {
        var dirArrow = this.directionArrow;
        if (dirArrow) {
            switch (dirArrow.toLowerCase()) {
                case 'n':
                case 'north':
                case 't':
                case 'top':
                case 'u':
                case 'up':
                    dirArrow = 'up';
                    break;
                case 's':
                case 'south':
                case 'b':
                case 'bottom':
                case 'd':
                case 'down':
                    dirArrow = 'down';
                    break;
                case 'e':
                case 'east':
                case 'left':
                case 'l':
                    dirArrow = 'left';
                    break;
                case 'w':
                case 'west':
                case 'r':
                case 'right':
                    dirArrow = 'right';
                    break;
                case 'tl':
                case 't-l':
                case 'topleft':
                case 'top-left':
                    dirArrow = 'topleft';
                    break;
                case 'tr':
                case 't-r':
                case 'topright':
                case 'top-right':
                    dirArrow = 'topright';
                    break;
                case 'bl':
                case 'b-l':
                case 'bottomleft':
                case 'bottom-left':
                    dirArrow = 'bottomleft';
                    break;
                case 'br':
                case 'b-r':
                case 'bottomright':
                case 'bottom-right':
                    dirArrow = 'bottomright';
                    break;
            }
        }
        return dirArrow;
    },
    /**
     * @private
     * @return {String} Message to display in the child panel's masking
     */
    getChildMaskMessage: function() {
        var me = this,
            parentGrid = me.getParentGrid(),
            parentRec = me.getParentRecord(),
            dirArrow = me.getDirectionArrow(),
            selectMsg = 'Please choose 1 {0} row',
            unsavedMsg = 'Please save the {0} row',
            directionMsg = '<div class="arrow-{0}-mask">{1}</div>',
            txt = me.getChildMaskText() || parentGrid.getSingleName() || parentGrid.getDefaultTitle() || parentGrid.getTitle(),
            msg;
        if (parentRec) {
            msg = Ext.String.format(unsavedMsg, txt);
        } else {
            msg = Ext.String.format(selectMsg, txt);
        }
        if (dirArrow) {
            msg = Ext.String.format(directionMsg, dirArrow, msg);
        }
        return msg;
    },
    /**
     * @private
     * @return {Boolean} `true` if the child panel should be enabled based on `parentRecord`'s state
     */
    enableChildPanel: function() {
        var me = this,
            parentRec = Ext.valueFrom(me.getParentRecord(), false);
        return (parentRec && !(parentRec || {}).phantom);
    },
    /**
     * @private
     *Loads/removes child store's data based on `parentRecord`'s state
     */
    updateChildPanelData: function() {
        var me = this;
        if (me.enableChildPanel()) {
            me.loadChildPanelData();
        } else {
            me.clearChildPanelData();
        }
    },
    /**
     * @private
     * Configures the loading parameters based parent-child bond and will either:
     *
     * 	- update the child's UI
     *  - load child panel's store
     *
     * Can create a {@link #method-getChildStoreParams} for more complex load scenarios.
     */
    loadChildPanelData: function() {
        var me = this,
            parentRec = me.getParentRecord(),
            childPanel = me.getChildGrid(),
            useUpdateUI = parentRec._useUpdateUITemp && Ext.isFunction(childPanel.updateUI),
            cacheParam = me.getCacheParamName(),
            parentFieldName = me.getParentFieldName(),
            loadParams = {};
        if (useUpdateUI) {
            childPanel.updateUI(undefined, false, false, false);
            delete parentRec._useUpdateUITemp;
        } else {
            if (parentRec && parentFieldName && cacheParam) {
                loadParams[cacheParam] = parentRec.get(parentFieldName);
            }
            // get additional properties if developer has configured extra function
            loadParams = Ext.apply({}, me.getChildStoreParams(), loadParams);
            if (Ext.Object.isEmpty(loadParams)) {
                sl.consoleWarn('[' + me.$className + '] Missing information required for child store to load.', {
                    ParentChildGridPairingPlugin: me,
                    parentRec: parentRec,
                    cacheParam: cacheParam,
                    parentFieldName: parentFieldName
                });
            }
            if (sl.utils.matchesComponent(childPanel, Ext.tree.Panel)) {
                me.loadChildTreeData(loadParams);
            } else {
                me.loadChildGridData(loadParams);
            }
        }
    },
    loadChildTreeData: function(loadParams) {
        var me = this,
            childTree = me.getChildGrid(),
            rootNode = childTree.getRootNode(),
            childStore = rootNode.getTreeStore(),
            fkIdProperty = me.getChildForeignKeyFieldName(),
            parentFieldName = me.getParentFieldName(),
            parentRec;
        if (fkIdProperty) {
            parentFieldName = me.getParentFieldName();
            parentRec = me.getParentRecord();
            if (parentRec && parentFieldName) {
                rootNode.set(fkIdProperty, parentRec.get(parentFieldName), {
                    dirty: false
                });
            }
        }
        childStore.load({
            node: rootNode,
            params: loadParams,
            callback: function() {
                rootNode.expand();
            }
        });
    },
    loadChildGridData: function(loadParams) {
        var me = this,
            childPanel = me.getChildGrid(),
            childStore = childPanel.getStore();
        childStore.abortPreviousRequests();
        if (Ext.isFunction(childPanel.refreshGridData)) {
            // loads store & will auto-select any previously selected records (if records are still in store after load)
            childPanel.refreshGridData(loadParams);
        } else {
            childStore.load({
                params: loadParams
            });
        }
    },
    reloadChildGridStore: function() {
        var me = this,
            childGrid = me.getChildGrid();
        childGrid.refreshGridData();
    },
    clearChildPanelData: function() {
        var me = this,
            childPanel = me.getChildGrid();
        if (sl.utils.matchesComponent(childPanel, Ext.tree.Panel)) {
            me.clearChildTreeData();
        } else {
            me.clearChildGridData();
        }
        childPanel.fireEvent('resetparentchild');
    },
    /**
     * @private
     * Updates child panel title & mask message (if necessary)
     */
    updateChildPanelVisuals: function() {
        var me = this;
        me.updateChildPanelMaskMessage();
        me.updateChildPanelTitle();
    },
    /**
     * Adds or removes as masking message based on `parentRecord` state
     */
    updateChildPanelMaskMessage: function() {
        var me = this,
            childPanel = me.getChildGrid();
        if (childPanel.rendered) {
            if (me.enableChildPanel()) {
                if (me.hasMaskedChild) {
                    childPanel.unmask();
                    me.hasMaskedChild = false;
                }
            } else {
                childPanel.mask(me.getChildMaskMessage());
                me.hasMaskedChild = true;
            }
            childPanel.fireEvent('maskchanged', childPanel, me.hasMaskedChild);
        }
    },
    clearChildGridData: function(parentRec) {
        var store = this.getChildGrid().getStore();
        store.abortPreviousRequests();
        store.removeAll();
    },
    clearChildTreeData: function() {
        var me = this,
            childTree = me.getChildGrid();
        childTree.getRootNode().removeAll();
    },
    updateChildGridUI: function(grid, updatedRecords, insertedRecords, deletedRecords) {
        var me = this,
            parentGrid = me.getParentGrid(),
            parentStore = parentGrid.getStore(),
            parentIDProp = parentStore.getIDProperty(),
            parentRec = me.getParentRecord(),
            newParentRec;
        if (parentRec) {
            // stored `parentRec` may be outdated since this method is meant to be called following the parentGrid's `uiupdate`
            newParentRec = parentStore.findByValue(parentRec.get(parentIDProp), parentIDProp);
            if (newParentRec) {
                newParentRec._useUpdateUITemp = true;
                me.forceChildSync(newParentRec);
            }
        }
    },
    /**
     * Updates childGrid's title to contain info from `parentRecord` (or resets if no parentRecord)
     * If `false`, will set to the {@link sl.panel.grid.DisplayGrid#cfg-defaultTitle child grid's default title}.
     */
    updateChildPanelTitle: function() {
        var me = this,
            childGrid = me.getChildGrid(),
            parentFieldsArr = Ext.Array.from(me.parentFieldsForChildGridTitle),
            newTitle = String(childGrid.getDefaultTitle() || ''),
            parentFieldDivider = ' - ',
            baseAndParentDivider = ': ',
            parentRecTxt = '',
            parentRec;
        if (!me.childGridTitleSyncDisabled && childGrid.rendered) {
            if (me.enableChildPanel()) {
                parentRec = me.getParentRecord();
                if (parentRec) {
                    Ext.Array.forEach(parentFieldsArr, function(name, index, array) {
                        var txt = parentRec.get(name) || '';
                        if (Ext.isFunction(txt.toLocaleDateString)) {
                            txt = txt.toLocaleDateString();
                        }
                        txt = String(txt || '');
                        if (txt[0] === '-') {
                            txt = '(' + txt + ')';
                        }
                        parentRecTxt += (parentRecTxt.length > 0 && txt.length > 0 ? parentFieldDivider : '') + txt;
                    });
                    newTitle += (newTitle.length > 0 && parentRecTxt.length > 0 ? baseAndParentDivider : '') + parentRecTxt;
                }
            }
            /*
						trick it into thinking title is always new; if the title is set while panel is collapsed (esp in a floated panel),
						it can cause rendering issues, so always force redraw
						childGrid.title = '';
						*/
            childGrid.setTitle(newTitle);
        }
    },
    /**
     * Adds/removes a temporary panel mask while it waits for the proper sync to be called
     * @param {Ext.panel.Panel} panel The parent panel that fired the event.
     * It is ignored, but listed as param here to follow event guidelines (whoever fires the event is the first param)
     * @param {Boolean} addMask If `true` then will add a temporary mask of the `childGrid`; else it will remove it
     */
    updateChildPendingMask: function(parentPanel, addMask) {
        var me = this,
            // parentGrid = me.getParentGrid(),
            childGrid = me.getChildGrid();
        if (childGrid.rendered) {
            if (addMask) {
                if (!childGrid.isMasked()) {
                    // temporarilly add mask to child so it will appear to user that something is happening
                    childGrid.mask();
                    me.hasMaskedChild = true;
                }
            } else {
                // only if parent-child is responsible for the mask on the child childGrid should we remove it
                if (me.hasMaskedChild) {
                    childGrid.unmask();
                    me.hasMaskedChild = false;
                }
            }
            // if the parent is masked, then the child should be as well
            if (addMask) {
                // the child grid could be another grid's parent, so when `childGrid` fires this event,
                // it'll catch it as the `parentGrid` in a different ParentChild pairing, and cause
                // the masking to waterfall over the entire "family" of grids
                // "A" (parent) tells "B" (child) to be masked
                // "B" (child) notifies "B" (parent) about it
                // "B" (parent) tells its "C" (child), etc.
                childGrid.fireEvent('updatechildpendingmask', childGrid, addMask);
            }
        }
    },
    /**
     * @method
     * @return {Object} parameters to use to load the child store in {@link #method-loadChildPanelData}
     *
     * Example function definition:
     *
     *     getChildStoreParams: function() {
     *         return {"foo": "bar"};
     *     }
     */
    getChildStoreParams: Ext.emptyFn,
    /**
     * @method
     * Updates child record properties during the store's "beforesave" event
     *
     * Example function definition:
     *
     *     setChildRecordPropertiesBeforeSave: function(childStore, record, eOpts) {
     *         record.set('foo', 'bar');
     *     }
     */
    setChildRecordPropertiesBeforeSave: Ext.emptyFn,
    destroyParentChildRelationship: function() {
        var me = this;
        me.unbindListeners(me.getParentGrid(), me.parentGridListeners);
        me.unbindListeners(me.getChildGrid(), me.childGridListeners);
        me.unbindListeners(me.getParentGrid().getStore(), me.parentStoreListeners);
        me.unbindListeners(me.getChildGrid().getStore(), me.childStoreListeners);
        me.setParentGrid(null);
        me.setChildGrid(null);
        me.panel = null;
    }
});

/**
 * A Column definition class which renders a pricing cost data field according to the type of cost selected
 *
 *     @example
 *     Ext.create('Ext.data.Store', {
 *           storeId: 'sampleStore',
 *          fields: [
 *              {name: 'name'},
 *              {name: 'suppliercost', type: 'number'},
 *              {name: 'shopcost', type: 'number'},
 *              {name: 'retail', type: 'number' }
 *          ],
 *          data: [
 *              {name: "Test Product #1", suppliercost: '10.12345', shopcost: '5.23456', retail: '2.3456'},
 *              {name: "Test Product #2", suppliercost: '20.13345', shopcost: '7.53456', retail: '12.43456'},
 *              {name: "Test Product #3", suppliercost: '30.14345', shopcost: '8.63456', retail: '22.23456'},
 *              {name: "Test Product #4", suppliercost: '40.15345', shopcost: '9.73456', retail: '22.13456'}
 *          ]
 *      });
 *
 *     Ext.create('Ext.grid.Panel', {
 *         title: 'Number Column Demo',
 *         store: Ext.data.StoreManager.lookup('sampleStore'),
 *         columns: [
 *             { text: 'name',           dataIndex: 'name', flex: 1 },
 *             { text: 'Supplier Cost',  dataIndex: 'suppliercost',  xtype: 'costcolumn', formatAsSupplierCost: true},
 *             { text: 'Shop Cost',      dataIndex: 'shopcost', xtype: 'costcolumn', formatAsShopCost:true },
 *             { text: 'Retail',         dataIndex: 'retail', xtype: 'costcolumn', formatAsRetail:true }
 *         ],
 *         height: 200,
 *         width: 400,
 *         renderTo: Ext.getBody()
 *     });
 */
Ext.define('sl.panel.grid.column.Cost', {
    extend: 'Ext.grid.column.Number',
    alias: [
        'widget.costcolumn'
    ],
    /**
     * @cfg {Boolean} [formatAsSupplierCost=true]
     * Set `true` to format as a Supplier Cost
     */
    formatAsSupplierCost: true,
    /**
     * @cfg {Boolean} [formatAsShopCost=false]
     * Set `true` to format as a Shop Cost
     */
    formatAsShopCost: false,
    /**
     * @cfg {Boolean} [formatAsRetail=false]
     * Set `true` to format as a Retail
     */
    formatAsRetail: false,
    /**
     * @cfg {Boolean} [showZeroIfEmpty=false]
     * Set `true` to show "0" instead of "" when the `value` is empty
     */
    showZeroIfEmpty: false,
    supplierMaxDecimals: 5,
    shopMaxDecimals: 3,
    retailMaxDecimals: 2,
    defaultMinDecimals: 2,
    initComponent: function() {
        var me = this,
            editor = me.getColumnEditor(),
            currMaxDecimals = 2,
            colMaxDecimals;
        // when column has an editor numberfield, make sure the decimal precision is large enough to handle the column's decimal definition
        if (editor && sl.utils.matchesComponent(editor, Ext.form.field.Number)) {
            colMaxDecimals = me.getMaxDecimalPrecision();
            if (Ext.isFunction(editor.setDecimalPrecision)) {
                currMaxDecimals = Ext.valueFrom(editor.getMaxDecimalPrecision(), currMaxDecimals);
                editor.setDecimalPrecision(Math.max(colMaxDecimals, currMaxDecimals));
            } else {
                currMaxDecimals = Ext.valueFrom(editor.decimalPrecision, currMaxDecimals);
                editor.decimalPrecision = Math.max(colMaxDecimals, currMaxDecimals);
            }
        }
        me.callParent();
    },
    /**
     * @return {Number} Max number of decimals based on this column's configuration
     */
    getMaxDecimalPrecision: function() {
        var me = this,
            maxDecimals = 2;
        if (me.formatAsRetail) {
            maxDecimals = me.retailMaxDecimals;
        } else if (me.formatAsShopCost) {
            maxDecimals = me.shopMaxDecimals;
        } else if (me.formatAsSupplierCost) {
            maxDecimals = me.supplierMaxDecimals;
        }
        return maxDecimals;
    },
    roundForPricing: function(value, record, store, dataIndex) {
        var me = this,
            maxDecimals = me.getMaxDecimalPrecision(),
            field, model, minDecimals;
        if (record.isSummary && store) {
            model = store.getModel();
            if (model && Ext.isFunction(model.getField)) {
                field = model.getField(dataIndex);
            }
        } else {
            field = Ext.isFunction(record || {}.getField) ? record.getField(dataIndex) : false;
        }
        if (field && "int" === field.getType()) {
            // integer-field values won't have decimals...
            minDecimals = 0;
        } else {
            minDecimals = me.defaultMinDecimals;
        }
        return sl.utils.roundForPricingRendering(value, maxDecimals, minDecimals, me.showZeroIfEmpty);
    },
    defaultRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        var me = this,
            dataIndex = (metaData.column || {}).dataIndex;
        if (Ext.isObject(metaData)) {
            // place numbers on right side of cell (like excel)
            metaData.align = 'right';
        }
        return me.roundForPricing(value, record, store, dataIndex);
    },
    summaryRenderer: function(value, summaryData, dataIndex, metaData) {
        var column = metaData.column,
            // if the grid has a locked column, it will have nested grids, so this
            // will find the top-level grid
            grid = column ? column.up('tablepanel[isLocked=undefined]') : false,
            store = grid ? grid.getStore() : false;
        return this.defaultRenderer(value, metaData, metaData.record, metaData.rowIndex, metaData.columnIndex, store);
    }
});

/**
 * @class sl.panel.grid.plugin.GridFilterField
 */
Ext.define('sl.panel.grid.plugin.GridFilterField', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.gridfilterfield',
    mixins: [
        'Ext.util.Observable'
    ],
    uses: [
        'Ext.util.KeyMap',
        'sl.utils.Utilities'
    ],
    constructor: function(config) {
        this.callParent(arguments);
        // The Observable constructor copies all of the properties of `config` on
        // to `this` using Ext.apply. Further, the `listeners` property is
        // processed to add listeners.
        this.mixins.observable.constructor.call(this, config);
    },
    emptyText: "Filter (Ctrl + Alt + F)",
    /**
     * @cfg {String} [selectAllText='Select All']
     * Text to display on menu item that selects all fields
     */
    selectAllText: 'Select All',
    /**
     * @cfg {String} toolbarId
     * id of Toolbar to put filter field on
     * Will create new toolbar if no toolbar matches `toolbarId` or `toolbarPosition`
     */
    /**
     * @cfg {String} [toolbarPosition='bottom']
     * Where to display the filter field. Valid values are `top` and `bottom`
     * Will create new toolbar if no toolbar matches `toolbarId` or `toolbarPosition`
     */
    toolbarPosition: 'bottom',
    /**
     * @cfg {Array} preCheckedIndexes
     * An array of dataIndex names, e.g. ['persFirstName', 'persLastName']
     * DataIndexes in the array will be the only items checked.
     * If array is empty, then every item will be checked
     */
    /**
     * @cfg {Array} excludedDataIndexes
     * Array of index names to not show in the menu, e.g. ['persTitle', 'persTitle2']
     */
    /**
     * @cfg {Array} readonlyIndexes
     * Array of index names to disable (show in menu disabled), e.g. ['persTitle', 'persTitle2']
     */
    /**
     * @cfg {String} dateFormat
     * How to format date values. If undefined (the default)
     * date is formatted as configured in colummn model
     */
    /**
     * @cfg {Boolean} [showSelectAll=true]
     * Select All item is shown in menu if true (defaults to true)
     */
    showSelectAll: true,
    /**
     * @property field
     * @type {Ext.form.field.Text}
     * Field containing search text (read-only)
     */
    /**
     * @property menu
     * @type {Ext.menu.Menu}
     * Menu containing the column module fields menu with checkboxes (read-only)
     */
    /**
     * @cfg {String} [menuStyle='checkbox']
     * Valid values are 'checkbox' and 'radio'. If menuStyle is radio
     * then only one field can be searched at a time and selectAll is automatically switched off.
     */
    menuStyle: 'checkbox',
    /**
     * @cfg {Number} minChars
     * Minimum characters to type before the request is made automatically. If undefined (the default)
     * the trigger field shows magnifier icon and you need to click it or press enter for search to start. If it
     * is defined and greater than 0 then magnifier is not shown and search starts after minChars are typed.
     * Hitting ENTER will always start the search immediately
     */
    /**
     * @cfg {String} [mode='local']
     * Use 'remote' for remote stores or 'local' for local stores. If mode is local
     * no data requests are sent to server the grid's store is filtered instead
     */
    mode: 'local',
    /**
     * @cfg {Number} [fieldWidth=200]
     * Width of input field in pixels
     */
    fieldWidth: 200,
    /**
     * @cfg {Object} [paramNames={fields: 'fields', query: 'query'}]
     * Params name map
     */
    paramNames: {
        fields: 'fields',
        query: 'query'
    },
    /**
     * @cfg {String} shortcutKey
     * Key to focus the input field (defaults to r = Sea_r_ch). Empty string disables shortcut
     * shortcutKey + shortcutModified = focus in filterfield
     */
    shortcutKey: 'f',
    /**
     * @cfg {Boolean} [searchOnClear=true]
     */
    searchOnClear: true,
    /**
     * @cfg {String} [align='right']
     * "left" or "right"
     */
    align: 'right',
    /**
     * @private
     * @param {Ext.grid.Panel} grid reference to grid this plugin is used for
     */
    init: function(grid) {
        var me = this,
            configureStoreListeners = function(newStore, oldStore) {
                if (oldStore) {
                    oldStore.un({
                        scope: me,
                        'needfilterremoval': me.onTriggerClear.bind(me, false)
                    });
                }
                if (newStore) {
                    newStore.on({
                        scope: me,
                        'needfilterremoval': me.onTriggerClear.bind(me, false)
                    });
                }
                me.buildFilterMenu();
            };
        if (grid) {
            me.grid = grid;
            // do our processing after grid render and reconfigure
            grid.onRender = Ext.Function.createSequence(grid.onRender, me.onRender, me);
            configureStoreListeners(grid.getStore());
            grid.on('reconfigure', function(myGrid, newStore, newColumns, oldStore, oldColumns, eOpts) {
                configureStoreListeners(newStore, oldStore);
            });
            if (Ext.isEmpty(grid.includeSearch) && Ext.isFunction(grid.setIncludeSearch)) {
                // grid.includeSearch should already be true if this was created from sl.DisplayGrid...
                grid.setIncludeSearch(true);
            }
        } else {
            sl.consoleWarn('[' + me.$className + '] Required `grid` is not defined');
        }
    },
    /**
         * @event beforefilter
         * @preventable
         * Fires before the store is filtered because of this field
         * @param {sl.panel.grid.plugin.GridFilterField} filterfield
         * @param {Ext.data.Store} store Data store connected to the search field
         * @param {String} value The current value of the field
         */
    /**
         * @event filtered
         * Fires when the store has been filtered because of this field
         * @param {sl.panel.grid.plugin.GridFilterField} filterfield
         */
    onRender: function() {
        var me = this;
        if (!me.grid.useStatusBar || !me.grid.includeSearch) {
            me.addItemsToToolbar();
        }
        me.buildFilterMenu();
        me.setupKeyMap();
        me.grid.on({
            scope: me,
            search: function() {
                me.field.focus(false);
            }
        });
    },
    setupKeyMap: function() {
        var me = this,
            shortcutEl, shortcutCfg;
        if (me.shortcutKey) {
            shortcutEl = me.grid.getEl();
            shortcutCfg = [
                {
                    key: me.shortcutKey,
                    ctrl: true,
                    alt: true,
                    scope: me,
                    stopEvent: true,
                    fn: function() {
                        if (Ext.isFunction(me.field.focusInput)) {
                            me.field.focusInput();
                        } else {
                            me.field.focus();
                        }
                    }
                }
            ];
            shortcutCfg[0][me.shortcutModifier] = true;
            me.keymap = new Ext.util.KeyMap(shortcutEl, shortcutCfg);
        }
    },
    // adds filter field components to toolbar
    addItemsToToolbar: function() {
        var me = this,
            itemArr = me.getItemsForToolbar(),
            insertLoc = me.insertLoc || 0,
            tb = me.toolbar = me.grid.getMatchingToolbar(me.toolbarId, me.toolbarPosition);
        for (var i = itemArr.length - 1; i >= 0; i--) {
            tb.insert(insertLoc, itemArr[i]);
        }
        return itemArr;
    },
    // builds ordered array of all items that will be added to toolbar
    // Toolbar's look: [ <b>Search</b>^: search____[o][x] ]
    getItemsForToolbar: function() {
        var me = this,
            itemArr = [];
        // handle position
        if ('right' === me.align) {
            itemArr.push({
                xtype: 'tbspacer',
                flex: 1
            });
        }
        // add menu button
        itemArr.push(me.getField());
        return itemArr;
    },
    getMenu: function() {
        var me = this;
        // add menu
        me.menu = Ext.isDefined(me.menu) ? me.menu : Ext.create('Ext.menu.Menu');
        return me.menu;
    },
    getField: function() {
        var me = this,
            triggersObj = {},
            fieldConfig;
        if (!me.field) {
            triggersObj.clear = {
                cls: "x-form-clear-trigger",
                handler: me.onTriggerClear,
                scope: me
            };
            if (!Ext.isDefined(me.minChars)) {
                triggersObj.search = {
                    cls: /*me.minChars ? 'x-hidden' :*/
                    'x-form-search-trigger',
                    handler: me.goToSearchOrClear,
                    scope: me
                };
            }
            triggersObj.options = {
                cls: 'x-form-options-trigger',
                scope: me,
                handler: function(field, btn, e) {
                    var menu = me.getMenu();
                    if (!menu.isVisible()) {
                        menu.showBy(btn.getEl(), 'tl-bl?');
                    } else {
                        menu.hide();
                    }
                }
            };
            fieldConfig = {
                width: me.fieldWidth,
                emptyText: me.emptyText,
                selectOnFocus: !Ext.isDefined(me.selectOnFocus) ? true : me.selectOnFocus,
                triggers: triggersObj,
                listeners: {
                    scope: me,
                    single: true,
                    'render': function() {
                        var field = me.getField(),
                            map;
                        if (me.minChars) {
                            field.el.on({
                                scope: me,
                                buffer: 300,
                                keyup: me.onKeyUp
                            });
                        }
                        // install key map
                        map = new Ext.util.KeyMap(field.el, [
                            {
                                key: Ext.event.Event.ENTER,
                                scope: me,
                                fn: me.goToSearchOrClear
                            },
                            {
                                key: Ext.event.Event.ESC,
                                scope: me,
                                fn: me.onTriggerClear
                            }
                        ]);
                        map.stopEvent = true;
                    }
                }
            };
            if ((me.grid.searchConfig || {}).height) {
                fieldConfig.height = me.grid.searchConfig.height;
            }
            me.field = Ext.create('Ext.form.field.Text', fieldConfig);
        }
        return me.field;
    },
    /**
     * field el keypup event handler. Triggers the search
     * @private
     */
    onKeyUp: function() {
        var me = this,
            length = me.getField().getValue().toString().length;
        if (0 === length || me.minChars <= length) {
            me.goToSearchOrClear();
        }
    },
    // if there is no value in the filterfield, it will go directly to the `clear` function
    goToSearchOrClear: function() {
        return (!Ext.isEmpty(this.getField().getValue()) ? this.onTriggerSearch() : this.onTriggerClear(true));
    },
    /**
     * Clear Trigger click handler
     * @private
     */
    onTriggerClear: function(forceClear) {
        var me = this,
            field = me.getField(),
            colFilters = me.grid.getView().findFeature('filters');
        forceClear = forceClear || false;
        if (Ext.isFunction(me.grid.store.setFilteredText)) {
            me.grid.store.setFilteredText();
        }
        if (field.getValue() || forceClear) {
            field.setValue('');
            field.focus();
            if (me.searchOnClear) {
                me.onTriggerSearch();
            }
        }
        // disable all column filters
        if (colFilters) {
            colFilters.clearFilters();
        }
    },
    /**
     * Search Trigger click handler (executes the search, local or remote)
     * @private
     */
    onTriggerSearch: function() {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            field = me.getField(),
            gridEl = grid.getEl(),
            val;
        if (!field.isValid()) {
            return;
        }
        val = field.getValue();
        // grid's store filter
        if (me.fireEvent('beforefilter', me, store, val) !== false) {
            if (gridEl) {
                gridEl.mask('Filtering...');
            }
            if (Ext.isFunction(store.setFilteredText)) {
                store.setFilteredText(val);
            }
            if ('local' === me.mode) {
                // need a sec to get mask up
                new Ext.util.DelayedTask(function() {
                    me.doLocalFilter();
                }).delay(1);
            } else // ask server to filter records
            {
                me.doRemoteFilter();
            }
        }
    },
    /**
     * Removes any filters that were comparing against `doLocalRecordFilter`
     */
    removeExistingSearchFilter: function() {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            existingFilters = store.getFilters(),
            existingFiltersLen = existingFilters ? existingFilters.getCount() : false,
            currFilter;
        if (existingFiltersLen) {
            for (var i = existingFiltersLen - 1; i >= 0; i--) {
                currFilter = existingFilters.getAt(i);
                if (currFilter.getFilterFn() === me.doLocalRecordFilter) {
                    existingFilters.remove(currFilter);
                }
            }
        }
    },
    /**
     * filters grid store's data locally based on the cell's rendering value, not the store's value
     * records will be ranked and sorted based on how prevalent the filter text is
     */
    doLocalFilter: function() {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            gridEl = grid.getEl();
        // if old filters are not removed, then it will wrongly compare against old filters
        me.removeExistingSearchFilter();
        if (Ext.isFunction(store.getFilteredText)) {
            store.filterBy(me.doLocalRecordFilter, me);
            // doLocalRecordFilter ranked each record against the filter text, so now sort so best are at top
            store.sortRankedRecords();
        } else {
            sl.consoleWarn('[' + me.$className + '] Filtering does not work with this store. Only works with Cach√© store', {
                store: store
            });
        }
        if (gridEl) {
            gridEl.unmask();
        }
        me.fireEvent('filtered', me);
    },
    /**
     * user can limit what columns will be filtered on
     * Based on the user's selected columns, this will test if cells in those columns contains all of the filtered text
     * A record must have all of the filtered text in 1+ of the specified columns to remain visible
     *
     * Case is always ignored from the user's entered text
     * User can require exact match to what he typed; otherwise, order and punctuation are ignored
     *
     * @param {Ext.data.Model} rec The record in question
     * @return {Boolean} `true` if record should stay in store; `false` if filtered out of store
     */
    doLocalRecordFilter: function(rec) {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            checkedMenuItems = me.getCheckedMenuItems(),
            // columns to be filtered
            needsExactMatch = store.getFilteredText().indexOf('"') >= 0,
            // filter has quotes => has exact match piece
            txtToFindArr = store.getFilteredTextArray(),
            // at least 1 cell must have each element in this array
            renderedTxtArr = [],
            // rendered text for all cells for this record for faster sorting
            recHasValue;
        // only when true will the record not be filtered out of the store
        if (txtToFindArr.length) {
            recHasValue = false;
            Ext.Array.forEach(checkedMenuItems, function(item, index, array) {
                var cellText,
                    column = item.column,
                    cellHasText = false;
                if (column) {
                    if (((column || {}).xtypesMap || {}).checkcolumn) {
                        // special for checkcolumns since value will be boolean
                        cellText = rec.get(column.dataIndex).toString();
                    } else {
                        cellText = grid.getTextInCell(column, rec);
                        if (cellText instanceof Date) {
                            // convert date to text equivalent
                            cellText = Ext.Date.format(cellText, me.dateFormat || rec.fields.get(column.dataIndex).dateFormat);
                        } else if (Ext.isBoolean(cellText)) {
                            cellText = cellText.toString();
                        }
                    }
                    // compare the user-entered text against the cell's rendered text
                    cellHasText = sl.utils.doesStringContainAllPieces(cellText, txtToFindArr, false, !needsExactMatch);
                    renderedTxtArr.push(cellHasText ? cellText : undefined);
                    recHasValue = recHasValue || cellHasText;
                }
            });
        } else {
            // nothing to search for...
            recHasValue = true;
        }
        // rank how prevalent the filter text is
        rec.setSortRanking(txtToFindArr, undefined, renderedTxtArr);
        return recHasValue;
    },
    /**
     * filters grid store's data on the remote server
     * much messier process than local filtering
     */
    doRemoteFilter: function() {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            val = store.getFilteredText(),
            fields = [],
            params;
        // clear start (necessary if we have paging)
        if (store.lastOptions && store.lastOptions.params && store.proxy && store.proxy.startParam) {
            store.lastOptions.params[store.proxy.startParam] = 0;
        }
        // get fields-to-search array
        me.menu.items.each(function(item) {
            var editor;
            if (item.checked && item.dataIndex) {
                fields.push(item.dataIndex);
                // convert
                if (item.column && Ext.isFunction(item.column.getEditor)) {
                    editor = item.column.getEditor();
                    if (editor.gridDisplayField) {
                        // user enter text; item.dataIndex is a value, so must include gsf.gridDisplayField into fields
                        fields.push(editor.gridDisplayField);
                    }
                    if (sl.utils.isComboBox(editor)) {
                        // placeholder until think of way to convert user's rawValue to match combo's value...
                        sl.consoleWarn('[' + me.$className + '] Combo\'s Display Field is not included in Search');
                    }
                }
            }
        });
        // backup original extraparams
        store.proxy.originalExtraParams = Ext.encode(store.proxy.extraParams);
        // add fields and query to baseParams of store
        if (store.proxy && store.proxy.extraParams) {
            delete (store.proxy.extraParams[me.paramNames.fields]);
            delete (store.proxy.extraParams[me.paramNames.query]);
        }
        if (store.lastOptions && store.lastOptions.params) {
            delete (store.lastOptions.params[me.paramNames.fields]);
            delete (store.lastOptions.params[me.paramNames.query]);
        }
        if (fields.length && store.proxy && store.proxy.extraParams) {
            store.proxy.extraParams[me.paramNames.fields] = Ext.encode(fields);
            store.proxy.extraParams[me.paramNames.query] = val;
            store.setFilteredText(val);
            store.usingSearchFilter = true;
        }
        // reload store
        if (store.lastOptions && store.lastOptions.params) {
            params = store.lastOptions.params;
        }
        store.load({
            params: params,
            callback: function() {
                // restore original extraparams
                store.extraParams = Ext.decode(store.originalExtraParams);
                store.usingSearchFilter = false;
                me.fireEvent('filtered', me);
            },
            scope: me
        });
    },
    /**
     * Enable search (TwinTriggerField)
     */
    enable: function() {
        this.setDisabled(false);
    },
    /**
     * Disable search (TwinTriggerField)
     */
    disable: function() {
        this.setDisabled(true);
    },
    /**
     * @param {Boolean} isDisabled true to disable search (TwinTriggerField), false to enable
     */
    setDisabled: function(isDisabled) {
        var field = this.getField();
        field.setDisabled.apply(field, arguments);
    },
    /**
     * (re)configures the plugin, creates menu items from column model
     * @private
     */
    buildFilterMenu: function() {
        var me = this,
            menu = me.getMenu(),
            hasExcludedIndexes = (Ext.isArray(me.excludedDataIndexes) && (me.excludedDataIndexes || []).length > 0),
            hasReadOnlyIndexes = (Ext.isArray(me.readonlyIndexes) && (me.readonlyIndexes || []).length > 0),
            hasPreCheckedIndexes = (Ext.isArray(me.preCheckedIndexes) && (me.preCheckedIndexes || []).length > 0),
            columns, radioGroupID;
        if (menu) {
            // reset the menu by removing all old options
            menu.removeAll();
            // add Select All item plus separator
            if (me.showSelectAll && 'radio' !== me.menuStyle) {
                menu.add({
                    xtype: 'menucheckitem',
                    text: me.selectAllText,
                    checked: false,
                    hideOnClick: false,
                    handler: function(item) {
                        var checked = item.checked;
                        item.parentMenu.items.each(function(i) {
                            if (item !== i && i.setChecked && !i.disabled) {
                                i.setChecked(checked);
                            }
                        });
                    }
                }, '-');
            }
            // add new items
            columns = me.grid.getColumns();
            if ('radio' === me.menuStyle) {
                radioGroupID = 'g' + (new Date()).getTime();
            }
            // unique radioGroupID
            Ext.Array.forEach(columns, function(column, index, array) {
                var isExcluded = false,
                    isReadOnly = false,
                    isChecked = !column.hidden;
                if (column.text && column.dataIndex) {
                    if (hasExcludedIndexes) {
                        isExcluded = (Ext.Array.indexOf(me.excludedDataIndexes, column.dataIndex) >= 0);
                    }
                    if (hasReadOnlyIndexes) {
                        isReadOnly = (Ext.Array.indexOf(me.readonlyIndexes, column.dataIndex) >= 0);
                    }
                    if (hasPreCheckedIndexes) {
                        isChecked = (Ext.Array.indexOf(me.preCheckedIndexes, column.dataIndex) >= 0);
                    }
                    if (!isExcluded) {
                        menu.add({
                            xtype: 'menucheckitem',
                            text: column.text.replace(Ext.util.Format.stripTagsRe, ' '),
                            // remove <br/> & tags
                            hideOnClick: false,
                            group: radioGroupID,
                            disabled: isReadOnly,
                            checked: isChecked,
                            dataIndex: column.dataIndex,
                            column: column
                        });
                    }
                }
            });
        }
    },
    /**
     * When the user searched for a specific term, that means the most valuable records have this search term in a prominent position.
     */
    rankAndSortRecords: function(searchStr) {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            records = store.getRecords(),
            recCount = records.length,
            sorters = store.getSorters() || {},
            doRankAndSort = (0 === sorters.length),
            fieldsToScore = [],
            foundMatch, chkMenuItems;
        if (recCount) {
            if (!doRankAndSort) {
                // the store has already been sorted; make sure that it is being sorted by the `sort_character_index`
                // if it is not being sorted by `sort_character_index`, then don't rank records
                // this allows user to override the sort order
                doRankAndSort = Ext.isFunction(sorters.containsKey) && sorters.containsKey('sort_character_index');
            }
            if (doRankAndSort) {
                searchStr = sl.utils.stripNonAlphanumericChars(searchStr || '');
                chkMenuItems = me.getCheckedMenuItems();
                Ext.Array.forEach(chkMenuItems, function(menuItem, index, array) {
                    if (menuItem && menuItem.column && menuItem.column.dataIndex) {
                        fieldsToScore.push(menuItem.column.dataIndex);
                    }
                });
                if (!Ext.isEmpty(searchStr)) {
                    foundMatch = store.sortRecordsForRevelency(searchStr, fieldsToScore, records);
                }
            }
        }
    },
    /**
     * Returns array of all columns that are checked and will be searched
     * @return {Array} Array of menu items
     */
    getCheckedMenuItems: function() {
        var me = this,
            menu = me.getMenu(),
            checkedMenuItems = [];
        menu.items.each(function(item) {
            if (item.checked) {
                checkedMenuItems.push(item);
            }
        });
        return checkedMenuItems;
    }
});

/**
 * @class sl.panel.grid.plugin.GridRowCount
 */
Ext.define("sl.panel.grid.plugin.GridRowCount", {
    extend: 'Ext.AbstractPlugin',
    mixins: [
        'Ext.util.Observable'
    ],
    alias: 'plugin.gridrowcount',
    requires: [
        'Ext.form.Label',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Spacer',
        'Ext.util.Format'
    ],
    constructor: function(config) {
        this.callParent(arguments);
        // The Observable constructor copies all of the properties of `config` on
        // to `this` using Ext.apply. Further, the `listeners` property is
        // processed to add listeners.
        this.mixins.observable.constructor.call(this, config);
    },
    /**
     * @cfg {String} [defaultCls='gridrowcount']
     * CSS Class that every label will be defaulted to
     */
    defaultCls: 'gridrowcount',
    /**
     * @cfg {String} rowCountCls
     * CSS Class for rowCountLabel
     */
    /**
     * @cfg {String} [rowCountMsg='{0}']
     * Text template for row count label (all visible)
     * Will look like "3 rows"
     */
    rowCountMsg: '{0}',
    /**
     * @cfg {String} [hiddenRowsCls='hiddenrows']
     * CSS Class for rowCountLabel when some rows are hidden/filtered
     */
    hiddenRowsCls: 'hiddenrows',
    /**
     * @cfg {String} [hiddenRowsCountMsg='Displaying {0} of {1}']
     * Text template for row count label (some hidden/filtered)
     * Will look like "Displaying 1 of 3 rows"
     */
    hiddenRowsCountMsg: 'Showing {0} of {1}',
    /**
     * @cfg {String} hiddenRowsCountMsgMini
     * Condensed version of {@link #hiddenRowsCountMsg} to be used instead only when
     * the grid's width is less than {@link #widthForUsingMiniText}
     */
    hiddenRowsCountMsgMini: '{0} of {1}',
    /**
     * @cfg {Number} widthForUsingMiniText
     * If the grid's width is less than this number, it will use {@link #selectedCountMsgMini} and {@link #hiddenRowsCountMsgMini}
     */
    widthForUsingMiniText: 500,
    /**
     * @cfg {String} selectedCountCls
     * CSS Class for selectionCountLabel
     */
    /**
     * @cfg {String} [selectedCountMsg='{0} selected']
     * Text template for selectionCountLabel
     * Will look like "3 selected"
     */
    selectedCountMsg: '{0} selected',
    /**
     * @cfg {String} selectedCountMsgMini
     * Condensed version of {@link #selectedCountMsg} to be used instead only when
     * the grid's width is less than {@link #widthForUsingMiniText}
     */
    selectedCountMsgMini: '{0} sel.',
    /**
     * @cfg {Boolean} includeLoadTime
     * Set `true` to have the store's load time included in the row counter
     */
    /**
     * @cfg {String} refreshTimeCls
     * CSS Class for refreshTimeLabel
     */
    /**
     * @cfg {String} [refreshTimeMsg='Refreshed @ {0}']
     * Text template for refreshTimeLabel
     * Will look like "Refreshed @ 10:15:03 AM"
     */
    refreshTimeMsg: ' Refreshed @ {0}',
    /**
     * @cfg {String}
     * Text that goes after the number of rows in a grid; e.g. "## ___" or "Showing ## of ## ___ | ## selected"
     * Defaults to the defaultRowName
     */
    rowName: '',
    /**
     * @cfg {String} rowNamePlural
     * The plural form of the {@link #rowName word (defaults to the `rowName` with an "s")
     */
    /**
     * @cfg {String} toolbarId
     * id of Toolbar to put row counter on
     * Will create new toolbar if no toolbar matches `toolbarId` or position
     */
    /**
     * @cfg {String} [toolbarPosition='bottom']
     * Where to display the row counter. Valid values are `top` and `bottom`
     * Will create new toolbar if no toolbar matches `toolbarId` or position
     */
    toolbarPosition: 'bottom',
    config: {
        /**
         * @cfg {Number} [totalCount=0]
         * total number of records in the grid store
         */
        totalCount: 0,
        /**
         * @cfg {Number} [visibleCount=0]
         * number of visible records in the grid store (useful when a filter is applied, otherwise same as totalCount)
         */
        visibleCount: 0,
        /**
         * @cfg {Number} [selectionCount=0]
         * number of selected records
         */
        selectionCount: 0,
        /**
         * @cfg {String} refreshTime
         * The last time the store was loaded or the grid data refreshed
         */
        refreshTime: '',
        /**
         * @cfg {Boolean} visible
         * `true` when the rowCount is viewable.  Changed on textLabel hide and show events
         */
        visible: false
    },
    /**
     * @cfg {String} [align="left"]
     * Position on the toolbar
     * Can be "left" or "right"
     */
    align: 'left',
    /**
     * @cfg {Number} updateBuffer
     * Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds.
     * If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place.
     */
    updateBuffer: 250,
    init: function(grid) {
        var me = this,
            configureStoreListeners = function(newStore, oldStore) {
                if (oldStore) {
                    grid.un({
                        scope: me,
                        uiupdate: me.onUpdatedUI,
                        statusupdated: me.updateDetails
                    });
                    oldStore.un({
                        scope: me,
                        load: me.onStoreLoad,
                        clear: me.updateDetails,
                        add: me.updateDetails,
                        remove: me.updateDetails
                    });
                }
                if (newStore) {
                    grid.on({
                        scope: me,
                        uiupdate: me.onUpdatedUI,
                        statusupdated: me.updateDetails
                    });
                    newStore.on({
                        scope: me,
                        load: me.onStoreLoad,
                        clear: me.updateDetails,
                        add: me.updateDetails,
                        remove: me.updateDetails
                    });
                }
            };
        me.grid = grid;
        me.rowName = me.rowName || grid.singleName || 'row';
        me.rowNamePlural = me.rowNamePlural || grid.pluralName || '';
        if (!Ext.isDefined(me.includeLoadTime)) {
            me.includeLoadTime = me.grid.includeLoadTime;
        }
        configureStoreListeners(grid.getStore());
        grid.on('reconfigure', function(myGrid, newStore, newColumns, oldStore, oldColumns, eOpts) {
            configureStoreListeners(newStore, oldStore);
        });
        if (grid.getView()) {
            grid.getView().on({
                scope: me,
                refresh: me.updateDetails
            });
        }
        if (grid.getSelectionModel()) {
            grid.getSelectionModel().on({
                scope: me,
                selectionchange: me.updateDetails
            });
        }
        // if multiple UI changes are made within the updateBuffer time, it will only actually update the UI on the last change
        me.updateRowCountLabel = Ext.Function.createBuffered(me.updateRowCountLabel, me.updateBuffer, me);
        me.updateSelectionCountLabel = Ext.Function.createBuffered(me.updateSelectionCountLabel, me.updateBuffer, me);
        me.updateRefreshTimeLabel = Ext.Function.createBuffered(me.updateRefreshTimeLabel, me.updateBuffer, me);
        grid.onRender = Ext.Function.createSequence(grid.onRender, me.onRender, me);
    },
    onRender: function() {
        var me = this;
        if (!me.grid.useStatusBar) {
            me.addItemsToToolbar();
        }
    },
    onStoreLoad: function() {
        var me = this;
        me.updateDetails();
        if (me.includeLoadTime) {
            me.setRefreshTime(new Date().toLocaleTimeString());
        }
    },
    onUpdatedUI: function() {
        var me = this;
        me.updateDetails();
        if (me.includeLoadTime) {
            me.setRefreshTime(new Date().toLocaleTimeString());
        }
    },
    getToolbar: function() {
        var me = this;
        me.toolbar = Ext.isDefined(me.toolbar) ? me.toolbar : me.grid.getMatchingToolbar(me.toolbarId, me.toolbarPosition);
        return me.toolbar;
    },
    addItemsToToolbar: function() {
        var me = this,
            itemArr = me.getItemsForToolbar(),
            insertLoc = me.insertLoc || 0,
            tb = me.getToolbar();
        for (var i = itemArr.length - 1; i >= 0; i--) {
            tb.insert(insertLoc, itemArr[i]);
        }
        return itemArr;
    },
    getRowCountLabel: function() {
        var me = this;
        me.rowCountLabel = Ext.isDefined(me.rowCountLabel) ? me.rowCountLabel : Ext.create('Ext.form.Label', {
            hidden: true
        });
        return me.rowCountLabel;
    },
    setVisiblitiyOfPrevSeparator: function(isVisible) {
        var me = this,
            tb = me.getToolbar(),
            rowCountIdx = tb.items.indexOf(me.getRowCountLabel()),
            prevItem = tb.items.getAt(rowCountIdx - 1);
        // if status has no text, it will hide the '-' that is to the right of the status msg
        if (prevItem && sl.utils.isTBSeparator(prevItem)) {
            prevItem.setVisible(isVisible);
        }
    },
    getSelectionCountSeparator: function() {
        var me = this;
        me.selectionCountSeparator = Ext.isDefined(me.selectionCountSeparator) ? me.selectionCountSeparator : Ext.create('Ext.toolbar.Separator', {
            hidden: true,
            cls: 'selectionCountSeparator'
        });
        return me.selectionCountSeparator;
    },
    getSelectionCountLabel: function() {
        var me = this;
        me.selectionCountLabel = Ext.isDefined(me.selectionCountLabel) ? me.selectionCountLabel : Ext.create('Ext.form.Label', {
            hidden: true,
            cls: me.selectedCountCls || me.defaultCls,
            listeners: {
                beforeshow: function() {
                    me.selectionCountSeparator.setVisible(true);
                },
                beforehide: function() {
                    me.selectionCountSeparator.setVisible(false);
                }
            }
        });
        return me.selectionCountLabel;
    },
    getRefreshTimeSeparator: function() {
        var me = this;
        me.refreshTimeSeparator = Ext.isDefined(me.refreshTimeSeparator) ? me.refreshTimeSeparator : Ext.create('Ext.toolbar.Separator', {
            hidden: true,
            cls: 'refreshTimeSeparator'
        });
        return me.refreshTimeSeparator;
    },
    getRefreshTimeLabel: function() {
        var me = this;
        me.refreshTimeLabel = Ext.isDefined(me.refreshTimeLabel) ? me.refreshTimeLabel : Ext.create('Ext.form.Label', {
            hidden: true,
            cls: me.refreshTimeCls || me.defaultCls,
            listeners: {
                beforeshow: function() {
                    me.refreshTimeSeparator.setVisible(true);
                },
                beforehide: function() {
                    me.refreshTimeSeparator.setVisible(false);
                }
            }
        });
        return me.refreshTimeLabel;
    },
    // builds ordered array of all items that will be added to toolbar
    getItemsForToolbar: function() {
        var me = this,
            itemArr = [];
        if (me.align === 'right') {
            itemArr.push({
                xtype: 'tbspacer',
                flex: 1
            });
        }
        itemArr.push(me.getRowCountLabel());
        itemArr.push(me.getSelectionCountSeparator());
        itemArr.push(me.getSelectionCountLabel());
        itemArr.push(me.getRefreshTimeSeparator());
        itemArr.push(me.getRefreshTimeLabel());
        return itemArr;
    },
    updateDetails: function() {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            selModel = grid.getSelectionModel(),
            cnt = store.getRecords(true).length,
            // all non-filtered records
            totalCnt = store.getRecords(false).length;
        // every record
        // totalCount: current number of **all** rows (includes filtered rows)
        me.setTotalCount(totalCnt);
        // visibleCount: current number of displayed rows (excludes filtered rows)
        me.setVisibleCount(cnt);
        // selectionCount: current number of selected rows
        if (selModel) {
            me.setSelectionCount(selModel.getSelection().length);
        }
    },
    updateTotalCount: function(newVal, oldVal) {
        var me = this;
        me.updateRowCountLabel();
    },
    updateVisibleCount: function(newVal, oldVal) {
        var me = this;
        me.updateRowCountLabel();
    },
    updateSelectionCount: function(newVal, oldVal) {
        var me = this;
        me.updateSelectionCountLabel();
    },
    updateRefreshTime: function(newVal, oldVal) {
        var me = this;
        me.updateRefreshTimeLabel();
    },
    /**
     * Sets the text in the selectionCountLabel.  The text changes when the selection row count changes
     * @return {Boolean} `true` if visible
     */
    updateSelectionCountLabel: function() {
        var me = this,
            scLabel = me.selectionCountLabel,
            selCountText = "",
            selectionCnt = me.getSelectionCount(),
            isVisible = false;
        if (scLabel) {
            if (scLabel.rendered) {
                if (!me.grid.hasListeners.beforeupdateselectioncountererlabel || me.grid.fireEvent('beforeupdateselectioncountererlabel', me) !== false) {
                    if (selectionCnt === 0) {
                        scLabel.hide();
                        scLabel.setText(selCountText);
                    } else {
                        selCountText = Ext.String.format((me.grid.getWidth() <= (me.widthForUsingMiniText || 0) ? me.selectedCountMsgMini : me.selectedCountMsg), selectionCnt);
                        scLabel.setText(selCountText);
                        scLabel.show();
                    }
                    me.grid.fireEvent('updateselectioncountererlabel', me, selCountText);
                }
                isVisible = !scLabel.isHidden();
                Ext.Component.updateLayout(me.getToolbar());
            } else {
                // if rowCount isn't rendered, wait until it is to set the color and style
                scLabel.on({
                    single: true,
                    delay: 250,
                    'afterrender': function() {
                        me.updateSelectionCountLabel();
                    }
                });
            }
        }
        return isVisible;
    },
    /**
     * Sets the text in the refreshTimeLabel.  The text changes when the latest load time of the grid's store changes
     * @return {Boolean} `true` if visible
     */
    updateRefreshTimeLabel: function() {
        var me = this,
            rtLabel = me.refreshTimeLabel,
            refreshTimeText = "",
            refreshTime = me.getRefreshTime(),
            isVisible = false;
        if (rtLabel) {
            if (rtLabel.rendered) {
                if (!me.grid.hasListeners.beforeupdaterefreshtimelabel || me.grid.fireEvent('beforeupdaterefreshtimelabel', me) !== false) {
                    if (Ext.isEmpty(refreshTime)) {
                        rtLabel.hide();
                        rtLabel.setText(refreshTimeText);
                    } else {
                        refreshTimeText = Ext.String.format(me.refreshTimeMsg, refreshTime);
                        rtLabel.setText(refreshTimeText);
                        rtLabel.show();
                    }
                    me.grid.fireEvent('updaterefreshtimelabel', me, refreshTimeText);
                }
                isVisible = !rtLabel.isHidden();
                Ext.Component.updateLayout(me.getToolbar());
            } else {
                // if rowCount isn't rendered, wait until it is to set the color and style
                rtLabel.on({
                    single: true,
                    delay: 250,
                    'afterrender': function() {
                        me.updateRefreshTimeLabel();
                    }
                });
            }
        }
        return isVisible;
    },
    /**
     * Sets the text in the rowCountLabel.  The text changes when the number of visible rows changes
     * @return {Boolean} `true` if visible
     */
    updateRowCountLabel: function() {
        var me = this,
            rcLabel = me.rowCountLabel,
            rowCountText = "",
            isVisible = false,
            grid = me.grid,
            totalCnt, visibleCnt, useHiddenRowsCountMsg, countAndRowName;
        if (rcLabel) {
            if (rcLabel.rendered) {
                if (!grid.hasListeners.beforeupdaterowcounterlabel || grid.fireEvent('beforeupdaterowcounterlabel', me) !== false) {
                    totalCnt = me.getTotalCount();
                    visibleCnt = me.getVisibleCount();
                    useHiddenRowsCountMsg = me.hasHiddenRows = (totalCnt !== visibleCnt);
                    countAndRowName = Ext.util.Format.plural(totalCnt, me.rowName, me.rowNamePlural);
                    if (totalCnt === 0) {
                        rcLabel.hide();
                    } else {
                        // show rows are filtered out
                        if (useHiddenRowsCountMsg) {
                            // 'Displaying 1 of 3 rows'
                            rowCountText = Ext.String.format((grid.getWidth() <= (me.widthForUsingMiniText || 0) ? me.hiddenRowsCountMsgMini : me.hiddenRowsCountMsg), visibleCnt, countAndRowName);
                            rcLabel.getEl().removeCls(me.rowCountCls);
                            rcLabel.getEl().removeCls(me.defaultCls);
                            rcLabel.getEl().addCls(me.hiddenRowsCls || me.defaultCls);
                        } else {
                            // "3 rows"
                            rowCountText = Ext.String.format(me.rowCountMsg, countAndRowName);
                            rcLabel.getEl().removeCls(me.hiddenRowsCls);
                            rcLabel.getEl().removeCls(me.defaultCls);
                            rcLabel.getEl().addCls(me.rowCountCls || me.defaultCls);
                        }
                        rcLabel.setText(rowCountText);
                        rcLabel.show();
                    }
                    grid.fireEvent('updaterowcounterlabel', me, rowCountText);
                }
                isVisible = !rcLabel.isHidden();
                Ext.Component.updateLayout(me.getToolbar());
            } else {
                // if rowCount isn't rendered, wait until it is to set the color and style
                rcLabel.on({
                    single: true,
                    delay: 250,
                    'afterrender': function() {
                        me.updateRowCountLabel();
                    }
                });
            }
        }
        return isVisible;
    },
    /**
     * Hides all labels
     */
    hide: function() {
        var me = this,
            itemArr = me.getItemsForToolbar();
        Ext.Array.forEach(itemArr, function(item, index, array) {
            item.hide();
        });
        me.hidden = true;
        return me;
    },
    /**
     * Shows the appropriate labels (if there is data)
     */
    show: function() {
        var me = this,
            isVisible = false;
        isVisible = me.updateRowCountLabel() || isVisible;
        isVisible = me.updateSelectionCountLabel() || isVisible;
        isVisible = me.updateRefreshTimeLabel() || isVisible;
        me.hidden = !isVisible;
        return me;
    }
});

/**
 * Buffering state provider that sends and receives state information to/from Cach√© server
 * @notArchitectComponent
 */
Ext.define('sl.state.CacheProvider', {
    extend: 'Ext.state.Provider',
    alias: 'state.cacheprovider',
    uses: [
        'sl.utils.Utilities'
    ],
    /**
     * @cfg {Boolean} [async=true]
     * Force the request to be syncronous by setting to false.
     */
    async: true,
    /**
     * @cfg {Boolean} [flushCache=false]
     * Indicates if the state data should be flushed before loading new records.
     * False indicates that new records returned from a read request will be appended to the cache.
     */
    flushCache: false,
    // localizable texts
    saveSuccessText: '[CacheProvider] Saved',
    saveFailureText: '[CacheProvider] Save Failure',
    readSuccessText: '[CacheProvider] Read',
    readFailureText: '[CacheProvider] Read Failure',
    deleteSuccessText: '[CacheProvider] Deleted',
    deleteFailureText: '[CacheProvider] Delete Failure',
    dataErrorText: 'Data Error',
    /**
     * @property {String} panelName
     * Text description for the panel that is provider is state-saving for
     */
    /**
     * @event readsuccess
     * Fires after state has been successfully received from server and restored
     * @param {sl.state.CacheProvider} cacheProvider
     */
    /**
     * @event readfailure
     * Fires in the case of an error when attempting to read state from server
     * @param {sl.state.CacheProvider} cacheProvider
     */
    /**
     * @event savesuccess
     * Fires after the state has been successfully saved to server
     * @param {sl.state.CacheProvider} cacheProvider
     */
    /**
     * @event savefailure
     * Fires in the case of an error when attempting to save state to the server
     * @param {sl.state.CacheProvider} cacheProvider
     */
    /**
     * @private
     */
    constructor: function(config) {
        var me = this,
            username = me.uid;
        if (Ext.isString(username)) {
            username = username.toLowerCase();
        }
        me.callParent(arguments);
        // paramNames
        Ext.apply(me, config, {
            // defaults
            delay: 750,
            // buffer changes for 750 ms
            dirty: false,
            started: false,
            autoStart: true,
            autoRead: true,
            user: 'user',
            id: 1,
            session: 'session',
            logFailure: false,
            logSuccess: false,
            queue: [],
            url: '.',
            readUrl: undefined,
            saveUrl: undefined,
            method: 'POST',
            saveBaseParams: {},
            readBaseParams: {},
            type: 'cache',
            paramNames: {
                id: 'ID',
                name: 'ObjectID',
                value: 'JSONState',
                data: 'records',
                defaultDesc: username ? (username + "'s initial view") : 'Initial View',
                defaultUser: 'Everyone',
                indexPrefix: 1
            }
        });
        if (me.autoRead) {
            me.readState();
        }
        me.dt = Ext.create('Ext.util.DelayedTask', me.submitState, me);
        if (me.autoStart) {
            me.start();
        }
    },
    /**
     * Initializes state from the passed state object or array.
     * This method can be called early during page load having the state Array/Object
     * retrieved from database by server.
     * @param {Array/Object} state State to initialize state manager with
     */
    initState: function(state) {
        var me = this;
        if (Ext.isArray(state)) {
            Ext.Array.forEach(state, function(myState, index, array) {
                me.state[myState[me.paramNames.name]] = Ext.decode(myState[me.paramNames.value]);
            });
        } else {
            me.state = (state ? state : {});
        }
    },
    /**
     * Sets the passed state variable name to the passed value and queues the change
     * @param {String} name Name of the state variable
     * @param {Mixed} value Value of the state variable
     * @param {String} [description] Optional name of the state so that it can be retrieved and used later
     */
    set: function(name, value, description) {
        if (!name) {
            return;
        }
        this.queueChange(name, value, description);
    },
    /**
     * Starts submitting state changes to server
     */
    start: function() {
        var me = this;
        me.dt.delay(me.delay);
        me.started = true;
    },
    /**
     * Stops submitting state changes
     */
    stop: function() {
        var me = this;
        me.dt.cancel();
        me.started = false;
    },
    /**
     * private, queues the state change if state has changed
     */
    queueChange: function(name, value, description) {
        var me = this,
            o = {},
            found = false,
            // see "Buffering Http State Provider" http://www.sencha.com/forum/showthread.php?24970-Buffering-Http-State-Provider/page22&p=344233
            // set oldValue to the Cach√© value in order to compare it to the latest version
            oldValue = me.state[name],
            changed, uprofile;
        description = description || me.paramNames.defaultDesc;
        // see if there already is a change in the queue for this object, and re-set oldValue if true
        Ext.Array.forEach(me.queue, function(queuedItem, index, array) {
            if (queuedItem.name === name) {
                oldValue = Ext.decode(Ext.decode(queuedItem).Properties[me.paramNames.value]);
            }
        });
        //http://www.sencha.com/forum/showthread.php?24970-Buffering-Http-State-Provider&p=581091&viewfull=1#post581091
        ///changed = undefined === oldValue || Ext.encode(oldValue) !== Ext.encode(value);
        changed = (Ext.isEmpty(oldValue) || undefined === oldValue || (oldValue !== value && Ext.encode(oldValue) !== Ext.encode(value)));
        // only allow new changes or named views to be saved
        if (changed || (description !== me.paramNames.defaultDesc)) {
            uprofile = me.getuprofile(description);
            o = {
                CacheClassName: 'App.State',
                Properties: {
                    uprofile: uprofile,
                    AppPath: me.AppPath,
                    ObjectID: name,
                    Description: description,
                    ID: me.getAppStateID(name, description, uprofile),
                    // this.paramNames.indexPrefix + "||" + uprofile + "||" + this.AppPath + "||" + name + "||" + description,
                    JSONState: Ext.encode(value)
                }
            };
            // don't allow duplicate entries to be queued for the same object
            Ext.Array.forEach(me.queue, function(queuedItem, index, array) {
                if (Ext.decode(queuedItem).Properties[me.paramNames.name] === name) {
                    queuedItem = Ext.encode(o);
                    found = true;
                }
            });
            if (false === found) {
                me.queue.push(Ext.encode(o));
            }
            me.dirty = true;
        }
        if (me.started) {
            me.start();
        }
        return changed;
    },
    // if description is the same as the default description, pass in the actual uprofile id; otherwise, use the default user info
    // if a state has a unique description, that view is being shared with everyone and not for private use.
    getuprofile: function(description) {
        var me = this;
        return (description === me.paramNames.defaultDesc) ? me.uprofile : me.paramNames.defaultUser;
    },
    getAppStateID: function(name, description, uprofile) {
        var me = this;
        uprofile = uprofile || me.getuprofile(description);
        return me.paramNames.indexPrefix + "||" + uprofile + "||" + me.AppPath + "||" + name + "||" + description;
    },
    /**
     * private, submits state to server by asynchronous Ajax request
     */
    submitState: function() {
        if (!this.dirty) {
            this.dt.delay(this.delay);
            return;
        }
        this.dt.cancel();
        Ext.Ajax.request({
            scope: this,
            url: '../Ext.JsonRequest.cls',
            timeout: 900000,
            success: this.onSaveSuccess,
            failure: this.onSaveFailure,
            params: {
                CacheClassName: 'JSON.Adapter',
                CacheMethodName: 'SaveObjects',
                CacheCommandType: 1,
                JSONObject: Ext.encode(this.queue)
            },
            callback: function(options, success, response) {
                this.fireEvent('save', this, options, success, response);
            }
        });
        // be optimistic
        this.dirty = false;
    },
    deleteState: function() {},
    // Ext.Ajax.request({
    //     url: '../Ext.JsonRequest.cls',
    //     scope: this,
    //     success: this.onDeleteSuccess,
    //     failure: this.onDeleteFailure,
    //     params: {
    //         CacheClassName: 'JSON.Adapter',
    //         CacheMethodName: 'DeleteObjects',
    //         CacheCommandType: 1,
    //         JSONObject: Ext.encode(this.queue)
    //         /*{
    //             'CacheClassName': cacheClassName,
    //             'Properties': idsToDelete
    //         }*/
    //     },
    //     callback: function(options, success, response) {
    //         this.fireEvent('delete', this, options, success, response);
    //     }
    // });
    // Ext.Ajax.request({
    //     scope: this,
    //     url: '../Ext.JsonRequest.cls',
    //     timeout: 900000,
    //     success: this.onSaveSuccess,
    //     failure: this.onSaveFailure,
    //     params: {
    //         CacheClassName: 'JSON.Adapter',
    //         CacheMethodName: 'SaveObjects',
    //         CacheCommandType: 1,
    //         JSONObject: Ext.encode(this.queue)
    //     },
    //     callback: function(options, success, response) {
    //         this.fireEvent('save', this, options, success, response);
    //     }
    // });
    /**
     * Reads saved state from server by sending asynchronous Ajax request and processing the response
     */
    readState: function() {
        var me = this;
        Ext.Ajax.request({
            scope: me,
            url: '../Ext.JsonRequest.cls',
            success: me.onReadSuccess,
            failure: me.onReadFailure,
            params: {
                CacheClassName: 'App.State',
                CacheQueryName: 'GetUserStateForApp',
                CacheCommandType: 2,
                ucorp: me.ucorp,
                udivision: me.udivision,
                uid: me.uid,
                uprocgroup: me.uprocgroup,
                uprofile: me.uprofile,
                AppPath: me.AppPath
            }
        });
    },
    /**
     * Clears the state variable
     * @param {String} name Name of the variable to clear
     */
    clear: function(name) {
        this.set(name, undefined);
    },
    /**
     * private, save success callback
     */
    onSaveSuccess: function(response, options) {
        var o = {};
        try {
            o = Ext.decode(response.responseText);
        } catch (e) {
            if (true === this.logFailure) {
                this.log(this.saveFailureText, e, response, options);
            }
            this.dirty = true;
            return;
        }
        if (true !== o.success) {
            if (true === this.logFailure) {
                this.log(this.saveFailureText, o, response, options);
            }
            this.dirty = true;
        } else {
            var savedQueue = Ext.decode(options.params.JSONObject) || [];
            Ext.each(savedQueue, function(savedItem) {
                if (!savedItem) {
                    return;
                }
                savedItem = Ext.decode(savedItem);
                var name = savedItem.Properties[this.paramNames.name];
                var value = savedItem.Properties[this.paramNames.value];
                if (Ext.isEmpty(value)) {
                    sl.state.CacheProvider.superclass.clear.call(this, name);
                } else {
                    // parent sets value and fires event
                    sl.state.CacheProvider.superclass.set.call(this, name, value);
                }
            }, this);
            // if it is no longer dirty, remove everything from the queue
            if (false === this.dirty) {
                this.queue = [];
            } else {
                var i, j, found;
                for (i = 0; i < savedQueue.length; i++) {
                    found = false;
                    var savedItem = savedQueue[i],
                        unsavedItem;
                    for (j = 0; j < this.queue.length; j++) {
                        unsavedItem = this.queue[i];
                        // will only remove an item from this.queue if it finds a match
                        Ext.Array.remove(this.queue, savedItem);
                    }
                }
            }
            if (true === this.logSuccess) {
                var description;
                try {
                    description = ' "' + Ext.decode(savedQueue[0]).Properties.Description + '"' + (this.panelName ? ' in "' + this.panelName + '"' : '');
                } catch (e) {
                    description = ' "' + this.panelName || '';
                }
                sl.utils.consoleLogWithTrace(this.saveSuccessText + description, {
                    o: o,
                    response: response,
                    options: options
                });
            }
            this.fireEvent('savesuccess', this, response, options);
        }
    },
    /**
     * private, save failure callback
     */
    onSaveFailure: function(response, options) {
        if (true === this.logFailure) {
            var description = ': "' + this.panelName + '"';
            console.error(this.saveFailureText + description, {
                response: response,
                options: options
            });
        }
        this.dirty = true;
        this.fireEvent('savefailure', this);
    },
    /**
     * private, delete failure callback
     */
    onDeleteFailure: function(response, options) {
        if (true === this.logFailure) {
            this.log(this.deleteFailureText, response);
        }
        this.fireEvent('deletefailure', this);
    },
    onDeleteSuccess: function(response, options) {
        var o = {};
        // data;
        try {
            o = Ext.decode(response.responseText);
        } catch (e) {
            if (true === this.logFailure) {
                this.log(this.deleteFailureText, e, response, options);
            }
            return;
        }
        if (true !== o.success) {
            if (true === this.logFailure) {
                this.log(this.deleteFailureText, o, response, options);
            }
        } else {
            var queue = Ext.decode(options.params.JSONObject) || [];
            Ext.each(queue, function(item) {
                if (!item) {
                    return;
                }
                item = Ext.decode(item);
                var name = item.Properties[this.paramNames.name];
                // var value = item.Properties[this.paramNames.value];
                sl.state.CacheProvider.superclass.clear.call(this, name);
            }, // if (undefined === value || null === value) {
            //     sl.state.CacheProvider.superclass.clear.call(this, name);
            // } else {
            //     // parent sets value and fires event
            //     sl.state.CacheProvider.superclass.set.call(this, name, value);
            // }
            this);
            if (false === this.dirty) {
                this.queue = [];
            } else {
                var i, j, found;
                for (i = 0; i < queue.length; i++) {
                    found = false;
                    for (j = 0; j < this.queue.length; j++) {
                        if (queue[i].name === this.queue[j].name) {
                            found = true;
                            break;
                        }
                    }
                    if (true === found && Ext.encode(queue[i].value) === Ext.encode(this.queue[j].value)) {
                        this.queue.remove(this.queue[j]);
                    }
                }
            }
            if (true === this.logSuccess) {
                this.log(this.deleteSuccessText, o, response, options);
            }
            this.fireEvent('deletesuccess', this, response, options);
        }
    },
    /**
     * private, read state callback
     */
    onReadFailure: function(response, options) {
        if (true === this.logFailure) {
            this.log(this.readFailureText, response);
        }
        this.fireEvent('readfailure', this);
    },
    /**
     * private, read success callback
     */
    onReadSuccess: function(response, options) {
        var o = {},
            data;
        try {
            o = Ext.decode(response.responseText);
        } catch (e) {
            if (true === this.logFailure) {
                this.log(this.readFailureText, e, response);
            }
            return;
        }
        if (true !== o.success) {
            if (true === this.logFailure) {
                this.log(this.readFailureText, o, response);
            }
        } else {
            data = o[this.paramNames.data];
            if (!(data instanceof Array) && true === this.logFailure) {
                this.log(this.dataErrorText, data, response);
                return;
            }
            //flush cache if not appending
            if (this.flushCache) {
                this.state = {};
            }
            // var initState = [], item;
            Ext.each(data, function(item) {
                this.state[item[this.paramNames.name]] = Ext.decode(item[this.paramNames.value]);
            }, this);
            Ext.state.Manager.getProvider().initState(data);
            this.queue = [];
            this.dirty = false;
            if (true === this.logSuccess) {
                this.log(this.readSuccessText, data, response);
            }
            this.fireEvent('readsuccess', this);
        }
    },
    /**
     * private, logs errors or successes
     */
    log: function() {
        sl.utils.consoleLogWithTrace.apply(this, arguments);
    }
});

/**
 * @class sl.panel.grid.plugin.GridStateViewPanel
 * search & buttons to manage an object's state with Cach√©
 */
Ext.define('sl.panel.grid.plugin.GridStateViewPanel', {
    extend: 'Ext.util.Observable',
    alias: 'plugin.gridstateviewpanel',
    requires: [
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.form.field.ComboBox',
        'Ext.state.LocalStorageProvider',
        'Ext.state.Manager',
        'Ext.toolbar.Spacer',
        'Ext.util.DelayedTask',
        'sl.state.CacheProvider'
    ],
    uses: [
        'sl.utils.Toast',
        'sl.data.CacheStore'
    ],
    /**
     * @cfg {String} [providerType='local']
     * Set to 'local' to use the localstorage provider via the HTML5 localStorage
     * Set to 'cache' to use cache db to store grid state information.
     * If set to anything else, will use Ext.state.Manager.getProvider()
     */
    providerType: 'local',
    /**
     * @cfg {Boolean} [displayAsButton=true]
     * Set false to disable condensing all view options into a button with menu
     */
    displayAsButton: true,
    /**
     * @cfg {String} [buttonText='Saved Views']
     * String that is displayed on toolbar's viewpanel button
     */
    buttonText: 'Saved Views',
    /**
     * @cfg {Boolean} [includeViewPanel=true]
     * Set false to disable any state components in toolbar
     */
    includeViewPanel: true,
    /**
     * @cfg {String} toolbarId
     * id of Toolbar to put view panel on
     * Will create new toolbar if no toolbar matches `toolbarId` or `toolbarPosition`
     */
    /**
     * @cfg {String} [toolbarPosition='bottom']
     * Where to display the view panel. Valid values are `top` and `bottom`
     * Will create new toolbar if no toolbar matches `toolbarId` or `toolbarPosition`
     */
    toolbarPosition: 'bottom',
    /**
     * @cfg {String} [align='right']
     * "left" or "right"
     */
    align: 'right',
    /*
     * Function is ideally called before the grid has rendered so that the initial column config can be saved before a loaded state is applied
     *
     * Grid knows it's stateful, so it will have to:
     * - save intial col model
     * - when grid is rendered, render view panel in toolbar
     * - set up cache provider if it has not already been defined or if state manager is using different provider (cookie)
     * - apply grid's state (may have to wait for it to be loaded)
     */
    init: function(grid) {
        var me = this;
        me.grid = grid;
        Ext.state.Manager.setProvider(me.getProvider(me.providerType));
        me.saveInitialGridColumnLayout();
        grid.onRender = Ext.Function.createSequence(grid.onRender, me.onRender, me);
    },
    onRender: function() {
        var me = this,
            provider = me.getProvider();
        if (me.includeViewPanel) {
            me.createViewPanel();
            // if the default status bar is not being used by the grid, then add all view panel components
            if (!me.grid.useStatusBar) {
                me.addItemsToToolbar();
            }
        }
        if (provider.loadedAppStates === true || provider.type === 'local') {
            me.applyGridState();
        } else {
            // once the app's states have been loaded, apply state to grid
            provider.on('loadedappstates', function() {
                me.applyGridState();
            }, me, {
                single: true
            });
        }
    },
    // save columns configuration from the grid's js file, so that we can retrieve an unaltered version
    // must save it before grid is rendered. once it is rendered, it will have already used the saved state to change the column layout
    saveInitialGridColumnLayout: function() {
        var me = this,
            myGrid = me.grid,
            colArrToEncode, colArr;
        if (!myGrid._initialColumnLayout) {
            colArrToEncode = [];
            // colArr = myGrid.getColumns(false, true) || [];
            colArr = myGrid.columns;
            // Commented out because could not handle groups
            colArrToEncode = me.getCurrentStateOfColumnsArray(colArr);
            // encode so that column configs cannot be changed (extjs matches on IDs in some areas, so it'll auto-change them.  as a string, it won't touch them)
            myGrid._initialColumnLayout = Ext.encode(colArrToEncode);
        }
    },
    /**
     * returns an array, where each element is an object of each column's essential properties whose state can be saved
     * Saved Column States:
     *  - flex
     *  - width
     *  - locked
     *  - hidden
     */
    getCurrentStateOfColumnsArray: function(columns) {
        var me = this,
            grid = me.grid,
            returnColArr = [],
            colObj, stateName;
        columns = Ext.isDefined(columns) ? columns : grid.getColumns(false, true);
        Ext.Array.forEach(columns, function(c, index, array) {
            var assignedStateId = c.getStateId();
            // if column id is the # location in the colModel config array, change the column id to its dataIndex
            if (Ext.isNumber(c.getId())) {
                c.setId(c.dataIndex);
            }
            // convert `stateId` to something more useful if it was undefined or position based (h1,h2)
            if ((Ext.isEmpty(assignedStateId)) || (Ext.isString(assignedStateId) && (assignedStateId.substring(0, 1) === 'h' && Ext.isNumeric(assignedStateId.substring(1))) || (assignedStateId.split('-')[0] === 'header' && Ext.isNumeric(assignedStateId.split('-')[1])))) {
                stateName = Ext.valueFrom(Ext.valueFrom(grid.getDefaultTitle(), grid.getTitle()), grid.getId());
                if (c.isGroupHeader || c.columns) {
                    stateName += ' Grouped';
                    Ext.Array.forEach(c.items.items, function(subCol, index, array) {
                        stateName += '~' + subCol.dataIndex;
                    });
                } else {
                    stateName += c.dataIndex;
                }
                c.stateId = sl.utils.stripNonAlphanumericChars(stateName, true);
            }
            colObj = {
                id: String(c.getStateId() || c.getId()).substr(0, 75),
                isGroupHeader: c.isGroupHeader,
                columns: c.isGroupHeader ? me.getCurrentStateOfColumnsArray(c.items.items) : undefined,
                dataIndex: c.dataIndex,
                flex: c.flex,
                width: c.width,
                locked: c.locked,
                hidden: c.hidden ? true : false
            };
            // delete object properties that don't have any value
            // we only want to save the useful information
            Ext.Object.each(colObj, function(key, value, myself) {
                if (Ext.isEmpty(value)) {
                    delete colObj[key];
                }
            });
            returnColArr.push(colObj);
        });
        return returnColArr;
    },
    // Returns the Ext.state.Provider that is tracking states
    getProvider: function(providerType) {
        var me = this,
            provider;
        providerType = Ext.isString(providerType) ? providerType : me.providerType;
        if (providerType === 'cache') {
            provider = me.getCacheProvider();
        } else if (providerType === 'local') {
            provider = me.getLocalProvider();
        } else {
            provider = Ext.state.Manager.getProvider();
        }
        if (!provider) {
            console.error('[' + me.$className + '] Provider not Defined', {
                gsvp: me,
                providerType: providerType
            });
        }
        return provider;
    },
    // returns the active local provider from Ext.state.Manager, or creates & activates a new one if not defined
    getLocalProvider: function(path) {
        var me = this,
            provider = Ext.state.Manager.getProvider();
        if (Ext.isEmpty(provider) || ((provider.alias || []).indexOf('state.localstorage') < 0) && (provider.type !== 'local')) {
            provider = me.createLocalProvider(path);
        }
        if (provider) {
            provider.type = 'local';
        }
        return provider;
    },
    // returns the active Cach√© provider from Ext.state.Manager, or creates & activates a new one if not defined
    getCacheProvider: function(path) {
        var me = this,
            provider = Ext.state.Manager.getProvider();
        if (Ext.isEmpty(provider) || provider.type !== 'cache') {
            provider = me.createCacheProvider(path);
        }
        return provider;
    },
    // creates & activates a new local storage provider
    createLocalProvider: function(path) {
        var lp = Ext.create('Ext.state.LocalStorageProvider', {
                type: 'local'
            });
        Ext.state.Manager.setProvider(lp);
        return lp;
    },
    // programmer can define an app path for places like portlets, where they're opening under a different app's URL
    // otherwise, path is based on URL
    createCacheProvider: function(path) {
        var me = this,
            grid = me.grid,
            queryString = Ext.Object.fromQueryString(window.location.search.substring(1)),
            cacheProvider, pathArr;
        // programmer can define an app path for places like portlets, where they're opening under a different app's URL
        if (Ext.isEmpty(path)) {
            pathArr = window.location.pathname.split('/');
            // trim path to just to folder & filename (e.g. inventory/itempricechange.csp)
            if (pathArr.length >= 2) {
                path = pathArr[pathArr.length - 2] + '/' + pathArr[pathArr.length - 1];
            } else {
                console.error('[' + me.$className + '] Required "Application Path" not defined', {
                    path: path,
                    pathArr: pathArr
                });
            }
        }
        cacheProvider = Ext.create('sl.state.CacheProvider', {
            autoRead: false,
            uprofile: queryString.uprofile,
            uid: queryString.uid,
            AppPath: path,
            loadedAppStates: 'inprogress',
            panelName: grid.defaultTitle || grid.title || grid.getItemId(),
            logSuccess: !Ext.isEmpty(queryString.debug),
            logFailure: true
        });
        me.initCacheProvider(cacheProvider);
        return cacheProvider;
    },
    // loads and applies the active state profile
    initCacheProvider: function(cacheProvider) {
        var me = this;
        Ext.state.Manager.setProvider(cacheProvider);
        // Load a User's States for all component in this application (AppPath)
        Ext.Ajax.request({
            scope: me,
            url: '../Ext.JsonRequest.cls',
            params: {
                CacheClassName: 'App.State',
                CacheMethodName: 'BuildAppStatesForUser',
                CacheCommandType: 1,
                uprofile: cacheProvider.uprofile,
                AppPath: cacheProvider.AppPath
            },
            callback: function(options, success, response) {
                var r = Ext.decode(response.responseText),
                    state;
                if (r.result) {
                    state = Ext.decode(r.result);
                    // defines cacheProvider.states from state.records
                    cacheProvider.initState(state.records);
                    cacheProvider.loadedAppStates = true;
                    sl.MsgQ.subscribe(cacheProvider, 'FullScreen-Close', {
                        fn: function() {
                            cacheProvider.loadedAppStates = false;
                            Ext.state.Manager.setProvider();
                        },
                        scope: cacheProvider
                    });
                    cacheProvider.fireEvent('loadedappstates', cacheProvider, state.records);
                }
            }
        });
    },
    /**
     * Applies the passed in state to the grid
     * @param {Object} state The new column configs to apply to the grid
     * @param {String} rawValueText text that will show up in the savedViewsCombo field
     * @param {Boolean} showToast whether a popup message should show up announcing the change
     */
    applyGridState: function(state, rawValueText, showToast) {
        var me = this,
            myGrid = me.grid,
            savedViewsCombo = myGrid.down('combo#savedViewsCombo'),
            provider = me.getProvider(),
            name = myGrid.getStateId();
        rawValueText = rawValueText || (showToast ? provider.paramNames.defaultDesc : undefined);
        state = state || provider.state[myGrid.getStateId()] || {
            columns: Ext.decode(myGrid._initialColumnLayout)
        };
        if (Ext.isEmpty(state)) {
            Ext.Msg.alert("Error", provider.paramNames.defaultDesc + " Columns Config Not Defined.  Needs to be defined before grid is rendered");
            console.error('[' + me.$className + '] Column Config Not Defined. Needs to be defined before grid is rendered', {
                gsvp: me,
                state: state,
                rawValueText: rawValueText,
                showToast: showToast
            });
        } else {
            myGrid.suspendLayout = true;
            myGrid.applyState(state);
            if (!sl.utils.IsObjEmpty(myGrid.filters) && Ext.isFunction(myGrid.filters.applyState)) {
                myGrid.filters.applyState(myGrid, state);
            }
            if (showToast) {
                sl.utils.Toast.showToast('View Refreshed', 'The <b>' + rawValueText + '</b> View has been applied.', 3000, 'b');
            }
            me.getProvider().set(name, state);
            myGrid.suspendLayout = false;
            myGrid.updateLayout();
            if (rawValueText) {
                if (Ext.isObject(myGrid.viewPanel)) {
                    savedViewsCombo.setRawValue(rawValueText);
                    if (!me.displayAsButton) {
                        savedViewsCombo.focus(false, true);
                    }
                } else {
                    myGrid.on('viewpanelcreated', function() {
                        savedViewsCombo.setRawValue(rawValueText);
                    }, me, {
                        single: true
                    });
                }
            }
        }
    },
    // creates a view panel for a stateful grid that can contain a saved views combo, save button, and reset button
    // calling this function should be enough to completely set up a state manager for a grid
    // this function should be called before a grid is rendered
    createViewPanel: function() {
        var me = this,
            myGrid = me.grid,
            provider = me.getProvider(),
            resetColumnsCfg = {
                iconCls: 'TableRefreshButton',
                icon: '/resources/icons/fam/table_refresh.png',
                text: 'Reset Columns',
                // tooltip: 'Reset all Column Sizes and Sorting Preferences to Initial Configuration',
                tooltip: '<h4>Resets the following Column Configurations:</h4><ul><li>Width</li><li>Order</li><li>Sorting</li></ul>',
                listeners: {
                    scope: me,
                    click: me.resetColumnsButton_click
                }
            },
            saveViewButtonCfg, deleteViewButtonCfg, savedViewsComboCfg, viewLabelCfg;
        me.viewPanel = {
            align: me.align,
            grid: myGrid
        };
        // local storage only saves 1 version, so no need for cumbersome save/new/delete config
        if (provider.type === 'local' || me.providerType === 'local') {
            me.viewPanel = Ext.apply({
                resetColumnsButton: resetColumnsCfg
            }, me.viewPanel);
        }
        // allow user to manually name-and-save a view, or pick/delete a saved view
        else if (provider.type === 'cache' || me.providerType === 'cache') {
            saveViewButtonCfg = {
                iconCls: 'TableSaveButton',
                icon: '/resources/icons/fam/table_save.png',
                text: me.displayAsButton ? 'Save Current View' : 'Save View',
                tooltip: me.displayAsButton ? '' : 'Save Current View',
                listeners: {
                    scope: me,
                    click: me.saveViewButton_click
                }
            };
            deleteViewButtonCfg = {
                iconCls: 'TableDeleteButton',
                icon: '/resources/icons/fam/table_delete.png',
                text: me.displayAsButton ? 'Delete Current View' : 'Delete View',
                tooltip: me.displayAsButton ? '' : 'Delete Current View',
                listeners: {
                    scope: me,
                    click: me.deleteViewButton_click
                }
            };
            savedViewsComboCfg = {
                xtype: 'combo',
                width: 250,
                valueField: 'ID',
                displayField: 'Description',
                minChars: 0,
                itemId: 'savedViewsCombo',
                // starting search text
                value: ((provider || {}).paramNames || {}).defaultDesc,
                store: Ext.create('sl.data.CacheStore', {
                    autoLoad: true,
                    proxy: {
                        extraParams: {
                            CacheClassName: 'App.State',
                            CacheQueryName: 'GetObjectState',
                            CacheCommandType: 2,
                            uprofile: provider.uprofile,
                            AppPath: provider.AppPath,
                            ObjectID: myGrid.getStateId()
                        }
                    },
                    fields: [
                        'ID',
                        'Description',
                        'JSONState'
                    ]
                }),
                listeners: {
                    scope: me,
                    // when a view is selected, apply that view to the grid
                    select: me.savedViewsCombo_select
                }
            };
            viewLabelCfg = {
                xtype: 'label',
                html: '<b>View: </b>'
            };
            me.viewPanel = Ext.apply({
                displayAsButton: me.displayAsButton,
                saveViewButton: saveViewButtonCfg,
                deleteViewButton: deleteViewButtonCfg,
                resetColumnsButton: resetColumnsCfg,
                savedViewsCombo: savedViewsComboCfg,
                viewLabel: viewLabelCfg
            }, me.viewPanel);
            if (me.displayAsButton) {
                me.viewPanel.viewButton = Ext.create('Ext.Button', {
                    icon: '/resources/icons/fam/table.png',
                    text: me.buttonText,
                    menu: [
                        me.viewPanel.saveViewButton,
                        me.viewPanel.deleteViewButton,
                        '-',
                        me.viewPanel.resetColumnsButton,
                        '-',
                        me.viewPanel.savedViewsCombo
                    ]
                });
            }
        }
        myGrid.viewPanel = me.viewPanel;
        myGrid.fireEvent('viewpanelcreated', me.viewPanel);
        return me.viewPanel;
    },
    // adds view panel components to toolbar
    addItemsToToolbar: function() {
        var me = this,
            itemArr = me.getItemsForToolbar(),
            insertLoc = insertLoc || me.viewPanel.insertLoc || 0,
            tb = me.toolbar = me.grid.getMatchingToolbar(me.toolbarId, me.toolbarPosition);
        for (var i = itemArr.length - 1; i >= 0; i--) {
            tb.insert(insertLoc, itemArr[i]);
        }
        return itemArr;
    },
    // builds ordered array of all items that will be added to toolbar
    getItemsForToolbar: function() {
        var viewPanel = this.viewPanel,
            itemArr = [],
            align = viewPanel.align || 'right';
        if (align === 'right') {
            itemArr.push({
                xtype: 'tbspacer',
                flex: 1
            });
        }
        if (viewPanel.displayAsButton) {
            itemArr.push(viewPanel.viewButton);
        } else {
            // Toolbar's look: [ <b>View</b>: view-search____[o][x], save, delete, refresh |...         ]
            itemArr.push(viewPanel.viewLabel);
            itemArr.push(viewPanel.savedViewsCombo);
            itemArr.push(viewPanel.saveViewButton);
            itemArr.push(viewPanel.deleteViewButton);
            itemArr.push(viewPanel.resetColumnsButton);
        }
        // itemArr.push(viewPanel.viewDiv);
        return itemArr;
    },
    // when a view is selected, apply that view to the grid
    savedViewsCombo_select: function(savedViewsCombo, record) {
        var gsvp = this,
            myGrid = gsvp.grid,
            description, jsonState, state;
        if (record) {
            description = record.get("Description");
            jsonState = record.get("JSONState");
            state = Ext.decode(jsonState);
            myGrid.mask("Updating View...", 'x-mask-loading');
            new Ext.util.DelayedTask(function() {
                gsvp.applyGridState(state, description, true);
                myGrid.unmask();
            }).delay(100);
        }
    },
    // will revert back to the original column config that was saved before the grid was rendered
    resetColumnsButton_click: function() {
        var gsvp = this,
            myGrid = gsvp.grid,
            myProvider = gsvp.getProvider(),
            state, rawValueText, colState;
        myGrid.mask("Updating View...", 'x-mask-loading');
        // remove any sorters
        gsvp.grid.getStore().sorters.clear();
        Ext.Array.forEach(gsvp.grid.getColumns(false, false), function(col, index, array) {
            // unset the sortstate and dont recurse
            col.setSortState(null, true);
        });
        new Ext.util.DelayedTask(function() {
            colState = Ext.decode(myGrid._initialColumnLayout);
            state = myProvider.state[myGrid.getStateId()] = {
                'columns': colState
            };
            rawValueText = myProvider.type === 'cache' ? myProvider.paramNames.defaultDesc : undefined;
            gsvp.applyGridState(state, rawValueText, !Ext.isEmpty(rawValueText));
            myGrid.unmask();
        }).delay(25);
    },
    // save the view using a user-generated description
    // once saved, the grid's view will be publicly available to everyone, not just the user that saved it
    saveViewButton_click: function() {
        var gsvp = this,
            myGrid = gsvp.grid,
            myProvider = gsvp.getProvider(),
            name = myGrid.getStateId(),
            value = myGrid.getState(),
            rawValueText = '',
            savedViewsCombo = myGrid.down('combo#savedViewsCombo');
        if ((savedViewsCombo.getRawValue() !== myProvider.paramNames.defaultDesc) && //
        (savedViewsCombo.getValue() !== myProvider.paramNames.defaultDesc)) {
            rawValueText = savedViewsCombo.getRawValue();
        }
        Ext.Msg.prompt('Name your Public View', 'Please enter a <b>Description</b> for your view:', function(btn, text) {
            if (btn === 'ok') {
                // when the state saves, set the savedViewsCombo's value to the state's ID
                // show toast message confirming successful save
                myProvider.on('save', function(myProvider, options, success, response) {
                    if (success) {
                        var r = Ext.decode(response.responseText),
                            toastMsg = '',
                            paramObj = {},
                            txt, id, jsonObj, json0;
                        if (r.result && options.params) {
                            jsonObj = Ext.decode(options.params.JSONObject);
                            if (Ext.isArray(jsonObj) && jsonObj.length > 0) {
                                json0 = Ext.decode(jsonObj[0]);
                                if (json0 && json0.Properties) {
                                    txt = json0.Properties.Description;
                                    id = json0.Properties.ID;
                                }
                            }
                        }
                        if (txt) {
                            toastMsg = '<b>' + txt + '</b> ';
                        }
                        paramObj[savedViewsCombo.getStore().getIDProperty()] = id;
                        savedViewsCombo.getStore().load({
                            scope: gsvp,
                            params: paramObj,
                            callback: function() {
                                savedViewsCombo.suspendEvent('select');
                                savedViewsCombo.setValue(id);
                                savedViewsCombo.resumeEvent('select');
                                savedViewsCombo.focus(false, true);
                            }
                        });
                        sl.utils.Toast.showToast('Save Success', 'The custom ' + toastMsg + 'View was Saved.', 3000);
                    }
                }, this, {
                    single: true
                });
                // the provider will save the column configs, which will trigger the savesuccess event above
                myProvider.set(name, value, text);
            }
        }, this, false, rawValueText);
    },
    // delete the current view
    deleteViewButton_click: function() {
        Ext.Msg.alert('Delete not configured yet...');
    }
});
// var myGrid = this.grid,
//     store = myGrid.getStore(),
//     name = myGrid.getStateId(),
//     value = myGrid.getState(),
//     savedViewsCombo = myGrid.down('combo#savedViewsCombo'),
//     rawValueText = '';
// Ext.Ajax.request({
//     url: '../Ext.JsonRequest.cls',
//     scope: store,
//     params: {
//         CacheClassName: 'JSON.Adapter',
//         CacheMethodName: 'DeleteObjects',
//         CacheCommandType: 1,
//         JSONObject: Ext.encode({
//             'CacheClassName': 'App.State',
//             'Properties': value
//         })
//     },
//     callback: function (options, success, response) {
//         // store.deleteCallback(options, success, response, recordsWithId, newRecords);
//         console.log('delete');
//     }
// });

/**
 * @class sl.panel.grid.plugin.GridStatusBar
 */
Ext.define("sl.panel.grid.plugin.GridStatusBar", {
    extend: 'sl.panel.StatusBar',
    alias: [
        'widget.slgridstatusbar',
        'widget.gridstatusbar'
    ],
    uses: [
        'sl.utils.Utilities'
    ],
    /**
     * @cfg {Ext.grid.Panel} grid (required)
     * The {@link Ext.grid.Panel} to bind this GridStatusBar to.
     */
    grid: undefined,
    initComponent: function() {
        var gsb = this;
        gsb.grid = (gsb.grid || gsb.initOwnerCt || gsb.up('grid[isLocked=undefined]') || gsb.up('treepanel[isLocked=undefined]') || gsb.up('panel[isLocked=undefined]'));
        if (gsb.grid && gsb.grid.getStore()) {
            gsb.grid.getStore().on({
                scope: gsb,
                priority: -1,
                // update gsb after gridvalidationstatus listens to events
                'clear': function() {
                    gsb.showValid();
                },
                'saving': function() {
                    gsb.showSaving();
                },
                'save': function(store) {
                    var errorRecords = store.getUnsavedRecords() || [],
                        savedRecords = store.getLastSavedRecords() || [];
                    if (errorRecords.length === 0) {
                        // gsb.showSaved();
                        gsb.showValid(savedRecords.length + ' Saved');
                    } else if (gsb.status !== 'error') {
                        if (Ext.isDefined(gsb.validationStatus)) {
                            // show error in status bar
                            if (!gsb.validationStatus.updateStatusText()) {
                                gsb.showError();
                            }
                        }
                    }
                },
                'delete': function(store) {
                    var errorRecords = store.getNotDeletedRecords() || [],
                        deletedRecords = store.getDeletedRecords() || [];
                    if (errorRecords.length === 0) {
                        gsb.showValid(deletedRecords.length + ' Deleted');
                    } else if (gsb.status !== 'error') {
                        if (Ext.isDefined(gsb.validationStatus)) {
                            // show error in status bar
                            if (!gsb.validationStatus.updateStatusText()) {
                                gsb.showError();
                            }
                        }
                    }
                }
            });
        } else {
            sl.utils.consoleWarningWithTrace('Grid and/or Store are not configured correctly', {
                statusbar: gsb,
                grid: gsb.grid,
                store: gsb.grid ? gsb.grid.getStore() : undefined
            });
        }
        gsb.on({
            'statusupdated': function(sb, o) {
                // rowcounter will update on this event
                sb.grid.fireEvent('statusupdated', sb.grid, sb, o);
            }
        });
        gsb.callParent();
    }
});

/**
 * @class sl.panel.grid.plugin.GridValidationStatus
 * @notArchitectComponent
 * A {@link Ext.ux.statusbar.StatusBar} plugin that provides automatic error
 * notification when the associated grid contains validation errors.
 */
Ext.define('sl.panel.grid.plugin.GridValidationStatus', {
    extend: 'Ext.ux.statusbar.ValidationStatus',
    alias: 'plugin.gridvalidationstatus',
    requires: [
        'sl.panel.grid.plugin.GridStatusBar'
    ],
    /**
     * @cfg {String} errorIconCls
     * The {@link Ext.ux.statusbar.StatusBar#iconCls iconCls} value to be applied
     * to the status message when there is a validation error.
     */
    errorIconCls: 'x-status-error',
    /**
     * @cfg {String} errorListCls
     * The css class to be used for the error list when there are validation errors.
     */
    errorListCls: 'x-status-error-list',
    /**
     * @cfg {String} validIconCls
     * The {@link Ext.ux.statusbar.StatusBar#iconCls iconCls} value to be applied
     * to the status message when the form validates.
     */
    validIconCls: 'x-status-valid',
    /**
     * @cfg {String} showText
     * The {@link Ext.ux.statusbar.StatusBar#text text} value to be applied when
     * there is a form validation error.
     */
    showText: '{0} Error{1} (click for details)',
    /**
     * @cfg {String} showTextMini
     * Condensed version of {@link #showText} to be used instead only when
     * the grid's width is less than {@link #widthForUsingMiniText}
     */
    showTextMini: '{0} Error{1}',
    /**
     * @cfg {String} hideText
     * The {@link Ext.ux.statusbar.StatusBar#text text} value to display when
     * the error list is displayed.
     */
    hideText: 'Click again to hide the error list',
    /**
     * @cfg {String} hideTextMini
     * Condensed version of {@link #hideText} to be used instead only when
     * the grid's width is less than {@link #widthForUsingMiniText}
     */
    hideTextMini: 'Click to hide',
    /**
     * @cfg {Number} widthForUsingMiniText
     * If the grid's width is less than this number, it will use {@link #showTextMini} and {@link #hideTextMini}
     */
    widthForUsingMiniText: 500,
    /**
     * @cfg {String} submitText
     * The {@link Ext.ux.statusbar.StatusBar#text text} value to be applied when
     * the form is being submitted.
     */
    submitText: 'Saving...',
    /**
     * @cfg {Number} maxErrorCount
     * The most number of errors to show in the error list
     */
    maxErrorCount: 30,
    /**
     * @cfg {Number} updateBuffer
     * Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds.
     * If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place.
     */
    updateBuffer: 500,
    // private
    init: function(sb) {
        var me = this;
        me.statusBar = sb;
        me.statusBar.validationStatus = me;
        me.statusBar.hasValidation = true;
        me.updateStatusText = Ext.Function.createBuffered(me.updateStatusText, me.updateBuffer, me);
        sb.on({
            single: true,
            scope: me,
            render: me.onStatusbarRender,
            beforedestroy: me.destroy
        });
        sb.statusMsg.on({
            dblclick: {
                element: 'el',
                fn: me.onStatusDblClick,
                scope: me,
                buffer: 100
            },
            click: {
                element: 'el',
                fn: me.onStatusClick,
                scope: me,
                buffer: 100
            }
        });
    },
    onStatusbarRender: function(sb) {
        var me = this,
            configureStoreListeners = function(newStore, oldStore) {
                if (newStore) {
                    if (oldStore) {
                        me.stopMonitoring();
                        me.stopMonitoringStore(oldStore);
                    }
                    newStore.errorHash = Ext.create('Ext.util.HashMap');
                    if (newStore.isRecordChangeValidated) {
                        me.startMonitoring();
                        me.startMonitoringStore(newStore);
                    }
                }
            };
        me.errors = Ext.create('Ext.util.MixedCollection');
        me.listAlign = (sb.statusAlign === 'right' ? 'br-tr?' : 'bl-tl?');
        me.grid = (me.grid || sb.ownerCt || sb.up('grid[isLocked=undefined]') || sb.up('treepanel[isLocked=undefined]') || sb.up('panel[isLocked=undefined]'));
        if (me.grid) {
            configureStoreListeners(me.grid.getStore());
            me.grid.on('reconfigure', function(myGrid, newStore, newColumns, oldStore, oldColumns, eOpts) {
                configureStoreListeners(newStore, oldStore);
            });
        }
    },
    // private
    startMonitoring: function() {
        var me = this;
        if (!me.monitor) {
            me.grid.on({
                scope: me,
                "uiupdate": me.onUpdatedUI
            });
            // store may already be loaded before the status bar is rendered
            if (me.grid.store.isLoaded() === true) {
                me.updateStatusText();
            }
            me.monitor = true;
        }
    },
    // private
    stopMonitoring: function() {
        var me = this;
        if (me.monitor) {
            // me.un('updatestatusbartext', me.updateStatusText, me);
            me.grid.un('updateui', me.onUpdatedUI, me);
            me.monitor = false;
        }
    },
    startMonitoringStore: function(store) {
        var me = this;
        store = Ext.isDefined(store) ? store : me.grid.getStore();
        if (!store.monitor) {
            store.on({
                scope: me,
                "beforeload": me.onBeforeStoreLoad,
                "load": me.onStoreChange,
                "clear": me.onStoreChange,
                "save": me.onStoreChange,
                "delete": me.onStoreDelete,
                "recordvalidated": me.onRecordValidated,
                "recordfailedsave": me.updateErrorFromRecord,
                "recordfaileddelete": me.updateErrorFromRecord
            });
            store.monitor = true;
        }
    },
    // private
    stopMonitoringStore: function(store) {
        var me = this;
        store = Ext.isDefined(store) ? store : me.grid.getStore();
        if (store.monitor) {
            store.un('beforeload', me.onBeforeStoreLoad, me);
            store.un('load', me.onStoreChange, me);
            store.un('clear', me.onStoreChange, me);
            store.un('save', me.onStoreChange, me);
            store.un('delete', me.onStoreDelete, me);
            store.un('recordvalidated', me.onRecordValidated, me);
            store.un('recordfailedsave', me.updateErrorFromRecord, me);
            store.un('recordfaileddelete', me.updateErrorFromRecord, me);
            store.monitor = false;
        }
    },
    // private
    onDestroy: function() {
        var me = this;
        me.stopMonitoring();
        me.stopMonitoringStore();
        me.statusBar.statusEl.un('click', me.onStatusClick, me);
        me.callParent(arguments);
    },
    // private
    onBeforeStoreLoad: function() {
        var me = this;
        me.errors.clear();
        me.statusBar.showBusy();
    },
    onStoreChange: function() {
        this.updateStatusText();
    },
    // private
    onStoreDelete: function(store, records) {
        var me = this;
        records = Ext.isArray(records) ? records : store.getDeletedRecords();
        Ext.Array.forEach(records, function(rec, index, array) {
            me.errors.removeAtKey(rec.id);
        });
        me.updateStatusText();
    },
    // private
    onUpdatedUI: function(grid, updatedRecords, insertedRecords, deletedRecords) {
        var me = this,
            changedRecords = Ext.Array.merge(updatedRecords, insertedRecords);
        grid.store.validateRecords(changedRecords);
        // pass in deleteRecords because at this time, the record has not been deleted
        // waiting for grid row highlight to finish before doing a store.remove
        me.onStoreDelete(grid.getStore(), deletedRecords);
    },
    // private
    updateErrorFromRecord: function(store, record) {
        var me = this,
            grid = me.grid,
            recValidation = record.getValidation(),
            isValid = recValidation.isValid(),
            msg;
        if (!me.monitor) {
            return false;
        }
        if (!isValid) {
            msg = me.getRecordErrorMsg(record, grid);
            me.errors.add(record.id, {
                record: record,
                msg: msg
            });
        } else {
            me.errors.removeAtKey(record.id);
        }
        me.updateStatusText();
        return isValid;
    },
    // private
    onRecordValidated: function(store, record) {
        var me = this,
            grid = me.grid,
            isValid = record.isValid(),
            msg;
        if (!me.monitor) {
            return false;
        }
        if (!isValid) {
            msg = me.getRecordErrorMsg(record, grid);
            me.errors.add(record.getId(), {
                record: record,
                msg: msg
            });
        } else {
            me.errors.removeAtKey(record.getId());
        }
        me.updateStatusText();
        return isValid;
    },
    // sets the statusbar's status (not the window that opens when you click the error status)
    updateStatusText: function() {
        var me = this,
            updatedText = false;
        if (me.errors.getCount() > 0) {
            // use condensed error message when grid is narrow
            var text = me.grid.getWidth() <= (me.widthForUsingMiniText || 0) ? me.showTextMini : me.showText,
                errText = Ext.String.format(text, me.errors.getCount(), (me.errors.getCount() !== 1 ? 's' : ''));
            if (me.statusBar.getText() !== errText) {
                me.statusBar.showError(errText);
                updatedText = true;
            }
        } else {
            var mRecs = me.grid.store.getUnsavedRecords(undefined, false),
                //me.grid.store.getModifiedRecords(),
                iRecs = me.grid.store.getInvalidRecords();
            if (iRecs.length === 0) {
                if (mRecs.length > 0) {
                    me.statusBar.showWarning(mRecs.length + ' unsaved row' + (mRecs.length !== 1 ? 's' : ''));
                    updatedText = true;
                } else {
                    me.statusBar.showValid();
                    updatedText = true;
                }
            }
        }
    },
    /**
     * returns a string message of the errors in a record
     * @param record
     * @param grid
     * @param useLongFormat {Boolean} if true, will return a long message
     *   Message Examples:
     *     short message: "Row #1: Item, Item Category, Retail"
     *     long message: "Row #1: must be present: Item, Item Category; is not included in the list of acceptable values: Retail; is the wrong length: ShopCost"
     **/
    getRecordErrorMsg: function(record, grid, useLongFormat) {
        useLongFormat = useLongFormat || false;
        var errColumns = Ext.create('Ext.util.HashMap'),
            rowErrors = Ext.create('Ext.util.HashMap'),
            allErrors = record.getValidation().getErrors() || [],
            errMsg = '';
        // get each column name once (if using something like oneAndOnly validation, both columns would be in the errors object)
        Ext.Array.forEach(allErrors, function(err, index, array) {
            errColumns.add(err.id, err);
        });
        // loop through all errors and add column name (and error reason if longFormat)
        var errColObj = errColumns.getArray();
        Ext.Array.forEach(errColObj, function(err, index, array) {
            var errType = err.msg;
            if (useLongFormat) {
                var existingError = Ext.isDefined(rowErrors.get(errType)) ? rowErrors.get(errType) : '';
                existingError += (existingError.length ? ', ' : '') + err.id;
                rowErrors.add(errType, existingError, false);
            } else {
                errMsg += (errMsg.length ? ', ' : '') + err.id;
            }
        });
        if (useLongFormat) {
            allErrors = rowErrors.getArray();
            for (var prop in allErrors) {
                if (Object.prototype.hasOwnProperty.call(allErrors, prop)) {
                    errMsg += (errMsg.length ? '; ' : '') + prop + ': ' + allErrors[prop];
                }
            }
        }
        return errMsg;
    },
    // builds the list of errors for the little window that opens when you click on the Error status in the statusbar
    // private
    updateErrorList: function() {
        var me = this,
            grid = me.grid,
            msg,
            msgEl = me.getMsgEl();
        if (me.errors.getCount() > 0) {
            var msgObj = {};
            msg = [
                '<ul>'
            ];
            if (me.errors && me.errors.items) {
                // it will only show up-to maxErrorCount # errors in popup
                var length = Math.min(me.errors.getCount(), me.maxErrorCount);
                for (var i = 0; i < length; i++) {
                    var err = me.errors.getAt(i),
                        rowIndex = grid.getStore().indexOf(err.record);
                    if (rowIndex >= 0) {
                        msgObj[rowIndex] = '<li id="x-err-' + err.record.id + '"><a href="#">' + 'Row #' + (rowIndex + 1) + ': ' + err.msg + '</a></li>';
                    }
                }
            }
            // object is used to auto-sort to by rowIndex ASC
            for (var prop in msgObj) {
                if (Object.prototype.hasOwnProperty.call(msgObj, prop)) {
                    msg.push(msgObj[prop]);
                }
            }
            msg.push('</ul>');
            msgEl.update(msg.join(''));
        } else {
            msgEl.update('');
        }
        // reset msgEl size
        msgEl.setSize('auto', 'auto');
    },
    // private
    getMsgEl: function() {
        var me = this,
            msgEl = me.msgEl,
            t;
        if (!msgEl) {
            msgEl = me.msgEl = Ext.DomHelper.append(Ext.getBody(), {
                cls: me.errorListCls,
                style: 'z-index:99999999'
            }, true);
            msgEl.hide();
            msgEl.on('click', function(e) {
                t = e.getTarget('li');
                if (t) {
                    var clickedId = t.id.split('x-err-')[1];
                    var recIdx = me.grid.store.findBy(function(rec, recID) {
                            return (rec.id === clickedId);
                        });
                    var rec = me.grid.store.getAt(recIdx),
                        allErrors = rec.getValidation().getErrors();
                    me.grid.getSelectionModel().select(rec);
                    me.grid.getView().focusRow(rec);
                    var isEditing = false;
                    for (var i = 0; i < allErrors.length; i++) {
                        var col = me.grid.getColumnForDataIndex(allErrors[i].id);
                        if (col) {
                            isEditing = me.grid.getEditingPlugin().startEdit(rec, col);
                            if (isEditing) {
                                break;
                            }
                        }
                    }
                    // Ext.getCmp(t.id.split('x-err-')[1]).focus();
                    me.hideErrors();
                }
            }, null, {
                stopEvent: true
            });
        }
        // prevent anchor click navigation
        return msgEl;
    },
    // private
    showErrors: function() {
        var me = this;
        me.updateErrorList();
        me.getMsgEl().alignTo(me.statusBar.getEl(), me.listAlign).slideIn('b', {
            duration: 100,
            easing: 'easeOut'
        });
        // use condensed text message when grid is narrow
        me.statusBar.setText(me.grid.getWidth() <= (me.widthForUsingMiniText || 0) ? me.hideTextMini : me.hideText);
        me.grid.body.on('click', me.hideErrors, me, {
            single: true
        });
    },
    // hide if the user clicks directly into the form
    // private
    hideErrors: function() {
        var me = this,
            el = me.getMsgEl();
        if (el.isVisible()) {
            el.slideOut('b', {
                duration: 50,
                easing: 'easeIn'
            });
            me.updateStatusText();
        }
        me.grid.body.un('click', me.hideErrors, this);
    },
    // private
    onStatusClick: function() {
        var me = this;
        if (me.getMsgEl().isVisible()) {
            me.hideErrors();
        } else if (me.errors.getCount() > 0) {
            me.showErrors();
        } else if (me.statusBar.status === 'warning') {
            me.selectUnsavedRecords();
        }
    },
    // private
    onStatusDblClick: function() {
        this.grid.store.validateRecords();
    },
    selectUnsavedRecords: function() {
        var me = this,
            unsavedRecs = me.grid.store.getUnsavedRecords() || [];
        if (unsavedRecs.length > 0) {
            me.grid.getSelectionModel().select(unsavedRecs);
            me.grid.getView().focusRow(unsavedRecs[0]);
        }
    }
});

/**
 * @class sl.panel.tree.TreePanel
 */
Ext.define('sl.panel.tree.TreePanel', {
    extend: 'Ext.tree.Panel',
    mixins: {
        panel: 'sl.panel.Panel'
    },
    alias: [
        'widget.sltreepanel'
    ],
    uses: [
        'sl.utils.Utilities'
    ],
    /**
     * @cfg {Boolean} [includeTreeFilter=false]
     * `true` to include the tree filter plugin
     */
    includeTreeFilter: false,
    /**
     * @cfg {Object} treeFilterConfig
     * Any overrides/modifications to the tree filter plugin
     */
    treeFilterConfig: {},
    /**
     * @cfg {Boolean} [includeRefreshBtn=false]
     * True to include the refresh btn on the tree filter plugin
     */
    includeRefreshBtn: false,
    /**
     * @cfg {Boolean} editable
     * True to include the row editing plugin
     */
    editable: false,
    /**
     * @cfg {String} editingPluginID
     * Unique editor pluginID, defaults to 'treeRowEditor'
     */
    editingPluginID: 'treeRowEditor',
    /**
     * @cfg {Object} editConfig
     * Any overrides/modifications to the rowediting plugin
     */
    editConfig: {},
    /**
     * @cfg {Boolean} enableSort
     * True to enable sorting
     */
    enableSort: false,
    /**
     * @cfg {Boolean} useArrows: true,
     * True to use arrows instead of plus/minus signs for tree nodes
     */
    useArrows: true,
    /**
     * @cfg {Boolean} [rootVisible=true]
     * True to show the root node at the top of the tree,
     * must include a text/description value in the root config to show text
     */
    rootVisible: true,
    /**
     * @cfg {Boolean} singleExpand
     * True to only allow one node to be expanded at a time
     */
    singleExpand: false,
    /**
     * @cfg {Object} selModel
     * SelectionModel config, defaults to a basic selModel with single select
     */
    selModel: {},
    /**
     * @cfg {Object} viewConfig
     * Tree View configuration
     */
    viewConfig: {},
    /**
     * @cfg {Object} root
     * Root node configuration, include text/description property here if you have rootVisible and want it to have text displayed
     */
    root: {},
    /**
     * @cfg {Number} clicksToEdit
     * Number of clicks to activate the row editor, only used when editable is true.
     */
    clicksToEdit: 2,
    /**
     * @cfg {Boolean} [autoCancel=true]
     * True to automatically cancel any pending changes when the row editor begins editing a new row. False to force the user to explicitly cancel the pending changes. Defaults to true.\
     * Only used when editable is true.
     */
    autoCancel: false,
    /**
     * @cfg {Number} clicksToMoveEditor
     * The number of clicks to move the row editor to a new row while it is visible and actively editing another row. This will default to the same value as clicksToEdit.
     * Only used when editable is true.
     */
    clicksToMoveEditor: 1,
    /**
     * @cfg {Boolean} includeNodeDelete
     * True to add a delete button to each node in the tree that appears when the user clicks on the row
     */
    includeNodeDelete: false,
    /**
     * @cfg {Boolean} useRootAsNew
     * Only used when editable is true.
     * Tree to have the root node be the entry point for new records.
     * Allows the user to "edit" the root node which on update will perform an insert and reload the tree, expanding to the node just inderted
     * Only used when editable is true.
     */
    useRootAsNew: false,
    constructor: function(config) {
        var tree = this;
        config = config || {};
        tree = Ext.applyIf(tree, tree.mixins.panel);
        tree.callParent(arguments);
    },
    initComponent: function() {
        var tree = this,
            config = {
                plugins: tree.createPlugins(),
                features: []
            };
        tree.defaultTitle = tree.defaultTitle || tree.title;
        tree.selModel = Ext.applyIf(tree.selModel, {
            mode: 'SINGLE'
        });
        tree.viewConfig = Ext.applyIf(tree.viewConfig, {
            markDirty: false,
            listeners: {
                beforedrop: tree.onBeforedrop,
                drop: tree.onDrop,
                beforerefresh: tree.onBeforerefresh,
                refresh: tree.onRefresh,
                scope: tree
            }
        });
        tree.root = Ext.applyIf(tree.rootConfig, {
            type: 'async',
            Type: 'root',
            nodeId: 'root',
            nodeType: 'root'
        });
        if (tree.includeNodeDelete) {
            tree.on({
                scope: tree,
                'select': function(rm, record, idx, opts) {
                    tree.showTreeButton.call(tree, rm, record, idx, Ext.apply({
                        tree: tree,
                        actionFn: sl.tree.DeleteButtonClicked,
                        actionParams: {
                            tree: tree
                        },
                        buttonType: 'delete',
                        actionScope: tree,
                        elementID: record.get(tree.store.nodeParam) + "-delBtn",
                        eventAttribute: "deleteEventAdded"
                    }, opts));
                },
                'deselect': function(rm, record, idx, opts) {
                    tree.hideTreeButton.call(tree, rm, record, idx, Ext.apply({
                        'delay': 600,
                        'elementID': record.get(tree.store.nodeParam) + "-delBtn",
                        'buttonType': 'delete'
                    }, opts));
                }
            });
        }
        if (tree.useRootForNew && tree.editable) {
            tree.root.iconCls = tree.root.iconCls || 'newNodeIconCls';
            tree.on('beforeedit', function(editor, e) {
                var go = false;
                if (e.record.isRoot() && !tree.useRootForNew) {
                    go = false;
                }
                return go;
            }, tree);
        }
        tree.on({
            scope: tree,
            'beforerender': function(grid) {
                if (Ext.isFunction(tree.getColumnIndexByDataIndex)) {
                    var idx = tree.getColumnIndexByDataIndex(tree.store.proxy.extraParams.textField);
                    var addBtnFn = function(value, metaData, record, rowIdx, colIdx, store, view, result) {
                            // Give the developer a chance to not add the button to the node
                            if (!tree.hasListeners.beforeButtonAdd || tree.fireEvent('beforeButtonAdd', tree, value, metaData, record, rowIdx, colIdx, store, view, result) !== false) {
                                var btn = document.createElement("input");
                                btn.setAttribute("type", "button");
                                btn.setAttribute("class", 'nodeDeleteButton');
                                btn.setAttribute("id", record.get("nodeId") + '-delBtn');
                                result += "&nbsp" + btn.outerHTML;
                            }
                            return result;
                        };
                    var newRenderer = function(originalFn, newFn, scope) {
                            if (!newFn) {
                                return originalFn;
                            } else {
                                return function() {
                                    var result = originalFn.apply(tree, arguments);
                                    if (!Ext.isArray(result)) {
                                        if (Ext.isIterable(result)) {
                                            result = Ext.Array.clone(result);
                                        } else {
                                            result = result !== undefined ? [
                                                result
                                            ] : [];
                                        }
                                    }
                                    var resultArg = [].concat(result);
                                    resultArg.push.apply(arguments, resultArg);
                                    result = newFn.apply(scope || tree, arguments);
                                    return result;
                                };
                            }
                        };
                    tree.getColumns()[idx].renderer = newRenderer(tree.getColumns()[idx].renderer, addBtnFn, tree);
                }
            }
        });
        // overwrite local config options with param-config options defined here
        Ext.apply(tree, config);
        tree.callParent();
    },
    createPlugins: function() {
        var tree = this,
            plugins = [];
        if (tree.includeTreeFilter) {
            plugins.push(Ext.apply({
                ptype: 'treefilter',
                includeRefresh: true,
                pluginID: tree.editingPluginID
            }, tree.treeFilterConfig));
        }
        if (tree.editable) {
            plugins.push(Ext.create(Ext.apply({
                xclass: 'Ext.grid.plugin.RowEditing',
                autoCancel: tree.autoCancel,
                clicksToEdit: tree.clicksToEdit,
                clicksToMoveEditor: tree.clicksToMoveEditor,
                errorSummary: tree.errorSummary
            }, tree.rowEditorConfig)));
        }
        // Lets get any other plugins that may have been added
        Ext.iterate(tree.plugins, function(p) {
            plugins.push(p);
        }, this);
        return plugins;
    },
    showTreeButton: function(rm, record, idx, eOpts) {
        if (!this.hasListeners.beforeButtonShow || this.fireEvent('beforeButtonShow', this, rm, record, idx, eOpts) !== false) {
            var tree = eOpts.tree || this,
                action = eOpts.actionFn || Ext.emptyFn,
                actionParams = eOpts.actionParams || {},
                actionScope = eOpts.actionScope || eOpts.tree || this,
                elID = eOpts.elementID || "nodeButton",
                eventAttribute = eOpts.eventAttribute || "eventAdded";
            actionParams.cacheClassName = eOpts.cacheClassName || this.store.proxy.extraParams.CacheClassName;
            var el = Ext.getElementById(elID);
            if (!Ext.isEmpty(el)) {
                if (Ext.isEmpty(el.getAttribute(eventAttribute))) {
                    el.addEventListener('click', function() {
                        tree.suspendEvents(false);
                        action(el, record, actionParams, actionScope);
                        tree.resumeEvents();
                    }.bind(this));
                    el.setAttribute(eventAttribute, true);
                }
                Ext.fly(el, elID + "in").fadeIn({
                    duration: 600,
                    scope: this,
                    callback: function() {
                        this.fireEvent('afterButtonShow', this, rm, record, idx, eOpts);
                    }
                });
            }
        }
    },
    hideTreeButton: function(rm, record, idx, eOpts) {
        if (!this.hasListeners.beforeButtonHide || this.fireEvent('beforeButtonHide', this, rm, record, idx, eOpts) !== false) {
            var elID = eOpts.elementID || "nodeButton";
            var oldel = Ext.getElementById(elID);
            if (!Ext.isEmpty(oldel)) {
                Ext.fly(oldel, elID + "out").fadeOut({
                    duration: 600,
                    callback: function() {
                        this.fireEvent('afterButtonHide', this, rm, record, idx, eOpts);
                    },
                    scope: this
                });
            }
        }
    },
    deselectNode: function(rm, record, idx, eOpts) {
        switch (this.itemId) {
            case 'accountingGrid':
                {
                    Accounting.HideTreeButton(rm, record, idx, {
                        elementID: record.get("nodeId") + '-delBtn'
                    });
                };
                break;
            case 'acctSetParmTree':
                {
                    Accounting.HideTreeButton(rm, record, idx, {
                        elementID: record.get("nodeId") + '-delBtn'
                    });
                    Accounting.HideTreeButton(rm, record, idx, {
                        elementID: record.get("nodeId") + '-editBtn'
                    });
                };
                break;
            default:
                break;
        }
    },
    onBeforedrop: function(node, data, overModel, dropPosition, dropFunction, eOpts) {
        Ext.suspendLayouts();
        // rarely, the isNodeValid fn would return false, the icon would be red, but the dragged nodes would disappear; this was changed to prevent that
        var targetNode = this.view.getRecord(node);
        return targetNode.data.validDrop;
    },
    onDrop: function(node, data, overModel, dropPosition, eOpts) {
        Ext.resumeLayouts();
    },
    onBeforerefresh: function(view) {
        view.scrollTop = view.container.dom.firstChild.scrollTop;
    },
    onRefresh: function(view) {
        view.container.dom.firstChild.scrollTop = view.scrollTop;
    },
    /**
     * Deletes this node that the delete button was clicked on or if called explicitly it will delete the passed in node or
     * all the selected nodes in the tree.  Will work with single or multiple selections
     *
     * @param {Object} btnEl   Delete button element that called fn
     * @param {Object} [node] The node owning the button clicked,
     * This can be overruled by any records passed in the actionParams.records or defaults to any selected nodes in the tree

     * @param {Object} [actionParams]      An object containing function configuration options
     * This may contain any of the following properties:
     *
     * @param {Ext.tree.Panel} actionParams.tree       Source tree of objs being deleted. Defaults to this (scope)
     * @param {String} actionParams.delName            Text for the "what is being deleted" prompt. If empty, will use grid's title. If that is empty, uses default "item"
     * @param {Boolean} actionParams.forceReload       If true, tree WILL reload after successful delete (defaults to false)
     * @param {Boolean} actionParams.updateUI          If true, the sl.utils.UpdateTreeUI function will be called starting at the root (defaults to false)
     * @param {Function} actionParams.callbackFn       Custom function called in callback
     * @param {Object} actionParams.fnScope            Scope used for custom callback
     * @param {String} actionParams.idField            Name of Cach√© class's ID field, defaults to "ID"
     * @param {Boolean} actionParams.dontShowToast     True means "Delete" popup toast will not show; defaults to False
     * @param {Boolean} actionParams.noConfirmation    True means no delete confirmation prompt
     * @param {Function} actionParams.deleteRecordsFn  Function that will make call to database to delete the records and then handle ajax callback
     * @param {String} actionParams.cacheClassName     CacheClass to remove the records from, defaults to the tree store proxy's extra param CacheClassName
     * @param {String} actionParams.refreshCollapsed   Only used if updateUI is true, tells the updateUI method if it should refresh collapsed nodes
     **/
    deleteButtonClicked: function(btnEl, node, actionParams, scope) {
        actionParams = actionParams || {};
        // get options out of oOpts object
        var tree = actionParams.tree || this,
            // if delName is empty, use tree's title. if no tree title, then use "item"
            delName = actionParams.delName || tree.defaultTitle || tree.title || 'item',
            // Use any records passed in actionParams, otherwise use the passed in node, default to the selected nodes if any otherwise nothing
            records = actionParams.records || node || tree.getSelectionModel().getSelection() || [],
            recCount = records.length,
            // Build message based on recCount
            deleteMsg = recCount === 1 ? 'Delete this <b>' + delName + '</b>?' : 'Delete these ' + recCount + ' <b>' + delName + 's</b>?',
            noConfirmation = actionParams.noConfirmation || false,
            deleteRecordsFn = actionParams.deleteRecordsFn || sl.tree.DeleteRecords,
            deleteBtn = tree.deleteBtn;
        /*
    if (deleteBtn.undoButton) {
        actionParams.undoButton = deleteBtn.undoButton;

        // if undobutton doesn't have a click event assigned, assign the sl fn
        if (!deleteBtn.undoButton.hasListener('click')) {
            deleteBtn.undoButton.on('click', function(btn, evt) {
                sl.store.UndoDelete(tree, btn);
            }, this);
        }
    }
*/
        if (recCount > 0) {
            if (noConfirmation) {
                deleteRecordsFn(tree, records, actionParams);
            } else {
                Ext.Msg.show({
                    title: 'Confirm Delete?',
                    msg: '<br>' + deleteMsg,
                    buttons: Ext.Msg.YESNO,
                    scope: tree,
                    animEl: deleteBtn.id,
                    icon: Ext.MessageBox.QUESTION,
                    fn: function(btn) {
                        if (btn === 'yes') {
                            deleteRecordsFn(tree, records, actionParams);
                        }
                    }
                });
            }
        } else {
            if (!noConfirmation) {
                sl.utils.Toast.showToast("Delete Error", "Please select a node of the tree first.", 2000);
            }
            Ext.get(document.body).unmask();
            tree.store.fireEvent("delete", tree, records, [], false);
        }
    },
    /**
     * Builds ID-list of selected rows or passed-in records.  Sends that list to Cach√© where they are deleted from the Cach√© Class.
     * If Ajax call to delete is successful, records are removed from tree and any optional function calls are made.
     *
     * @param {Ext.tree.Panel} tree         tree that contains the records that will be deleted
     * @param {Ext.data.Model[]} records    Array of records to be deleted
     * @param {Object} [actionParams]      An object containing function configuration options
     * @param {Ext.tree.Panel} actionParams.tree       Source tree of objs being deleted. Defaults to this (scope)
     * @param {String} actionParams.delName            Text for the "what is being deleted" prompt. If empty, will use grid's title. If that is empty, uses default "item"
     * @param {Boolean} actionParams.forceReload       If true, tree WILL reload after successful delete (defaults to false)
     * @param {Boolean} actionParams.updateUI          If true, the sl.utils.UpdateTreeUI function will be called starting at the root (defaults to false)
     * @param {Function} actionParams.callbackFn       Custom function called in callback
     * @param {Object} actionParams.fnScope            Scope used for custom callback
     * @param {String} actionParams.idField            Name of Cach√© class's ID field, defaults to "ID"
     * @param {Boolean} actionParams.dontShowToast     True means "Delete" popup toast will not show; defaults to False
     * @param {Boolean} actionParams.noConfirmation    True means no delete confirmation prompt
     * @param {Function} actionParams.deleteRecordsFn  Function that will make call to database to delete the records and then handle ajax callback
     * @param {String} actionParams.cacheClassName     CacheClass to remove the records from, defaults to the tree store proxy's extra param CacheClassName
     * @param {String} actionParams.refreshCollapsed   Only used if updateUI is true, tells the updateUI method if it should refresh collapsed nodes
     **/
    deleteRecords: function(tree, records, actionParams) {
        actionParams = actionParams || {};
        tree = tree || this;
        tree.store.removed = [];
        var forceReload = actionParams.forceReload || false,
            updateUI = actionParams.updateUI || false,
            refreshCollapsed = actionParams.refreshCollapsed || false,
            dontShowToast = actionParams.dontShowToast || false,
            cacheClassName = actionParams.cacheClassName || tree.store.proxy.extraParams.CacheClassName,
            cbScope = actionParams.fnScope || tree,
            cb = actionParams.callbackFn.bind(cbScope) || Ext.emptyFn,
            idArr = [],
            itemArr = [],
            idField = "",
            beforeDeleteBool = true,
            localOptions = {
                madeAjaxRequest: false
            };
        if (!dontShowToast) {
            Ext.get(document.body).mask("Deleting...", "x-mask-loading");
        }
        if (!Ext.isEmpty(records)) {
            // builds list of rec IDs & removes rec from tree store and modified store
            for (var i = 0; i < records.length; i++) {
                var rec = records[i];
                itemArr.push(rec);
                // cache property for the ID (primary key) property (typically it's "ID" in Cach√© classes)
                idField = actionParams.idField || rec.idProperty || tree.store.model.prototype.idProperty || "ID";
                if (!Ext.isEmpty(rec.data[idField])) {
                    idArr.push(rec.data[idField]);
                } else {
                    tree.store.removed.push(rec);
                }
            }
            tree.lastDeleteCount = itemArr.length;
            // return false to stop delete, last chance for developer to modify any params
            beforeDeleteBool = tree.store.fireEvent('beforedelete', tree, itemArr, idArr, cacheClassName, localOptions, actionParams);
            if (beforeDeleteBool !== false) {
                if (idArr.length > 0) {
                    localOptions.madeAjaxRequest = true;
                    Ext.Ajax.request({
                        url: "../Ext.JsonRequest.cls",
                        scope: tree,
                        params: {
                            CacheClassName: "JSON.Adapter",
                            CacheMethodName: "DeleteObjects",
                            CacheCommandType: 1,
                            JSONObject: Ext.encode({
                                "CacheClassName": cacheClassName,
                                'Properties': idArr
                            })
                        },
                        callback: function(options, success, response) {
                            // Gets the result of the update
                            var r = Ext.decode(response.responseText);
                            Ext.get(document.body).unmask();
                            // if the delete failed, reload tree & display error message
                            if (!r.success) {
                                tree.lastDeleteCount = '';
                                tree.suspendLayouts();
                                tree.getRootNode().removeAll();
                                tree.store.load(tree.getRootNode());
                                tree.store.resumeLayouts();
                                // Display the server error message
                                Ext.Msg.alert("Error", r.error.Msg);
                                console.error('DeleteRecords Errors', {
                                    tree: tree,
                                    itemArr: itemArr,
                                    idArr: idArr,
                                    error: r.error.Msg,
                                    options: options,
                                    success: success,
                                    response: response
                                });
                                tree.store.fireEvent("delete", tree, itemArr, idArr, false, {
                                    error: r.error.Msg,
                                    options: options,
                                    success: success,
                                    response: response
                                });
                            } else // End if
                            {
                                if (actionParams.undoButton) {
                                    actionParams.undoButton.setDisabled(false);
                                }
                                // only reload the tree if developer requests it
                                if (forceReload) {
                                    tree.suspendLayouts();
                                    tree.getRootNode().removeAll();
                                    tree.store.load(tree.getRootNode());
                                    tree.store.resumeLayouts();
                                } else if (updateUI) {
                                    var nodeParams = Ext.decode(tree.store.proxy.extraParams.nodeParams);
                                    sl.utils.UpdateTreeUI(tree, tree.getRootNode().get(nodeParams.nodeType), this.tree.getRootNode().get(nodeParams.nodeId), "", Ext.emptyFn, tree, {
                                        refreshCollapsed: refreshCollapsed
                                    });
                                } else // manually removes deleted records
                                {
                                    // suspend layout so tree isn't redrawn after each rec's removall
                                    tree.suspendLayout = true;
                                    for (var i = 0; i < itemArr.length; i++) {
                                        itemArr[i].remove();
                                    }
                                    tree.suspendLayout = false;
                                    tree.doLayout();
                                }
                                tree.store.fireEvent("delete", tree, itemArr, idArr, true);
                                // since all records are deleted at once, don't have to worry about timing or number of ongoing ajax requests
                                if (!dontShowToast && tree.lastDeleteCount > 0) {
                                    tree.prepareToast('delete', tree.lastDeleteCount);
                                }
                            }
                        }
                    });
                }
            }
        }
        // if the ajax delete was never reached, fire event in case something is waiting to fire after a delete
        if (!localOptions.madeAjaxRequest && beforeDeleteBool) {
            tree.suspendLayout = true;
            Ext.get(document.body).unmask();
            for (var idx = 0; idx < itemArr.length; idx++) {
                itemArr[idx].remove();
            }
            tree.suspendLayout = false;
            tree.doLayout();
            if (actionParams.undoButton) {
                var willDisable = !Ext.isArray(tree.store.removed) || tree.store.removed.length === 0;
                actionParams.undoButton.setDisabled(willDisable);
            }
            tree.store.fireEvent("delete", tree, itemArr, idArr, false);
            // since all records are deleted at once, don't have to worry about timing or number of ongoing ajax requests
            if (!dontShowToast && tree.lastDeleteCount > 0) {
                tree.prepareToast('delete', tree.lastDeleteCount);
            }
        }
        if (!beforeDeleteBool) {
            Ext.get(document.body).unmask();
        }
    },
    /**
     * Shows toast popup notification
     * @param {String} actionStr Verb for what happened to record, e.g. "save", "delete". Use present tense
     * @param {Number} actionCount Number of rows that action was performed on successfully (saved/deleted/etc.)
     * @param {Number} [hideDelay=1000] How long message should be shown (in milliseconds)
     * @param {String} [addlMessage] Any extra text to add to end of the toast
     * @param {Boolean} [allowZero=false] If `true`, then will show notification even when actionCount is 0
     **/
    prepareToast: function(actionStr, actionCount, hideDelay, addlMessage, allowZero) {
        hideDelay = hideDelay || 1000;
        addlMessage = addlMessage || '';
        allowZero = allowZero || false;
        if (!Ext.isEmpty(actionCount) && (allowZero || Number(actionCount) > 0) && !Ext.isEmpty(actionStr)) {
            var rows = actionCount === 1 ? "record was" : "records were",
                title = Ext.util.Format.capitalize(actionStr) + ' Successful',
                message = actionCount + ' ' + rows + ' ' + actionStr + 'd.' + addlMessage;
            sl.utils.Toast.showToast(title, message, hideDelay);
        }
    }
});

/**
 * @class sl.panel.tree.plugin.TreeFilterField
 */
Ext.define('sl.panel.tree.plugin.TreeFilterField', {
    extend: 'sl.panel.grid.plugin.GridFilterField',
    alias: 'plugin.treefilterfield',
    init: function(tree) {
        var me = this;
        if (!sl.utils.matchesComponent(tree, Ext.tree.Panel)) {
            tree = tree.up('treepanel');
        }
        me.tree = tree;
        me.callParent(arguments);
    },
    /**
     * filters grid store's data locally based on the cell's rendering value, not the store's value
     * records will be ranked and sorted based on how prevalent the filter text is
     */
    doLocalFilter: function() {
        var me = this,
            tree = me.tree || me.grid,
            store = tree.getStore(),
            afterExpandFn = function() {
                var leafNodes = [];
                if (Ext.isFunction(store.getFilteredText)) {
                    // limit to branch nodes & leaf nodes contain raw value
                    // store.filterBy(me.doLocalRecordFilter, me);
                    // mark all branch nodes as `not included`
                    store.getData().items.forEach(function(node) {
                        var foundValue = me.doesRecordHaveTextToFind(node);
                        node.set('showAfterFilter', foundValue);
                        if (foundValue && node.isLeaf()) {
                            leafNodes.push(node);
                        }
                    });
                    // all parents that contain our searched for leafs will be visible
                    leafNodes.forEach(function(leafNode) {
                        var parentNode = leafNode.parentNode;
                        while (parentNode) {
                            parentNode.set('showAfterFilter', true);
                            parentNode = parentNode.parentNode;
                        }
                    });
                    store.filter('showAfterFilter', true);
                } else {
                    sl.consoleWarn('[' + me.$className + '] Filtering does not work with this store. Only works with Cach√© store', {
                        store: store
                    });
                }
                Ext.resumeLayouts();
                tree.unmask();
                me.fireEvent('filtered', me);
            };
        tree.mask('Loading & Filtering...');
        Ext.suspendLayouts();
        // if old filters are not removed, then it will wrongly compare against old filters
        store.getFilters().removeAll();
        Ext.defer(function() {
            // expand all nodes for the the following iterative routines
            tree.expandAll(function() {
                if (store.getLoadingRecords().length === 0) {
                    afterExpandFn();
                } else {
                    store.on('loadcomplete', function() {
                        afterExpandFn();
                    }, store, {
                        single: true
                    });
                }
            });
        }, 100, tree);
    },
    doesRecordHaveTextToFind: function(rec) {
        var me = this,
            grid = me.grid,
            store = grid.getStore(),
            checkedMenuItems = me.getCheckedMenuItems(),
            // columns to be filtered
            needsExactMatch = store.getFilteredText().indexOf('"') >= 0,
            // filter has quotes => has exact match piece
            txtToFindArr = store.getFilteredTextArray(),
            // at least 1 cell must have each element in this array
            renderedTxtArr = [],
            // rendered text for all cells for this record for faster sorting
            recHasValue;
        // only when true will the record not be filtered out of the store
        if (txtToFindArr.length) {
            Ext.Array.forEach(checkedMenuItems, function(item, index, array) {
                var cellText,
                    column = item.column,
                    cellHasText = false;
                if (column) {
                    cellText = rec.get(column.dataIndex);
                    if (cellText instanceof Date) {
                        // convert date to text equivalent
                        cellText = Ext.Date.format(cellText, me.dateFormat || rec.fields.get(column.dataIndex).dateFormat);
                    } else {
                        cellText = Ext.valueFrom(cellText, '').toString();
                    }
                    // compare the user-entered text against the cell's rendered text
                    cellHasText = sl.utils.doesStringContainAllPieces(cellText, txtToFindArr, false, !needsExactMatch);
                    renderedTxtArr.push(cellHasText ? cellText : undefined);
                    recHasValue = recHasValue || cellHasText;
                }
            });
        } else {
            // nothing to search for...
            recHasValue = true;
        }
        // rank how prevalent the filter text is
        // rec.setSortRanking(txtToFindArr, undefined, renderedTxtArr);
        return recHasValue;
    }
});

/**
  * TreeStateful plugin for ExtJs 4.1
  *
  * site https://github.com/AlexTiTanium/ExtJsStatefulTree
  * author Alex Kucherenko <kucherenko.email@gmail.com>
  * copyright 2012 Alex Kucherenko
  * version 1.0.0
  *
  * MIT LICENSE
  *
  * Permission is hereby granted, free of charge, to any person obtaining
  * a copy of this software and associated documentation files (the
  * "Software"), to deal in the Software without restriction, including
  * without limitation the rights to use, copy, modify, merge, publish,
  * distribute, sublicense, and/or sell copies of the Software, and to
  * permit persons to whom the Software is furnished to do so, subject to
  * the following conditions:
  *
  * The above copyright notice and this permission notice shall be
  * included in all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
Ext.define('sl.panel.tree.plugin.TreeStateful', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.treestateful',
    uses: [
        'Ext.state.Manager'
    ],
    init: function(view) {
        var me = this;
        view.addStateEvents('afteritemcollapse', 'afteritemexpand');
        view.getState = me.getState;
        view.saveState = me.saveState;
        if (view.getTreeStore().isLoading()) {
            view.getTreeStore().on("load", me.applyState, view);
        } else {
            Ext.callback(me.applyState, view);
        }
    },
    saveState: function() {
        var me = this,
            id = me.stateful && me.getStateId(),
            state;
        // don't save the nodes' state if there are no nodes
        if (id && me.getStore().getCount() > 0) {
            state = me.getState() || [];
            //pass along for custom interactions
            Ext.state.Manager.set(id, state);
        }
    },
    getState: function() {
        var ids = [];
        // Warning! Use private API: tree.flatten()
        var expanded = Ext.Array.filter(this.getTreeStore().tree.flatten(), function(node) {
                return node.get('expanded') === true;
            });
        Ext.each(expanded, function(node) {
            if (node.getId() === 'root') {
                return;
            }
            ids.push(node.getId());
        });
        if (ids.length === 0) {
            ids = null;
        }
        return ids;
    },
    applyState: function() {
        var me = this,
            id = me.stateful && me.getStateId(),
            state,
            store = me.getTreeStore(),
            node;
        if (id) {
            state = Ext.state.Manager.get(id);
            if (state) {
                state = Ext.apply([], state);
                if (!me.hasListeners.beforeapplystate || me.fireEvent('beforeapplystate', me, id, state, store) !== false) {
                    Ext.each(state, function(id) {
                        node = store.getNodeById(id);
                        if (node) {
                            node.bubble(function(node) {
                                node.expand();
                            });
                        }
                    });
                }
            }
        }
    }
});

/**
 * @ignore
 */
// Array Find: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill
if (!Array.prototype.find) {
    Array.prototype.find = function(predicate) {
        if (this == null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return value;
            }
        }
        return undefined;
    };
}
// Array Includes: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill
if (!Array.prototype.includes) {
    Array.prototype.includes = function(searchElement) /*, fromIndex*/
    {
        'use strict';
        var O = Object(this);
        var len = parseInt(O.length, 10) || 0;
        if (len === 0) {
            return false;
        }
        var n = parseInt(arguments[1], 10) || 0;
        var k;
        if (n >= 0) {
            k = n;
        } else {
            k = len + n;
            if (k < 0) {
                k = 0;
            }
        }
        var currentElement;
        while (k < len) {
            currentElement = O[k];
            if (searchElement === currentElement || (searchElement !== searchElement && currentElement !== currentElement)) {
                // NaN !== NaN
                return true;
            }
            k++;
        }
        return false;
    };
}
// Array every: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every#Polyfill
if (!Array.prototype.every) {
    Array.prototype.every = function(callbackfn, thisArg) {
        'use strict';
        var T, k;
        if (this == null) {
            throw new TypeError('this is null or not defined');
        }
        // 1. Let O be the result of calling ToObject passing the this
        //    value as the argument.
        var O = Object(this);
        // 2. Let lenValue be the result of calling the Get internal method
        //    of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var len = O.length >>> 0;
        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.
        if (typeof callbackfn !== 'function') {
            throw new TypeError();
        }
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 1) {
            T = thisArg;
        }
        // 6. Let k be 0.
        k = 0;
        // 7. Repeat, while k < len
        while (k < len) {
            var kValue;
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal
            //    method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {
                // i. Let kValue be the result of calling the Get internal method
                //    of O with argument Pk.
                kValue = O[k];
                // ii. Let testResult be the result of calling the Call internal method
                //     of callbackfn with T as the this value and argument list
                //     containing kValue, k, and O.
                var testResult = callbackfn.call(T, kValue, k, O);
                // iii. If ToBoolean(testResult) is false, return false.
                if (!testResult) {
                    return false;
                }
            }
            k++;
        }
        return true;
    };
}
// Array some: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some#Polyfill
//
// Production steps of ECMA-262, Edition 5, 15.4.4.17
// Reference: http://es5.github.io/#x15.4.4.17
if (!Array.prototype.some) {
    Array.prototype.some = function(fun) /*, thisArg*/
    {
        'use strict';
        if (this == null) {
            throw new TypeError('Array.prototype.some called on null or undefined');
        }
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(thisArg, t[i], i, t)) {
                return true;
            }
        }
        return false;
    };
}

/**
 * @ignore
 */
var sl = sl || {};
Ext.Loader.setConfig({
    disableCaching: false
});

/**
 * @class sl.utils.ExportData
 * Package to export data to Excel
 * Handles local data from a store & remote data from Cach√©
 * Based on https://github.com/loiane/extjs-export-excel
 * @singleton
 */
Ext.define('sl.utils.ExportData', {
    uses: [
        'Ext.util.DelayedTask',
        'Ext.util.Format'
    ],
    singleton: true,
    /**
     * Exports a grid's contents to Excel.
     * To customize the Excel column headers, set column's {@link Ext.grid.column.Column#cfg-excelHeader} on each column
     * To use a different dataIndex than the column's default one, set column's {@link Ext.grid.column.Column#cfg-excelDataIndex} on each column
     * @param {Ext.grid.Panel} grid
     * @param {Boolean} [isLocalExport=true] If `true`, it exports exactly what is in the {@link Ext.data.Store}, including any unsaved/modified changes
     * @param {Object} [eOpts] An object containing function configuration options
     * This may contain any of the following properties:
     * @param {Array} [eOpts.includedDataIndexes=false] Array of Data Indexes that will limit the columns that are exported.  Leave blank for all grid columns
     * @param {Boolean} [eOpts.onlyVisibleColumns=true] If `true`, only visible columns will be exported
     * @param {String} [eOpts.forcedFilename] If set, user won't be prompted for a filename
     * @param {String} [eOpts.suggestedFilename=grid.getTitle()] If set, text that the getFilename prompt will suggest as filename
     */
    gridToExcel: function(grid, isLocalExport, eOpts) {
        eOpts = eOpts || {};
        var me = this,
            store = grid.getStore(),
            includedDataIndexes = eOpts.includedDataIndexes,
            onlyVisibleColumns = Ext.isDefined(eOpts.onlyVisibleColumns) ? eOpts.onlyVisibleColumns : true,
            exportedColumns = [];
        me.isLocalExport = Ext.valueFrom(isLocalExport, true);
        // limit the exported columns if necessary
        if (includedDataIndexes) {
            includedDataIndexes = Ext.Array.from(includedDataIndexes) || [];
            Ext.Array.forEach(includedDataIndexes, function(dataIndex, index, array) {
                var col = grid.getColumnForDataIndex(dataIndex);
                exportedColumns.push(col);
            });
        } else {
            exportedColumns = grid.getColumns(onlyVisibleColumns);
        }
        Ext.Object.mergeIf(eOpts, {
            suggestedFilename: Ext.isFunction(grid.getTitle) ? grid.getTitle() : grid.title,
            useCachedQuery: grid.isEditable
        });
        if (me.isLocalExport) {
            me.exportLocalGridData(grid, exportedColumns, eOpts);
        } else {
            me.cacheDataToExcel(store, exportedColumns, eOpts);
        }
    },
    /**
     * Method for using local store's data for export.
     * Whatever data is in the store is exactly will be exported.
     *
     * *** All modified/unsaved changes will be exported ***
     *
     * The store will not be reloaded.
     * @param {Ext.grid.Panel} grid Used to find renderers to convert record data
     * @param {Ext.grid.column.Column[]} columns What fields to export to Excel
     * @param {Object} [eOpts]
     * @param {String} [eOpts.forcedFilename] If set, user won't be prompted for a filename
     */
    exportLocalGridData: function(grid, columns, eOpts) {
        var me = this,
            definedFilename = eOpts.forcedFilename,
            askUserForFilename = Ext.isEmpty(definedFilename),
            exportFn = function(filename) {
                me.doExportLocalGridData(grid, columns, filename, eOpts);
            };
        if (askUserForFilename) {
            me.getFilename(exportFn, eOpts);
        } else {
            // don't give user option to set filename
            exportFn(definedFilename);
        }
    },
    doExportLocalGridData: function(grid, columns, filename, eOpts) {
        var store = grid.getStore(),
            records = store.getRecords(),
            exportingMsg = Ext.String.format('Exporting {0} to Excel', Ext.util.Format.plural(records.length, 'record')),
            // used to write to excel file
            fileStore = Ext.create('Ext.data.Store', {
                model: store.model.getName(),
                proxy: {
                    type: 'file',
                    writer: 'file.xlsx'
                }
            });
        // add all grid records to the file store
        records.forEach(function(r) {
            var newRec = fileStore.createNewRecord(r.getData());
            // after creating the record, change the properties' values to match how the grid displayed them.
            // this fixes combogrids, combos, and anywhere that a renderer changes the text in the cell from what
            // is specified in the record.
            // This is done after record creation so that any field.convert/calculate/etc
            // cannot change the fileStore's rec's value
            columns.forEach(function(col) {
                if (grid) {
                    // don't use rec.set(...) because we need a specified value from grid and don't want
                    // to have to worry about `calculate` or `convert` on the rec's fields
                    newRec.data[col.dataIndex] = grid.getTextInCell(col, r);
                }
            });
            fileStore.add(newRec);
        });
        Ext.get(document.body).mask(exportingMsg, "x-mask-loading");
        fileStore.sync({
            title: filename,
            columns: columns,
            callback: function(batch) {
                Ext.get(document.body).unmask();
                batch.packet.save();
            }
        });
    },
    /**
     * Gets filename from the user
     * Waits until filename is provided to call export function
     * @param {Function} callbackFn Export function to call after after filename entered
     * @param {Object} [eOpts]
     */
    getFilename: function(callbackFn, eOpts) {
        var me = this,
            suggestedFilename = eOpts.suggestedFilename || 'excel_export',
            promptTitle = eOpts.promptTitle || "Export to Excel";
        Ext.Msg.prompt(promptTitle, 'Excel Filename:', function(btn, filename) {
            if (btn === 'ok') {
                filename = filename.replace(/\s+/g, '_').toLowerCase() || suggestedFilename;
                callbackFn.call(me, filename);
            }
        }, me, false, suggestedFilename);
    },
    /**
     * Method to export data directly from Cach√©.
     * Uses the store's extraParams to tell Cach√© which query to use.
     * @param {Ext.data.Store} store
     * @param {Array} columns
     * @param {Object} [eOpts]
     */
    cacheDataToExcel: function(store, columns, eOpts) {
        var me = this,
            cData = me.getColumnDataForExport(columns),
            dataIndexes = cData.excelDataIndexes || store.model.prototype.fields.keys || [],
            headers = cData.headers;
        var remoteExportFn = function(filename) {
                try {
                    var exportingMsg = 'Exporting Records to Excel',
                        useCachedQuery = Ext.isDefined(eOpts.useCachedQuery) ? eOpts.useCachedQuery : false,
                        queryString = Ext.Object.fromQueryString(window.location.search.substring(1)),
                        authToken = eOpts.AuthToken || queryString.AuthToken,
                        queryID = (useCachedQuery ? store.getProxy().getReader().jsonData.queryID : undefined),
                        params;
                    if (!Ext.String.endsWith(filename, '.xls', true)) {
                        filename += ".xls";
                    }
                    params = Ext.Object.mergeIf(eOpts, store.getExtraParams(), {
                        queryID: queryID,
                        ExportFilename: filename,
                        AuthToken: authToken,
                        fields: Ext.encode(dataIndexes),
                        headers: Ext.encode(headers)
                    });
                    Ext.get(document.body).mask(exportingMsg, "x-mask-loading");
                    sl.utils.postToURL('../Data.XMLExcel.cls?', params);
                    new Ext.util.DelayedTask(function() {
                        Ext.get(document.body).unmask();
                    }, me).delay(4000);
                } catch (error) {
                    Ext.Msg.alert("Error", error);
                    console.error('Excel Export Error', {
                        error: error,
                        args: arguments
                    });
                }
            };
        me.getFilename(remoteExportFn, eOpts);
    },
    /**
     * @private
     * @param {Ext.grid.column.Column[]} columns
     * @return {Object} DataIndexes, Headers, & alternate DataIndexes to use in Excel export
     */
    getColumnDataForExport: function(columns) {
        var dataIndexesArr = [],
            excelDataIndexesArr = [],
            headersArr = [];
        Ext.Array.forEach(columns, function(col, index, array) {
            var dataIndex = col.dataIndex,
                excelDataIndex = dataIndex,
                header = col.excelHeader || col.text || dataIndex,
                editor = col.getColumnEditor();
            if (editor) {
                excelDataIndex = col.excelDataIndex || editor.gridDisplayField || excelDataIndex;
            }
            dataIndexesArr.push(dataIndex);
            excelDataIndexesArr.push(excelDataIndex);
            headersArr.push(header);
        }, this);
        return {
            dataIndexes: dataIndexesArr,
            excelDataIndexes: excelDataIndexesArr,
            headers: headersArr
        };
    }
});

/**
 * @class sl.utils.Utilities
 * @singleton
 */
/*jshint forin: false */
Ext.define('sl.utils.Utilities', {
    uses: [
        'Ext.data.Model',
        'Ext.data.Store',
        'Ext.form.field.ComboBox',
        'Ext.util.Format',
        'sl.data.CacheStore',
        'sl.field.ComboGrid',
        'sl.field.ListCombo',
        'sl.panel.grid.DisplayGrid',
        'sl.panel.grid.EditorGrid'
    ],
    singleton: true,
    /**
         * Performs an AJAX request to Cach√© to the supplied class and method
         * @param {String} className The CacheClassName
         * @param {String} classMethod The CacheClassMethod to me called
         * @param {Object} [params] Object consisting of any and all parameters to be sent to the Cach√© method call
         * @param {Function} [callbackFn] function to be called on successful callback
         * Function will be passed any passed in params and the decoded response.
         * @param {Object} [scope] scope the callback will be called with, defaults to this if not passed in
         * @param {Object} [eOpts] Object containing optional parameters
         * @param {String} [eOpts.url='../Ext.JsonRequest.cls'] Alternate url to use for the Ajax call defaults to
         *     '../Ext.JsonRequest.cls'
         * @param {Boolean} [eOpts.isBatch=false] `true` if the request is a Batch request,
         * when true the only params passed will be the params sent into the function call with no modifications
         * @param {Boolean} [eOpts.callBackAll=false] `true` the provided callback function should be called for each
         *     response in a BatchRequest
         * @param {Boolean} [eOpts.callBackOnError=false] `true` the provided callback function should be called even when
         *     the request comes back with an error
         * @return {Boolean/Array} Return value:
         *
         *  - (Non-Batch Request) Returns `true` if good call false otherwise
         *
         *  - (Batch Request) Returns array of unsuccessful requests,
         * each object in the array contains the request and the response
         **/
    Method: function(className, classMethod, params, callbackFn, scope, eOpts) {
        eOpts = typeof eOpts === 'undefined' ? {} : eOpts;
        eOpts.isBatch = Ext.isDefined(eOpts.isBatch) ? eOpts.isBatch : false;
        eOpts.url = Ext.isDefined(eOpts.url) ? eOpts.url : eOpts.isBatch ? '../Ext.BatchJsonRequest.cls' : '../Ext.JsonRequest.cls';
        eOpts.callBackAll = Ext.isDefined(eOpts.callBackAll) ? eOpts.callBackAll : false;
        eOpts.callBackOnError = Ext.isDefined(eOpts.callBackOnError) ? eOpts.callBackOnError : false;
        var errors = [];
        var addParams = params || {};
        var callBack = !Ext.isEmpty(callbackFn) ? callbackFn : Ext.emptyFn;
        var fnScope = scope || this;
        var gtg = true;
        // Not a batch request so lets put the provided params together
        if (!eOpts.isBatch) {
            addParams = Ext.applyIf(addParams, {
                "CacheClassName": className,
                "CacheMethodName": classMethod,
                "CacheCommandType": 1
            });
        } else {
            // Batch request so we are using whatever the developer passed in as the params
            // This should be an array of objects, each containing a class name, method, params etc.
            addParams = params;
        }
        Ext.Ajax.request({
            scope: fnScope,
            timeout: 300000,
            url: eOpts.url,
            params: addParams,
            callback: function(options, success, response) {
                if (success) {
                    var r = Ext.decode(response.responseText);
                    var op = Ext.decode(options.params.Batch);
                    if (!eOpts.isBatch) {
                        // Not a batch request so we only have one response
                        if (!r.success && !eOpts.callBackOnError) {
                            // Developer did not want to call back on error so report message here
                            Ext.Msg.alert("Error", r.error.Msg);
                        } else {
                            callBack.call(fnScope, params, r);
                        }
                        gtg = false;
                    } else {
                        // Batch request response comes back as an array of responses
                        for (var idx = 0; idx < r.length; idx++) {
                            if (r[idx].hasOwnProperty("success")) {
                                if (!r[idx].success) {
                                    // Warn of and store error for each failed batch request operation
                                    sl.utils.consoleWarningWithTrace("Batch operation Failure", {
                                        params: addParams,
                                        response: response,
                                        batchOptions: op[idx],
                                        r: r[idx]
                                    });
                                    errors.push({
                                        Request: op[idx],
                                        Response: r[idx]
                                    });
                                } else if (eOpts.callBackAll) {
                                    // Call the callback for each successful request operation
                                    callBack.call(fnScope, params, r[idx]);
                                }
                            } else if (eOpts.callBackAll) {
                                // Response does not have a success property,
                                // so it is something else beyond the scope of this function
                                // Lets just send it to the callback as requested
                                callBack.call(fnScope, params, r[idx]);
                            }
                        }
                        if (!eOpts.callBackAll) {
                            // We have recorded all errors to be returned,
                            // the developer has requested that the callBack be called once
                            // At this point we will just call the provided callback
                            // with the response array so the developer can handle it accordingly
                            callBack.call(fnScope, params, r);
                        }
                    }
                }
                // Returns array of errors if batch request, empty array means no errors
                // Returns true if request was successful false if there was an error for single call
                return (eOpts.isBatch) ? errors : gtg;
            }
        });
    },
    /**
         * Checks if a listener exists and optionally adds it.
         * @param {Ext.Component} comp  The component that may have the listener
         * @param {String} eventName The event to look for
         * @param fn
         * @param {Object} [fnScope=this] Scope that may have been specified for the event
         * @param {Object} [opts] Options that may have been passed to the listener
         * @param {Boolean} [addIt=false] If `true` and no listener is not found, adds the listener with all passed config options
         * @param {Boolean} [removeIt=false] If `true` and listener is found, removes the listener with all passed config options
         * @return {Boolean} Return value Returns `true` if the listener was found, `false` otherwise.
         **/
    HasListener: function(comp, eventName, fn, fnScope, opts, addIt, removeIt) {
        eventName = eventName.toLowerCase();
        fnScope = (typeof fnScope === 'undefined') ? this : fnScope;
        opts = (typeof opts === 'undefined') ? {} : opts;
        addIt = Ext.valueFrom(addIt, false);
        removeIt = !!addIt ? false : Ext.valueFrom(removeIt, false);
        var found = false;
        // Quick check to see if anything is listening for this event
        if (comp.hasListener(eventName)) {
            //  Loop through the listeners for this event looking to see if this function already exists with the
            // provided scope
            for (var idx = 0; comp.events[eventName].listeners.length > idx; idx++) {
                if (comp.events[eventName].listeners[idx].fn.toString() === fn.toString()) {
                    // We found the function now lets check if we have any options
                    if (typeof comp.events[eventName].listeners[idx].o !== 'undefined') {
                        if (Ext.Object.equals(comp.events[eventName].listeners[idx].o, opts)) {
                            // We now have a match on fn and options
                            // Lastly lets check scope
                            if (comp.events[eventName].listeners[idx].scope === fnScope) {
                                // we found an exact match
                                found = 1;
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (!found && addIt) {
            // We did not find it and we want it added so lets add it
            comp.on(eventName, fn, fnScope, opts);
        } else if (found && removeIt && !addIt) {
            // We found it and we want it removed so lets remove it
            comp.un(eventName, fn, fnScope);
        }
        return found;
    },
    /**
         * Gets the current day and returns it as a String.
         * @return {String} Return value
         * @author Jeremy Jones
         */
    GetDateToday: function() {
        return this.getCalendarDate(new Date());
    },
    /**
         * Adds a value to a date string
         * @param {String} DString Date string to add
         * @param {Number} doffSet value to add to date string
         * @return {String} Return value
         * @author Jeremy Jones
         */
    DateDayoffSet: function(DString, doffSet) {
        // The number of milliseconds in one day
        var ONE_DAY = 1000 * 60 * 60 * 24;
        var dt = new Date(DString);
        if (!isNaN(dt.getTime()) && !Ext.isEmpty(doffSet)) {
            var tzOffsetOrig = dt.getTimezoneOffset();
            var doffSetMili = (doffSet * ONE_DAY);
            var dtMili = dt.getTime();
            var dtNew = (dtMili + doffSetMili);
            dt.setTime(dtNew);
            var tzOffsetNew = dt.getTimezoneOffset();
            dtNew = (dtMili + ((tzOffsetNew - tzOffsetOrig) * 60000) + doffSetMili);
            dt.setTime(dtNew);
            return this.getCalendarDate(dt);
        } else {
            return false;
        }
    },
    /**
         * accepts a javascript date object and returns the date in "mm/dd/yyyy" format
         * @param {Date} dateObj Date to convert
         * @return {String} Return value
         */
    getCalendarDate: function(dateObj) {
        var month = dateObj.getMonth() + 1;
        month = (month < 10) ? "0" + month : month;
        var day = (dateObj.getDate() < 10) ? "0" + dateObj.getDate() : dateObj.getDate();
        var year = dateObj.getFullYear();
        return (month + "/" + day + "/" + year);
    },
    /**
         * accepts a javascript date object and returns the date in "yyyy-mm-dd" format
         * @param {Date} dateObj Date to convert
         * @return {String} Return value
         */
    getODBCDate: function(dateObj) {
        var month = dateObj.getMonth() + 1;
        month = (month < 10) ? "0" + month : month;
        var day = (dateObj.getDate() < 10) ? "0" + dateObj.getDate() : dateObj.getDate();
        var year = dateObj.getFullYear();
        return (year + "-" + month + "-" + day);
    },
    /**
         * accepts a javascript date object and returns the date in "mm/dd/yyyy" format
         * with "hh:mm:ss" if dateObj had a time. Useful for date comparisons,
         * where date may or may not have a date.
         * @param {Date} dateObj Date to convert
         * @return {String} Return value
         */
    getCompleteDateString: function(dateObj) {
        var str = dateObj;
        if (Ext.isDate(dateObj)) {
            if (dateObj.toLocaleTimeString() === "12:00:00 AM") {
                str = dateObj.toLocaleDateString();
            } else {
                str = dateObj.toLocaleString();
            }
        }
        return str;
    },
    /**
         * Takes two date strings and returns the number of days between
         * @param {String} dtString1
         * @param {String} dtString2
         * @return {Number} Return value
         */
    DateDiff: function(dtString1, dtString2) {
        //convert strings to date objects;
        var dt1 = new Date(dtString1);
        var dt2 = new Date(dtString2);
        return this.days_between(dt1, dt2);
    },
    /**
         * Takes two date strings and returns the number of days between
         * @param {Date} date1
         * @param {Date} date2
         * @return {Number} Return value
         */
    days_between: function(date1, date2) {
        // The number of milliseconds in one day
        var ONE_DAY = 1000 * 60 * 60 * 24;
        // Convert both dates to milliseconds
        var date1_ms = date1.getTime();
        var date2_ms = date2.getTime();
        // Calculate the difference in milliseconds
        var difference_ms = Math.abs(date1_ms - date2_ms);
        // Convert back to days and return
        return Math.round(difference_ms / ONE_DAY);
    },
    /**
         * DateString should be "mm/dd/yyyy" or NULL to return current date
         * @param {String} DateString Date string to convert
         * @return {Number} Return value
         */
    dollarH: function(DateString) {
        var aDate = new Date();
        if (DateString) {
            var parseDate = DateString.split("/");
            aDate.setFullYear(parseDate[2], parseDate[0] - 1, parseDate[1]);
        }
        var longtimeago = new Date();
        longtimeago.setYear(1840);
        longtimeago.setMonth(11);
        longtimeago.setDate(31);
        return this.days_between(aDate, longtimeago);
    },
    /**
         * Converts the given TimeString to the Cach√© internal format.
         * TimeString must be in "hh:mm" 24Hour format.
         * @param {String} TimeString Time string to convert
         * @return {String} Return value
         */
    convertTime: function(TimeString) {
        // TimeString should be "hh:mm" 24Hour format.
        var timeArr = TimeString.split(':');
        var hours = 0;
        var minutes = 0;
        if (TimeString) {
            hours = timeArr[0] * 3600;
            if (timeArr[1] !== "00") {
                minutes = timeArr[1] / 60;
                minutes = minutes * 3600;
            }
        }
        // End if(TimeString)
        return (hours + minutes);
    },
    /**
         * Disables all fields for the passed in form object
         * @param {Ext.form.Panel} formObj Form object to disable
         */
    DisableForm: function(formObj) {
        if (!Ext.isEmpty(formObj)) {
            var fields = formObj.getForm().getFields();
            if (!Ext.isEmpty(fields)) {
                for (var idx = 0; idx < fields.items.length; idx++) {
                    if (typeof fields.items[idx].disable === 'function') {
                        fields.items[idx].disable();
                    }
                }
            }
        }
    },
    /**
         * Sets the read only state of the fields in form object.
         * @param {Ext.form.Panel} formObj Form object to set as Read-Only
         * @param {boolean} [isReadOnly=true] Whether the field should be read only
         */
    ReadOnlyForm: function(formObj, isReadOnly) {
        isReadOnly = Ext.valueFrom(isReadOnly, true);
        if (!Ext.isEmpty(formObj)) {
            var fields = formObj.getForm().getFields();
            if (!Ext.isEmpty(fields)) {
                for (var idx = 0; idx < fields.items.length; idx++) {
                    if (typeof fields.items[idx].setReadOnly === 'function') {
                        fields.items[idx].setReadOnly(isReadOnly);
                    } else if (typeof fields.items[idx].disable === 'function') {
                        if (isReadOnly) {
                            fields.items[idx].disable();
                        } else {
                            fields.items[idx].enable();
                        }
                    }
                }
            }
        }
    },
    /*
             var maxItems = formObj.form.items.getCount();
             var index = 0;

             for (index; index < maxItems; index = index + 1) {
             // Tests for and skips form fields that are hidden
             if (!formObj.form.items.items[index].hidden) {
             formObj.form.items.items[index].setReadOnly(isReadOnly);
             }
             } // End for loop
             */
    /**
         * Enables all form fields for the passed in form object
         * @param {Ext.form.Panel} formObj Form object to enable
         */
    EnableForm: function(formObj) {
        if (!Ext.isEmpty(formObj)) {
            var fields = formObj.getForm().getFields();
            if (!Ext.isEmpty(fields)) {
                for (var idx = 0; idx < fields.items.length; idx++) {
                    if (typeof fields.items[idx].enable === 'function') {
                        fields.items[idx].enable();
                    }
                }
            }
        }
    },
    /**
         * Clears all form fields for the passed in form object
         * @param {Ext.form.Panel} formObj Form object to clear
         * @param {Boolean} resetToOriginalValues If form's trackResetOnLoad=true, then form fields will be set to
         *     their originalValue instead of null/''
         */
    ClearForm: function(formObj, resetToOriginalValues) {
        if (!Ext.isEmpty(formObj)) {
            var fields = formObj.getForm().getFields();
            if (!Ext.isEmpty(fields)) {
                for (var idx = 0; idx < fields.items.length; idx++) {
                    var field = fields.items[idx];
                    if (formObj.trackResetOnLoad) {
                        if (resetToOriginalValues) {
                            formObj.getForm().reset();
                            break;
                        } else {
                            field.value = '';
                            if (field.mixins && field.mixins.field && typeof field.mixins.field.initValue === 'function') {
                                field.mixins.field.initValue.apply(field);
                                if (typeof field.clearValue === 'function') {
                                    field.clearValue();
                                }
                                field.wasDirty = false;
                            }
                        }
                    } else {
                        field._tempOriginalValue = field.originalValue;
                        field.originalValue = null;
                        if (typeof field.clearValue === 'function') {
                            field.clearValue();
                        } else if (typeof field.reset === 'function') {
                            field.reset();
                        } else {
                            field.setValue("");
                        }
                        field.originalValue = field._tempOriginalValue;
                        delete field._tempOriginalValue;
                    }
                }
            }
        }
    },
    /**
         * Sets the passed in object to enabled/disabled based
         * on the passed in boolean variable.
         *
         * Properties:
         *
         *  - obj - the object to be enabled/disabled/masked/unmasked
         *  - value - true to enable/unmask - false to disable/mask
         *  - mask - true to mask/unmask instead of enable/disable
         *  - hide - true to hide/show instead of disable/enable, mask/unmask
         */
    ToggleObj: function(obj, value, mask, hide) {
        if (!Ext.isEmpty(obj)) {
            if (mask && !Ext.isEmpty(obj.el)) {
                if (value) {
                    obj.el.unmask();
                } else {
                    obj.el.mask();
                }
            } else if (hide) {
                if (value) {
                    obj.show();
                } else {
                    obj.hide();
                }
            } else {
                if (value) {
                    obj.enable();
                } else {
                    obj.disable();
                }
            }
        }
    },
    /**
         * This function is used to aid in the process of exporting to excel
         * It requires some css tags ('stw-hidden-iframe') that should be in the stewarts-all.css file
         * @param {String} url
         * @param {Object} params
         * @author Jeff Fisher
         */
    postToURL: function(url, params) {
        var ifrm = Ext.getDoc().dom.createElement('iframe');
        ifrm.src = "about:blank";
        ifrm.className = 'stw-hidden-iframe';
        Ext.getBody().dom.appendChild(ifrm);
        var doc = ifrm.contentWindow.document;
        var form = doc.createElement('form');
        ifrm.appendChild(form);
        //var form = doc.getElementById('getExcel');
        form.action = url;
        form.method = 'POST';
        for (var i in params) {
            var input = doc.createElement('input');
            input.type = 'hidden';
            input.name = i;
            input.value = params[i];
            form.appendChild(input);
        }
        form.submit();
        Ext.getBody().dom.removeChild(ifrm);
    },
    /**
         * @private
         */
    injectScriptElement: function(url, onLoad, onError, scope) {
        var script = document.createElement('script'),
            head = document.head || document.getElementsByTagName('head')[0],
            isLoaded = false,
            onLoadFn = function() {
                if (!isLoaded) {
                    isLoaded = true;
                    onLoad.call(scope);
                }
            };
        Ext.apply(script, {
            type: 'text/javascript',
            src: url,
            onload: onLoadFn,
            onerror: onError,
            onreadystatechange: function() {
                if (this.readyState === 'loaded' || this.readyState === 'complete') {
                    onLoadFn();
                }
            }
        });
        head.appendChild(script);
        return script;
    },
    /**
         * @private
         */
    injectLinkElement: function(url, onLoad, onError, scope) {
        onLoad = onLoad || Ext.emptyFn;
        var script = document.createElement('link'),
            head = document.head || document.getElementsByTagName('head')[0],
            isLoaded = false,
            onLoadFn = function() {
                if (!isLoaded) {
                    isLoaded = true;
                    onLoad.call(scope);
                }
            };
        Ext.apply(script, {
            type: 'text/css',
            href: url,
            rel: 'stylesheet',
            onload: onLoadFn,
            onerror: onError,
            onreadystatechange: function() {
                if (this.readyState === 'loaded' || this.readyState === 'complete') {
                    onLoadFn();
                }
            }
        });
        head.appendChild(script);
        return script;
    },
    /**
         * Load a script file, supports both asynchronous and synchronous approaches
         * @param {String} url
         * @param {Function} [onLoad=Ext.emptyFn]
         * @param {Object} [scope=this] The execution scope (`this`) in which the
         * specified function is executed.
         * @param {Boolean} [synchronous=true]
         * @param {Boolean} [bustCache=false]
         * @private
         */
    loadScriptFile: function(url, onLoad, scope, synchronous, bustCache) {
        onLoad = Ext.isFunction(onLoad) ? onLoad : Ext.emptyFn;
        scope = scope || this;
        synchronous = Ext.isDefined(synchronous) ? synchronous : true;
        bustCache = bustCache || false;
        var me = this,
            noCacheUrl = url + (bustCache ? '?' + Date.now() : ''),
            fileName = url.split('/').pop(),
            xhr, status, onScriptError;
        me.isLoading = true;
        if (!synchronous) {
            onScriptError = function() {
                me.onFileLoadError.call(me, {
                    message: "Failed loading '" + url + "', please verify that it exists",
                    url: url,
                    synchronous: false
                });
            };
            if (!Ext.isReady) {
                Ext.onDocumentReady(function() {
                    me.injectScriptElement(noCacheUrl, onLoad, onScriptError, scope);
                });
            } else {
                me.injectScriptElement(noCacheUrl, onLoad, onScriptError, scope);
            }
        } else {
            if (typeof XMLHttpRequest !== 'undefined') {
                xhr = new XMLHttpRequest();
            } else {
                xhr = new ActiveXObject('Microsoft.XMLHTTP');
            }
            xhr.open('GET', noCacheUrl, false);
            xhr.send(null);
            status = (xhr.status === 1223) ? 204 : xhr.status;
            if (status >= 200 && status < 300) {
                /* jshint ignore:start */
                // Firebug friendly, file names are still shown even though they're eval'ed code
                new Function(xhr.responseText + "\n//@ sourceURL=" + fileName)();
                /* jshint ignore:end */
                onLoad.call(scope);
            } else {
                me.onFileLoadError.call(this, {
                    message: "Failed loading synchronously via XHR: '" + url + "'; please " + "verify that the file exists. " + "XHR status code: " + status,
                    url: url,
                    synchronous: true
                });
            }
        }
    },
    /**
         * @private
         */
    onFileLoadError: function(error) {
        throw new Error("[Ext.Loader] " + error.message);
    },
    convertToExtArray: function(cacheList) {
        var extArray = [];
        for (var i = 0; i < cacheList.length; i++) {
            var tempArray = [];
            tempArray[0] = cacheList[i];
            extArray[i] = tempArray;
        }
        return extArray;
    },
    convertToCacheList: function(extArray) {
        var cacheList = [];
        for (var i = 0; i < extArray.length; i++) {
            cacheList[i] = extArray[i][0];
        }
        return cacheList;
    },
    /**
         * Calculates x% of browser's height in pixels
         * Useful for making popup window be as tall as possible without being taller than browser or user spec
         *
         * @param {Number} screenRatio       The percent of the browser that the height of an object should be
         * @param {Number} maxHeight        The largest height an object can be, e.g. window should be no taller than
         *     300px regardless of browser height
         * @param {Number} screenHeight      Supply a screen height to use, or it will lookup browser's height
         * @return {Number}                 Returns either the percent of browser's height or the max height param
         *     (whichever's smallest)
         * @author Greg McGrath
         **/
    adjHeight: function(screenRatio, maxHeight, screenHeight) {
        screenHeight = screenHeight || sl.utils.getBrowserHeight();
        var adjHeight = screenHeight * screenRatio;
        // if can't calculate browser height, return false
        if (adjHeight < 0) {
            return false;
        }
        // if calculated height is taller than user allows, return user's max height
        if (!Ext.isEmpty(maxHeight) && maxHeight < adjHeight) {
            return maxHeight;
        }
        return adjHeight;
    },
    /**
         * Calculates x% of browser's width in pixels
         * Useful for making popup window be as wide as possible without being taller than browser or user spec
         *
         * @param {Number} screenRatio       The percent of the browser that the width of an object should be
         * @param {Number} maxWidth         The largest width an object can be, e.g. window should be no wider than
         *     300px regardless of browser width
         * @param {Number} screenWidth      Supply a screen width to use, or it will lookup browser's width
         * @return {Number}                 Returns either the percent of browser's width or the max width param
         *     (whichever's smallest)
         * @author Greg McGrath
         **/
    adjWidth: function(screenRatio, maxWidth, screenWidth) {
        screenWidth = screenWidth || sl.utils.getBrowserWidth();
        var adjWidth = screenWidth * screenRatio;
        // if can't calculate browser width, return false
        if (adjWidth < 0) {
            return false;
        }
        // if calculated width is taller than user allows, return user's max width
        if (!Ext.isEmpty(maxWidth) && maxWidth < adjWidth) {
            return maxWidth;
        }
        return adjWidth;
    },
    getViewport: function() {
        return Ext.ComponentQuery.query('viewport')[0];
    },
    /**
         * Formats phone number to have to look like 123-4567 or (123) 456-7890 if applicable
         * Does not change phone numbers that letters or other characters.
         *
         * @param {Number/String} value     The phone number
         * @return {String}                     Returns phone number that is either formatted or original pattern
         * @author Greg McGrath
         **/
    FormatPhoneNumber: function(value) {
        value = value.toString();
        var regex = /^[0-9]+$/;
        var onlyNbrs = regex.test(value);
        if (value.length === 7 && onlyNbrs) {
            //123-4567
            value = value.slice(0, 3) + "-" + value.slice(3, 7);
        } else if (value.length === 10 && onlyNbrs) {
            //(123) 456-7890
            value = "(" + value.slice(0, 3) + ") " + value.slice(3, 6) + "-" + value.slice(6, 10);
        } else if (value.length === 12 && value.indexOf("-", 0) === 3 && value.indexOf("-", 4) === 7 && value.indexOf("-", 8) < 0) {
            // from 123-456-7890 to (123) 456-7890
            value = "(" + value.slice(0, 3) + ") " + value.slice(4, 7) + "-" + value.slice(8, 12);
        }
        return value;
    },
    /**
         * Tests if all objects exist in an object chain (this.a.b.c.d.e)
         *
         * Example:
         *
         *      var a = {b: {c: {d: {e: "e's value"}}}}
         *      // want to test if a.b.c.d.e exists
         *      sl.utils.IsObjectChainDefined(a, "b.c.d.e") // "e's value"
         *      sl.utils.IsObjectChainDefined(a, "b.UNDEFINED_LINK.d.e") // undefined
         *
         * @param {Object} firstObj     The first segment of the object (this from this.a.b.c.d.e)
         * @param {Object} chainStr     Starting after the first object in the list (this in this.a.b.c.d.e), chained
         *     objects to test written in string format. e.g. this.a.b.c.d.e --> "a.b.c.d.e" **Notice no "this"**
         * @return {Object}             The last property in the chained objects, or undefined if any segment is
         *     undefined
         **/
    IsObjectChainDefined: function(firstObj, chainStr) {
        var chainArr = chainStr.split('.');
        var segment = firstObj[chainArr.shift()];
        while (segment && chainArr.length) {
            segment = segment[chainArr.shift()];
        }
        return segment;
    },
    // undefined or last object in chain
    FormatFloat: function(val) {
        if (!Ext.isEmpty(val)) {
            if (typeof val === 'string') {
                // remove any trailing 0s, so xx.123000 -> xx.123.
                // (xx.12340023 will not change)
                val = val.replace(/0*$/, "");
            } else {
                val = val.toString();
            }
            // if there is no decimal component of number, return just the whole number portion and remove the "."
            var ps = val.split('.'),
                whole = ps[0],
                sub = ps[1] ? '.' + ps[1] : '';
            // add decimal component if exists
            if (!Ext.isEmpty(sub)) {
                val = whole + sub;
            } else // no decimal
            {
                val = whole;
            }
            return val;
        }
    },
    /**
         * Capitalize the first letter of ***each*** word for the given string.
         * @param {String} phrase The text to convert
         * @return {String}
         */
    capitalizeEachWord: function(phrase) {
        phrase = Ext.valueFrom(phrase, '').toString();
        return Ext.String.splitWords(phrase).reduce(function(previousValue, currentValue, currentIndex, array) {
            return previousValue + (previousValue.length > 0 ? ' ' : '') + Ext.String.capitalize(currentValue);
        }, "");
    },
    /**
         * Used to lock down application components using JsComponent Security
         * @param {Array} objArr    Array of objects to be tested for security
         * @param {Boolean} disable Pass true to disable unauthorized components (Defaults to true)
         * @param {Boolean} hide    Pass true to hide unauthorized components (Defaults to false)
         * @param {Function} altFunction
         * @param {Object} scope
         */
    Securitize: function(objArr, disable, hide, altFunction, scope) {
        disable = (disable === undefined) ? 1 : disable;
        hide = (hide === undefined) ? 0 : hide;
        if ((!Ext.isEmpty(window.parent.AppMenu)) && (!Ext.isEmpty(objArr))) {
            var compIDs = [];
            Ext.each(objArr, function(item, index, allItems) {
                if (!Ext.isEmpty(item.itemId)) {
                    compIDs.push(item.itemId);
                }
            });
            Ext.Ajax.request({
                url: '../Ext.JsonRequest.cls',
                scope: scope,
                params: {
                    CacheClassName: 'App.Security.JsComponent',
                    CacheMethodName: 'CanUse',
                    CacheCommandType: 1,
                    ProfileId: window.parent.AppMenu.CompanySelect.getValue(),
                    componentId: Ext.encode(compIDs),
                    app: window.location.pathname
                },
                callback: function(opts, success, response) {
                    var r = Ext.decode(response.responseText);
                    if (r.success) {
                        Ext.each(compIDs, function(item, index, allItems) {
                            if (Ext.isEmpty(altFunction)) {
                                sl.utils.ToggleObj(objArr[index], parseInt(r.result[item], 10), disable, hide);
                            } else {
                                altFunction.call(this, item, index, allItems, r);
                            }
                        }, this);
                    }
                }
            });
        }
    },
    BtnLockDown: function(object, doLock, doHide, excludeArr, lockSearchPlug) {
        var hide = doHide || false;
        var lock = doLock || false;
        var exAr = excludeArr || [];
        var lockSearch = lockSearchPlug || false;
        if (!lockSearch) {
            var gridEls = [];
            gridEls = object.getEl().dom.getElementsByClassName('x-grid-panel');
            // Object does not contain any grids.
            // Lets check if the object is a grid.
            if ((gridEls.length === 0) && (object.getEl().dom.className.indexOf('x-grid-panel') !== -1)) {
                gridEls = [
                    object.getEl().dom
                ];
            }
            var comp = "";
            Ext.each(gridEls, function(grid, index, all) {
                comp = Ext.getCmp(grid.id);
                if (!Ext.isEmpty(comp) && !Ext.isEmpty(comp.searchPlugin)) {
                    if (!Ext.isEmpty(comp.searchPlugin.field) && !Ext.isEmpty(comp.searchPlugin.field.ownerCt)) {
                        var tb = comp.searchPlugin.field.ownerCt;
                        Ext.each(tb.getEl().dom.getElementsByClassName('x-btn'), function(btn, index, all) {
                            var btnComp = Ext.getCmp(btn.id);
                            exAr.push(btnComp);
                        }, this);
                    }
                }
            }, this);
        }
        if (!Ext.isEmpty(object.getEl())) {
            var btns = object.getEl().dom.getElementsByClassName('x-btn');
            if (Ext.isEmpty(btns) && !Ext.isEmpty(object.disable) && Ext.isEmpty(exAr.filter(function(item) {
                return (!Ext.isEmpty(item)) ? (item.id === object.id) : false;
            }))) {
                // No buttons to lock in this object lets disable the whole object
                object.disable();
                if (hide) {
                    object.hide();
                }
            } else {
                Ext.each(btns, function(btn, index, all) {
                    var comp = Ext.getCmp(btn.id);
                    if (!Ext.isEmpty(comp) && Ext.type(comp) === 'object' && Ext.isEmpty(exAr.filter(function(item) {
                        return (!Ext.isEmpty(item)) ? (item.id === btn.id) : false;
                    }))) {
                        if (lock) {
                            comp.disable();
                            if (hide) {
                                comp.hide();
                            }
                        } else // we not unlocking so lets check if the comp is disabled and if so enable it.
                        {
                            if (comp.disabled) {
                                comp.enable();
                            }
                            // lets check if its hidden and if so show it.
                            if (comp.hidden) {
                                comp.show();
                            }
                        }
                    }
                }, this);
            }
        }
    },
    HasResource: function(resourceName, callback, scope, permission, profile) {
        var profileID = profile || window.parent.AppMenu.CompanySelect.getValue();
        var level = permission || "U";
        var scp = scope || this;
        sl.utils.Method("App.Security.UserProfile", "CheckPermissionByName", {
            "ProfileId": profileID,
            "ResourceName": resourceName,
            "Permission": level
        }, function(params, r) {
            callback.call(this, parseInt(r.result, 10));
        }, scp);
    },
    /*
             Ext.Ajax.request({
             url: '../Ext.JsonRequest.cls',
             scope: scp,
             params: {
             CacheClassName: 'App.Security.UserProfile',
             CacheMethodName: 'CheckPermissionByName',
             CacheCommandType: 1,
             ProfileId: profileID,
             ResourceName: resourceName,
             Permission: level
             },
             callback: function(opts, success, response) {
             var r = Ext.decode(response.responseText);
             callback.call(this, parseInt(r.result));
             }
             });
             */
    LockApp: function(container, lockForms, lockGrids, lockBtns, excludeArr) {
        var comp = "";
        var elArr = [];
        var doBtns = lockBtns || false;
        var doForms = lockForms || false;
        var doGrids = lockGrids || false;
        var excludes = excludeArr || [];
        var gridEls = [];
        // Exclude Grid Panel Search Plugins
        gridEls = container.getEl().dom.getElementsByClassName('x-grid-panel');
        // If no grid elements found within the container lets check if the container is a grid.
        if ((gridEls.length === 0) && (container.getEl().dom.className.indexOf('x-grid-panel') !== -1)) {
            gridEls = [
                container.getEl().dom
            ];
        }
        Ext.each(gridEls, function(grid, index, all) {
            comp = Ext.getCmp(grid.id);
            // Get the grid component and check if it has a searchPlugin
            if (!Ext.isEmpty(comp) && !Ext.isEmpty(comp.searchPlugin)) {
                if (!Ext.isEmpty(comp.searchPlugin.field)) {
                    // Exclude the searchPlugin text field
                    excludes.push(comp.searchPlugin.field);
                    if (!Ext.isEmpty(comp.searchPlugin.field.ownerCt)) {
                        // Get the searchPlugins owning toolbar so we can exclude the searchPlugin buttons
                        var tb = comp.searchPlugin.field.ownerCt;
                        Ext.each(tb.getEl().dom.getElementsByClassName('x-btn'), function(btn, index, all) {
                            var btnComp = Ext.getCmp(btn.id);
                            if (!Ext.isEmpty(btnComp)) {
                                excludes.push(btnComp);
                            }
                        }, this);
                    }
                }
            }
        }, this);
        if (doForms) {
            comp = "";
            elArr = [];
            elArr = container.getEl().dom.getElementsByClassName('x-form-field');
            if ((container.getEl().dom.className.indexOf("x-form-field") !== -1) && (!elArr.length)) {
                elArr = [];
                elArr.push(container.getEl());
            }
            Ext.each(elArr, function(formEl, index, all) {
                comp = Ext.getCmp(formEl.id);
                if (!Ext.isEmpty(comp) && Ext.isEmpty(excludes.filter(function(item) {
                    return (!Ext.isEmpty(item)) ? (item.id === formEl.id) : false;
                }))) {
                    if (typeof (comp.setReadOnly) === "function") {
                        comp.setReadOnly(true);
                    } else {
                        comp.disable();
                    }
                }
            }, this);
        }
        if (doGrids) {
            comp = "";
            elArr = [];
            elArr = container.getEl().dom.getElementsByClassName('x-grid-panel');
            if ((container.getEl().dom.className.indexOf('x-grid-panel') !== -1) && (!elArr.length)) {
                elArr = [];
                elArr.push(container.getEl());
            }
            Ext.each(elArr, function(gridEl, index, all) {
                comp = Ext.getCmp(gridEl.id);
                if (!Ext.isEmpty(comp) && Ext.isEmpty(excludes.filter(function(item) {
                    return (!Ext.isEmpty(item)) ? (item.id === gridEl.id) : false;
                }))) {
                    // if available lock the drag zone
                    if (!Ext.isEmpty(comp.getView)) {
                        if (!Ext.isEmpty(comp.getView().dragZone)) {
                            comp.getView().dragZone.lock();
                        }
                    }
                    // Set all columns to non-editable
                    comp.setColumnsAsEditable(false);
                }
            }, this);
        }
        if (doBtns) {
            // Since we have already added the searchPlugin buttons to the exclude
            // we pass in true for lockSearchPlug so the method doesn't add them again
            sl.utils.BtnLockDown(container, true, false, excludes, true);
        }
    },
    HasPermission: function(componentId, application, permission, profile, callback, scope) {
        var profileID = profile || window.parent.AppMenu.CompanySelect.getValue();
        var level = permission || "U";
        var scp = scope || this;
        sl.utils.Method("App.Security.JsComponent", "CanUse", {
            "ProfileId": profileID,
            "componentId": componentId,
            "permission": level,
            "app": application
        }, function(params, r) {
            callback.call(this, parseInt(r.result[params.componentId], 10));
        }, scp);
    },
    /*
             Ext.Ajax.request({
             url: '../Ext.JsonRequest.cls',
             scope: scp,
             params: {
             CacheClassName: 'App.Security.JsComponent',
             CacheMethodName: 'CanUse',
             CacheCommandType: 1,
             ProfileId: profileID,
             componentId: componentId,
             permission: level,
             app: application
             },
             callback: function(opts, success, response) {
             var r = Ext.decode(response.responseText);
             callback.call(this, parseInt(r.result[componentId]));
             }
             });
             */
    ToggleItems: function(items, usable, hide) {
        for (var i = 0; i < items.length; i++) {
            this.ToggleObj(items[i], usable, hide);
        }
    },
    /**
         * Rounding function meant for pricing value
         * Returned Value will always have 2 decimals.  You can optionally allow it to have more if needed.
         * For example, if you set `maxDecimals`=5 and your input is 0.123456, it will return "0.12346"
         *
         * If you set `maxDecimals`=5 and your input is 0.1, it will return "0.1"
         *
         * If you set `minDecimals`=2 & `maxDecimals`=5 and your input is 0.1, it will return "0.10"
         *
         * If you set `minDecimals`=2 & `maxDecimals`=5 and your input is 0.10000, it will return "0.10"
         *
         * If you set `minDecimals`=2 & `maxDecimals`=5 and your input is 0.123456, it will return "0.12346"
         * @param {Number/String} input                        The value to be rounded.  Can handle both as a number or
         *     as a string
         * @param {Number} [maxDecimals=2] The most decimals to show in number
         * @param {Number} [minDecimals=2] The minimum decimals to show in number
         * @param {Boolean} [forceZeroIfEmpty=false] If the input is equal to "", should value be set to `0` or leave
         *     as "". When `false`, returns "".
         * @return {String} Rounded value represented as a string
         **/
    roundForPricingRendering: function(input, maxDecimals, minDecimals, forceZeroIfEmpty, includeDollarSign) {
        minDecimals = Ext.valueFrom(minDecimals, 2);
        maxDecimals = Math.max(Ext.valueFrom(maxDecimals, 2) - minDecimals, 0);
        // don't let value be less than zero
        includeDollarSign = Ext.valueFrom(includeDollarSign, false);
        var defaultFormat = '0,000.',
            minFormat = new Array(minDecimals + 1).join('0'),
            maxFormat = new Array(maxDecimals + 1).join('#'),
            formatStr = defaultFormat + minFormat + maxFormat,
            val;
        if (forceZeroIfEmpty && Ext.isEmpty(input) && !Ext.isNumeric(input)) {
            input = 0;
        }
        val = Ext.util.Format.number(input, formatStr);
        if (includeDollarSign && !Ext.isEmpty(val)) {
            val = '$' + val;
        }
        return val;
    },
    /**
         * @author KY
         * Checks if the passed in obj/objProperty is in the passed in array
         * @param {Array} array The array to be checked, could contain objects or strings
         * @param {Object} obj The object to look for in the array or the object which contains the passed in property
         * @param {String} [property]  If passed in, function will look for this property's value in the array
         * Example: the function will look for the value of obj[property] in the array;
         *
         *     if (sl.utils.InArray(exArray, myButton, 'itemId')) {
         *       // This button's itemId is in the exArray
         *     }
         *     else {
         *       // This button's itemId is NOT in the exArray
         *     }
         * @return {Boolean}
         **/
    InArray: function(array, obj, property) {
        var me = obj || this;
        var inArr = false;
        var toCheck = "";
        if (Ext.isDefined(me.get)) {
            toCheck = Ext.isDefined(property) ? me.get(property) : me;
        } else {
            toCheck = Ext.isDefined(property) ? me[property] : me;
        }
        if (!Ext.isEmpty(toCheck)) {
            if (!Ext.isEmpty(array.filter(function(item) {
                return (!Ext.isEmpty(item)) ? (item === toCheck) : false;
            }))) {
                inArr = true;
            }
        }
        return inArr;
    },
    /**
         * @author KY
         * This is a function to refresh a tree's data without actually reloading the tree.
         * This is bested used on Display Only Tree's but could be used with Editable Tree's as long as
         * care was taken to not call it if the user has made changes as this function will overwrite user edits.
         * @param {Object} tree The tree whose data will be updated
         * @param {String} [nodeType="root"] The string value for the nodeType where updating will start
         * @param {String} [nodeId] The value needed needed by the tree query to return the appropriate data for the
         *     node.
         * @param {Object} [data] Modified data to update the node with, typically will be passed in as a empty string,
         *     used internally in the recursive calls
         * @param {Function} [callBack=Ext.emptyFn] function to be called after updating has taken place.
         * Function will be passed the tree that was updated.
         * @param {Object} [scope=this] The scope the callBack function will be called with, defaults to the scope this
         *     function is called with.
         * @param {Object} [options]
         *
         * Example Usage:
         *
         * Calling the line below will traverse myTree
         * starting at the root node and update all expanded nodes to the current data on the server,
         * and then call my callback function with the provided scope.
         *
         *     sl.utils.UpdateTreeUI(myTree, "root", rootID, "", myCallBackFn, callBackScope);
         *
         */
    UpdateTreeUI: function(tree, nodeType, nodeId, data, callBack, scope, options) {
        tree = tree || this;
        data = Ext.isEmpty(data) ? {} : data;
        nodeType = Ext.isEmpty(nodeType) ? "root" : nodeType;
        nodeId = Ext.isEmpty(nodeId) ? "" : nodeId;
        callBack = callBack || Ext.emptyFn;
        scope = scope || this;
        options = options || {};
        // If we have not already added the event, add a single event
        // so when the store's root is loaded it will set a flag to stop any existing update
        if (!tree.getStore()._tempBeforeLoadAdded) {
            tree.getStore().on('beforeload', function(store, operation, eOpts) {
                if (operation.node.isRoot()) {
                    store._cancelUpdate = true;
                }
            }, this, {
                single: true
            });
            tree.getStore()._tempBeforeLoadAdded = true;
        }
        var node,
            refreshCollapsed = Ext.isDefined(options.refreshCollapsed) ? options.refreshCollapsed : false,
            column, newVal, currValue, field,
            leafChanged = false,
            highlight = function(record, column, color, opts) {
                var tree = this,
                    domNode;
                opts = Ext.apply({}, opts);
                tree.getView().scrollRowIntoView(record);
                if (column) {
                    // column specified, will highlight only a single cell
                    domNode = tree.getView().getCellByPosition({
                        record: record,
                        column: column
                    }, true);
                } else {
                    // will highlight entire row
                    domNode = tree.getView().getRow(record);
                }
                if (Ext.isElement(domNode)) {
                    Ext.fly(domNode, Date.now().toString()).select('.x-grid-cell-inner').highlight(color, opts);
                }
            };
        // If the nodeType is root lets just use the root node
        if (nodeType === "root") {
            node = tree.getRootNode();
        } else {
            // Lets traverse the tree looking the node that
            // has a nodeId matching the passed in nodeId
            var root = tree.getRootNode();
            root.cascadeBy(function(n) {
                if (n.get(tree.store.nodeParam) === nodeId) {
                    node = n;
                    // We found one lets return false to stop the iteration
                    return false;
                }
            });
        }
        // Lets make sure we have a node
        if (!Ext.isEmpty(node)) {
            if (tree.fireEvent('beforeuiupdate', tree, node) !== false) {
                // Lets loop through the passed in data and compare with what the node has.
                for (var col in data) {
                    currValue = !Ext.isEmpty(node.get(col)) ? node.get(col) : '';
                    newVal = !Ext.isEmpty(data[col]) ? data[col] : '';
                    column = tree.columns[tree.getColumnIndexByDataIndex(col)];
                    //Make sure we are comparing apples to apples
                    field = node.getField(col);
                    if (field && Ext.isFunction(field.convert)) {
                        newVal = field.convert(newVal, node);
                    }
                    // If they are not equal then update store's record
                    if (!sl.utils.areValuesEquivalent(newVal, currValue)) {
                        // If they are not equal then lets update
                        //if (!node.isEqual(currValue, newVal)) {
                        leafChanged = (tree.getStore().leafField === field);
                        node.set(col, newVal, {
                            dirty: false
                        });
                        if (leafChanged) {
                            node.set('loaded', false);
                            column = tree.store.textField;
                        }
                        // If this field has a column then lets try and draw attention to the update.
                        if (!Ext.isEmpty(column)) {
                            // highlight the change
                            Ext.Function.defer(highlight, 100, tree, [
                                node,
                                column,
                                undefined,
                                {
                                    duration: 5000
                                }
                            ]);
                        }
                    }
                }
                // Lets set the nodeId and the nodeType
                var params = {
                        nodeId: nodeId,
                        nodeType: nodeType,
                        walkTree: 0
                    };
                // Now lets get all the other params from the tree store
                params = Ext.applyIf(params, tree.store.proxy.extraParams);
                // This conditional drives what happens
                // Make sure we have a node then lets check if it is expanded and that _visible is not false, indicating
                // that it is hidden by filtering But if refreshCollapsed is true then we will update it as long as it has
                // it has children Last we make sure that our private updated flag is not set indicating that we have just
                // updated this node
                if ((!Ext.isEmpty(node)) && ((node.isExpanded() && (node._visible || !Ext.isDefined(node._visible))) || (refreshCollapsed && node.hasChildNodes())) && (!node.updated) && (!tree.getStore()._cancelUpdate)) {
                    // Private property to reduce the chance of duplicate U
                    node.updated = true;
                    Ext.Ajax.request({
                        url: '../Ext.TreeLoader.cls',
                        params: params,
                        timeout: 3600000,
                        callback: function(opts, success, response) {
                            var r = Ext.decode(response.responseText);
                            var parentNode, chNode,
                                row = "";
                            // Lets save off the node so we can tell what has been touched
                            var touched = [];
                            // Lets first check if we are on the root node
                            if (opts.params.nodeType === "root") {
                                parentNode = tree.getRootNode();
                            } else {
                                var root = tree.getRootNode();
                                root.cascadeBy(function(eachNode) {
                                    // Cascade the tree looking for the node we just reloaded matching on the nodeParam
                                    // which is the nodeId
                                    if (eachNode.get(tree.store.nodeParam) === opts.params.nodeId) {
                                        // set the node we just reloaded as the parent node then return false to stop the
                                        // cascade
                                        parentNode = eachNode;
                                        return false;
                                    }
                                });
                            }
                            // Verify we have a parentNode
                            if (!Ext.isEmpty(parentNode)) {
                                var fired = false;
                                // Declare the callback function to be called after a new node is expanded
                                // fired is used so that the animation is only called once.  Otherwise it will be called
                                // for each child that is expanded.
                                var fn = function() {
                                        if (!fired) {
                                            //Ext.fly(tree.getView().getNode(newNode)).select('.x-grid-cell-inner').highlight();
                                            fired = true;
                                            Ext.Function.defer(highlight, 500, tree, [
                                                newNode
                                            ]);
                                        }
                                    };
                                // parent node has no children, show that it is loaded and expanded but with nothing below it
                                if (r.length === 0) {
                                    parentNode.set('loaded', true);
                                    parentNode.set('expanded', true);
                                } else {
                                    for (var rdx = 0; rdx < r.length; rdx++) {
                                        row = r[rdx];
                                        // Loop through the returned records, each record correlates to a child under the
                                        // parent node.
                                        chNode = parentNode.findChild(tree.store.nodeParam, row[tree.store.nodeParam], true);
                                        // If we found a child then lets update it
                                        if (!Ext.isEmpty(chNode)) {
                                            touched.push(row[tree.store.nodeParam]);
                                            // Lets call this function again, passing in the child node so we can update it and
                                            // any of it's expanded children
                                            sl.utils.UpdateTreeUI(tree, chNode.get(tree.store.nodeParams.nodeType), chNode.get(tree.store.nodeParams.nodeId), row, Ext.emptyFn, this, options);
                                        } else {
                                            // Insert new Node......
                                            var newNode = parentNode.appendChild(row);
                                            touched.push(row[tree.store.nodeParam]);
                                            if (!newNode.isLeaf()) {
                                                newNode.set('loaded', false);
                                            }
                                            if (!tree.getStore()._cancelUpdate) {
                                                // Recursively expand the new node so we can see whats in it!
                                                //newNode.expand(true, fn, this);
                                                newNode.set('expanded', true);
                                                sl.utils.UpdateTreeUI(tree, newNode.get(tree.store.nodeParams.nodeType), newNode.get(tree.store.nodeParams.nodeId), row, Ext.emptyFn, this, options);
                                            } else {
                                                return false;
                                            }
                                        }
                                    }
                                }
                                // Lets remove any deleted nodes
                                if (parentNode.childNodes.length > 0) {
                                    var remFn = function() {
                                            // scope here is the node being removed
                                            Ext.Function.defer(highlight, 500, tree, [
                                                this,
                                                undefined,
                                                "#D80000",
                                                {
                                                    callback: Ext.Function.pass(tree.getStore().remove, [
                                                        this
                                                    ], tree.getStore())
                                                }
                                            ]);
                                        };
                                    for (var idx = parentNode.childNodes.length; idx >= 0; idx--) {
                                        if (!Ext.isEmpty(parentNode.childNodes[idx])) {
                                            if (!sl.utils.InArray(touched, parentNode.childNodes[idx], tree.getStore().nodeParam)) {
                                                parentNode.childNodes[idx].collapse(true, remFn, parentNode.childNodes[idx]);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        scope: scope
                    });
                }
                // we are done!
                callBack.call(scope, tree);
                // Call attempted for each node, function is throttled to improve speed and smoothness, may get called 20
                // times but only execute twice
                sl.utils.treeRefresh(tree);
            }
        }
    },
    // Resets the private property "updated" to false
    /**
         * Just used by {@link #method-UpdateTreeUI} function above
         * @private
         */
    treeRefresh: Ext.Function.createThrottled(function(tree) {
        delete tree.getStore()._cancelUpdate;
        delete tree.getStore()._tempBeforeLoadAdded;
        tree.getRootNode().cascadeBy(function(node) {
            if (node.updated) {
                node.updated = false;
            }
        });
    }, //tree.resumeLayouts();
    //tree.view.resumeLayouts();
    1200),
    /**
         * Replaces a character at a string's index
         *
         * Example:
         *
         *     sl.utils.ReplaceCharAt(3, "My Test String", "<NewText>") === "My <NewText>est String"
         *
         * http://stackoverflow.com/questions/1431094/how-do-i-replace-a-character-at-a-particular-index-in-javascript

         * @param {Number} index
         * @param {String} origText      Original String that is getting a character replaced
         * @param {String} newText       Replacement text that is replacing character at index
         * @return {String} updated text
         */
    ReplaceCharAt: function(index, origText, newText) {
        return origText.substr(0, index) + newText + origText.substr(index + 1);
    },
    /**
         * Removes white space at the beginning and end of string. Also removes repeated whitespace characters
         * Example:
         *
         *     sl.utils.AllTrim("   abc  def   ") === "abc def"
         *
         * http://stackoverflow.com/questions/7764319/how-to-remove-duplicate-white-spaces-in-a-string
         * @param {String} str String to trim
         * @return {String} updated text
         */
    AllTrim: function(str) {
        str = String(str || '');
        return str.trim().replace(/\s+/g, ' ').replace(/^\s+|\s+$/, '');
    },
    /**
         * Returns the namespace of a component
         * @param {Object} object
         * @return {String} namespace
         */
    getComponentNamespace: function(object) {
        var name = Ext.getDisplayName(object),
            words = name.split('.');
        return words[0];
    },
    /**
         * Returns an object of all of a component's xtypes organized by namespace
         * @param {Ext.Component} component
         * @return {Object} all xtypes for the component by namespace
         */
    getXTypesByNamespace: function(component) {
        component = component.prototype || component;
        var self = component.self || component.prototype.self,
            xtypes, parentPrototype, parentXtypes, namespace, xtypesNS;
        if (!self.xtypesByNamespace) {
            xtypes = {};
            parentPrototype = component;
            namespace = '';
            while (parentPrototype) {
                parentXtypes = parentPrototype.xtypes;
                if (parentXtypes !== undefined) {
                    namespace = this.getComponentNamespace(parentPrototype);
                    xtypesNS = xtypes[namespace] || [];
                    xtypesNS.unshift.apply(xtypesNS, [
                        parentXtypes
                    ]);
                    xtypes[namespace] = xtypesNS;
                }
                parentPrototype = parentPrototype.superclass;
            }
            self.xtypesByNamespace = xtypes;
        }
        return self.xtypesByNamespace;
    },
    /**
         * Returns if `object` is an instance of the `classRef` or if the `object` has the same alias/xtype
         * Works for Components, Stores, Plugins
         * Should only be used to match against Ext/Stewarts components
         * May not be accurate if comparing the testObject to an app-defined class, like InvAdjBatch.view.MyGrid
         * @param {Ext.Component/Ext.data.Store/Ext.plugin.Abstract/Object} testObject The object to test.
         * @param {Ext.Component/Ext.data.Store/Ext.plugin.Abstract/Object/String} toFind Variable to test against
         * @param {Boolean} [shallow] If `true`, will only compare against the highest level Stewarts or Ext component
         *     (e.g. won't compare against Ext.Base)
         * @return {Boolean}
         */
    hasAlias: function(testObject, toFind, shallow) {
        var me = this,
            isX = false,
            desiredAlias, baseObject, xtypes, xtype, classProto,
            testClass = function(myClass) {
                if (!shallow) {
                    return myClass.isXType(desiredAlias, shallow);
                } else {
                    // do a shallow search (so only look at the highest class in hierarchy for a match)
                    var xtypesByNamespace = me.getXTypesByNamespace(myClass),
                        namespace = me.getComponentNamespace(myClass),
                        arrayToSearch = [],
                        desiredNamespace;
                    // namespace order: Ext -> Stewarts -> Custom From App
                    if ([
                        'sl',
                        'Ext'
                    ].indexOf(namespace) < 0) {
                        // check the Stewarts namespace if it's there; otherwise, use Ext
                        desiredNamespace = (xtypesByNamespace.sl || []).length ? 'sl' : 'Ext';
                        arrayToSearch = xtypesByNamespace[desiredNamespace];
                    } else {
                        arrayToSearch = xtypesByNamespace[namespace];
                    }
                    // shallow search, so search the highest class location
                    arrayToSearch = arrayToSearch[arrayToSearch.length - 1];
                    return Boolean((arrayToSearch || []).indexOf(desiredAlias) >= 0);
                }
            };
        testObject = (testObject || {}).prototype || testObject || {};
        shallow = Ext.isDefined(shallow) ? shallow : false;
        if (Ext.isString(toFind)) {
            desiredAlias = toFind;
        } else {
            baseObject = ((toFind || {}).prototype || toFind);
            desiredAlias = Ext.isFunction(baseObject.getXType) ? baseObject.getXType() : false;
        }
        if (desiredAlias) {
            if (Ext.isFunction(testObject.isXType)) {
                isX = testClass.call(this, testObject);
            } else if (testObject.isStore) {
                if (desiredAlias.indexOf('store.') !== 0) {
                    desiredAlias = 'store.' + desiredAlias;
                }
                if (!shallow) {
                    var testStore = testObject;
                    do {
                        isX = Boolean(testStore.alias.indexOf(desiredAlias) >= 0);
                        if (isX) {
                            break;
                        }
                        testStore = testStore.superclass;
                    } while (testStore.isStore);
                } else {
                    isX = Boolean(testObject.alias.indexOf(desiredAlias) >= 0);
                }
            } else if (testObject.isPlugin) {
                isX = (testObject.ptype === desiredAlias) || (testObject.alias.indexOf(desiredAlias) >= 0);
                if (!shallow) {
                    var testPlugin = testObject;
                    do {
                        isX = Boolean(testPlugin.alias.indexOf(desiredAlias) >= 0);
                        if (isX) {
                            break;
                        }
                        testPlugin = testPlugin.superclass;
                    } while (testPlugin.isPlugin);
                } else {
                    isX = Boolean(testObject.alias.indexOf(desiredAlias) >= 0);
                }
            } else if (!shallow && Ext.isObject(testObject.xtypesMap) && !Ext.Object.isEmpty(testObject.xtypesMap)) {
                isX = testObject.xtypesMap[desiredAlias] || false;
            } else if (!shallow && Ext.isFunction(testObject.getXTypes) && ((xtypes = testObject.getXTypes()) && (xtypes.length > 0))) {
                isX = Boolean(xtypes.indexOf(desiredAlias) >= 0);
            } else {
                xtype = testObject.xtype;
                // find the class that this xtype belongs to
                classProto = (Ext.ClassManager.getByAlias('widget.' + xtype) || {}).prototype;
                if (classProto) {
                    isX = testClass.call(this, classProto);
                } else {
                    isX = ((xtype && xtype === desiredAlias) || (testObject.ptype && testObject.ptype === desiredAlias));
                }
            }
        } else {
            sl.consoleWarn('[' + this.$className + ':hasAlias] Required `desiredAlias` is undefined');
        }
        return isX;
    },
    /**
         * Returns if `object` is an instance of the `classRef`
         * The instanceof operator tests whether an object has in its prototype chain the prototype property of a
         * constructor. For example, an sl.panel.grid.EditorGrid is an instance of a Ext.container.Container
         * @param {Ext.Component} object The object to test.
         * @param {Ext.Component} classRef Function to test against
         * @return {Boolean}
         */
    isInstanceOf: function(object, classRef) {
        return object instanceof classRef;
    },
    /**
         * Returns if `object` is an instance of the `classRef` or if the `object` has the same alias/xtype
         * Works for Components, Stores, Plugins
         * @param {Ext.Component} object The object to test.
         * @param {Ext.Component} classRef Function to test against
         * @param {Boolean} strict If `true`, will only compare against the highest level Stewarts or Ext component
         *     (e.g. won't compare against Ext.Base)
         * @return {Boolean}
         */
    matchesComponent: function(object, classRef, strict) {
        strict = strict || false;
        object = ((object || {}).prototype || object);
        var isMatch = false;
        if (!strict) {
            // instanceof will check if the object inherited from the classRef at any point
            isMatch = this.isInstanceOf(object, classRef);
        }
        if (!isMatch) {
            isMatch = this.hasAlias(object, classRef, strict);
        }
        return isMatch;
    },
    isComboBox: function(object, strict) {
        return this.matchesComponent(object, Ext.form.ComboBox, strict);
    },
    isListComboBox: function(object, strict) {
        return this.matchesComponent(object, sl.field.ListCombo, strict);
    },
    isGridSearchField: function(object, strict) {
        return this.matchesComponent(object, sl.panel.grid.plugin.GridSearchField, strict);
    },
    isComboGrid: function(object, strict) {
        return this.matchesComponent(object, sl.field.ComboGrid, strict);
    },
    isDisplayGrid: function(object, strict) {
        return this.matchesComponent(object, sl.panel.grid.DisplayGrid, strict);
    },
    isEditorGrid: function(object, strict) {
        return this.matchesComponent(object, sl.panel.grid.EditorGrid, strict);
    },
    isSearchField: function(object, strict) {
        return this.matchesComponent(object, sl.field.SearchField, strict);
    },
    isCacheStore: function(object, strict) {
        return this.matchesComponent(object, sl.data.CacheStore, strict);
    },
    // return this.isInstanceOf((object || (object || {}).prototype), sl.data.CacheStore) ||
    // this.hasAlias(object, sl.data.CacheStore);
    isStore: function(object, strict) {
        return this.matchesComponent(object, Ext.data.Store, strict);
    },
    isRecord: function(object) {
        return this.isInstanceOf((object || (object || {}).prototype), Ext.data.Model);
    },
    // Returns true if comp param represents a tbfill component ('->')
    isTBFill: function(comp) {
        return (comp === '->' || (Ext.isObject(comp) && [
            'tbfill',
            'tbspacer'
        ].indexOf((Ext.isFunction(comp.getXType) ? comp.getXType() : comp.xtype)) >= 0));
    },
    // Returns true if comp param represents a tbseparator component ('-')
    isTBSeparator: function(comp) {
        return (comp === '-' || (Ext.isObject(comp) && 'tbseparator' === (Ext.isFunction(comp.getXType) ? comp.getXType() : comp.xtype)));
    },
    /**
         * {@link Ext#method-coerce Coerces} the first param's value (if possible)
         * so that it is of the same variable-type as the second param, and thus,
         * comparable to the second value.
         *
         * ***This is especially useful when comparing the user's entered data
         * against the store's data from Cach√©.***
         *
         * If `val1` is `"false"` (String) and `val2` is `false` (Boolean),
         * then it will use `coerce` to compare `val1` to `val2` as Booleans.
         * It would therefore return `true`.
         *
         * If `val1 = 1` and `val2 = "asdf"`, then it will compare `"1"` to `"asdf"` and return `false`.
         */
    areValuesEquivalent: function(val1, val2) {
        var me = this,
            convertValue = function(val) {
                if (Ext.isDate(val)) {
                    val = me.getCompleteDateString(val);
                } else if (Ext.isNumeric(val)) {
                    val = Number(val);
                } else if (val === null) {
                    // Number(null) = 0, Number(undefined) = NaN
                    // Don't want a comparison between `0` & `null` to return true,
                    // so force it be `undefined` to remove possible false positives
                    val = undefined;
                }
                return val;
            };
        val1 = convertValue(val1);
        val2 = convertValue(val2);
        return (((Ext.coerce(val1, val2) === val2) || (Ext.coerce(val2, val1) === val1)) || // handles cases where it's comparing `null`, "", & `undefined`
        // because above test may equal `false`
        (Ext.isEmpty(val1) && Ext.isEmpty(val2)));
    },
    /**
         * Checks if every word of the searchPhrase is in the sourceText
         * (has been stripped of all non-alphanumeric chars, including spaces)
         *
         * *** NOTE: searchPhrase order does not matter ***
         * @param {String} sourceText The string to look for matching values in
         * @param {String/String[]} searchPhrase The word(s) to look for in sourceText
         * @param {Boolean} [isCaseSensitive=false]
         * @param {Boolean} [removeSpaces=true]
         * @return {Boolean} `true` if sourceText has every word in searchPhrase (non-alphanumeric chars have been
         *     striped from both)
         */
    doesStringContainAllPieces: function(sourceText, searchPhrase, isCaseSensitive, removeSpaces) {
        var me = this,
            hasAllWords = false,
            sourceText_stripped, pattern, matchRegExp;
        isCaseSensitive = Ext.valueFrom(isCaseSensitive, false);
        removeSpaces = Ext.valueFrom(removeSpaces, true);
        if (Ext.isDate(sourceText) && Ext.isFunction(sourceText.toLocaleDateString)) {
            sourceText = sourceText.toLocaleDateString();
        }
        sourceText_stripped = sl.utils.stripNonAlphanumericChars(sourceText, removeSpaces);
        // convert to word array if it isn't already an array
        searchPhrase = Ext.isArray(searchPhrase) ? searchPhrase : Ext.String.splitWords(searchPhrase);
        pattern = me.generateMatchAllPiecesRegexPattern(searchPhrase, isCaseSensitive) || '';
        if (pattern.length) {
            matchRegExp = new RegExp(pattern, 'g' + (isCaseSensitive ? '' : 'i'));
            hasAllWords = matchRegExp.test(sourceText_stripped);
        }
        return hasAllWords;
    },
    // builds search regex pattern to MATCH ALL words, in any order
    // strips non-alphanumeric characters
    generateMatchAllPiecesRegexPattern: function(piecesToFind, isCaseSensitive) {
        var wordMatch = '(?=.*{0})',
            // pattern match from http://stackoverflow.com/a/13911776/3688026
            endWordMatch = '.+',
            pattern = '',
            trimmedWord;
        // convert to word array if it isn't already an array
        piecesToFind = Ext.isArray(piecesToFind) ? piecesToFind : Ext.String.splitWords(piecesToFind);
        Ext.Array.forEach(piecesToFind, function(word, index, array) {
            trimmedWord = sl.utils.stripNonAlphanumericChars(word);
            if (!isCaseSensitive) {
                trimmedWord = trimmedWord.toUpperCase();
            }
            pattern += Ext.String.format(wordMatch, trimmedWord);
        });
        if (pattern.length) {
            pattern += endWordMatch;
        }
        return pattern;
    },
    /**
         * Converts a string so that a regex will ignore & include any non-alphanumeric characters in the match
         *
         * Punctuation, whitespace, special characters will all be ignored
         *
         * For example, if trying  to match "Stewarts Shops", then both "Stewart's Shops" & "St#ew!ar   t%s Sho!@#$ps"
         * would match
         * @param {String/String[]} source Text that needs to be converted
         * @return {String/String[]} Returns in the same format that it received
         */
    convertToIgnoreNonAlphanumericInRegEx: function(source) {
        var converted, convertedPiece,
            ignoredPiece = "[^0-9a-zA-Z]*",
            convert = function(word) {
                var charArr = sl.utils.stripNonAlphanumericChars(word, true).split('') || [],
                    newWord = '';
                for (var j = 0; j < charArr.length; j++) {
                    newWord += charArr[j];
                    // only check for non-alphanumeric between characters (so exclude last character)
                    if (j < charArr.length - 1) {
                        newWord += ignoredPiece;
                    }
                }
                return newWord;
            };
        if (Ext.isArray(source)) {
            converted = [];
            Ext.Array.forEach(source, function(element, index, array) {
                element = sl.utils.AllTrim(element);
                if (!Ext.isEmpty(element)) {
                    convertedPiece = convert(element);
                    if (!Ext.isEmpty(convertedPiece)) {
                        converted.push(convertedPiece);
                    }
                }
            });
        } else if (Ext.isString(source)) {
            converted = convert(sl.utils.AllTrim(source));
        }
        return converted;
    },
    /**
         * Replaces the following:
         *
         *  - All non Alpha-Numeric Characters
         *  - All NewLines
         *  - All multiple instances of white space
         *  - (Optionally) Any instance of white spaces
         * @param {String} input
         * @param {Boolean} [removeSpaces=false] If `true`, remove all whitespace
         * @return {String}
         */
    stripNonAlphanumericChars: function(input, removeSpaces) {
        var updatedInput;
        input = String(input || '');
        removeSpaces = Ext.valueFrom(removeSpaces, false);
        if (removeSpaces) {
            // matches any non-alphanumeric & underscore & removes it
            updatedInput = input.replace(/\W/g, '');
        } else {
            // matches any characters that are not alphanumeric or whitespace and removes it
            updatedInput = sl.utils.AllTrim(input.replace(/[^\w\s]/g, ''));
        }
        return updatedInput;
    },
    /**
         * Returns an array of all of the matching pieces in a desired string
         * @param {String} textToFind Text to try to find
         * @param {String} textToSearch Text to search in
         * @param {Boolean} [ignoreOverlapping=false] If `true`
         * @return {Array}
         */
    getAllMatchesInString: function(textToFind, textToSearch, ignoreOverlapping) {
        var regex = new RegExp(textToFind, 'gi'),
            matchesArr = [],
            match;
        ignoreOverlapping = Ext.valueFrom(ignoreOverlapping, false);
        while ((match = regex.exec(textToSearch))) {
            matchesArr.push(match);
            if (!ignoreOverlapping) {
                // `lastIndex` specifies the index to start the next match
                regex.lastIndex = match.index + 1;
            }
        }
        return matchesArr;
    },
    /**
         * Puts enquoted text in own element.
         * Otherwise, each word is in its own element
         *
         * Example:
         *
         *     sl.utils.splitStringOnWordsAndQuotes('energizer "pk max"') === ["energizer", "pk max"]
         */
    splitStringOnWordsAndQuotes: function(str) {
        // split string on space or on quotes to array
        var arr = String(str || '').match(/\w+|"[^"]+"/g) || [],
            // http://stackoverflow.com/a/2817738/3688026
            i = arr.length - 1;
        for (i; i >= 0; i--) {
            // remove quotations and extra white space
            arr[i] = arr[i].replace(/"/g, "").trim();
        }
        return arr;
    },
    /**
         * Moves messagebox so that it is near the parent's xy
         * @param {Number[]} parentXY The [x,y] position that messagebox will be next to
         */
    alignMessageBoxToParent: function(parentXY) {
        try {
            // put messagebox next to the parentXY location
            var msgBoxWin = Ext.MessageBox,
                winHeight, winWidth, xPos, yPos;
            parentXY = Ext.isDefined(parentXY) ? parentXY : [
                msgBoxWin.x,
                msgBoxWin.y - 30
            ];
            if (msgBoxWin.rendered) {
                winHeight = msgBoxWin.getHeight();
                winWidth = msgBoxWin.getWidth();
                xPos = sl.utils.adjWidth(0.95, parentXY[0] + winWidth) - winWidth;
                yPos = sl.utils.adjHeight(0.95, parentXY[1] + 30 + winHeight) - winHeight;
                msgBoxWin.el.setXY([
                    xPos,
                    yPos
                ]);
            }
        } catch (error) {
            console.error('[alignMessageBoxToParent] MsgBox Window Positioning Error', {
                error: error,
                args: arguments,
                scope: this
            });
        }
    },
    /**
         * @return {Object} All Components that have a reference; Key is the Component's `id`; Value is the Component
         */
    getAllComponentsWithReference: function() {
        var CompMgr = Ext.ComponentManager;
        if (CompMgr.referencesDirty) {
            CompMgr.fixReferences();
        }
        return CompMgr.references;
    },
    /**
         * This will get ***every*** reference inside an application
         * by filtering all of the components that are returned by {@link Ext.ComponentManager#method-getAll}.
         */
    getAllReferences: function() {
        var me = this,
            allRefs = {},
            duplicates = [];
        Ext.Object.eachValue(sl.utils.getAllComponentsWithReference(), function(component) {
            var ref = component.reference;
            if (!Ext.isEmpty(ref)) {
                if (Ext.isEmpty(allRefs[ref])) {
                    allRefs[ref] = component;
                } else {
                    duplicates.push({
                        existing: allRefs[ref],
                        duplicate: component
                    });
                }
            }
        });
        if (duplicates.length > 0) {
            sl.consoleWarn('[' + me.$className + '] Duplicate References Found', {
                duplicates: duplicates
            });
        }
        return allRefs;
    },
    /**
         * Finds the first component with desired reference.  When there are multiple matches, it relies
         * on the parent container to narrow choices.
         * If there are still multiple matching components, it will return the first one (random order).
         * @param {String} desiredRef
         * @param {Ext.container.Container/String} [parentComp] Only used when there are multiple components with the same `reference`
         * @return {Ext.Component/Ext.container.Container} first component with matching reference (and parent if necessary)
         */
    findByReference: function(desiredRef, parentComp) {
        var me = this,
            matchingRefArr = [],
            matchingRef;
        Ext.Object.eachValue(sl.utils.getAllComponentsWithReference(), function(component) {
            if (component.reference === desiredRef) {
                matchingRefArr.push(component);
            }
        });
        if (matchingRefArr.length > 1) {
            if (parentComp) {
                if (Ext.isString(parentComp)) {
                    parentComp = me.findByReference(parentComp);
                }
                if (parentComp) {
                    matchingRefArr = parentComp.query('[reference=' + desiredRef + ']');
                }
            }
            if (matchingRefArr.length > 1) {
                sl.consoleWarn('[' + me.$className + '] Multiple Matches for Reference: ' + desiredRef, {
                    matching_components: matchingRefArr
                });
            }
        }
        matchingRef = matchingRefArr[0];
        return matchingRefArr[0];
    },
    /**
         * Finds and removes all bad keys in this object by looking for
         * bound values at the top level of the object.
         * Binds are indicated by curly brackets wrapping the value's string text.
         * @param {Object} configObj The `constructor`'s configuration
         * @return {Boolean} `false` if there were binds at the wrong level
         */
    fixBadBinding: function(configObj) {
        var isValid = true;
        if (Ext.isObject(configObj)) {
            Ext.Object.each(configObj, function(key, value) {
                if (Ext.isString(value) && value.indexOf('{') === 0) {
                    console.error('Binding Value Not Configured Correctly for property `' + key + '` whose value is `' + value + '`\n\nBinds must be in the `bind` config object, not directly under the `config`.\nIf using Architect, make sure Magnet icon is red for this property\n\n', configObj);
                    delete configObj[key];
                    isValid = false;
                }
            });
        }
        return isValid;
    },
    /**
         * Outputs all arguments passed to function to the console window.
         * It includes a trace in order to show the path it took to get to this function
         * Any additional parameters will be included inside the console message
         * If a parameter is an object like {"store": myStoreRef, foo: 'bar'},
         * it will show each key-value pair in separate log message like:
         * console.log('store', myStoreRef);
         * console.log('foo', 'bar');
         *
         * @param {String} message Text to show in the console
         * @param {Object} values
         */
    consoleLogWithTrace: function(message, values) {
        var con = Ext.global.console,
            argLength = arguments.length,
            stack = (new Error()).stack.split(/\n/),
            calledFromIdx = 1,
            calledFromMsg;
        // Chrome includes a single "Error" line, FF doesn't.
        if (stack[0].indexOf('Error') === 0) {
            stack = stack.slice(1);
        }
        // Don't point to consoleWarningWithTrace function
        if (stack[1].indexOf('consoleWarningWithTrace') > 0) {
            calledFromIdx = 2;
        }
        calledFromMsg = stack[calledFromIdx];
        message = arguments[0];
        con.groupCollapsed(message);
        con.log('%cCalled From:', "font-weight:bold;", (Ext.isFunction(calledFromMsg.trim) ? calledFromMsg.trim().replace('at ', '') : calledFromMsg));
        if (argLength > 1) {
            con.groupCollapsed('Values:');
            for (var i = 1; i < arguments.length; i++) {
                var arg = arguments[i];
                if (Ext.isObject(arg)) {
                    /* jshint ignore:start */
                    Ext.Object.each(arg, function(key, value, myself) {
                        con.log(key, value);
                    });
                } else /* jshint ignore:end */
                {
                    con.log(arg);
                }
            }
            con.groupEnd();
        }
        con.groupCollapsed('Full Trace:');
        con.trace();
        con.groupEnd();
        con.groupEnd();
    },
    /**
         * Outputs all arguments passed to function to the console window as a warning (console.warn)
         * It includes a trace in order to show the path it took to get to this function
         * Any additional parameters will be included inside the console message
         * If a parameter is an object like {"store": myStoreRef, foo: 'bar'},
         * it will show each key-value pair in separate log message like:
         * console.log('store', myStoreRef);
         * console.log('foo', 'bar');
         *
         * @param {String} message Text to show in the console
         * @param {Object} values
         */
    consoleWarningWithTrace: function(message, values) {
        var con = Ext.global.console,
            args = arguments;
        message = args[0];
        con.warn(message);
        args[0] = '[Details for Above Warning]';
        sl.utils.consoleLogWithTrace.apply(this, args);
    },
    // showOnly: can be "same", "different", undefined (for all)
    compareTwoClasses: function(cls1, cls2, showOnly) {
        var c1 = {},
            c2 = {},
            showOnlyDifferences = (!Ext.isDefined(showOnly) || showOnly.toLowerCase() === 'different'),
            showOnlySame = (!Ext.isDefined(showOnly) || showOnly.toLowerCase() === 'same');
        if (!cls1 || !Ext.isDefined(cls1.prototype)) {
            console.error('cls1 does not work. Must have prototype');
            return;
        }
        if (!cls2 || !Ext.isDefined(cls2.prototype)) {
            console.error('cls2 does not work. Must have prototype');
            return;
        }
        var c1proto = cls1.prototype,
            c2proto = cls2.prototype;
        ///////////////
        // make sure both classes have placeholder for all functions
        for (var fnName in c1proto) {
            if (Object.prototype.hasOwnProperty.call(c1proto, fnName)) {
                c1[fnName] = Ext.emptyFn();
                c2[fnName] = Ext.emptyFn();
            }
        }
        for (fnName in c2proto) {
            if (Object.prototype.hasOwnProperty.call(c2proto, fnName)) {
                c1[fnName] = Ext.emptyFn();
                c2[fnName] = Ext.emptyFn();
            }
        }
        ///////////////
        // where a class has a function, update placeholder
        for (fnName in c1proto) {
            if (Object.prototype.hasOwnProperty.call(c1proto, fnName)) {
                c1[fnName] = c1proto[fnName];
            }
        }
        for (fnName in c2proto) {
            if (Object.prototype.hasOwnProperty.call(c2proto, fnName)) {
                c2[fnName] = c2proto[fnName];
            }
        }
        ///////////////
        // compare classes
        var c1Cls = cls1.$className + (showOnlyDifferences && !showOnlySame ? ' Differences' : (showOnlySame && !showOnlyDifferences ? ' Similarities' : '')),
            c1Str = c1Cls + '\n\n',
            c2Cls = cls2.$className + (showOnlyDifferences && !showOnlySame ? ' Differences' : (showOnlySame && !showOnlyDifferences ? ' Similarities' : '')),
            c2Str = c2Cls + '\n\n';
        for (fnName in c1) {
            if (Object.prototype.hasOwnProperty.call(c1, fnName)) {
                var fn1Match = ('' + c1[fnName]) === ('' + c2[fnName]);
                if ((fn1Match && showOnlySame) || (!fn1Match && showOnlyDifferences)) {
                    c1Str += '\n' + fnName + ':' + c1[fnName] + '\n\\\\End of ' + fnName + '\n';
                }
            }
        }
        for (fnName in c2) {
            if (Object.prototype.hasOwnProperty.call(c2, fnName)) {
                var fn2Match = ('' + c1[fnName]) === ('' + c2[fnName]);
                if ((fn2Match && showOnlySame) || (!fn2Match && showOnlyDifferences)) {
                    c2Str += '\n' + fnName + ':' + c2[fnName] + '\n\\\\End of ' + fnName + '\n';
                }
            }
        }
        console.log({
            // cls: c1Cls,
            cls1: c1Str,
            cls2: c2Str
        });
    }
}, function(Utils) {
    /**
         * @member sl.utils.Utilities
         * @method consoleLog
         * @inheritdoc sl.utils.Utilities#consoleLogWithTrace
         */
    sl.consoleLog = Utils.consoleLogWithTrace;
    /**
         * @member sl.utils.Utilities
         * @method consoleWarn
         * @inheritdoc sl.utils.Utilities#consoleWarningWithTrace
         */
    sl.consoleWarn = Utils.consoleWarningWithTrace;
    /**
         * Old alias to {@link Ext.util.Format#round}
         * @deprecated 5.0.0 Use {@link Ext.util.Format#round} instead
         * @method
         * @member sl.utils.Utilities
         * @inheritdoc Ext.util.Format#round
         */
    Utils.Round = Ext.util.Format.round;
    /**
         * Old alias to {@link Ext.util.Format#number}
         * @deprecated 5.0.0 Use {@link Ext.util.Format#number} instead
         * @method
         * @member sl.utils.Utilities
         * @inheritdoc Ext.util.Format#number
         */
    Utils.RoundStr = Ext.util.Format.number;
    /**
         * Old alias to {@link Ext.dom.Element#getViewportHeight}
         * @deprecated 5.0.0 Use {@link Ext.dom.Element#getViewportHeight} instead
         * @method
         * @member sl.utils.Utilities
         * @inheritdoc Ext.dom.Element#getViewportHeight
         */
    Utils.getBrowserHeight = Ext.dom.Element.getViewportHeight;
    /**
         * Old alias to {@link Ext.dom.Element#getViewportWidth}
         * @deprecated 5.0.0 Use {@link Ext.dom.Element#getViewportWidth} instead
         * @method
         * @member sl.utils.Utilities
         * @inheritdoc Ext.dom.Element#getViewportWidth
         */
    Utils.getBrowserWidth = Ext.dom.Element.getViewportWidth;
    /**
         * Old alias to {@link Ext.Object#isEmpty}
         * @deprecated 5.0.0 Use {@link Ext.Object#isEmpty} instead
         * @method
         * @member sl.utils.Utilities
         * @inheritdoc Ext.Object#isEmpty
         */
    Utils.IsObjEmpty = Ext.Object.isEmpty;
    /**
         * Old alias to {@link sl.utils.Utilities#roundForPricingRendering}
         * @deprecated 5.0.0 Use {@link sl.utils.Utilities#roundForPricingRendering} instead
         * @method
         * @member sl.utils.Utilities
         * @inheritdoc sl.utils.Utilities#roundForPricingRendering
         */
    Utils.FormatMoney = Utils.roundForPricingRendering;
    Ext.applyIf(sl.utils, Utils);
});

