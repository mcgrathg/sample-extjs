/*
 * File: app/view/UsersGrid.js
 *
 * This file was generated by Sencha Architect version 4.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Examples.view.UsersGrid', {
    extend: 'sl.panel.grid.EditorGrid',
    alias: 'widget.usersgrid',

    requires: [
        'Examples.view.UsersGridViewModel',
        'Examples.view.UsersGridViewController',
        'Ext.view.Table',
        'Ext.form.field.Text',
        'Ext.grid.column.Template',
        'Ext.XTemplate',
        'Ext.grid.plugin.RowExpander'
    ],

    controller: 'usersgrid',
    viewModel: {
        type: 'usersgrid'
    },
    reference: 'users',
    title: 'Users',
    columnLines: true,
    store: 'Users',
    includeSearch: true,
    includeRowCount: true,
    useStewartsRenderer: true,
    includeRefreshBtn: true,
    includeExcelBtn: true,
    isLocalExcelExport: true,
    includeValidationStatus: true,
    singleName: 'User',
    searchAlign: 'right',
    searchWidth: 200,
    selModelMode: 'MULTI',
    clicksToEdit: 2,
    useDefaultButtons: true,
    useDefaultSaveConfig: false,
    useDefaultDeleteConfig: false,
    useDefaultNewConfig: true,
    moveEditorOnEnter: true,
    useDefaultEnterKeyHandler: true,
    showEditCursor: true,

    columns: [
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'name',
            text: 'Name',
            editor: {
                xtype: 'textfield'
            }
        },
        {
            xtype: 'gridcolumn',
            isEditable: function(record) {
                return (
                !Ext.isEmpty(record.get('name')) ?
                true :
                'Please enter a <b>Name</b> first'
                );
            },
            width: 150,
            dataIndex: 'username',
            text: 'Username',
            editor: {
                xtype: 'textfield'
            }
        },
        {
            xtype: 'templatecolumn',
            flex: 1,
            tpl: [
                '<a href="mailto:{email}" target="_blank">{email}</a>'
            ],
            dataIndex: 'email',
            text: 'Email',
            editor: {
                xtype: 'textfield'
            }
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'phone',
            text: 'Phone',
            editor: {
                xtype: 'textfield'
            }
        },
        {
            xtype: 'gridcolumn',
            width: 150,
            dataIndex: 'website',
            text: 'Website',
            editor: {
                xtype: 'textfield'
            }
        }
    ],
    plugins: [
        {
            ptype: 'rowexpander',
            getHeaderConfig: function() {
                // Add custom changes to the expander column, which continuing to inherit from ExtJS
                // If Sencha makes changes to the rowexpander's rendering, we'll get those changes
                // immediately without needing any changes here

                var me = this;

                // base configuration from ExtJS official
                var config = me.self.prototype.getHeaderConfig.apply(me, arguments);


                // my changes:
                var tip = 'Expand to see Address & Company Information';
                var tooltipRenderer = function(value, metadata, record, rowIndex, colIndex, store, view) {
                    // adds cell tooltip
                    metadata.tdAttr = 'data-qtip="' + tip + '"';
                };

                // keep original cell renderer configuration, while adding a new tooltip to cell
                config.renderer = Ext.Function.createSequence(config.renderer, tooltipRenderer);

                // add column tooltip
                config.tooltip = tip;

                return config;
            },
            expandOnDblClick: false,
            expandOnEnter: false,
            rowBodyTpl: [
                '<div class="flex-full">',
                '    <div class="flex-one expanded-grid-table">',
                '        <table>',
                '            <tr>',
                '                <th colspan="2">Address</th>',
                '            </tr>',
                '            <tr>',
                '                <td>Street:</td>',
                '                <td>{address.street}</td>',
                '            </tr>',
                '            <tr>',
                '                <td>Suite:</td>',
                '                <td>{address.suite}</td>',
                '            </tr>',
                '            <tr>',
                '                <td>City:</td>',
                '                <td>{address.city}</td>',
                '            </tr>',
                '        </table>',
                '    </div>',
                '    <div class="flex-two expanded-grid-table">',
                '        <table>',
                '            <tr>',
                '                <th colspan="2">Company</th>',
                '            </tr>',
                '            <tr>',
                '                <td>Name:</td>',
                '                <td>{company.name}</td>',
                '            </tr>',
                '            <tr>',
                '                <td>Slogan:</td>',
                '                <td>{company.catchPhrase}</td>',
                '            </tr>',
                '            <tr>',
                '                <td>Category:</td>',
                '                <td>{company.bs}</td>',
                '            </tr>',
                '            <tr>',
                '                <td>Zip Code:</td>',
                '                <td>{address.zipcode}</td>',
                '            </tr>',
                '        </table>',
                '    </div>',
                '</div>'
            ]
        }
    ],
    listeners: {
        beforerecordcreated: 'onGridpanelBeforeRecordcreated'
    }

});